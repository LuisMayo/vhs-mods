#ifndef UE4SS_SDK_Game_HPP
#define UE4SS_SDK_Game_HPP

#include "Game_enums.hpp"

struct FAIAudioInfo
{
    class AActor* mpAudibleActor;                                                     // 0x0000 (size: 0x8)
    FVector mSourceLastQueriedLocation;                                               // 0x0008 (size: 0xC)
    FVector mReceiverLastQueriedLocation;                                             // 0x0014 (size: 0xC)
    float mDistanceToSound;                                                           // 0x0020 (size: 0x4)
    float mGameTimeAtLastQuery;                                                       // 0x0024 (size: 0x4)
    FName mSoundEventTag;                                                             // 0x0028 (size: 0x8)

}; // Size: 0x30

struct FAccountFilterInfoStruct
{
}; // Size: 0x20

struct FAccountStatCollectionData
{
}; // Size: 0x140

struct FAccountStatData
{
}; // Size: 0x10

struct FAdrenalineEffectContext
{
    float mRemainingTime;                                                             // 0x0000 (size: 0x4)
    float mBaseTime;                                                                  // 0x0004 (size: 0x4)
    float mRampTime;                                                                  // 0x0008 (size: 0x4)
    uint8 mBuffSource;                                                                // 0x000C (size: 0x1)

}; // Size: 0x10

struct FAnalyticServerCharStatsStruct
{
    TArray<FTeenRecoveryInfo> mTeenRecoveryArray;                                     // 0x0000 (size: 0x10)
    TArray<FTeenWeaponInfo> mWeaponInfoArray;                                         // 0x0010 (size: 0x10)
    TArray<FTeenSkillInfo> mSkillInfoArray;                                           // 0x0028 (size: 0x10)
    TArray<FEvilRageInfo> mRageInfoArray;                                             // 0x0038 (size: 0x10)
    TArray<FEvilAbilityInfo> mAbilityInfoArray;                                       // 0x0048 (size: 0x10)
    TArray<FEvilChaseInfo> mEvilChaseInfoArray;                                       // 0x0058 (size: 0x10)
    TArray<FEvilTeenHitInfo> mEvilHitTeenInfoArray;                                   // 0x0068 (size: 0x10)
    TArray<FEvilDamagedByWeaponInfo> mEvilDamagedByWeaponInfoArray;                   // 0x0078 (size: 0x10)
    TArray<FEvilNearDownedTeenInfo> mEvilNearDownedTeenInfoArray;                     // 0x0088 (size: 0x10)
    TArray<FEvilCampingNearDownedTeenInfo> mEvilCampingNearDownedTeenInfoArray;       // 0x0098 (size: 0x10)
    TArray<FTeenHidePointInfo> mTeenHidePointInfoArray;                               // 0x00A8 (size: 0x10)
    TArray<FTeenPickupInfo> mTeenPickupInfoArray;                                     // 0x00B8 (size: 0x10)

}; // Size: 0xC8

struct FAppliedCharacterStatus
{
}; // Size: 0x24

struct FAudioMetaDataTableRow : public FTableRowBase
{
    float mMaxAttenuation;                                                            // 0x0008 (size: 0x4)
    FString mDurationType;                                                            // 0x0010 (size: 0x10)
    float mDurationMin;                                                               // 0x0020 (size: 0x4)
    float mDurationMax;                                                               // 0x0024 (size: 0x4)

}; // Size: 0x28

struct FAugmentSlot
{
    EAugmentType mAugmentType;                                                        // 0x0000 (size: 0x1)
    bool mbActive;                                                                    // 0x0001 (size: 0x1)
    int32 mTokens;                                                                    // 0x0004 (size: 0x4)
    float mCooldownRemaining;                                                         // 0x0008 (size: 0x4)
    float mCooldown;                                                                  // 0x000C (size: 0x4)
    float mCurrentChargeTime;                                                         // 0x0010 (size: 0x4)
    float mChargeTime;                                                                // 0x0014 (size: 0x4)
    int32 mTier;                                                                      // 0x0018 (size: 0x4)

}; // Size: 0x1C

struct FAuraInstanceObject
{
    FStencilProperties mStencilProperties;                                            // 0x0000 (size: 0x44)
    int32 mLocalViewFlags;                                                            // 0x0044 (size: 0x4)
    int32 mTargetViewFlags;                                                           // 0x0048 (size: 0x4)
    bool mbFadeIn;                                                                    // 0x004C (size: 0x1)
    float mFadeInSeconds;                                                             // 0x0050 (size: 0x4)
    bool mbOverrideHighlight;                                                         // 0x0054 (size: 0x1)
    FStencilProperties mHighlightOverrideProperties;                                  // 0x0058 (size: 0x44)
    bool mbOnlyIfSightBlocked;                                                        // 0x009C (size: 0x1)

}; // Size: 0xE0

struct FBackendDiscoverParams
{
    FString mAccountIdToDiscover;                                                     // 0x0000 (size: 0x10)
    FString mDiscoverKey;                                                             // 0x0010 (size: 0x10)
    FDiscoveryFilter mFilterToDiscover;                                               // 0x0020 (size: 0x4)
    FCharacterTypeFilter mCtf;                                                        // 0x0028 (size: 0x10)
    bool mbPadLoadout;                                                                // 0x0038 (size: 0x1)
    int32 mMovieTranscriptNumber;                                                     // 0x003C (size: 0x4)
    int32 mSeasonPassTranscriptNumber;                                                // 0x0040 (size: 0x4)
    bool mbNeedCharacterLevelXpCosts;                                                 // 0x0044 (size: 0x1)
    bool mbNeedMasteryLevelCosts;                                                     // 0x0045 (size: 0x1)
    bool mbNeedsAllPoints;                                                            // 0x0046 (size: 0x1)
    bool mbNeedPlayerSettings;                                                        // 0x0047 (size: 0x1)
    FString mStorePlatform;                                                           // 0x0048 (size: 0x10)
    FString mStoreGUID;                                                               // 0x0058 (size: 0x10)
    FString mJourneyGUID;                                                             // 0x0068 (size: 0x10)
    FString mDynamicBountyRegion;                                                     // 0x0078 (size: 0x10)

}; // Size: 0x88

struct FBackendPurchaseItemParams
{
    FString mStoreDataGuid;                                                           // 0x0000 (size: 0x10)
    TMap<FString, int32> mSlotsToPurchase;                                            // 0x0010 (size: 0x50)
    TMap<FString, int32> mExpectedCostByPointType;                                    // 0x0060 (size: 0x50)
    FString mRequestedStoreDate;                                                      // 0x00B0 (size: 0x10)

}; // Size: 0xC0

struct FBarTimingStyleGuide
{
    class UTexture2D* mpNeutralCursor;                                                // 0x0000 (size: 0x8)
    class UTexture2D* mpPassCursor;                                                   // 0x0008 (size: 0x8)
    class UTexture2D* mpBullseyeCursor;                                               // 0x0010 (size: 0x8)
    class UTexture2D* mpFailCursor;                                                   // 0x0018 (size: 0x8)
    float mDescriptionTextOffset;                                                     // 0x0020 (size: 0x4)
    float mProgressPanelOffset;                                                       // 0x0024 (size: 0x4)

}; // Size: 0x28

struct FBaseCharPostUpdateTickFunction : public FTickFunction
{
}; // Size: 0x30

struct FBehaviourTreeData
{
    EAIBehaviour mAiBehaviour;                                                        // 0x0000 (size: 0x1)
    class UBehaviorTree* mpBehaviourTree;                                             // 0x0008 (size: 0x8)

}; // Size: 0x10

struct FBezierInfo
{
}; // Size: 0x30

struct FBezierVector
{
}; // Size: 0x30

struct FBulkApplyLightingSettings
{
    EBlueprintLightmapType mLightmapType;                                             // 0x0000 (size: 0x1)
    bool mbUseTwoSidedLighting;                                                       // 0x0001 (size: 0x1)

}; // Size: 0x2

struct FButtonBarData
{
    EGameActionType KeyAction;                                                        // 0x0000 (size: 0x1)
    FText LocText;                                                                    // 0x0008 (size: 0x18)
    int32 Priority;                                                                   // 0x0020 (size: 0x4)

}; // Size: 0x28

struct FButtonBarWidgetButton
{
    FButtonBarData mButtonData;                                                       // 0x0000 (size: 0x28)
    class UExtButton* mpButton;                                                       // 0x0028 (size: 0x8)
    class UButtonPromptWidget* mpButtonPrompt;                                        // 0x0030 (size: 0x8)
    class UTextBlock* mpButtonText;                                                   // 0x0038 (size: 0x8)
    class UNewFlagWidget* mpNewFlag;                                                  // 0x0040 (size: 0x8)
    class UImage* mpHighlightImage;                                                   // 0x0048 (size: 0x8)
    EButtonBarType mButtonType;                                                       // 0x0050 (size: 0x1)

}; // Size: 0x58

struct FCableLength
{
    class USceneComponent* mpCableLengthRoot;                                         // 0x0000 (size: 0x8)
    class USplineComponent* mpSpline;                                                 // 0x0008 (size: 0x8)
    float mTension;                                                                   // 0x0010 (size: 0x4)
    float mTensionOffset;                                                             // 0x0014 (size: 0x4)
    int32 mResolution;                                                                // 0x0018 (size: 0x4)
    int32 mResolutionOffset;                                                          // 0x001C (size: 0x4)
    float mLength;                                                                    // 0x0020 (size: 0x4)
    float mLengthOffset;                                                              // 0x0024 (size: 0x4)
    float mHeight;                                                                    // 0x0028 (size: 0x4)
    float mTangentWeightOffset;                                                       // 0x002C (size: 0x4)
    float mRotation;                                                                  // 0x0030 (size: 0x4)
    float mHangerRotationOffset;                                                      // 0x0034 (size: 0x4)
    float mHangerWallAngle;                                                           // 0x0038 (size: 0x4)

}; // Size: 0x40

struct FCategorySwitcherData
{
    FText TitleText;                                                                  // 0x0000 (size: 0x18)
    int32 WidgetIndex;                                                                // 0x0018 (size: 0x4)
    int32 Act;                                                                        // 0x001C (size: 0x4)
    FText PromoText;                                                                  // 0x0020 (size: 0x18)
    TSubclassOf<class UCategoryButtonWidget> ButtonClass;                             // 0x0038 (size: 0x8)

}; // Size: 0x40

struct FCharClothingInfo
{
    TArray<int32> mClothingIndices;                                                   // 0x0000 (size: 0x10)

}; // Size: 0x18

struct FCharStatType
{
}; // Size: 0x4

struct FCharStatsStruct
{
    TArray<float> mBaseScores;                                                        // 0x0008 (size: 0x10)
    TArray<float> mBonusScores;                                                       // 0x0018 (size: 0x10)
    int32 mRankAdjustment;                                                            // 0x0028 (size: 0x4)
    int32 mPlayerCountStats;                                                          // 0x002C (size: 0x3AC)
    float mPlayerTimeStats;                                                           // 0x03D8 (size: 0xB4)
    float mWeaponXPStats;                                                             // 0x048C (size: 0x44)

}; // Size: 0x4D0

struct FCharacterBodyShapePreset : public FTableRowBase
{
    FString mPhysicsAssetPath;                                                        // 0x0008 (size: 0x10)
    float bSquareStrong;                                                              // 0x0018 (size: 0x4)
    float bOvalStrong;                                                                // 0x001C (size: 0x4)
    float bOval;                                                                      // 0x0020 (size: 0x4)
    float bOvalThin;                                                                  // 0x0024 (size: 0x4)
    float bSquareThin;                                                                // 0x0028 (size: 0x4)
    float bHourGlassThin;                                                             // 0x002C (size: 0x4)
    float bHourGlass;                                                                 // 0x0030 (size: 0x4)
    float bHourGlassStrong;                                                           // 0x0034 (size: 0x4)
    float bPelvisNarrow;                                                              // 0x0038 (size: 0x4)
    float bPelvisWide;                                                                // 0x003C (size: 0x4)
    float bBreasts;                                                                   // 0x0040 (size: 0x4)
    float mHeight;                                                                    // 0x0044 (size: 0x4)
    float mShoulders;                                                                 // 0x0048 (size: 0x4)
    float mCoordinateX;                                                               // 0x004C (size: 0x4)
    float mCoordinateY;                                                               // 0x0050 (size: 0x4)

}; // Size: 0x58

struct FCharacterSpecificItemId
{
}; // Size: 0x38

struct FCharacterStatusSpecialParameters
{
    int32 mPlayerScore;                                                               // 0x0000 (size: 0x4)
    int32 mNumOfTeensDead;                                                            // 0x0004 (size: 0x4)
    int32 mEvilDamageTaken;                                                           // 0x0008 (size: 0x4)

}; // Size: 0xC

struct FCharacterStatusToMaterialParameter
{
    FName mSourceStatusMemberName;                                                    // 0x0000 (size: 0x8)
    TArray<FMaterialParameterInfoExt> mDestinationMaterialParameterNames;             // 0x0008 (size: 0x10)
    TArray<FName> mDestinationFXParameterNames;                                       // 0x0018 (size: 0x10)
    TArray<FName> mDestinationMorphTargetNames;                                       // 0x0028 (size: 0x10)
    TArray<FName> mDestinationFXComponentTags;                                        // 0x0038 (size: 0x10)
    TArray<FName> mDestinationComponentTags;                                          // 0x0048 (size: 0x10)
    TArray<FName> mDestinationMaterialSlots;                                          // 0x0058 (size: 0x10)
    FName mDestinationMaterialParameterName;                                          // 0x0068 (size: 0x8)
    ECharacterStatusSource mStatusSource;                                             // 0x0070 (size: 0x1)
    TSubclassOf<class ATPChar> mCharacterClass;                                       // 0x0078 (size: 0x8)
    FVector2D mInputRange;                                                            // 0x0080 (size: 0x8)
    ECharacterStatusOutputMappingType mOutputMappingType;                             // 0x0088 (size: 0x1)
    FVector2D mOutputRangeFloat;                                                      // 0x008C (size: 0x8)
    FVector2D mOutputRangeFloatAlpha;                                                 // 0x0094 (size: 0x8)
    FLinearColor mOutputRangeColorMin;                                                // 0x009C (size: 0x10)
    FLinearColor mOutputRangeColorMax;                                                // 0x00AC (size: 0x10)
    float mOutputVisibleValue;                                                        // 0x00BC (size: 0x4)
    float mOutputActivateValue;                                                       // 0x00C0 (size: 0x4)
    class UCurveBase* mpStatusValueMappingCurve;                                      // 0x00C8 (size: 0x8)
    bool mbUseColorCurveAsScalar;                                                     // 0x00D0 (size: 0x1)
    float mInterpSpeed;                                                               // 0x00D4 (size: 0x4)
    float mLoopSpeed;                                                                 // 0x00D8 (size: 0x4)

}; // Size: 0xE0

struct FCharacterTypeFilter : public FStringOfBits
{
}; // Size: 0x10

struct FClaimedRewardChest
{
}; // Size: 0x28

struct FClientSmoothedTimer
{
    float mReplicatedTime;                                                            // 0x0000 (size: 0x4)
    float mTimeMultiplier;                                                            // 0x0004 (size: 0x4)
    bool mbTimerPaused;                                                               // 0x0008 (size: 0x1)
    bool mbQueueReset;                                                                // 0x0009 (size: 0x1)
    float mClientTime;                                                                // 0x000C (size: 0x4)
    bool mbStartedClientTimer;                                                        // 0x0010 (size: 0x1)

}; // Size: 0x14

struct FClothingPhysicsAsset
{
    class UPhysicsAsset* mpClothingPhysicsAsset;                                      // 0x0000 (size: 0x8)
    FName mChannelName;                                                               // 0x0008 (size: 0x8)

}; // Size: 0x10

struct FCloudPlayerSettingsStruct
{
    bool mAutomaticRegion;                                                            // 0x0000 (size: 0x1)
    EMatchmakingRegion mMatchmakingRegion;                                            // 0x0001 (size: 0x1)
    ELanguageSetting mLanguage;                                                       // 0x0002 (size: 0x1)
    EGameMode mSelectedGameMode;                                                      // 0x0003 (size: 0x1)
    bool mbShowReticle;                                                               // 0x0004 (size: 0x1)
    bool mbShowScoreFeed;                                                             // 0x0005 (size: 0x1)
    bool mbShowGameHUD;                                                               // 0x0006 (size: 0x1)
    uint8 mbHintsToggle;                                                              // 0x0007 (size: 0x1)
    int32 mDangerSenseType;                                                           // 0x0008 (size: 0x4)
    float mDangerSenseSize;                                                           // 0x000C (size: 0x4)
    int32 mDangerSenseColor;                                                          // 0x0010 (size: 0x4)
    EColorVisionDeficiency mGraphicsColorBlindMode;                                   // 0x0014 (size: 0x1)
    float mGraphicsColorBlindIntensity;                                               // 0x0018 (size: 0x4)
    bool mbAudioGameAudioMuteOnUnfocused;                                             // 0x001C (size: 0x1)
    bool mbVoiceChatEnabled;                                                          // 0x001D (size: 0x1)
    EVoiceChatMode mVoiceChatMode;                                                    // 0x001E (size: 0x1)
    EVoiceChatChannel mVoiceChatChannel;                                              // 0x001F (size: 0x1)
    bool mbVoiceChatMuteOnUnfocused;                                                  // 0x0020 (size: 0x1)
    bool mbMouseInvertY;                                                              // 0x0021 (size: 0x1)
    bool mbKbdSprintToggle;                                                           // 0x0022 (size: 0x1)
    bool mbKbdCrouchToggle;                                                           // 0x0023 (size: 0x1)
    TMap<class FKey, class FGameActionsArray> mKeyToGameActions;                      // 0x0028 (size: 0x50)
    bool mbControllerInvertY;                                                         // 0x0078 (size: 0x1)
    bool mbControllerSprintToggle;                                                    // 0x0079 (size: 0x1)
    bool mbControllerCrouchToggle;                                                    // 0x007A (size: 0x1)
    bool mbShowSocialNotifications;                                                   // 0x007B (size: 0x1)
    bool mbNotifyFriendsWhenPlaying;                                                  // 0x007C (size: 0x1)
    bool mbAutoMutePlayersNotInParty;                                                 // 0x007D (size: 0x1)
    bool mbHideDisplayName;                                                           // 0x007E (size: 0x1)
    bool mbHideOtherPlayerNames;                                                      // 0x007F (size: 0x1)
    bool mbMatchmakingDelay;                                                          // 0x0080 (size: 0x1)
    bool mbAutoMutePrevMutedPlayers;                                                  // 0x0081 (size: 0x1)
    EClientMatchmakingType mStoredMatchmakingType;                                    // 0x0082 (size: 0x1)
    ECharacterType mLastStoredCharacterType;                                          // 0x0083 (size: 0x1)
    ECharacterType mStoredTeenCharacterType;                                          // 0x0084 (size: 0x1)
    ECharacterType mStoredEvilCharacterType;                                          // 0x0085 (size: 0x1)
    TSet<FString> mStoredHintHistory;                                                 // 0x0088 (size: 0x50)
    TSet<FString> mStoredGuideHistory;                                                // 0x00D8 (size: 0x50)
    FString mLastSeenHint;                                                            // 0x0128 (size: 0x10)
    TArray<FTip> mTipsHistory;                                                        // 0x0138 (size: 0x10)
    TArray<FString> mNewsAnnouncements;                                               // 0x0148 (size: 0x10)
    bool mbShowBetaAnnouncement;                                                      // 0x0158 (size: 0x1)
    bool mbShowAnnouncement1;                                                         // 0x0159 (size: 0x1)
    bool mbShowAnnouncement2;                                                         // 0x015A (size: 0x1)
    int32 mHighestSeasonAnnouncement;                                                 // 0x015C (size: 0x4)

}; // Size: 0x160

struct FColorSwatchDetails
{
    FLinearColor PrimaryColor;                                                        // 0x0000 (size: 0x10)
    FLinearColor SecondaryColor;                                                      // 0x0010 (size: 0x10)
    bool bUseGradient;                                                                // 0x0020 (size: 0x1)

}; // Size: 0x24

struct FComputedCustomCullDistance
{
    float mDistance;                                                                  // 0x0000 (size: 0x4)
    int32 mPriority;                                                                  // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FConnectingPlayer
{
    FNetPlayerInfoStruct mPlayerInfo;                                                 // 0x0000 (size: 0x178)
    FMatchmakingPlayerInfo mMatchmakingInfo;                                          // 0x0178 (size: 0x40)

}; // Size: 0x1B8

struct FContextMenuButtonData
{
    FText mButtonText;                                                                // 0x0000 (size: 0x18)

}; // Size: 0x28

struct FContextMenuData
{
}; // Size: 0x10

struct FCoopAssistData
{
    float mAssistTimeRemaining;                                                       // 0x0000 (size: 0x4)
    bool mbWereTimersResetThisFrame;                                                  // 0x0004 (size: 0x1)
    float mAssistEligibilityCooldown;                                                 // 0x0008 (size: 0x4)
    float mTimeRecorded;                                                              // 0x000C (size: 0x4)
    float mAssistActiveDuration;                                                      // 0x0010 (size: 0x4)
    float mTimeOfLastAward;                                                           // 0x0014 (size: 0x4)
    EWeaponTypeEnum mWeaponType;                                                      // 0x0018 (size: 0x1)
    EDamageType mDamageType;                                                          // 0x0019 (size: 0x1)
    EWeaponHitType mAssistedHitType;                                                  // 0x001A (size: 0x1)
    class AFPChar* mpTargetCharacter;                                                 // 0x0020 (size: 0x8)

}; // Size: 0x28

struct FCopyPoseAnimInstanceProxy : public FAnimInstanceProxy
{
}; // Size: 0x950

struct FCraftingStruct
{
    TWeakObjectPtr<class AStationBase> mpStationBase;                                 // 0x0000 (size: 0x8)
    bool mbIsUsing;                                                                   // 0x0008 (size: 0x1)
    float mCraftingTimeRemaining;                                                     // 0x000C (size: 0x4)
    float mSecondsAwardedPoints;                                                      // 0x0010 (size: 0x4)
    float mRealtimeSecondsCraftingTime;                                               // 0x0014 (size: 0x4)
    float mCraftingProgressPercent;                                                   // 0x0018 (size: 0x4)
    EWeaponTypeEnum mWeaponTypeRequested;                                             // 0x001C (size: 0x1)
    EWeaponTypeEnum mPreviousWeaponTypeRequested;                                     // 0x001D (size: 0x1)
    bool mbWantsToCancel;                                                             // 0x001E (size: 0x1)
    float mCancelTimeRemaining;                                                       // 0x0020 (size: 0x4)
    EWeaponTypeEnum mWeaponTypeAfterCancel;                                           // 0x0024 (size: 0x1)
    bool mbWasInterrupted;                                                            // 0x0025 (size: 0x1)

}; // Size: 0x28

struct FCustomCullDistanceAutomaticSettings
{
    float mDistance;                                                                  // 0x0000 (size: 0x4)
    FVector mSightlineOrigin;                                                         // 0x0004 (size: 0xC)
    FVector mSightlineTarget;                                                         // 0x0010 (size: 0xC)

}; // Size: 0x1C

struct FCustomCullDistanceSizePair
{
    float Size;                                                                       // 0x0000 (size: 0x4)
    float CullDistance;                                                               // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FCustomizeSimpleCollisionShape
{
    ETriggerCollisionShape mCollisionShape;                                           // 0x0000 (size: 0x1)
    float mSphereRadius;                                                              // 0x0004 (size: 0x4)
    FVector mBoxExtent;                                                               // 0x0008 (size: 0xC)
    float mCapsuleRadius;                                                             // 0x0014 (size: 0x4)
    float mCapsuleHalfHeight;                                                         // 0x0018 (size: 0x4)
    FVector mLocationOffset;                                                          // 0x001C (size: 0xC)

}; // Size: 0x28

struct FDamageIndicatorContext
{
}; // Size: 0x20

struct FDamageIndicatorInitContext
{
}; // Size: 0x18

struct FDamageParticleData
{
}; // Size: 0x10

struct FDbItemId
{
    uint8 mHash;                                                                      // 0x0000 (size: 0x1)
    FString mDbItemId;                                                                // 0x0008 (size: 0x10)

}; // Size: 0x18

struct FDecalSpawnInfo
{
    FTransform mSpawnTransform;                                                       // 0x0000 (size: 0x30)
    FVector mDecalSize;                                                               // 0x0030 (size: 0xC)
    class UMaterialInstance* mDecalMaterial;                                          // 0x0040 (size: 0x8)

}; // Size: 0x50

struct FDisconnectedPlayerStruct
{
    FNetPlayerInfoStruct mPlayerInfo;                                                 // 0x0000 (size: 0x178)
    FPlayerMatchInfoData mPlayerMatchInfoData;                                        // 0x0178 (size: 0x190)
    FCharStatsStruct mCharacterStats;                                                 // 0x0308 (size: 0x4D0)

}; // Size: 0x7D8

struct FDiscoveryFilter
{
    uint32 mFilter;                                                                   // 0x0000 (size: 0x4)

}; // Size: 0x4

struct FDistributedPipeAccessories
{
    TArray<class UStaticMesh*> mpMeshArray;                                           // 0x0000 (size: 0x10)
    int32 mNumberOfDistributedAccessories;                                            // 0x0010 (size: 0x4)
    float mDistanceOffset;                                                            // 0x0014 (size: 0x4)
    float mRotationOffset;                                                            // 0x0018 (size: 0x4)
    float mStartScale;                                                                // 0x001C (size: 0x4)
    float mEndScale;                                                                  // 0x0020 (size: 0x4)
    float mScaleRandomizationOffset;                                                  // 0x0024 (size: 0x4)
    float mCullPercentage;                                                            // 0x0028 (size: 0x4)
    int32 mDistributionSeed;                                                          // 0x002C (size: 0x4)
    FRandomStream mRandomStream;                                                      // 0x0030 (size: 0x8)
    TArray<FPipeAccessory> mAccessoryArray;                                           // 0x0038 (size: 0x10)
    TArray<class UStaticMeshComponent*> mpDistributedComponentArray;                  // 0x0048 (size: 0x10)
    TArray<float> mDstrDistanceArray;                                                 // 0x0058 (size: 0x10)
    TArray<float> mDstrRotationArray;                                                 // 0x0068 (size: 0x10)
    TArray<float> mDstrScaleArray;                                                    // 0x0078 (size: 0x10)
    TArray<float> mDstrDistanceOffsetArray;                                           // 0x0088 (size: 0x10)
    TArray<float> mDstrRotationOffsetArray;                                           // 0x0098 (size: 0x10)
    TArray<float> mDstrScaleOffsetArray;                                              // 0x00A8 (size: 0x10)
    TArray<bool> mDstrSnapToPointsArray;                                              // 0x00B8 (size: 0x10)
    bool initializeOffsets;                                                           // 0x00C8 (size: 0x1)

}; // Size: 0xD0

struct FDlmrAnimInstanceData
{
    bool mbIsPossessingDoll;                                                          // 0x0000 (size: 0x1)
    bool mbIsInTrapPlacementSequence;                                                 // 0x0001 (size: 0x1)

}; // Size: 0x2

struct FDollAnimInstanceData
{
    bool mbIsLeaping;                                                                 // 0x0000 (size: 0x1)

}; // Size: 0x1

struct FEORLevelUpData
{
    int32 mCharacterLevel;                                                            // 0x0000 (size: 0x4)
    int32 mStartingCharacterXP;                                                       // 0x0004 (size: 0x4)
    int32 mStartingPrizePoints;                                                       // 0x0008 (size: 0x4)

}; // Size: 0xC

struct FEORRewardsData
{
    TArray<int32> mStigmaXPValues;                                                    // 0x0000 (size: 0x10)
    TArray<int32> mWeaponTypeXPValues;                                                // 0x0010 (size: 0x10)
    TArray<int32> mStigmaLevelValues;                                                 // 0x0020 (size: 0x10)
    TArray<int32> mWeaponLevelValues;                                                 // 0x0030 (size: 0x10)

}; // Size: 0x40

struct FEffectVisibility
{
    bool mbUseAttachParentVisibility;                                                 // 0x0000 (size: 0x1)
    bool mbUseAttachParentOwnerSee;                                                   // 0x0001 (size: 0x1)
    bool mbIncorporealAndDispersedHidden;                                             // 0x0002 (size: 0x1)
    bool mbSpiritWorldHidden;                                                         // 0x0003 (size: 0x1)
    bool mbFirstPersonEvilOnly;                                                       // 0x0004 (size: 0x1)
    bool mbFirstPersonEvilHidden;                                                     // 0x0005 (size: 0x1)
    bool mbSpiritWorldOnly;                                                           // 0x0006 (size: 0x1)
    bool mbDeadSpiritWorldOnly;                                                       // 0x0007 (size: 0x1)
    bool mbEvilHidden;                                                                // 0x0008 (size: 0x1)
    bool mbTeenHidden;                                                                // 0x0009 (size: 0x1)
    bool mbEmoteEffect;                                                               // 0x000A (size: 0x1)

}; // Size: 0xB

struct FEmoteData
{
    bool mbIsEvilEmote;                                                               // 0x0000 (size: 0x1)
    class UAnimSequence* mpEmoteSequence;                                             // 0x0008 (size: 0x8)
    class UAnimSequence* mpSafeEmoteSequence;                                         // 0x0010 (size: 0x8)
    bool mbShouldLoop;                                                                // 0x0018 (size: 0x1)
    bool mbIsUnsafeEmote;                                                             // 0x0019 (size: 0x1)
    EEmoteType mEmoteType;                                                            // 0x001A (size: 0x1)

}; // Size: 0x20

struct FEndPointManager_URLData
{
    FString GameBackendDomain;                                                        // 0x0000 (size: 0x10)
    FString AnalyticsBackendDomain;                                                   // 0x0010 (size: 0x10)
    FString EventNotificationUrl;                                                     // 0x0020 (size: 0x10)
    FString MatchmakingUrl;                                                           // 0x0030 (size: 0x10)

}; // Size: 0x40

struct FEndPoints
{
    bool mIsEndPointsActivated;                                                       // 0x0000 (size: 0x1)
    FString mDebugString;                                                             // 0x0008 (size: 0x10)
    FString mEndPointsJSONVersion;                                                    // 0x0018 (size: 0x10)
    FString mBackendDomainName;                                                       // 0x0028 (size: 0x10)
    FString mGameBackendDomain;                                                       // 0x0038 (size: 0x10)
    FString mAnalyticsBackendDomain;                                                  // 0x0048 (size: 0x10)
    FString mEventNotificationUrl;                                                    // 0x0058 (size: 0x10)
    FString mMatchmakingUrl;                                                          // 0x0068 (size: 0x10)

}; // Size: 0x78

struct FEradAnimInstanceData
{
    bool mbIsInVehicleMode;                                                           // 0x0000 (size: 0x1)
    bool mbIsScanning;                                                                // 0x0001 (size: 0x1)

}; // Size: 0x2

struct FEventChallengeData
{
}; // Size: 0x90

struct FEventTaskData
{
}; // Size: 0xC

struct FEventTierData
{
}; // Size: 0x70

struct FEvilAbilityInfo
{
}; // Size: 0x10

struct FEvilCampingNearDownedTeenInfo
{
}; // Size: 0x48

struct FEvilChaseInfo
{
}; // Size: 0x38

struct FEvilCustomizationMesh : public FStatusMappingTarget
{
}; // Size: 0xA0

struct FEvilDamagedByWeaponInfo
{
}; // Size: 0x20

struct FEvilNearDownedTeenInfo
{
}; // Size: 0x48

struct FEvilOrnamentAnimationData
{
    FVector mStartLocation;                                                           // 0x0000 (size: 0xC)
    FVector mEndLocation;                                                             // 0x000C (size: 0xC)
    float mCurrentAnimationTime;                                                      // 0x0018 (size: 0x4)
    float mTotalAnimationTime;                                                        // 0x001C (size: 0x4)
    float mTimeUntilReveal;                                                           // 0x0020 (size: 0x4)
    FQuat mEndRotation;                                                               // 0x0030 (size: 0x10)
    bool mbHideSelfOnFinish;                                                          // 0x0040 (size: 0x1)
    bool mbFinished;                                                                  // 0x0041 (size: 0x1)

}; // Size: 0x50

struct FEvilPortraitComposite
{
    class UTexture2D* PortraitTexture;                                                // 0x0000 (size: 0x8)
    class UTexture2D* RageEyesTexture;                                                // 0x0008 (size: 0x8)
    int32 InjuredLevel;                                                               // 0x0010 (size: 0x4)

}; // Size: 0x18

struct FEvilRageInfo
{
}; // Size: 0xC

struct FEvilScreamShockwave
{
    class UStaticMeshComponent* mShockwaveComponentOuter;                             // 0x0000 (size: 0x8)
    class UStaticMeshComponent* mShockwaveComponentInner;                             // 0x0008 (size: 0x8)
    class UNiagaraComponent* mpShockwaveNiagaraComponent;                             // 0x0010 (size: 0x8)
    float mShockwaveAge;                                                              // 0x0018 (size: 0x4)
    float mShockwaveStrength;                                                         // 0x001C (size: 0x4)
    float mCurrentRadius;                                                             // 0x0020 (size: 0x4)
    FPostProcessSettings mPostProcessSettings;                                        // 0x0030 (size: 0x560)

}; // Size: 0x590

struct FEvilSpectralAnimInstanceData
{
    bool mbIsCelebrating;                                                             // 0x0000 (size: 0x1)
    bool mbIsSad;                                                                     // 0x0001 (size: 0x1)
    bool mbIsVisible;                                                                 // 0x0002 (size: 0x1)

}; // Size: 0x3

struct FEvilTeenHitInfo
{
}; // Size: 0x50

struct FExtAkAmbSoundCheckpointRecord
{
    bool bCurrentlyPlaying;                                                           // 0x0000 (size: 0x1)

}; // Size: 0x1

struct FFPCharAnimInstanceData
{
    bool mbIsMoving;                                                                  // 0x0000 (size: 0x1)
    bool mbIsAlive;                                                                   // 0x0001 (size: 0x1)
    bool mbIsCelebrating;                                                             // 0x0002 (size: 0x1)
    bool mbIsFocusing;                                                                // 0x0003 (size: 0x1)
    bool mbIsInAir;                                                                   // 0x0004 (size: 0x1)
    float mSpeed;                                                                     // 0x0008 (size: 0x4)
    float mDirection;                                                                 // 0x000C (size: 0x4)
    float mGait;                                                                      // 0x0010 (size: 0x4)
    bool mbIsAttacking;                                                               // 0x0014 (size: 0x1)
    float mPlayerAimPitch;                                                            // 0x0018 (size: 0x4)
    bool mbFeasting;                                                                  // 0x001C (size: 0x1)
    bool mbShouldPlayFaceGuard;                                                       // 0x001D (size: 0x1)
    bool mbIsVaulting;                                                                // 0x001E (size: 0x1)
    bool mbIsPlayingCameraAnimation;                                                  // 0x001F (size: 0x1)
    EVaultHeightType mVaultHeightType;                                                // 0x0020 (size: 0x1)
    bool mbCanEnterStunnedState;                                                      // 0x0021 (size: 0x1)
    bool mbIsStunned;                                                                 // 0x0022 (size: 0x1)
    float mStunTimeRemaining;                                                         // 0x0024 (size: 0x4)
    bool IsDisintegrating;                                                            // 0x0028 (size: 0x1)
    EWeaponTypeEnum mDamagedWeaponType;                                               // 0x0029 (size: 0x1)
    EWeaponTypeEnum mTickDamageType;                                                  // 0x002A (size: 0x1)
    bool mbIsUsingEffigy;                                                             // 0x002B (size: 0x1)
    bool mbIsCreatingEffigy;                                                          // 0x002C (size: 0x1)
    bool mbHasJustTransformed;                                                        // 0x002D (size: 0x1)
    bool mbForwardWallDetected;                                                       // 0x002E (size: 0x1)
    bool mbWasVaulting;                                                               // 0x002F (size: 0x1)
    bool mbIsEmoting;                                                                 // 0x0030 (size: 0x1)
    FEmoteData mCurrentEmoteData;                                                     // 0x0038 (size: 0x20)
    bool mbIsInMainMenu;                                                              // 0x0058 (size: 0x1)
    bool mbIsInLoadoutScreen;                                                         // 0x0059 (size: 0x1)
    bool mbIsInLobby;                                                                 // 0x005A (size: 0x1)
    int32 mEvilAbilityIndex;                                                          // 0x005C (size: 0x4)
    int32 mEvilCompletedAbilityIndex;                                                 // 0x0060 (size: 0x4)
    float mTurnInPlaceRotation;                                                       // 0x0064 (size: 0x4)
    float mVaultPlayRateMultiplier;                                                   // 0x0068 (size: 0x4)
    float mDeltaYawRotation;                                                          // 0x006C (size: 0x4)
    bool mbIsFlinching;                                                               // 0x0070 (size: 0x1)
    EMenuScreen mCurrentUIMenuScreenType;                                             // 0x0071 (size: 0x1)
    FVector2D mHeelHeight;                                                            // 0x0074 (size: 0x8)
    FVector2D mHeelAngle;                                                             // 0x007C (size: 0x8)

}; // Size: 0x88

struct FFPHideMontageData
{
    EHideObjectType mHideObjectType;                                                  // 0x0000 (size: 0x1)
    class UAnimMontage* mpCharMontage;                                                // 0x0008 (size: 0x8)

}; // Size: 0x10

struct FFeetClothingSettings
{
    float mHeelHeight;                                                                // 0x0000 (size: 0x4)
    float mHeelAngle;                                                                 // 0x0004 (size: 0x4)
    int32 mTuckPoint;                                                                 // 0x0008 (size: 0x4)

}; // Size: 0xC

struct FFlipBookAnimationSpecs
{
}; // Size: 0x18

struct FFluffData
{
    EFluffCategory Category;                                                          // 0x0000 (size: 0x1)
    FString Grantable;                                                                // 0x0008 (size: 0x10)

}; // Size: 0x18

struct FFrontEndLightCustomizationPalette : public FTableRowBase
{
    FLinearColor GridFrontA;                                                          // 0x0008 (size: 0x10)
    FLinearColor GridFrontB;                                                          // 0x0018 (size: 0x10)
    FLinearColor GridBackA;                                                           // 0x0028 (size: 0x10)
    FLinearColor GridBackB;                                                           // 0x0038 (size: 0x10)
    FLinearColor NeonRight;                                                           // 0x0048 (size: 0x10)
    FLinearColor NeonLeft;                                                            // 0x0058 (size: 0x10)
    FLinearColor Fog;                                                                 // 0x0068 (size: 0x10)

}; // Size: 0x78

struct FGameActionEventHandle
{
}; // Size: 0x18

struct FGameActionsArray
{
    TArray<EGameActionType> mActions;                                                 // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FGameLiftMatchmakingInfo
{
    FString mGameLiftPlayerSessionId;                                                 // 0x0000 (size: 0x10)
    FString mPlayerId;                                                                // 0x0010 (size: 0x10)
    FString mServerIPAddress;                                                         // 0x0020 (size: 0x10)
    int32 mServerPort;                                                                // 0x0030 (size: 0x4)
    FString mMatchmakingTicketId;                                                     // 0x0038 (size: 0x10)
    bool mIsReadyToJoin;                                                              // 0x0048 (size: 0x1)
    TArray<FGameLift_Response_GetTicketStatus_MatchedPlayerSession> MatchedPlayerSessions; // 0x0050 (size: 0x10)

}; // Size: 0x60

struct FGameLiftMatchmakingRegionData
{
    EMatchmakingPingRegion mMatchmakingPingRegion;                                    // 0x0000 (size: 0x1)
    FString mHostName;                                                                // 0x0008 (size: 0x10)
    FString mIpAddress;                                                               // 0x0018 (size: 0x10)
    FGameLiftNetworkLatencyData mNetworkLatencyData;                                  // 0x0028 (size: 0x10)
    FString mDescription;                                                             // 0x0038 (size: 0x10)
    EMatchmakingNetworkLatencyStatus mStatus;                                         // 0x0048 (size: 0x1)
    bool mbIsActivatedRegion;                                                         // 0x0049 (size: 0x1)

}; // Size: 0x50

struct FGameLiftNetworkLatencyData
{
    TArray<int32> mNetworkLatencies;                                                  // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FGameLift_BanInfoData
{
    FString badAccountId;                                                             // 0x0000 (size: 0x10)
    FString reason;                                                                   // 0x0010 (size: 0x10)
    int32 banExpires;                                                                 // 0x0020 (size: 0x4)
    FString DisplayName;                                                              // 0x0028 (size: 0x10)

}; // Size: 0x38

struct FGameLift_PlayerInfoData
{
    FString PlayerId;                                                                 // 0x0000 (size: 0x10)
    int32 MatchmakingPlayerType;                                                      // 0x0010 (size: 0x4)
    FString MatchmakingGroupName;                                                     // 0x0018 (size: 0x10)

}; // Size: 0x28

struct FGameLift_RequestBase
{
}; // Size: 0x8

struct FGameLift_Request_GetTicketStatus : public FGameLift_RequestBase
{
    FString PlayerId;                                                                 // 0x0008 (size: 0x10)
    FString MatchmakingTicketId;                                                      // 0x0018 (size: 0x10)
    int32 CloudScriptVersion;                                                         // 0x0028 (size: 0x4)
    FString GameClientGuid;                                                           // 0x0030 (size: 0x10)

}; // Size: 0x40

struct FGameLift_Request_GuaranteedMatchmaking : public FGameLift_RequestBase
{
    FString MatchmakingTicketId;                                                      // 0x0008 (size: 0x10)
    TArray<FGameLift_PlayerInfoData> PlayerInfos;                                     // 0x0018 (size: 0x10)
    int32 CloudScriptVersion;                                                         // 0x0028 (size: 0x4)
    TArray<FString> PartyMemberAccountIds;                                            // 0x0030 (size: 0x10)
    TMap<FString, int32> LatencyDatas;                                                // 0x0040 (size: 0x50)
    FString CharType;                                                                 // 0x0090 (size: 0x10)
    FString MatchmakingRegion;                                                        // 0x00A0 (size: 0x10)

}; // Size: 0xB0

struct FGameLift_Request_StartMatchBackfill : public FGameLift_RequestBase
{
    TArray<FGameLift_PlayerInfoData> MyTeamPlayerInfoData;                            // 0x0008 (size: 0x10)
    TArray<FGameLift_PlayerInfoData> OtherTeamsPlayerInfoData;                        // 0x0018 (size: 0x10)
    int32 CloudScriptVersion;                                                         // 0x0028 (size: 0x4)
    TMap<FString, int32> LatencyDatas;                                                // 0x0030 (size: 0x50)
    TArray<FString> CharTypes;                                                        // 0x0080 (size: 0x10)
    TArray<FString> PlayerAccountIds;                                                 // 0x0090 (size: 0x10)

}; // Size: 0xA0

struct FGameLift_Request_StopMatchmaking : public FGameLift_RequestBase
{
    FString PlayerId;                                                                 // 0x0008 (size: 0x10)
    FString MatchmakingTicketId;                                                      // 0x0018 (size: 0x10)
    int32 CloudScriptVersion;                                                         // 0x0028 (size: 0x4)
    FString GameClientGuid;                                                           // 0x0030 (size: 0x10)

}; // Size: 0x40

struct FGameLift_Response_GetTicketStatus
{
    FString Status;                                                                   // 0x0000 (size: 0x10)
    FString TicketStatus;                                                             // 0x0010 (size: 0x10)
    FString IpAddress;                                                                // 0x0020 (size: 0x10)
    int32 Port;                                                                       // 0x0030 (size: 0x4)
    TArray<FGameLift_Response_GetTicketStatus_MatchedPlayerSession> MatchedPlayerSessions; // 0x0038 (size: 0x10)

}; // Size: 0x48

struct FGameLift_Response_GetTicketStatus_MatchedPlayerSession
{
    FString PlayerId;                                                                 // 0x0000 (size: 0x10)
    FString PlayerSessionId;                                                          // 0x0010 (size: 0x10)

}; // Size: 0x20

struct FGameLift_Response_RequestMatchmaking
{
    FString Message;                                                                  // 0x0000 (size: 0x10)
    FString Status;                                                                   // 0x0010 (size: 0x10)
    FString MatchmakingTicketId;                                                      // 0x0020 (size: 0x10)
    int32 EstimatedWaitTime;                                                          // 0x0030 (size: 0x4)
    FGameLift_BanInfoData BanInfo;                                                    // 0x0038 (size: 0x38)

}; // Size: 0x70

struct FGameLift_Response_StartMatchBackfill
{
    FString Message;                                                                  // 0x0000 (size: 0x10)
    FString Status;                                                                   // 0x0010 (size: 0x10)
    FString BackfillTicketId;                                                         // 0x0020 (size: 0x10)
    FGameLift_BanInfoData BanInfo;                                                    // 0x0030 (size: 0x38)

}; // Size: 0x68

struct FGameLift_Response_StopMatchmaking
{
    FString Status;                                                                   // 0x0000 (size: 0x10)
    FString MatchmakingTicketId;                                                      // 0x0010 (size: 0x10)

}; // Size: 0x20

struct FGameplayTagStack : public FFastArraySerializerItem
{
    FGameplayTag Tag;                                                                 // 0x000C (size: 0x8)
    float StackCount;                                                                 // 0x0014 (size: 0x4)

}; // Size: 0x18

struct FGameplayTagStackContainer : public FFastArraySerializer
{
    TArray<FGameplayTagStack> Stacks;                                                 // 0x0108 (size: 0x10)

}; // Size: 0x168

struct FGoodCharAnimInstanceProxy : public FAnimInstanceProxy
{
    class ATPChar* mpOwnerTPChar;                                                     // 0x0770 (size: 0x8)
    class UWorld* pWorldReference;                                                    // 0x0778 (size: 0x8)
    class UGoodCharAnimInstance* mpAnimInstance;                                      // 0x0780 (size: 0x8)
    FTPMovementData mTPMovementData;                                                  // 0x0788 (size: 0x94)
    FTPWeaponStateData mTPWeaponStateData;                                            // 0x081C (size: 0x28)
    FTPCharStateData mTPCharStateData;                                                // 0x0848 (size: 0x68)
    FTPCharFacialAnimData mTPFacialAnimData;                                          // 0x08B0 (size: 0x18)
    FCharacterBodyShapePreset mTPCharBodyShapePreset;                                 // 0x08C8 (size: 0x58)
    bool bIsAnyMontagePlaying;                                                        // 0x0920 (size: 0x1)
    bool bInFallingAnimSequence;                                                      // 0x0921 (size: 0x1)
    bool bInLandingAnimation;                                                         // 0x0922 (size: 0x1)
    float mLastCurveGait;                                                             // 0x0924 (size: 0x4)
    float mFootPosition;                                                              // 0x0928 (size: 0x4)
    int32 mCharacterTypeIndex;                                                        // 0x092C (size: 0x4)
    bool mbWasMoving;                                                                 // 0x0930 (size: 0x1)
    bool mbWasRunning;                                                                // 0x0931 (size: 0x1)
    bool mbWasFalling;                                                                // 0x0932 (size: 0x1)
    bool mbUpdateLeanForward;                                                         // 0x0933 (size: 0x1)
    float mLeanForwardRunTimer;                                                       // 0x0934 (size: 0x4)
    float mFallingDuration;                                                           // 0x0938 (size: 0x4)
    float mPreviousSpeed;                                                             // 0x093C (size: 0x4)
    float mFacialCloseEyesTimer;                                                      // 0x0940 (size: 0x4)
    float mFacialOpenEyesTimer;                                                       // 0x0944 (size: 0x4)
    float mPanicTimer;                                                                // 0x0948 (size: 0x4)
    float mPanicMaxTime;                                                              // 0x094C (size: 0x4)
    float mStaticShieldLeanPrevFrame;                                                 // 0x0950 (size: 0x4)

}; // Size: 0x960

struct FGrantable
{
    EGrantableType mGrantableType;                                                    // 0x0010 (size: 0x1)
    FDbItemId mDbItemId;                                                              // 0x0068 (size: 0x18)
    int32 mCount;                                                                     // 0x0080 (size: 0x4)

}; // Size: 0x88

struct FGrantableReward
{
}; // Size: 0xB0

struct FHairProperties
{
    TMap<class FMaterialParameterInfoExt, class FLinearColor> mColorParameters;       // 0x0000 (size: 0x50)
    TMap<FMaterialParameterInfoExt, float> mScalarParameters;                         // 0x0050 (size: 0x50)

}; // Size: 0xA0

struct FHeatmapPreviewSettings
{
    FString mHeatmapName;                                                             // 0x0000 (size: 0x10)
    bool mbEnabled;                                                                   // 0x0010 (size: 0x1)
    TArray<uint8> mCachedHeatmapFileData;                                             // 0x0018 (size: 0x10)
    int32 mCachedHeatmapWidth;                                                        // 0x0028 (size: 0x4)
    int32 mCachedHeatmapHeight;                                                       // 0x002C (size: 0x4)

}; // Size: 0x30

struct FHideLayers
{
    TMap<class EMeshSlot, class EMeshSlotVisibility> mSlotVisibility;                 // 0x0000 (size: 0x50)

}; // Size: 0x50

struct FHideMontageData
{
    EHideObjectType mHideObjectType;                                                  // 0x0000 (size: 0x1)
    class UAnimMontage* mpCharMontage;                                                // 0x0008 (size: 0x8)
    class UAnimMontage* mpHidePointMontage;                                           // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FHintData : public FTableRowBase
{
    EFaction FactionType;                                                             // 0x0008 (size: 0x1)
    ECharacterType CharacterType;                                                     // 0x0009 (size: 0x1)
    FText TitleText;                                                                  // 0x0010 (size: 0x18)
    FText Tip1Title;                                                                  // 0x0028 (size: 0x18)
    FText Tip1Text;                                                                   // 0x0040 (size: 0x18)
    FText Tip2Title;                                                                  // 0x0058 (size: 0x18)
    FText Tip2Text;                                                                   // 0x0070 (size: 0x18)
    FText Tip3Title;                                                                  // 0x0088 (size: 0x18)
    FText Tip3Text;                                                                   // 0x00A0 (size: 0x18)
    bool IsSurvival;                                                                  // 0x00B8 (size: 0x1)

}; // Size: 0xC0

struct FImpactableComponent
{
    class UPrimitiveComponent* mImpactableComponent;                                  // 0x0000 (size: 0x8)
    FTransform mInitialRelativeTransform;                                             // 0x0010 (size: 0x30)
    FTransform mLastSoundTransform;                                                   // 0x0040 (size: 0x30)
    TArray<class UMaterialInterface*> mInitialMaterials;                              // 0x0070 (size: 0x10)
    TArray<class UMaterialInterface*> mFadeMaterials;                                 // 0x0080 (size: 0x10)
    bool mbUsingFadeMaterials;                                                        // 0x0090 (size: 0x1)
    float mFadeAlpha;                                                                 // 0x0094 (size: 0x4)
    FVector mSpectralVelocity;                                                        // 0x0098 (size: 0xC)
    bool mbUsingSpectralPhysics;                                                      // 0x00A4 (size: 0x1)
    bool mbPendingTransitionHitTest;                                                  // 0x00A5 (size: 0x1)
    bool mbTransitionHit;                                                             // 0x00A6 (size: 0x1)
    bool bHasAchievedOrbit;                                                           // 0x00A7 (size: 0x1)
    bool mbRadialBurstOnRelease;                                                      // 0x00A8 (size: 0x1)
    float mOrbitAngle;                                                                // 0x00AC (size: 0x4)
    float mTimeSinceLastHit;                                                          // 0x00B0 (size: 0x4)
    FPropInteractionProperties mLastInteractionProperties;                            // 0x00B4 (size: 0xC)
    class USceneComponent* mpLastInteractionComponent;                                // 0x00C0 (size: 0x8)
    FVector mOrbitAxis;                                                               // 0x00C8 (size: 0xC)
    FVector mOrbitCentre;                                                             // 0x00D4 (size: 0xC)
    TArray<class ATPChar*> mOverlappingTeens;                                         // 0x00E0 (size: 0x10)
    TArray<class AWeaponBase*> mWeaponsInRange;                                       // 0x00F0 (size: 0x10)

}; // Size: 0x100

struct FIntCluster
{
}; // Size: 0x10

struct FInventoryItemData
{
    int32 mNumberOwned;                                                               // 0x0000 (size: 0x4)
    FCharacterTypeFilter mCharacterTypeFilter;                                        // 0x0008 (size: 0x10)

}; // Size: 0x18

struct FIssueDef : public FTableRowBase
{
    TArray<FIssuePageLayout> Pages;                                                   // 0x0008 (size: 0x10)

}; // Size: 0x18

struct FIssueFluffLayout
{
    TSubclassOf<class UIssueFluffWidget> FluffClass;                                  // 0x0000 (size: 0x8)
    FIntPoint Position;                                                               // 0x0008 (size: 0x8)
    FFluffData Data;                                                                  // 0x0010 (size: 0x18)
    class UTexture2D* Texture;                                                        // 0x0028 (size: 0x8)
    FText LocalizedText;                                                              // 0x0030 (size: 0x18)
    bool IsButton;                                                                    // 0x0048 (size: 0x1)

}; // Size: 0x50

struct FIssueItemLayout
{
    TSubclassOf<class UIssueItemWidget> ItemClass;                                    // 0x0000 (size: 0x8)
    FIntPoint Position;                                                               // 0x0008 (size: 0x8)
    TArray<FString> Grantables;                                                       // 0x0010 (size: 0x10)
    bool IsFree;                                                                      // 0x0020 (size: 0x1)
    bool FreeFlagLeft;                                                                // 0x0021 (size: 0x1)
    int32 Tier;                                                                       // 0x0024 (size: 0x4)

}; // Size: 0x28

struct FIssuePageLayout
{
    TArray<FIssueItemLayout> Items;                                                   // 0x0000 (size: 0x10)
    TArray<FIssueFluffLayout> Fluff;                                                  // 0x0010 (size: 0x10)
    bool OverridePageType;                                                            // 0x0020 (size: 0x1)
    TSubclassOf<class UIssuePageWidget> OverridePage;                                 // 0x0028 (size: 0x8)

}; // Size: 0x30

struct FItemDataAssetCollection
{
    FName mCategoryName;                                                              // 0x0000 (size: 0x8)
    FString mCategoryTagValue;                                                        // 0x0008 (size: 0x10)
    TArray<class UItemDataAsset*> mAssets;                                            // 0x0018 (size: 0x10)

}; // Size: 0x28

struct FJourneyAct
{
}; // Size: 0x10

struct FJourneyCharacter
{
}; // Size: 0x50

struct FJourneyJourney
{
}; // Size: 0x50

struct FJourneyMap
{
}; // Size: 0x60

struct FJourneyMapLine
{
}; // Size: 0x14

struct FJourneyMapNode
{
}; // Size: 0xA8

struct FKeysArray
{
    TArray<FKey> mKeysArray;                                                          // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FLabelledChunk
{
    FName mChunkName;                                                                 // 0x0000 (size: 0x8)
    int32 mChunkID;                                                                   // 0x0008 (size: 0x4)
    int32 mPriority;                                                                  // 0x000C (size: 0x4)
    uint32 mReleaseCategoryMask;                                                      // 0x0010 (size: 0x4)

}; // Size: 0x14

struct FLerpInfo
{
}; // Size: 0x10

struct FLerpManager
{
}; // Size: 0x10

struct FLiquidMaterialSettings
{
    FName mMaterialSlot;                                                              // 0x0000 (size: 0x8)
    FName mLiquidVolumeSocket;                                                        // 0x0008 (size: 0x8)
    FVector mLiquidVolumeExtent;                                                      // 0x0010 (size: 0xC)
    FVector mLiquidStrengthScale;                                                     // 0x001C (size: 0xC)

}; // Size: 0x28

struct FLoadingScreenData
{
    ELevelType LevelType;                                                             // 0x0000 (size: 0x1)
    ESubLevelType SubLevelType;                                                       // 0x0001 (size: 0x1)
    class UTexture2D* Texture;                                                        // 0x0008 (size: 0x8)
    float Weight;                                                                     // 0x0010 (size: 0x4)

}; // Size: 0x18

struct FLoadoutChange
{
    ECharacterType mCharacterType;                                                    // 0x0000 (size: 0x1)
    EWeaponTypeEnum mWeaponType;                                                      // 0x0001 (size: 0x1)
    EEvilAbilityType mAbilityType;                                                    // 0x0002 (size: 0x1)
    uint32 mSlotIndex;                                                                // 0x0004 (size: 0x4)
    FString mNewValue;                                                                // 0x0008 (size: 0x10)

}; // Size: 0x18

struct FLoadoutDataPacket
{
    class ALobbyBeaconClient* mpDestinationLobbyBeaconClient;                         // 0x0008 (size: 0x8)

}; // Size: 0x10

struct FLoadoutItem
{
    uint32 mUISlot;                                                                   // 0x0000 (size: 0x4)
    EPlayerSlot mPlayerSlot;                                                          // 0x0004 (size: 0x1)
    FDbItemId mItemID;                                                                // 0x0008 (size: 0x18)
    TSoftObjectPtr<UItemDataAsset> mpDataAsset;                                       // 0x0020 (size: 0x28)
    bool mbCanReplaceInvalid;                                                         // 0x0048 (size: 0x1)

}; // Size: 0x50

struct FLoadoutItemOverrideList
{
    TArray<FLoadoutItem> mDefaultOverrides;                                           // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FLoadoutValueBase
{
    int32 mOwningLobbyIndex;                                                          // 0x0008 (size: 0x4)
    TMap<int32, bool> mDirtyLobbyIndexes;                                             // 0x0010 (size: 0x50)

}; // Size: 0x60

struct FLoadoutValueGrantable : public FLoadoutValueBase
{
    FGrantable mCurrentValue;                                                         // 0x00E8 (size: 0x88)

}; // Size: 0x170

struct FLoadoutValuePoint : public FLoadoutValueBase
{
    int32 mCurrentValue;                                                              // 0x0060 (size: 0x4)

}; // Size: 0x68

struct FLobbyCharSlotData
{
    int32 mLocation;                                                                  // 0x0000 (size: 0x4)
    int32 mLobbyIndex;                                                                // 0x0004 (size: 0x4)
    int32 mPoseVariant;                                                               // 0x0008 (size: 0x4)
    float mPoseTimer;                                                                 // 0x000C (size: 0x4)
    float mDisintegrationLevel;                                                       // 0x0010 (size: 0x4)
    class ATPChar* mpTPChar;                                                          // 0x0018 (size: 0x8)
    uint8 mLoadoutRevision;                                                           // 0x0020 (size: 0x1)

}; // Size: 0x28

struct FLobbyDetails
{
    ELobbyHostState mLobbyState;                                                      // 0x0000 (size: 0x1)
    EServerMatchMode mServerMatchMode;                                                // 0x0001 (size: 0x1)
    int32 mCurrentPlayers;                                                            // 0x0004 (size: 0x4)
    int32 mTotalPlayers;                                                              // 0x0008 (size: 0x4)
    int32 mNumEvils;                                                                  // 0x000C (size: 0x4)
    float mTimer;                                                                     // 0x0010 (size: 0x4)

}; // Size: 0x14

struct FLobbyPlayerInfo
{
}; // Size: 0x1

struct FLocalViewState
{
    class ATPChar* mpLocalMainTPChar;                                                 // 0x0018 (size: 0x8)
    class ATPChar* mpLocalOrSpectatorMainTPChar;                                      // 0x0020 (size: 0x8)
    class ATPChar* mpLocallyViewedTPChar;                                             // 0x0028 (size: 0x8)
    class ABaseChar* mpLocallyViewedBaseChar;                                         // 0x0030 (size: 0x8)
    class ATPChar* mpLocallyViewedOwnerTPChar;                                        // 0x0038 (size: 0x8)

}; // Size: 0x40

struct FLockBoxSpawningContext
{
    TArray<FTransform> mCapturedTransforms;                                           // 0x0000 (size: 0x10)
    class AActor* mpCapturedLockbox;                                                  // 0x0010 (size: 0x8)
    TArray<float> mLocationScores;                                                    // 0x0018 (size: 0x10)

}; // Size: 0x28

struct FManagedFXComponent
{
    TWeakObjectPtr<class USceneComponent> mpComponent;                                // 0x0000 (size: 0x8)
    TWeakObjectPtr<class ATPChar> mpOwningTPChar;                                     // 0x0008 (size: 0x8)
    FEffectVisibility mVisibility;                                                    // 0x0010 (size: 0xB)

}; // Size: 0x1C

struct FMasteryBorderAssetTable : public FTableRowBase
{
    int32 Level;                                                                      // 0x0008 (size: 0x4)
    class UTexture2D* Texture;                                                        // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FMatchEvent
{
}; // Size: 0x8

struct FMatchEventData : public FTableRowBase
{
}; // Size: 0x40

struct FMatchSettings
{
    EMatchMode mMatchMode;                                                            // 0x0000 (size: 0x1)
    class UMapDataAsset* mpSelectedMap;                                               // 0x0008 (size: 0x8)
    EEquippableMode mPerkMode;                                                        // 0x0010 (size: 0x1)
    EEquippableMode mMutationMode;                                                    // 0x0011 (size: 0x1)
    EEquippableMode mWeaponPowerMode;                                                 // 0x0012 (size: 0x1)
    EMatchWinCondition mWinCondition;                                                 // 0x0013 (size: 0x1)
    int32 mNumEvils;                                                                  // 0x0014 (size: 0x4)
    int32 mNumTeens;                                                                  // 0x0018 (size: 0x4)
    int32 mNumSpectators;                                                             // 0x001C (size: 0x4)
    bool mbSkipToHuntStage;                                                           // 0x0020 (size: 0x1)
    bool mbIsSPDebugActive;                                                           // 0x0021 (size: 0x1)
    EVoiceChatKickMode mbKickEvilFromVoiceChat;                                       // 0x0022 (size: 0x1)
    class UGameModeDataAsset* mpGameModeDataAsset;                                    // 0x0028 (size: 0x8)
    bool mbSeasonalEventActivitiesActive;                                             // 0x0030 (size: 0x1)
    FString mMatchId;                                                                 // 0x0038 (size: 0x10)
    EAIDifficultyLevel mSurvivalEvilAIDiffSetting;                                    // 0x0048 (size: 0x1)
    bool mbBeginnerMatch;                                                             // 0x0049 (size: 0x1)

}; // Size: 0x50

struct FMatchSummaryInfoData
{
    TArray<EDamageType> mEvilDamagedHits;                                             // 0x0000 (size: 0x10)
    TArray<FPlayerMatchInfoData> mPlayerMatchInfoList;                                // 0x0010 (size: 0x10)
    bool mbTeensWon;                                                                  // 0x0020 (size: 0x1)
    bool mbDataIsValid;                                                               // 0x0021 (size: 0x1)
    bool mbDataHasBeenViewed;                                                         // 0x0022 (size: 0x1)
    FMatchSettings mMatchSettings;                                                    // 0x0028 (size: 0x50)
    int32 mSurvivalRoundCount;                                                        // 0x0078 (size: 0x4)

}; // Size: 0x80

struct FMatchmakingNotificationRequest_Heartbeat
{
    FString Action;                                                                   // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FMatchmakingNotificationRequest_Login
{
    FString Action;                                                                   // 0x0000 (size: 0x10)
    FString GameClientGuid;                                                           // 0x0010 (size: 0x10)
    FString ClientBuildNumber;                                                        // 0x0020 (size: 0x10)
    FString SessionTicketId;                                                          // 0x0030 (size: 0x10)
    FString PlayerAccountId;                                                          // 0x0040 (size: 0x10)
    int32 CloudScriptVersion;                                                         // 0x0050 (size: 0x4)

}; // Size: 0x58

struct FMatchmakingNotificationRequest_QueueAs
{
    FString Action;                                                                   // 0x0000 (size: 0x10)
    FString MatchmakingStatus;                                                        // 0x0010 (size: 0x10)
    FString MatchmakingRegion;                                                        // 0x0020 (size: 0x10)
    FString GameClientGuid;                                                           // 0x0030 (size: 0x10)
    FString PlayerAccountId;                                                          // 0x0040 (size: 0x10)
    FString DisplayName;                                                              // 0x0050 (size: 0x10)
    FString PreferredFaction;                                                         // 0x0060 (size: 0x10)
    FString PartyId;                                                                  // 0x0070 (size: 0x10)
    TArray<FString> PartyMemberPlayerAccountIds;                                      // 0x0080 (size: 0x10)
    FString CharacterType;                                                            // 0x0090 (size: 0x10)
    FString MatchmakingTicketId;                                                      // 0x00A0 (size: 0x10)
    FString MatchID;                                                                  // 0x00B0 (size: 0x10)
    FString dsIpAddress;                                                              // 0x00C0 (size: 0x10)
    int32 dsPort;                                                                     // 0x00D0 (size: 0x4)

}; // Size: 0xD8

struct FMatchmakingNotificationResponse
{
    FString Action;                                                                   // 0x0000 (size: 0x10)
    bool Result;                                                                      // 0x0010 (size: 0x1)
    int32 backendError;                                                               // 0x0014 (size: 0x4)
    FString extraMessage;                                                             // 0x0018 (size: 0x10)
    FString Data;                                                                     // 0x0028 (size: 0x10)

}; // Size: 0x38

struct FMatchmakingNotificationResponse_Login
{
}; // Size: 0x1

struct FMatchmakingNotificationResponse_MatchmakingNotification
{
    FString matchmakingType;                                                          // 0x0000 (size: 0x10)
    FString serverIp;                                                                 // 0x0010 (size: 0x10)
    bool serverPort;                                                                  // 0x0020 (size: 0x1)

}; // Size: 0x28

struct FMatchmakingNotificationResponse_MatchmakingNotificationEx
{
    FString Action;                                                                   // 0x0000 (size: 0x10)
    bool Result;                                                                      // 0x0010 (size: 0x1)
    int32 backendError;                                                               // 0x0014 (size: 0x4)
    FString extraMessage;                                                             // 0x0018 (size: 0x10)
    FMatchmakingNotificationResponse_MatchmakingNotification_Data Data;               // 0x0028 (size: 0x58)

}; // Size: 0x80

struct FMatchmakingNotificationResponse_MatchmakingNotification_Data
{
    FString matchmakingType;                                                          // 0x0000 (size: 0x10)
    FString serverIp;                                                                 // 0x0010 (size: 0x10)
    int32 serverPort;                                                                 // 0x0020 (size: 0x4)
    TArray<FMatchmakingNotificationResponse_MatchmakingNotification_Player> players;  // 0x0028 (size: 0x10)
    FString matchmakerSessionId;                                                      // 0x0038 (size: 0x10)
    TArray<FString> matchedPlayerAccountIds;                                          // 0x0048 (size: 0x10)

}; // Size: 0x58

struct FMatchmakingNotificationResponse_MatchmakingNotification_Player
{
    FString PlayerAccountId;                                                          // 0x0000 (size: 0x10)
    FString playerGameLiftSessionId;                                                  // 0x0010 (size: 0x10)

}; // Size: 0x20

struct FMatchmakingNotificationResponse_SendForceToCancelMatchmakingNotification
{
    FString Action;                                                                   // 0x0000 (size: 0x10)
    bool Result;                                                                      // 0x0010 (size: 0x1)
    int32 backendError;                                                               // 0x0014 (size: 0x4)
    FString extraMessage;                                                             // 0x0018 (size: 0x10)
    FMatchmakingNotificationResponse_SendForceToCancelMatchmakingNotification_Data Data; // 0x0028 (size: 0x10)

}; // Size: 0x38

struct FMatchmakingNotificationResponse_SendForceToCancelMatchmakingNotification_Data
{
    FString Message;                                                                  // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FMatchmakingPlayerInfo
{
    FString mGameLiftPlayerSessionId;                                                 // 0x0000 (size: 0x10)
    FString mBackendSessionTicketId;                                                  // 0x0010 (size: 0x10)
    int32 mQueueDuration;                                                             // 0x0020 (size: 0x4)
    FString mPartyId;                                                                 // 0x0028 (size: 0x10)
    int32 mPartySize;                                                                 // 0x0038 (size: 0x4)
    bool mIsPartyLeader;                                                              // 0x003C (size: 0x1)
    EMatchmakingRegion mSelectedMatchmakingRegion;                                    // 0x003D (size: 0x1)

}; // Size: 0x40

struct FMaterialParameterInfoExt : public FMaterialParameterInfo
{
}; // Size: 0x10

struct FMaterialScalerSetterContext
{
    float mA_Value;                                                                   // 0x0000 (size: 0x4)
    float mB_Value;                                                                   // 0x0004 (size: 0x4)
    float mDuration;                                                                  // 0x0008 (size: 0x4)
    FName mAttributeName;                                                             // 0x000C (size: 0x8)

}; // Size: 0x18

struct FMaterialTransferByName
{
    FName mChannelName;                                                               // 0x0000 (size: 0x8)
    int32 mPriority;                                                                  // 0x0008 (size: 0x4)
    FName mMaterialSlot;                                                              // 0x000C (size: 0x8)
    TMap<class FMaterialParameterInfoExt, class FMaterialParameterInfoExt> mScalarParameters; // 0x0018 (size: 0x50)
    TMap<class FMaterialParameterInfoExt, class FMaterialParameterInfoExt> mVectorParameters; // 0x0068 (size: 0x50)
    TMap<class FMaterialParameterInfoExt, class FMaterialParameterInfoExt> mTextureParameters; // 0x00B8 (size: 0x50)

}; // Size: 0x108

struct FMaterialTransferByValue
{
    FName mChannelName;                                                               // 0x0000 (size: 0x8)
    int32 mPriority;                                                                  // 0x0008 (size: 0x4)
    TMap<FName, float> mMorphTargets;                                                 // 0x0010 (size: 0x50)
    TMap<FMaterialParameterInfoExt, float> mScalarParameters;                         // 0x0060 (size: 0x50)
    TMap<class FMaterialParameterInfoExt, class FLinearColor> mVectorParameters;      // 0x00B0 (size: 0x50)
    TMap<class FMaterialParameterInfoExt, class UTexture*> mTextureParameters;        // 0x0100 (size: 0x50)
    class UMaterialInstance* mpOverrideMaterial;                                      // 0x0150 (size: 0x8)

}; // Size: 0x158

struct FMaterialTransferParameters
{
}; // Size: 0x60

struct FMaterialTransferReceiver
{
    FName mChannelToReceive;                                                          // 0x0000 (size: 0x8)
    TArray<FName> mIncludedMaterialSlots;                                             // 0x0008 (size: 0x10)
    TMap<class FName, class FMaterialParameterInfoExt> mRemapParameter;               // 0x0018 (size: 0x50)

}; // Size: 0x68

struct FMeshSlotComponent : public FStatusMappingTarget
{
    EMeshSlot mMeshSlot;                                                              // 0x00A0 (size: 0x1)
    class UClothingItemDataAsset* mpClothingItemDataAsset;                            // 0x00A8 (size: 0x8)
    int32 mMeshDataIndex;                                                             // 0x00B0 (size: 0x4)

}; // Size: 0xB8

struct FMessageInfo
{
    FText mMessage;                                                                   // 0x0000 (size: 0x18)
    float mDuration;                                                                  // 0x0018 (size: 0x4)

}; // Size: 0x20

struct FMovieState
{
}; // Size: 0x140

struct FNavPathInstance
{
    class ATPChar* mpTargetChar;                                                      // 0x0010 (size: 0x8)
    class UNavigationPath* mpNavigationPath;                                          // 0x0018 (size: 0x8)

}; // Size: 0x20

struct FNavPathScore
{
    class UNavigationPath* mpNavigationPath;                                          // 0x0000 (size: 0x8)
    float mFinalScore;                                                                // 0x0008 (size: 0x4)
    int32 mEQResultIndex;                                                             // 0x000C (size: 0x4)

}; // Size: 0x10

struct FNavPathTracePoint
{
}; // Size: 0xC

struct FNavSelectorItem
{
}; // Size: 0x20

struct FNavWidgetData
{
    class UWidget* targetWidget;                                                      // 0x0000 (size: 0x8)
    FVector2D Location;                                                               // 0x0008 (size: 0x8)
    float dotProduct;                                                                 // 0x0010 (size: 0x4)
    float Distance;                                                                   // 0x0014 (size: 0x4)

}; // Size: 0x18

struct FNetPlayerInfoStruct
{
    EFaction mPreferredFaction;                                                       // 0x0000 (size: 0x1)
    ECharacterType mPreferredTeenCharacterType;                                       // 0x0001 (size: 0x1)
    ECharacterType mPreferredEvilCharacterType;                                       // 0x0002 (size: 0x1)
    EFaction mFinalInGameFaction;                                                     // 0x0003 (size: 0x1)
    ECharacterType mFinalTeenCharacterType;                                           // 0x0004 (size: 0x1)
    ECharacterType mFinalEvilCharacterType;                                           // 0x0005 (size: 0x1)
    EAIDifficultyLevel mAIDifficulty;                                                 // 0x0006 (size: 0x1)
    int32 mTeenRank;                                                                  // 0x0008 (size: 0x4)
    TArray<int32> mEvilRanks;                                                         // 0x0010 (size: 0x10)
    FString mDiscoverKey;                                                             // 0x0020 (size: 0x10)
    FString mPlayerAccountId;                                                         // 0x0030 (size: 0x10)
    FString mDisplayName;                                                             // 0x0040 (size: 0x10)
    FString mGenericName;                                                             // 0x0050 (size: 0x10)
    bool mbIsSpectator;                                                               // 0x0060 (size: 0x1)
    int32 mLobbyIndex;                                                                // 0x0064 (size: 0x4)
    int32 mOldLobbyIndex;                                                             // 0x0068 (size: 0x4)
    class APlayerController* mpMyPlayerController;                                    // 0x0070 (size: 0x8)
    class ATPChar* mpMainTPChar;                                                      // 0x0078 (size: 0x8)
    bool mbIsReady;                                                                   // 0x0080 (size: 0x1)
    bool mbHasSpawnedCharacter;                                                       // 0x0081 (size: 0x1)
    bool mbHasFinishedLoading;                                                        // 0x0082 (size: 0x1)
    float mLoadProgress;                                                              // 0x0084 (size: 0x4)
    FColor mPlayerColor;                                                              // 0x0088 (size: 0x4)
    bool mbIsBot;                                                                     // 0x008C (size: 0x1)
    FPointValue mMasteryLevel;                                                        // 0x0090 (size: 0x8)
    FGrantable mAccountPortrait;                                                      // 0x0098 (size: 0x88)
    bool mbHideDisplayName;                                                           // 0x0120 (size: 0x1)
    FUniqueNetIdRepl mUniqueNetIdRepl;                                                // 0x0128 (size: 0x28)
    FString mSteamId;                                                                 // 0x0150 (size: 0x10)
    FString mUniqueNetIdString;                                                       // 0x0160 (size: 0x10)
    bool mbCameFromServerTravel;                                                      // 0x0170 (size: 0x1)

}; // Size: 0x178

struct FNewFlagData
{
}; // Size: 0x38

struct FNodePurchase
{
}; // Size: 0x28

struct FNotificationData
{
    FString mNotificationId;                                                          // 0x0000 (size: 0x10)
    FString mSenderPlayerAccountId;                                                   // 0x0010 (size: 0x10)
    FString mSenderDisplayName;                                                       // 0x0020 (size: 0x10)
    FString mExtraData;                                                               // 0x0030 (size: 0x10)
    ENotificationType mNotificationType;                                              // 0x0040 (size: 0x1)

}; // Size: 0x48

struct FOmenSpawningSpecs
{
    TSubclassOf<class AInteractablePropBase> mpInteractablePropClass;                 // 0x0000 (size: 0x8)
    float mSpawnRadius;                                                               // 0x0008 (size: 0x4)
    uint8 mSpawnNumber;                                                               // 0x000C (size: 0x1)
    float mOrbitMinHeight;                                                            // 0x0010 (size: 0x4)
    float mOrbitMaxHeight;                                                            // 0x0014 (size: 0x4)
    float mOrbitRadius;                                                               // 0x0018 (size: 0x4)
    float mOmenLife;                                                                  // 0x001C (size: 0x4)

}; // Size: 0x20

struct FOptionItem
{
}; // Size: 0x30

struct FP2PMatchmakingInfo
{
    EFaction mFaction;                                                                // 0x0000 (size: 0x1)
    int32 mRank;                                                                      // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FPartyMemberData : public FSocialPlayerData
{
    bool mbIsLeader;                                                                  // 0x00C8 (size: 0x1)

}; // Size: 0xD0

struct FPatchNote
{
}; // Size: 0x20

struct FPatchNotesCollection
{
}; // Size: 0x18

struct FPerceivedActors
{
    TArray<class ATPChar*> mPerceivedEvilChars;                                       // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FPerkSlotTypeFilter : public FStringOfBits
{
}; // Size: 0x10

struct FPickupInfoStruct
{
    EPickupType mPickupType;                                                          // 0x0000 (size: 0x1)
    EEventPickupType mEventPickupType;                                                // 0x0001 (size: 0x1)
    bool mbOverrideSkin;                                                              // 0x0002 (size: 0x1)
    ESeasonalEventType mSeasonalEventType;                                            // 0x0003 (size: 0x1)
    int32 mPickupSubtype;                                                             // 0x0004 (size: 0x4)
    float mPickupCharge;                                                              // 0x0008 (size: 0x4)

}; // Size: 0xC

struct FPingData
{
    EPingType mPingType;                                                              // 0x0000 (size: 0x1)
    FVector mLocation;                                                                // 0x0004 (size: 0xC)
    class AGameplayPS* mpOwnerPS;                                                     // 0x0010 (size: 0x8)
    float mLifeTimeLeft;                                                              // 0x0018 (size: 0x4)
    bool mbIgnoreLifetime;                                                            // 0x001C (size: 0x1)
    class AActor* mpPingedActor;                                                      // 0x0020 (size: 0x8)
    FColor mPingColor;                                                                // 0x0028 (size: 0x4)
    bool mbEvilPing;                                                                  // 0x002C (size: 0x1)
    int32 mEvilPingIndex;                                                             // 0x0030 (size: 0x4)

}; // Size: 0x38

struct FPipeAccessory
{
    class UStaticMesh* mpMesh;                                                        // 0x0000 (size: 0x8)
    bool mSnapToPoints;                                                               // 0x0008 (size: 0x1)
    float mDistanceAlongSpline;                                                       // 0x000C (size: 0x4)
    float mRotationAroundSpline;                                                      // 0x0010 (size: 0x4)
    float mScale;                                                                     // 0x0014 (size: 0x4)

}; // Size: 0x18

struct FPlatformInputIcon : public FTableRowBase
{
    FKey KeyType;                                                                     // 0x0008 (size: 0x18)
    class UTexture2D* Texture;                                                        // 0x0020 (size: 0x8)

}; // Size: 0x28

struct FPlayerEOMLoadOutData
{
    FDbItemId mEquippedPrize;                                                         // 0x0000 (size: 0x18)
    TArray<FDbItemId> mPerksList;                                                     // 0x0018 (size: 0x10)
    TArray<FDbItemId> mMutationsList;                                                 // 0x0028 (size: 0x10)
    TArray<FWeaponIDToType> mWeaponPowersList;                                        // 0x0038 (size: 0x10)
    TArray<EWeaponTypeEnum> mUnlockedWeaponsList;                                     // 0x0048 (size: 0x10)
    bool bIsPopulated;                                                                // 0x0058 (size: 0x1)

}; // Size: 0x60

struct FPlayerMatchInfoData
{
    ECharacterType mSelectedCharacterType;                                            // 0x0000 (size: 0x1)
    EFaction mFaction;                                                                // 0x0001 (size: 0x1)
    FString mPlayerUniqueID;                                                          // 0x0008 (size: 0x10)
    FString mPlayerDisplayName;                                                       // 0x0018 (size: 0x10)
    FString mPlayerGenericName;                                                       // 0x0028 (size: 0x10)
    FString mAccountPortrait;                                                         // 0x0038 (size: 0x10)
    EPlayerGameState mPlayerGameState;                                                // 0x0048 (size: 0x1)
    FVector2D mHealthPointsData;                                                      // 0x004C (size: 0x8)
    float mBaseScore;                                                                 // 0x0054 (size: 0x4)
    float mBonusScore;                                                                // 0x0058 (size: 0x4)
    TArray<EDamageType> mDamageTypesHit;                                              // 0x0060 (size: 0x10)
    FPlayerEOMLoadOutData mPlayerLoadoutData;                                         // 0x0070 (size: 0x60)
    EPlayerEndOfMatchState mPlayerEOMState;                                           // 0x00D0 (size: 0x1)
    FPlayerScorePointsData mPlayerPointsData;                                         // 0x00D4 (size: 0x20)
    FText mPlayedTimeElapsed;                                                         // 0x00F8 (size: 0x18)
    int32 mTotalNumberOfEvilHits;                                                     // 0x0110 (size: 0x4)
    int32 mHitsPerTeen;                                                               // 0x0114 (size: 0x4)
    int32 mPlayerLevel;                                                               // 0x0118 (size: 0x4)
    bool mbIsTeenBecomingEvil;                                                        // 0x011C (size: 0x1)
    FEORLevelUpData mLevelUpData;                                                     // 0x0120 (size: 0xC)
    FEORRewardsData mRewardsData;                                                     // 0x0130 (size: 0x40)
    int32 mMasteryPoints;                                                             // 0x0170 (size: 0x4)
    int32 mMasteryLevel;                                                              // 0x0174 (size: 0x4)
    int32 mPing;                                                                      // 0x0178 (size: 0x4)
    float mStartingAccountFlux;                                                       // 0x017C (size: 0x4)
    bool mbIsDisconnected;                                                            // 0x0180 (size: 0x1)
    bool mbHasBeenResurrected;                                                        // 0x0181 (size: 0x1)
    bool mbCurrentlyAfk;                                                              // 0x0182 (size: 0x1)
    float mAfkDuration;                                                               // 0x0184 (size: 0x4)
    float mLifeLost;                                                                  // 0x0188 (size: 0x4)
    float mGameplayTimeAtLastDeath;                                                   // 0x018C (size: 0x4)

}; // Size: 0x190

struct FPlayerPointValue
{
    FPointValue mPointValue;                                                          // 0x0000 (size: 0x8)

}; // Size: 0x8

struct FPlayerScorePointsData
{
    float mCategory0;                                                                 // 0x0000 (size: 0x4)
    float mCategory1;                                                                 // 0x0004 (size: 0x4)
    float mCategory2;                                                                 // 0x0008 (size: 0x4)
    float mCategory3;                                                                 // 0x000C (size: 0x4)
    float mBonusCategory0;                                                            // 0x0010 (size: 0x4)
    float mBonusCategory1;                                                            // 0x0014 (size: 0x4)
    float mBonusCategory2;                                                            // 0x0018 (size: 0x4)
    float mBonusCategory3;                                                            // 0x001C (size: 0x4)

}; // Size: 0x20

struct FPlayerSettingsStruct : public FCloudPlayerSettingsStruct
{
    uint32 mSettingsVersionNumber;                                                    // 0x0160 (size: 0x4)
    FText mCustomId;                                                                  // 0x0168 (size: 0x18)
    FString mHashedPassword;                                                          // 0x0180 (size: 0x10)
    int32 mPasswordLength;                                                            // 0x0190 (size: 0x4)
    bool mRememberPassword;                                                           // 0x0194 (size: 0x1)
    bool mAutoLogin;                                                                  // 0x0195 (size: 0x1)

}; // Size: 0x198

struct FPlayerToMatchMod
{
    class AGameplayPS* mpPlayerPS;                                                    // 0x0000 (size: 0x8)
    EMatchModType mMatchModType;                                                      // 0x0008 (size: 0x1)

}; // Size: 0x10

struct FPlayerVerificationInfoForGameLift
{
}; // Size: 0x1

struct FPointType
{
}; // Size: 0x1

struct FPointValue
{
    EPointType mPointType;                                                            // 0x0000 (size: 0x1)
    int32 mValue;                                                                     // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FPortraitAssetTable : public FTableRowBase
{
    EHUDPortraitIcons KeyType;                                                        // 0x0008 (size: 0x1)
    class UTexture2D* Texture;                                                        // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FPrizePackData
{
    FString mType;                                                                    // 0x0000 (size: 0x10)
    FString mTypeRedirector;                                                          // 0x0010 (size: 0x10)
    FString mName;                                                                    // 0x0020 (size: 0x10)
    FString mChestID;                                                                 // 0x0030 (size: 0x10)

}; // Size: 0x40

struct FPrizeRevealStyleGuide
{
    class UTexture2D* mpBackgroundLayer1;                                             // 0x0000 (size: 0x8)
    class UTexture2D* mpBackgroundLayer2;                                             // 0x0008 (size: 0x8)
    class UTexture2D* mpBackgroundLayer3;                                             // 0x0010 (size: 0x8)
    class UTexture2D* mpSelectionImage;                                               // 0x0018 (size: 0x8)
    class UTexture2D* mpBackgroundGlow;                                               // 0x0020 (size: 0x8)
    float mBackgroundGlowUnhoveredOpacity;                                            // 0x0028 (size: 0x4)

}; // Size: 0x30

struct FProcessMatchEventsParameters
{
}; // Size: 0x38

struct FProgressionEvent
{
}; // Size: 0xC

struct FPropInteractionProperties
{
    float mLimitedPhysicsMaxWeight;                                                   // 0x0000 (size: 0x4)
    float mWobbleMaxWeight;                                                           // 0x0004 (size: 0x4)
    EImpactPhysicsBehaviour mPhysicsBehaviour;                                        // 0x0008 (size: 0x1)
    EImpactParticles mImpactParticles;                                                // 0x0009 (size: 0x1)

}; // Size: 0xC

struct FRadialMenuSegement
{
    int32 mSegementNumber;                                                            // 0x0000 (size: 0x4)
    class UCanvasPanel* mpRadialSegmentCanvasPanel;                                   // 0x0008 (size: 0x8)
    class UHUDRadialMenuSegment* mpRadialSegmentWidget;                               // 0x0010 (size: 0x8)
    bool mbCanBeSelected;                                                             // 0x0018 (size: 0x1)
    float mCurrentAngle;                                                              // 0x001C (size: 0x4)
    FText mSegmentName;                                                               // 0x0020 (size: 0x18)

}; // Size: 0x38

struct FRecentPlayerData
{
}; // Size: 0xE8

struct FRecordedDamage
{
    class ATPChar* mpSourceCharacter;                                                 // 0x0000 (size: 0x8)
    FVector mSourceLocation;                                                          // 0x0008 (size: 0xC)
    EWeaponTypeEnum mWeaponType;                                                      // 0x0014 (size: 0x1)
    bool mbIsDamageActive;                                                            // 0x0015 (size: 0x1)
    bool mbIsDamageDecaying;                                                          // 0x0016 (size: 0x1)
    TArray<int32> mHitBones;                                                          // 0x0018 (size: 0x10)
    float mServerDamageActiveTimer;                                                   // 0x0028 (size: 0x4)
    float mServerDamageDecayTimer;                                                    // 0x002C (size: 0x4)
    uint8 mServerFrameCounter;                                                        // 0x0030 (size: 0x1)
    bool mbDirectHit;                                                                 // 0x0031 (size: 0x1)

}; // Size: 0x38

struct FRecordedMeshSlotVisibility
{
    EMeshSlotVisibility mVisibility;                                                  // 0x0000 (size: 0x4)
    uint8 mPriority;                                                                  // 0x0004 (size: 0x1)
    int32 mTuckPointL;                                                                // 0x0008 (size: 0x4)
    int32 mTuckPointR;                                                                // 0x000C (size: 0x4)

}; // Size: 0x10

struct FReplayInfo
{
    FString mReplayName;                                                              // 0x0000 (size: 0x10)
    FString mFriendlyName;                                                            // 0x0010 (size: 0x10)
    FDateTime mTimestamp;                                                             // 0x0020 (size: 0x8)
    int32 mLengthInMS;                                                                // 0x0028 (size: 0x4)
    bool mbIsValid;                                                                   // 0x002C (size: 0x1)

}; // Size: 0x30

struct FResonanceCloneParameters
{
    float mCloneLifetime;                                                             // 0x0000 (size: 0x4)
    int32 mCloneCount;                                                                // 0x0004 (size: 0x4)
    float mCloneFrequency;                                                            // 0x0008 (size: 0x4)
    bool mbHasWeapon;                                                                 // 0x000C (size: 0x1)
    bool bRevealHiddenTeenOnEvilView;                                                 // 0x000D (size: 0x1)

}; // Size: 0x10

struct FResonanceCloneTriggerSpecs
{
}; // Size: 0x10

struct FRewardChest
{
}; // Size: 0x38

struct FRoomFrameAttribute
{
    FName mAttributeName;                                                             // 0x0000 (size: 0x8)
    float mAttributeValue;                                                            // 0x0008 (size: 0x4)

}; // Size: 0xC

struct FRoomFrameFogSettings : public FTableRowBase
{
    float mFogDensity;                                                                // 0x0008 (size: 0x4)
    float mFogHeight;                                                                 // 0x000C (size: 0x4)
    FLinearColor mFogInscatteringColor;                                               // 0x0010 (size: 0x10)

}; // Size: 0x20

struct FRotatorStyleGuide
{
    class UTexture2D* mpEmptyProgressContainer;                                       // 0x0000 (size: 0x8)
    class UTexture2D* mpFullProgressContainer;                                        // 0x0008 (size: 0x8)
    class UTexture2D* mpProgressCompleteIcon;                                         // 0x0010 (size: 0x8)
    class UTexture2D* mpBackgroundImage;                                              // 0x0018 (size: 0x8)

}; // Size: 0x20

struct FSceneState
{
    FString mOwningMovieKey;                                                          // 0x0000 (size: 0x10)
    FString mSceneKey;                                                                // 0x0010 (size: 0x10)
    bool mbIsProcedural;                                                              // 0x0020 (size: 0x1)

}; // Size: 0x198

struct FScreenShotRequest
{
    class ASmokeTestCameraLocation* mpCamera;                                         // 0x0000 (size: 0x8)

}; // Size: 0x28

struct FSearchablePointArray
{
    TArray<class ASearchablePoint*> mSearchablePoints;                                // 0x0000 (size: 0x10)

}; // Size: 0x18

struct FSeasonalEventPickupInfo
{
    TMap<EPickupType, uint32> mNumPickupsByType;                                      // 0x0000 (size: 0x50)

}; // Size: 0x50

struct FServerNotification
{
}; // Size: 0x80

struct FServerReportLobbyCompletedInfo
{
    FString mMatchId;                                                                 // 0x0000 (size: 0x10)
    TArray<FServerReportLobbyCompletedPlayerData> mLobbyCompletedPlayerData;          // 0x0010 (size: 0x10)

}; // Size: 0x20

struct FServerReportLobbyCompletedPlayerData
{
    FString mPlayerAccountId;                                                         // 0x0000 (size: 0x10)
    int32 mLobbyDurationInSeconds;                                                    // 0x0010 (size: 0x4)

}; // Size: 0x18

struct FServerReportLobbyJoinedInfo
{
    FString mPlayerAccountId;                                                         // 0x0000 (size: 0x10)
    FString mMatchId;                                                                 // 0x0010 (size: 0x10)
    FString mRegion;                                                                  // 0x0020 (size: 0x10)
    FString mCharacterType;                                                           // 0x0030 (size: 0x10)
    int32 mQueueDurationInSeconds;                                                    // 0x0040 (size: 0x4)
    int32 mMatchmakingPercentile;                                                     // 0x0044 (size: 0x4)
    int32 mDelinquencyRating;                                                         // 0x0048 (size: 0x4)

}; // Size: 0x50

struct FServerReportOtherPlayerData
{
    FString mState;                                                                   // 0x0000 (size: 0x10)
    FString mDisplayName;                                                             // 0x0010 (size: 0x10)
    FString mAccountPortrait;                                                         // 0x0020 (size: 0x10)
    int32 mMasteryLevel;                                                              // 0x0030 (size: 0x4)
    FString mEpuid;                                                                   // 0x0038 (size: 0x10)
    FString mSteamId;                                                                 // 0x0048 (size: 0x10)

}; // Size: 0x58

struct FServerReportPlayerDisconnectInfo
{
    FString mPlayerAccountId;                                                         // 0x0000 (size: 0x10)
    FString mMatchState;                                                              // 0x0010 (size: 0x10)
    FString mDisconnectType;                                                          // 0x0020 (size: 0x10)
    TMap<class FString, class FServerReportOtherPlayerData> mOtherPlayerDataMap;      // 0x0030 (size: 0x50)
    EFaction mFaction;                                                                // 0x0080 (size: 0x1)
    FString mMatchId;                                                                 // 0x0088 (size: 0x10)
    bool mbCurrentlyAfk;                                                              // 0x0098 (size: 0x1)
    int32 mAfkDuration;                                                               // 0x009C (size: 0x4)
    int32 mSecondsIntoMatch;                                                          // 0x00A0 (size: 0x4)

}; // Size: 0xA8

struct FSkinDecal
{
    class UMaterialInstance* mpDecalMaterial;                                         // 0x0000 (size: 0x8)
    TMap<class FName, class FLinearColor> mTints;                                     // 0x0008 (size: 0x50)

}; // Size: 0x58

struct FSkinFXSystem
{
    class UFXSystemAsset* mpFXSystem;                                                 // 0x0000 (size: 0x8)
    FName mAttachSocketOverride;                                                      // 0x0008 (size: 0x8)
    bool mbAutoActivate;                                                              // 0x0010 (size: 0x1)
    TArray<FName> mTags;                                                              // 0x0018 (size: 0x10)
    FEffectVisibility mVisibility;                                                    // 0x0028 (size: 0xB)

}; // Size: 0x38

struct FSkinFXSystemList
{
    TArray<FName> mTargetRequiredTags;                                                // 0x0000 (size: 0x10)
    TArray<FSkinFXSystem> mFXSystems;                                                 // 0x0010 (size: 0x10)

}; // Size: 0x20

struct FSkinLight
{
    class UMaterialInstance* mpLightFunction;                                         // 0x0000 (size: 0x8)
    FLinearColor mLightColor;                                                         // 0x0008 (size: 0x10)

}; // Size: 0x18

struct FSkinMaterialReferencer
{
}; // Size: 0x8

struct FSkinNiagaraSystem
{
    class UNiagaraSystem* mpNiagaraSystem;                                            // 0x0000 (size: 0x8)
    FName mAttachSocketOverride;                                                      // 0x0008 (size: 0x8)
    bool mbAutoActivate;                                                              // 0x0010 (size: 0x1)
    FEffectVisibility mVisibility;                                                    // 0x0011 (size: 0xB)
    TArray<FName> mTags;                                                              // 0x0020 (size: 0x10)

}; // Size: 0x30

struct FSkinParticleSystem
{
    class UParticleSystem* mpParticleSystem;                                          // 0x0000 (size: 0x8)
    TMap<class FName, class UMaterialInstance*> mpMaterialOverrides;                  // 0x0008 (size: 0x50)
    TMap<class FName, class FLinearColor> mTints;                                     // 0x0058 (size: 0x50)
    bool mbEnabled;                                                                   // 0x00A8 (size: 0x1)
    FName mAttachSocketOverride;                                                      // 0x00AC (size: 0x8)
    TArray<FName> mTags;                                                              // 0x00B8 (size: 0x10)
    bool mbAutoActivate;                                                              // 0x00C8 (size: 0x1)
    FEffectVisibility mVisibility;                                                    // 0x00C9 (size: 0xB)

}; // Size: 0xD8

struct FSkinSkeletalMesh : public FSkinMaterialReferencer
{
    class USkeletalMesh* mpSkeletalMesh;                                              // 0x0008 (size: 0x8)
    FName mNamedMesh;                                                                 // 0x0010 (size: 0x8)
    TMap<class FName, class UMaterialInstance*> mpMaterialOverrides;                  // 0x0018 (size: 0x50)
    TMap<class FName, class FLinearColor> mTints;                                     // 0x0068 (size: 0x50)
    TArray<FMaterialTransferByName> mMaterialParameterTransferByName;                 // 0x00B8 (size: 0x10)
    TArray<FMaterialTransferByValue> mMaterialParameterTransferByValue;               // 0x00C8 (size: 0x10)
    TArray<FName> mMaterialParameterTransferChannelsToReceive;                        // 0x00D8 (size: 0x10)
    TArray<FMaterialTransferReceiver> mMaterialParameterTransferReceivers;            // 0x00E8 (size: 0x10)
    class UMaterialTransferConfig* mMaterialParameterTransferConfig;                  // 0x00F8 (size: 0x8)
    TArray<class UMaterialTransferConfig*> mAdditionalMaterialParameterTransferConfigs; // 0x0100 (size: 0x10)
    TSubclassOf<class UAnimInstance> mpAnimInstanceClass;                             // 0x0110 (size: 0x8)
    TArray<FSkinParticleSystem> mPersistentParticleSystems;                           // 0x0118 (size: 0x10)
    TArray<FSkinNiagaraSystem> mPersistentNiagaraSystems;                             // 0x0128 (size: 0x10)
    bool mbSimulateLiquid;                                                            // 0x0138 (size: 0x1)
    TArray<FLiquidMaterialSettings> mLiquidMaterialSettings;                          // 0x0140 (size: 0x10)
    float mClothBlendWeight;                                                          // 0x0150 (size: 0x4)
    TArray<FName> mTags;                                                              // 0x0158 (size: 0x10)

}; // Size: 0x168

struct FSkinStaticMesh
{
    class UStaticMesh* mpStaticMesh;                                                  // 0x0000 (size: 0x8)
    TMap<class FName, class UMaterialInstance*> mpMaterialOverrides;                  // 0x0008 (size: 0x50)
    TMap<class FName, class FLinearColor> mTints;                                     // 0x0058 (size: 0x50)

}; // Size: 0xA8

struct FSocialPlayerData
{
    FString mPlayerAccountId;                                                         // 0x0000 (size: 0x10)
    FString mPlayerUniqueNetId;                                                       // 0x0010 (size: 0x10)
    FString mDisplayName;                                                             // 0x0020 (size: 0x10)
    FPointValue mMasteryPoints;                                                       // 0x0030 (size: 0x8)
    FGrantable mPortrait;                                                             // 0x0038 (size: 0x88)
    EPlayerPresenceState mPlayerPresenceState;                                        // 0x00C0 (size: 0x1)
    ESocialStatusType mSocialStatusType;                                              // 0x00C1 (size: 0x1)

}; // Size: 0xC8

struct FSpawnGroup
{
    TArray<FSpawnGroupItem> mpSpawnItemsArray;                                        // 0x0000 (size: 0x10)
    int32 mNumObjectsToKeep;                                                          // 0x0010 (size: 0x4)
    TSubclassOf<class AActor> mpDefaultReplacementTemplate;                           // 0x0018 (size: 0x8)
    TArray<FSpawnGroupReplacementTemplate> mReplacementTemplateArray;                 // 0x0020 (size: 0x10)

}; // Size: 0x30

struct FSpawnGroupItem
{
    class AActor* mpActor;                                                            // 0x0000 (size: 0x8)
    float mWeight;                                                                    // 0x0008 (size: 0x4)
    bool mbOverrideReplacementTemplate;                                               // 0x000C (size: 0x1)
    TSubclassOf<class AActor> mpOverrideTemplate;                                     // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FSpawnGroupReplacementTemplate
{
    TSubclassOf<class AActor> mpReplacementActor;                                     // 0x0000 (size: 0x8)
    float mWeight;                                                                    // 0x0008 (size: 0x4)

}; // Size: 0x10

struct FSplineInterpInstanceComponentData
{
    TArray<FSplineInterpolatedMeshData> mInterpolatedMeshData;                        // 0x0000 (size: 0x10)
    class UInstancedStaticMeshComponent* mpInstancedMeshComponent;                    // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FSplineInterpSpawnInfo
{
    class UStaticMesh* mpStaticMesh;                                                  // 0x0000 (size: 0x8)
    float mSpawnRate;                                                                 // 0x0008 (size: 0x4)
    float mOffsetDistanceMin;                                                         // 0x000C (size: 0x4)
    float mOffsetDistanceMax;                                                         // 0x0010 (size: 0x4)
    float mLoopRadiusMin;                                                             // 0x0014 (size: 0x4)
    float mLoopRadiusMax;                                                             // 0x0018 (size: 0x4)
    float mSpawnTimer;                                                                // 0x001C (size: 0x4)
    float mTimeToTarget;                                                              // 0x0020 (size: 0x4)
    bool mbIsLoopingEnabled;                                                          // 0x0024 (size: 0x1)

}; // Size: 0x28

struct FSplineInterpolatedMeshData
{
    FInterpCurveVector mInterpCurveLocation;                                          // 0x0000 (size: 0x18)
    FInterpCurveQuat mInterpCurveRotation;                                            // 0x0018 (size: 0x18)
    float mAlpha;                                                                     // 0x0030 (size: 0x4)
    float mSpeedMultiplier;                                                           // 0x0034 (size: 0x4)
    float mOffsetAlpha;                                                               // 0x0038 (size: 0x4)
    FVector mOffsetVector;                                                            // 0x003C (size: 0xC)
    bool mbShouldLoopityLoop;                                                         // 0x0048 (size: 0x1)
    bool mbStartedLoop;                                                               // 0x0049 (size: 0x1)
    float mNextLoopAlpha;                                                             // 0x004C (size: 0x4)
    float mLoopRadius;                                                                // 0x0050 (size: 0x4)
    float mLoopAlpha;                                                                 // 0x0054 (size: 0x4)
    float mLoopSpeed;                                                                 // 0x0058 (size: 0x4)
    FVector mLoopForwardVector;                                                       // 0x005C (size: 0xC)
    FVector mLoopUpVector;                                                            // 0x0068 (size: 0xC)
    FVector mPreviousVelocity;                                                        // 0x0074 (size: 0xC)
    bool mbHasBrokenOff;                                                              // 0x0080 (size: 0x1)

}; // Size: 0x88

struct FStackedItemId
{
}; // Size: 0x30

struct FStatWidgetData
{
    EPlayerAccountStatType StatType;                                                  // 0x0000 (size: 0x1)
    EPlayerAccountStatType TotalStatType;                                             // 0x0001 (size: 0x1)
    EStatDisplayForGroup GroupType;                                                   // 0x0002 (size: 0x1)
    EStatWidgetCombinationType CombinationType;                                       // 0x0003 (size: 0x1)

}; // Size: 0x4

struct FStationDamageTypeAssets
{
    class UNiagaraSystem* mpParticleSystem;                                           // 0x0000 (size: 0x8)
    class UStaticMesh* mpIconMesh;                                                    // 0x0008 (size: 0x8)
    class UStaticMesh* mpIconBorderMesh;                                              // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FStatusMappingTarget
{
    class USkeletalMeshComponent* mpSkeletalMeshComponent;                            // 0x0008 (size: 0x8)
    class UFXSystemComponent* mpFXSystemComponent;                                    // 0x0010 (size: 0x8)

}; // Size: 0xA0

struct FStatusProperty
{
    float mTimeRemaining;                                                             // 0x0000 (size: 0x4)
    float mBaseTime;                                                                  // 0x0004 (size: 0x4)
    bool mbPreventUpdateOneFrame;                                                     // 0x0008 (size: 0x1)

}; // Size: 0xC

struct FStatusTileData
{
    EStatusType mStatusType;                                                          // 0x0000 (size: 0x1)
    float mValue;                                                                     // 0x0004 (size: 0x4)
    float mMax;                                                                       // 0x0008 (size: 0x4)
    int32 mTokenCount;                                                                // 0x000C (size: 0x4)

}; // Size: 0x10

struct FSteamMicroTxnItemStruct
{
    FString Mid;                                                                      // 0x0000 (size: 0x10)
    int32 mRCPrice;                                                                   // 0x0010 (size: 0x4)
    FString mCurrencyCode;                                                            // 0x0018 (size: 0x10)
    FString mDescription;                                                             // 0x0028 (size: 0x10)
    int32 mQuantity;                                                                  // 0x0038 (size: 0x4)

}; // Size: 0x40

struct FStencilProperties
{
    bool mbEnabled;                                                                   // 0x0000 (size: 0x1)
    bool mbAutoManageRenderCustomDepth;                                               // 0x0001 (size: 0x1)
    FColor mColor1;                                                                   // 0x0004 (size: 0x4)
    FColor mColor2;                                                                   // 0x0008 (size: 0x4)
    FColor mBoost;                                                                    // 0x000C (size: 0x4)
    FColor mOutlineColour1;                                                           // 0x0010 (size: 0x4)
    FColor mOutlineColour2;                                                           // 0x0014 (size: 0x4)
    FColor mOutlineBoost;                                                             // 0x0018 (size: 0x4)
    EAuraEffect mEffect;                                                              // 0x001C (size: 0x1)
    FColor mEffectColour1;                                                            // 0x0020 (size: 0x4)
    FColor mEffectColour2;                                                            // 0x0024 (size: 0x4)
    float mEffectAlpha;                                                               // 0x0028 (size: 0x4)
    float mDistanceFadeAlpha;                                                         // 0x002C (size: 0x4)
    float mDistanceFadeStart;                                                         // 0x0030 (size: 0x4)
    float mDistanceFadeEnd;                                                           // 0x0034 (size: 0x4)
    uint8 mDistanceFadePower;                                                         // 0x0038 (size: 0x1)
    bool mbIsFading;                                                                  // 0x0039 (size: 0x1)
    float mFadeTime;                                                                  // 0x003C (size: 0x4)
    float mFadeTimeElapsed;                                                           // 0x0040 (size: 0x4)

}; // Size: 0x44

struct FStencilledPrimitiveProperties
{
    TWeakObjectPtr<class UPrimitiveComponent> mpPrimitiveWeakPtr;                     // 0x0000 (size: 0x8)

}; // Size: 0x8

struct FStickerData
{
    FVector mLocation;                                                                // 0x0000 (size: 0xC)
    FRotator mRotation;                                                               // 0x000C (size: 0xC)
    class AActor* mpAtachedToActor;                                                   // 0x0018 (size: 0x8)
    class ABaseChar* mpOwningBaseChar;                                                // 0x0020 (size: 0x8)
    int32 mStickerIndex;                                                              // 0x0028 (size: 0x4)
    int32 mSortOrder;                                                                 // 0x002C (size: 0x4)
    bool mbTranslucentBacking;                                                        // 0x0030 (size: 0x1)
    float mBaseLifetime;                                                              // 0x0034 (size: 0x4)

}; // Size: 0x38

struct FStigmaData
{
    class UTexture2D* StigmaIcon;                                                     // 0x0000 (size: 0x8)
    class UTexture2D* StigmaBackground;                                               // 0x0008 (size: 0x8)
    FLinearColor Color;                                                               // 0x0010 (size: 0x10)

}; // Size: 0x20

struct FStigmaRewardsCardData
{
    EDamageType mDamageType;                                                          // 0x0000 (size: 0x1)
    float mCurrentProgress;                                                           // 0x0004 (size: 0x4)
    float mGoalProgress;                                                              // 0x0008 (size: 0x4)
    float mMaxProgress;                                                               // 0x000C (size: 0x4)
    int32 mCurrentLevel;                                                              // 0x0010 (size: 0x4)

}; // Size: 0x14

struct FStoreBundleAssetTable : public FTableRowBase
{
    FText BundleName;                                                                 // 0x0008 (size: 0x18)
    FText Description;                                                                // 0x0020 (size: 0x18)
    class UTexture2D* DisplayImage;                                                   // 0x0038 (size: 0x8)

}; // Size: 0x40

struct FStoreCatalogDataTable : public FTableRowBase
{
    TArray<class UObject*> AllTileBackgrounds;                                        // 0x0008 (size: 0x10)

}; // Size: 0x18

struct FStoreItemData
{
    TArray<FString> mItemIDs;                                                         // 0x0000 (size: 0x10)
    FString mSlotDataName;                                                            // 0x0010 (size: 0x10)
    TArray<FStoreItemPriceData> mPricingData;                                         // 0x0020 (size: 0x10)
    FString mGUID;                                                                    // 0x0030 (size: 0x10)
    int32 mHCOptionIndex;                                                             // 0x0040 (size: 0x4)
    int32 mSCOptionIndex;                                                             // 0x0044 (size: 0x4)
    FString mPageName;                                                                // 0x0048 (size: 0x10)
    EStoreItemTileSize mStoreTileSize;                                                // 0x0058 (size: 0x1)
    TArray<EStoreItemTileSize> mStoreTileItemSizes;                                   // 0x0060 (size: 0x10)
    bool mbLineBreakBeforeThisItem;                                                   // 0x0070 (size: 0x1)
    FUtcDateTime mItemExpiryTime;                                                     // 0x0074 (size: 0x4)
    EStoreItemTileType mTileType;                                                     // 0x0078 (size: 0x1)
    EItemRarity mRarity;                                                              // 0x0079 (size: 0x1)
    FText mDisplayTitle;                                                              // 0x0080 (size: 0x18)
    FText mDisplayCategory;                                                           // 0x0098 (size: 0x18)
    TSoftObjectPtr<UTexture2D> mpItemDisplayThumbnail;                                // 0x00B0 (size: 0x28)
    bool mbRenderThumbnailAsMovieType;                                                // 0x00D8 (size: 0x1)
    TSoftObjectPtr<UTexture2D> mpNavigationIcon;                                      // 0x00E0 (size: 0x28)
    int32 mMainCatalogIndex;                                                          // 0x0108 (size: 0x4)
    int32 mMainCatalogSubIndex;                                                       // 0x010C (size: 0x4)
    FStoreItemDataExtras_Fake mStoreExtraData_Fake;                                   // 0x0110 (size: 0x8)
    FStoreItemDataExtras_Streak mStoreExtraData_Streak;                               // 0x0118 (size: 0x28)
    FStoreItemDataExtras_PrizePack mStoreExtraData_PrizePack;                         // 0x0140 (size: 0x58)
    FStoreItemDataExtras_Fake_Slideshow mStoreExtraData_Fake_Slideshow;               // 0x0198 (size: 0x60)

}; // Size: 0x1F8

struct FStoreItemDataExtras
{
}; // Size: 0x1

struct FStoreItemDataExtras_Fake : public FStoreItemDataExtras
{
    class UTexture2D* mpFakeDataImage;                                                // 0x0000 (size: 0x8)

}; // Size: 0x8

struct FStoreItemDataExtras_Fake_Slideshow : public FStoreItemDataExtras
{
    TArray<FText> mTitlesBySlide;                                                     // 0x0000 (size: 0x10)
    TArray<class UTexture2D*> mImagesBySlide;                                         // 0x0010 (size: 0x10)
    TArray<FString> mCommandsBySlide;                                                 // 0x0020 (size: 0x10)
    TArray<FText> mSectionsBySlide;                                                   // 0x0030 (size: 0x10)
    FString mDependantItem;                                                           // 0x0040 (size: 0x10)
    FString mNOTDependantItem;                                                        // 0x0050 (size: 0x10)

}; // Size: 0x60

struct FStoreItemDataExtras_PrizePack : public FStoreItemDataExtras
{
    TMap<EFaction, int32> mQuantityByFaction;                                         // 0x0000 (size: 0x50)
    EItemRarity mMinRarity;                                                           // 0x0050 (size: 0x1)
    ESeasonalEventType mSeasonalEventType;                                            // 0x0051 (size: 0x1)

}; // Size: 0x58

struct FStoreItemDataExtras_Streak : public FStoreItemDataExtras
{
    ECurrencyType mCurrencyType;                                                      // 0x0000 (size: 0x1)
    EStreakRewardTimeFrame mStreakRewardTimeFrame;                                    // 0x0001 (size: 0x1)
    int32 mBaseAmount;                                                                // 0x0004 (size: 0x4)
    float mStreakModifer;                                                             // 0x0008 (size: 0x4)
    int32 mMaxStreak;                                                                 // 0x000C (size: 0x4)
    int32 mCurrentStreak;                                                             // 0x0010 (size: 0x4)
    bool mbClaimable;                                                                 // 0x0014 (size: 0x1)
    FString Mid;                                                                      // 0x0018 (size: 0x10)

}; // Size: 0x28

struct FStoreItemPriceData
{
    int32 mHardCurrencyPrice;                                                         // 0x0000 (size: 0x4)
    int32 mSoftCurrencyPrice;                                                         // 0x0004 (size: 0x4)
    int32 mOriginalHardCurrencyPrice;                                                 // 0x0008 (size: 0x4)
    int32 mOriginalSoftCurrencyPrice;                                                 // 0x000C (size: 0x4)
    FString mSKUPriceLookup;                                                          // 0x0010 (size: 0x10)

}; // Size: 0x20

struct FStoreItemTileData
{
    FText mTitle;                                                                     // 0x0000 (size: 0x18)
    int32 mHardCost;                                                                  // 0x0018 (size: 0x4)
    int32 mSoftCost;                                                                  // 0x001C (size: 0x4)
    int32 mRealCost;                                                                  // 0x0020 (size: 0x4)
    FString mRealCostCurrencyCode;                                                    // 0x0028 (size: 0x10)
    FString mGUID;                                                                    // 0x0038 (size: 0x10)
    TSoftObjectPtr<UTexture2D> mpTexture;                                             // 0x0048 (size: 0x28)
    bool mbRenderTextureAsMovieType;                                                  // 0x0070 (size: 0x1)
    bool mbHardCostValid;                                                             // 0x0071 (size: 0x1)
    bool mbSoftCostValid;                                                             // 0x0072 (size: 0x1)
    bool mbRealCostValid;                                                             // 0x0073 (size: 0x1)
    int32 mBundleQuantity;                                                            // 0x0074 (size: 0x4)
    int32 mCurrentRow;                                                                // 0x0078 (size: 0x4)
    EStoreItemTileType mTileType;                                                     // 0x007C (size: 0x1)
    EItemRarity mTileRarity;                                                          // 0x007D (size: 0x1)
    FText mItemCategory;                                                              // 0x0080 (size: 0x18)
    FUtcDateTime mItemExpiryTime;                                                     // 0x0098 (size: 0x4)

}; // Size: 0xA0

struct FStorePageStruct
{
    FString mPageName;                                                                // 0x0000 (size: 0x10)
    int32 mPageOrder;                                                                 // 0x0010 (size: 0x4)
    FString mOwningPageName;                                                          // 0x0028 (size: 0x10)

}; // Size: 0x38

struct FStoreSKUData
{
    int32 mRCPrice;                                                                   // 0x0000 (size: 0x4)
    FString mSKU;                                                                     // 0x0008 (size: 0x10)
    int32 mUSDPriceCents;                                                             // 0x0018 (size: 0x4)
    TArray<FGrantable> mContainedGrantables;                                          // 0x0020 (size: 0x10)
    FString mCurrencyCode;                                                            // 0x0030 (size: 0x10)
    FText mName;                                                                      // 0x0040 (size: 0x18)
    FText mDescription;                                                               // 0x0058 (size: 0x18)
    FString mCategory;                                                                // 0x0070 (size: 0x10)
    TArray<FString> mContainedSKUs;                                                   // 0x0080 (size: 0x10)
    FString mEpicOfferId;                                                             // 0x0090 (size: 0x10)
    FString mEpicCatalogItemId;                                                       // 0x00A0 (size: 0x10)
    uint32 mSteamAppID;                                                               // 0x00B0 (size: 0x4)
    int32 mSteamOverlayToStoreFlag;                                                   // 0x00B4 (size: 0x4)
    EStoreSKUDataType mSKUType;                                                       // 0x00B8 (size: 0x1)
    bool mbEpicLocalizedPricePopulated;                                               // 0x00B9 (size: 0x1)
    bool mbAlreadyOwn;                                                                // 0x00BA (size: 0x1)

}; // Size: 0xC0

struct FStringOfBits
{
    FString mStringOfBits;                                                            // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FStunContext
{
    float mStunTimeRemaining;                                                         // 0x0000 (size: 0x4)
    float mStunResistanceTimeRemaining;                                               // 0x0004 (size: 0x4)
    float mStunResistanceMultiplier;                                                  // 0x0008 (size: 0x4)

}; // Size: 0xC

struct FSuggestionData : public FTableRowBase
{
    FString SuggestionID;                                                             // 0x0008 (size: 0x10)
    FString SuggestionTypes;                                                          // 0x0018 (size: 0x10)
    FString ReferenceWidget;                                                          // 0x0028 (size: 0x10)
    FString ScreenID;                                                                 // 0x0038 (size: 0x10)
    FString BodyTextLocString;                                                        // 0x0048 (size: 0x10)
    FString BodyWidget;                                                               // 0x0058 (size: 0x10)

}; // Size: 0x68

struct FTPCharFacialAnimData
{
    bool mbFacialEyesClosed;                                                          // 0x0000 (size: 0x1)
    bool mbFrustrated;                                                                // 0x0001 (size: 0x1)
    bool mbInPain;                                                                    // 0x0002 (size: 0x1)
    bool mbSuccess;                                                                   // 0x0003 (size: 0x1)
    bool mbScared;                                                                    // 0x0004 (size: 0x1)
    bool mbConcentrated;                                                              // 0x0005 (size: 0x1)
    bool mbIsScreaming;                                                               // 0x0006 (size: 0x1)
    bool mbDetermined;                                                                // 0x0007 (size: 0x1)
    bool mbSmiling;                                                                   // 0x0008 (size: 0x1)
    bool mbPanting;                                                                   // 0x0009 (size: 0x1)
    FVector2D mEyesLook;                                                              // 0x000C (size: 0x8)
    bool mbShouldUseBlinks;                                                           // 0x0014 (size: 0x1)
    bool mbIsPlayingUniqueAnim;                                                       // 0x0015 (size: 0x1)

}; // Size: 0x18

struct FTPCharStateData
{
    bool mbShouldPlayInjured;                                                         // 0x0000 (size: 0x1)
    bool mbHasValidHidePoint;                                                         // 0x0001 (size: 0x1)
    bool mbHasValidSearchablePoint;                                                   // 0x0002 (size: 0x1)
    bool mbIsReviving;                                                                // 0x0003 (size: 0x1)
    bool mbIsHealing;                                                                 // 0x0004 (size: 0x1)
    bool mbIsInMedkitHealingAnimSequence;                                             // 0x0005 (size: 0x1)
    bool mbReceivingHealing;                                                          // 0x0006 (size: 0x1)
    bool mbIsCowering;                                                                // 0x0007 (size: 0x1)
    bool mbIsSubdued;                                                                 // 0x0008 (size: 0x1)
    bool mbIsBeingFeastedOn;                                                          // 0x0009 (size: 0x1)
    bool mbIsBeingResurrected;                                                        // 0x000A (size: 0x1)
    bool mbIsPlayingResurrectOutro;                                                   // 0x000B (size: 0x1)
    bool mbIsTransforming;                                                            // 0x000C (size: 0x1)
    bool mbIsGrabbingPickup;                                                          // 0x000D (size: 0x1)
    EPickupHeightType mPickupHeight;                                                  // 0x000E (size: 0x1)
    bool mbIsUsingPickup;                                                             // 0x000F (size: 0x1)
    bool mbIsTradeGivingPickup;                                                       // 0x0010 (size: 0x1)
    bool mbIsPlacingPickup;                                                           // 0x0011 (size: 0x1)
    EPickupType mGrabbingPickupType;                                                  // 0x0012 (size: 0x1)
    EPickupType mUsingPickupType;                                                     // 0x0013 (size: 0x1)
    bool mbInHideSequence;                                                            // 0x0014 (size: 0x1)
    EHideMoveType mHideSpeedType;                                                     // 0x0015 (size: 0x1)
    EHideObjectType mHideObjectType;                                                  // 0x0016 (size: 0x1)
    EHideState mHideState;                                                            // 0x0017 (size: 0x1)
    bool mbIsEmoting;                                                                 // 0x0018 (size: 0x1)
    bool mbIsInCraftingAnimSequence;                                                  // 0x0019 (size: 0x1)
    EAnimSpawnableType mCurrentCraftingItemType;                                      // 0x001A (size: 0x1)
    EWeaponTypeEnum mCurrentCraftingWeaponType;                                       // 0x001B (size: 0x1)
    bool mbShouldPlayCraftMinigameFailed;                                             // 0x001C (size: 0x1)
    bool mbShouldPlayCraftComplete;                                                   // 0x001D (size: 0x1)
    bool mbIsDisarmingDoll;                                                           // 0x001E (size: 0x1)
    bool mbIsInSearchingAnimSequence;                                                 // 0x001F (size: 0x1)
    ESearchableType mCurrentSearchablePointType;                                      // 0x0020 (size: 0x1)
    ESearchableType mFinishedSearchableType;                                          // 0x0021 (size: 0x1)
    bool mbIsInSeasonalEventCenterpieceAnimSequence;                                  // 0x0022 (size: 0x1)
    int32 mLobbyPoseIndex;                                                            // 0x0024 (size: 0x4)
    int32 mLobbyPoseVariant;                                                          // 0x0028 (size: 0x4)
    bool mbIsLobbyPoseFlavor;                                                         // 0x002C (size: 0x1)
    FEmoteData mCurrentEmoteData;                                                     // 0x0030 (size: 0x20)
    bool mbIsInMainMenu;                                                              // 0x0050 (size: 0x1)
    bool mbIsInLoadoutScreen;                                                         // 0x0051 (size: 0x1)
    EMenuScreen mCurrentUIMenuScreenType;                                             // 0x0052 (size: 0x1)
    bool mbHasUnsafeClothingEquipped;                                                 // 0x0053 (size: 0x1)
    bool mbIsAnimationUnsafeForFEND;                                                  // 0x0054 (size: 0x1)
    bool mbHasBulkyClothingEquipped;                                                  // 0x0055 (size: 0x1)
    bool mbIsFeastPreviewCharacter;                                                   // 0x0056 (size: 0x1)
    bool mbIsBeingElectrocuted;                                                       // 0x0057 (size: 0x1)
    bool mbIsStaggered;                                                               // 0x0058 (size: 0x1)
    bool mbIsFemale;                                                                  // 0x0059 (size: 0x1)
    bool bIsChaseActive;                                                              // 0x005A (size: 0x1)
    bool bForceRepositioningComplete;                                                 // 0x005B (size: 0x1)
    bool mbIsDispersed;                                                               // 0x005C (size: 0x1)
    bool mbIsRagdoll;                                                                 // 0x005D (size: 0x1)
    class USkeletalMeshComponent* mpRagdollTargetMesh;                                // 0x0060 (size: 0x8)

}; // Size: 0x68

struct FTPMovementData
{
    float mSpeed;                                                                     // 0x0000 (size: 0x4)
    float mDirection;                                                                 // 0x0004 (size: 0x4)
    bool mbInAir;                                                                     // 0x0008 (size: 0x1)
    float mGait;                                                                      // 0x000C (size: 0x4)
    float mPlayRate;                                                                  // 0x0010 (size: 0x4)
    bool mbIsMoving;                                                                  // 0x0014 (size: 0x1)
    bool mbShoudlPlayUpperBody;                                                       // 0x0015 (size: 0x1)
    bool mbShouldPlayUpperNeck;                                                       // 0x0016 (size: 0x1)
    float mAimPitch;                                                                  // 0x0018 (size: 0x4)
    float mAimYaw;                                                                    // 0x001C (size: 0x4)
    FVector2D mLookOffset;                                                            // 0x0020 (size: 0x8)
    FVector2D mEyeLookOffset;                                                         // 0x0028 (size: 0x8)
    FVector2D mLeanRotation;                                                          // 0x0030 (size: 0x8)
    FRotator mProneRotation;                                                          // 0x0038 (size: 0xC)
    bool mbCanEnterProneState;                                                        // 0x0044 (size: 0x1)
    bool mbIsProne;                                                                   // 0x0045 (size: 0x1)
    bool bAllowProneRotation;                                                         // 0x0046 (size: 0x1)
    bool mbIsCrouching;                                                               // 0x0047 (size: 0x1)
    bool mbIsCrouchingModeEnabled;                                                    // 0x0048 (size: 0x1)
    bool mbCanEnterKilledState;                                                       // 0x0049 (size: 0x1)
    bool mbIsDead;                                                                    // 0x004A (size: 0x1)
    bool mbShouldProneFlinch;                                                         // 0x004B (size: 0x1)
    bool mbIsVaulting;                                                                // 0x004C (size: 0x1)
    bool mbWasVaulting;                                                               // 0x004D (size: 0x1)
    EVaultType mVaultType;                                                            // 0x004E (size: 0x1)
    EVaultHeightType mVaultHeightType;                                                // 0x004F (size: 0x1)
    float mTurnInPlaceRotation;                                                       // 0x0050 (size: 0x4)
    FVector2D mHeelHeight;                                                            // 0x0054 (size: 0x8)
    FVector2D mHeelAngle;                                                             // 0x005C (size: 0x8)
    EFallHeightType mFallHeightType;                                                  // 0x0064 (size: 0x1)
    float mFallHeightAlpha;                                                           // 0x0068 (size: 0x4)
    FVector mHitAngleVector;                                                          // 0x006C (size: 0xC)
    float mRecoveryTimer;                                                             // 0x0078 (size: 0x4)
    bool mbSimulateReaction;                                                          // 0x007C (size: 0x1)
    bool mbShouldPlayPanicAnimation;                                                  // 0x007D (size: 0x1)
    float mCrouchDuration;                                                            // 0x0080 (size: 0x4)
    float mPivotFactor;                                                               // 0x0084 (size: 0x4)
    bool mbStaticShieldActive;                                                        // 0x0088 (size: 0x1)
    float mDeltaYawRotation;                                                          // 0x008C (size: 0x4)
    bool mbIsUndead;                                                                  // 0x0090 (size: 0x1)
    ERotationMode mPlayerRotationMode;                                                // 0x0091 (size: 0x1)
    bool mbIsAllowedToCrouch;                                                         // 0x0092 (size: 0x1)

}; // Size: 0x94

struct FTPWeaponStateData
{
    EWeaponTypeEnum mUsingWeaponType;                                                 // 0x0000 (size: 0x1)
    EWeaponTypeEnum mHeldWeaponType;                                                  // 0x0001 (size: 0x1)
    bool mbIsThrowing;                                                                // 0x0002 (size: 0x1)
    bool mbIsAimingMolotov;                                                           // 0x0003 (size: 0x1)
    bool mbIsAimingSlingshot;                                                         // 0x0004 (size: 0x1)
    bool mbIsAimingFlamethrower;                                                      // 0x0005 (size: 0x1)
    bool mbIsAimingPoweredTalisman;                                                   // 0x0006 (size: 0x1)
    bool mbIsUsingStaticShield;                                                       // 0x0007 (size: 0x1)
    bool mbIsUsingActiveStaticShield;                                                 // 0x0008 (size: 0x1)
    bool mbIsInEnergizingAnimSequence;                                                // 0x0009 (size: 0x1)
    bool mbIsAimingDemonSword;                                                        // 0x000A (size: 0x1)
    bool mbFireDemonSword;                                                            // 0x000B (size: 0x1)
    bool mbIsFiringInitialDemonsword;                                                 // 0x000C (size: 0x1)
    bool mbIsAimingRaygun;                                                            // 0x000D (size: 0x1)
    bool mbFireRaygun;                                                                // 0x000E (size: 0x1)
    bool mbIsAimingHolyStaff;                                                         // 0x000F (size: 0x1)
    bool mbFireHolyStaff;                                                             // 0x0010 (size: 0x1)
    bool mbIsHealingSelfWithHolyStaff;                                                // 0x0011 (size: 0x1)
    bool mbIsHealingOtherWithHolyStaff;                                               // 0x0012 (size: 0x1)
    bool mbIsSummoningFlameMine;                                                      // 0x0013 (size: 0x1)
    bool mbIsFiringFlameMine;                                                         // 0x0014 (size: 0x1)
    bool mbIsWeaponHolstered;                                                         // 0x0015 (size: 0x1)
    bool mbIsDiscardingWeapon;                                                        // 0x0016 (size: 0x1)
    bool mbWantsToShootProjectileWeapon;                                              // 0x0017 (size: 0x1)
    bool mbCanUseWeapon;                                                              // 0x0018 (size: 0x1)
    bool mbWeaponUsedUp;                                                              // 0x0019 (size: 0x1)
    bool mbInShootingWeaponAnimSequence;                                              // 0x001A (size: 0x1)
    bool mbJustWoundedEvil;                                                           // 0x001B (size: 0x1)
    bool mbDemonSwordSlashdown;                                                       // 0x001C (size: 0x1)
    bool mbBlendingBackFromShoot;                                                     // 0x001D (size: 0x1)
    float mStaticShieldLean;                                                          // 0x0020 (size: 0x4)
    float mStaticShieldBob;                                                           // 0x0024 (size: 0x4)

}; // Size: 0x28

struct FTeenClothing : public FTableRowBase
{
    TMap<class EMeshSlotVisibility, class FTeenClothingMeshData> mMeshData;           // 0x0008 (size: 0x50)
    TMap<class EMeshSlot, class EMeshSlotVisibility> mHideLayers;                     // 0x0058 (size: 0x50)
    EUISlot mUISlot;                                                                  // 0x00A8 (size: 0x1)
    EMeshSlot mMeshSlot;                                                              // 0x00A9 (size: 0x1)

}; // Size: 0xB0

struct FTeenClothingMeshData
{
    uint32 mVisibilityMask;                                                           // 0x0000 (size: 0x4)
    class USkeletalMesh* mpSkeletalMesh;                                              // 0x0008 (size: 0x8)
    FSkinSkeletalMesh mClothingMesh;                                                  // 0x0010 (size: 0x168)
    TMap<class ESkinSlot, class UTexture2D*> mClothingMasks;                          // 0x0178 (size: 0x50)
    TArray<FName> mClothPhysicsAssetsToReceive;                                       // 0x01C8 (size: 0x10)
    float mClothBlendWeight;                                                          // 0x01D8 (size: 0x4)

}; // Size: 0x1E0

struct FTeenHidePointInfo
{
}; // Size: 0x28

struct FTeenLoadoutPreset : public FTableRowBase
{
    TArray<FName> mDefaultClothing;                                                   // 0x0008 (size: 0x10)

}; // Size: 0x18

struct FTeenPickupInfo
{
}; // Size: 0x38

struct FTeenRecoveryInfo
{
}; // Size: 0x18

struct FTeenSkillInfo
{
}; // Size: 0x40

struct FTeenWeaponInfo
{
}; // Size: 0x18

struct FTextureAssetTable : public FTableRowBase
{
    EHUDTextureIcons KeyType;                                                         // 0x0008 (size: 0x1)
    class UTexture2D* Texture;                                                        // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FTextureAssetTableExtended : public FTableRowBase
{
    EHUDTextureIconsExtended KeyType;                                                 // 0x0008 (size: 0x1)
    class UTexture2D* Texture;                                                        // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FThumbnailCaptureSettings
{
    FTransform AssetTransform;                                                        // 0x0000 (size: 0x30)
    FTransform CameraTransform;                                                       // 0x0030 (size: 0x30)
    FTransform MannequinTrasnform;                                                    // 0x0060 (size: 0x30)
    bool UseMannequin;                                                                // 0x0090 (size: 0x1)
    int32 MannequinPose;                                                              // 0x0094 (size: 0x4)
    float CameraFOV;                                                                  // 0x0098 (size: 0x4)

}; // Size: 0xA0

struct FTierData
{
}; // Size: 0x28

struct FTip : public FTableRowBase
{
    FText TipText;                                                                    // 0x0008 (size: 0x18)
    ETipType TipType;                                                                 // 0x0020 (size: 0x1)
    int32 TriggerCount;                                                               // 0x0024 (size: 0x4)
    int32 MaxTriggerCount;                                                            // 0x0028 (size: 0x4)
    int32 TriggerFrequency;                                                           // 0x002C (size: 0x4)
    int32 RequestCount;                                                               // 0x0030 (size: 0x4)
    float TimeToShow;                                                                 // 0x0034 (size: 0x4)
    float Delay;                                                                      // 0x0038 (size: 0x4)
    class UTexture2D* IconTexture;                                                    // 0x0040 (size: 0x8)
    ETipsVisibilityFlags TipVisiblityLevel;                                           // 0x0048 (size: 0x1)
    FString TipCondition;                                                             // 0x0050 (size: 0x10)

}; // Size: 0x60

struct FTipRequest
{
    FString mRequestTipId;                                                            // 0x0040 (size: 0x10)
    float mRequestTimer;                                                              // 0x0050 (size: 0x4)
    float mRequestLength;                                                             // 0x0054 (size: 0x4)
    float mExpiryTime;                                                                // 0x0058 (size: 0x4)

}; // Size: 0x60

struct FToadAnimInstanceData
{
    bool mbIsLeaping;                                                                 // 0x0000 (size: 0x1)

}; // Size: 0x1

struct FToadArmourPiece
{
    class USkeletalMeshComponent* mpArmourMeshComponent;                              // 0x0000 (size: 0x8)
    class USkeletalMeshComponent* mpBrokenArmourComponent;                            // 0x0008 (size: 0x8)
    class UParticleSystemComponent* mpArmourPieceParticleSystemComponent;             // 0x0010 (size: 0x8)

}; // Size: 0x28

struct FToastInfo
{
}; // Size: 0x28

struct FTrailingDamagePoint
{
}; // Size: 0x10

struct FUtcDateTime
{
}; // Size: 0x4

struct FValueMultiplier
{
    FGameplayTag mValueTag;                                                           // 0x0000 (size: 0x8)
    float mMultiplier;                                                                // 0x0008 (size: 0x4)

}; // Size: 0xC

struct FWeaponAnimInstanceData
{
    bool mbIsInLoadoutScreen;                                                         // 0x0000 (size: 0x1)
    bool mbIsWeaponHolstered;                                                         // 0x0001 (size: 0x1)
    bool mbIsThrowing;                                                                // 0x0002 (size: 0x1)
    bool mbIsWeaponActive;                                                            // 0x0003 (size: 0x1)
    bool mbIsWarmedUp;                                                                // 0x0004 (size: 0x1)
    bool mbIsUsingWeapon;                                                             // 0x0005 (size: 0x1)
    bool mbIsBeingCharged;                                                            // 0x0006 (size: 0x1)
    bool mbIsAimingWepaon;                                                            // 0x0007 (size: 0x1)
    bool mbIsFiringTalisman;                                                          // 0x0008 (size: 0x1)
    FRotator mFrontEndRotation;                                                       // 0x000C (size: 0xC)
    bool mbHolyStaffHealingSelf;                                                      // 0x0018 (size: 0x1)
    bool mbHolyStaffHealingOther;                                                     // 0x0019 (size: 0x1)
    bool mbIsSummoningFlameMine;                                                      // 0x001A (size: 0x1)
    bool mbIsFlameMineDisabled;                                                       // 0x001B (size: 0x1)

}; // Size: 0x1C

struct FWeaponIDToType
{
    FDbItemId mItemID;                                                                // 0x0000 (size: 0x18)
    EWeaponTypeEnum mWeaponType;                                                      // 0x0018 (size: 0x1)

}; // Size: 0x20

struct FWeaponLoadoutData
{
}; // Size: 0x70

struct FWeaponPointValues
{
}; // Size: 0x50

struct FWeaponRewardsCardData
{
    EWeaponTypeEnum mWeaponType;                                                      // 0x0000 (size: 0x1)
    float mCurrentProgress;                                                           // 0x0004 (size: 0x4)
    float mGoalProgress;                                                              // 0x0008 (size: 0x4)
    float mMaxProgress;                                                               // 0x000C (size: 0x4)
    int32 mCurrentLevel;                                                              // 0x0010 (size: 0x4)

}; // Size: 0x14

struct FWeaponTypeDamageStatus
{
    float mAppliedTime;                                                               // 0x0000 (size: 0x4)
    bool mbWasAppliedThisFrame;                                                       // 0x0004 (size: 0x1)
    float mServerHitTimer;                                                            // 0x0008 (size: 0x4)
    float mServerDamageDecayTimer;                                                    // 0x000C (size: 0x4)

}; // Size: 0x10

struct FWeaponTypeToAnimSpawnableItem : public FTableRowBase
{
    EWeaponTypeEnum mWeaponType;                                                      // 0x0008 (size: 0x1)
    TArray<EAnimSpawnableType> mEnumSpawanbleTypeList;                                // 0x0010 (size: 0x10)

}; // Size: 0x20

struct FWeaponUnlockLevels
{
}; // Size: 0x50

struct FWolfAnimInstanceData
{
    bool mbIsHowling;                                                                 // 0x0000 (size: 0x1)
    bool mbIsUsingSense;                                                              // 0x0001 (size: 0x1)

}; // Size: 0x2

class AAIBehaviourSetter : public AActor
{
    TWeakObjectPtr<class ATPChar> mpAICharRef;                                        // 0x0228 (size: 0x8)
    TArray<FGameplayTag> mAIBehaviours;                                               // 0x0230 (size: 0x10)

    void SetBehaviour(FGameplayTag behaviourTag);
    void LinkAICharacter(class ATPChar* pAIChar);
    class UBlackboardComponent* GetBlackBoardFromAIChar();
    class ATPChar* GetAICharacter();
}; // Size: 0x240

class AAIWeaponSpawner : public AActor
{
    bool mbAutoRespawnWeapon;                                                         // 0x0228 (size: 0x1)
    float mAutoRespawnInterval;                                                       // 0x022C (size: 0x4)
    EWeaponTypeEnum mWeaponTypeToSpawn;                                               // 0x0230 (size: 0x1)
    class ATPChar* mpAICharReference;                                                 // 0x0238 (size: 0x8)

    void SpawnWeapon();
    void OnWeaponSpawned(bool bSuccessful);
    void LinkAICharacter(class ATPChar* inAIChar);
    EWeaponTypeEnum GetSelectedWeaponType();
    FText GetLocNameForWeapon(EWeaponTypeEnum weaponType);
    bool CanSpawnWeapon();
}; // Size: 0x240

class AAdrenalinePickup : public APickupBase
{

    void MulticastAllPlayUseAdrenaline();
    void MulticastAllPlayGainAdrenaline();
}; // Size: 0x2F8

class AAnimSpawnableItemBase : public AActor
{
    class USkeletalMeshComponent* mpSkeletalMeshComp;                                 // 0x0220 (size: 0x8)
    class UWorldEffectsManager* mpWorldEffectsManager;                                // 0x0228 (size: 0x8)

    void SetSkeletalMesh(class USkeletalMesh* pSkeletalMesh, class UAnimationAsset* pAnimSequence);
    class USkeletalMeshComponent* GetSkelMesh();
}; // Size: 0x230

class ABaseChar : public ACharacter
{
    ESelectionNavigation mPrevForwardNavigation;                                      // 0x04E0 (size: 0x1)
    ESelectionNavigation mPrevRightNavigation;                                        // 0x04E1 (size: 0x1)
    class AGameplayPC* mpCachedGameplayPC;                                            // 0x04E8 (size: 0x8)
    int32 mSpawnedLobbyIdx;                                                           // 0x04F0 (size: 0x4)
    bool mbAutoEquipLoadout;                                                          // 0x04F4 (size: 0x1)
    class UCharVisualization* mpCharVisualization;                                    // 0x04F8 (size: 0x8)
    FVector mMovementInput;                                                           // 0x0500 (size: 0xC)
    FRotator mLastMovementInputRotation;                                              // 0x050C (size: 0xC)
    FRotator mLastVelocityRotation;                                                   // 0x0518 (size: 0xC)
    float mMoveInputAndVelocityDiff;                                                  // 0x0524 (size: 0x4)
    bool mbManifested;                                                                // 0x0528 (size: 0x1)
    FRotator mLookRotation;                                                           // 0x052C (size: 0xC)
    FVector mLookPosition;                                                            // 0x0538 (size: 0xC)
    float mAimYawRate;                                                                // 0x0544 (size: 0x4)
    float mAimYawDelta;                                                               // 0x0548 (size: 0x4)
    FRotator mTargetRotation;                                                         // 0x054C (size: 0xC)
    FRotator mCharacterRotation;                                                      // 0x0558 (size: 0xC)
    ERotationMode mRotationMode;                                                      // 0x0564 (size: 0x1)
    float mRotationRateMultiplier;                                                    // 0x0568 (size: 0x4)
    FRotator mManualRotation;                                                         // 0x056C (size: 0xC)
    float mManualRotationRate;                                                        // 0x0578 (size: 0x4)
    bool mbUsingManualRotation;                                                       // 0x057C (size: 0x1)
    float mDirection;                                                                 // 0x0580 (size: 0x4)
    FRotator mPreviousVelocityRotation;                                               // 0x0584 (size: 0xC)
    float mPreviousSpeed;                                                             // 0x0590 (size: 0x4)
    FVector mPositionLastPeriod;                                                      // 0x0594 (size: 0xC)
    float mDistanceTravelledOverLastPeriod;                                           // 0x05A0 (size: 0x4)
    float mDistanceTimeCounter;                                                       // 0x05A4 (size: 0x4)
    float mDistanceRollover;                                                          // 0x05A8 (size: 0x4)
    float mDistanceTravelledOverThisPeriodStep;                                       // 0x05AC (size: 0x4)
    float mLastRolloverPercent;                                                       // 0x05B0 (size: 0x4)
    TArray<float> mDistanceValues;                                                    // 0x05B8 (size: 0x10)
    FVector2D mLeanGrounded;                                                          // 0x05C8 (size: 0x8)
    FTransform mSpawnTransform;                                                       // 0x05D0 (size: 0x30)
    ESelectionNavigation mVerticalMenuNav;                                            // 0x0600 (size: 0x1)
    ESelectionNavigation mHorizontalMenuNav;                                          // 0x0601 (size: 0x1)
    ESelectionNavigation mOverrideMenuNav;                                            // 0x0602 (size: 0x1)
    float mMenuNavMovementTimer;                                                      // 0x0604 (size: 0x4)
    float mMenuNavCooldownTimer;                                                      // 0x0608 (size: 0x4)
    class ARoomVolume* mpLastRoomVolume;                                              // 0x0610 (size: 0x8)
    TArray<class ARoomVolume*> mCurrentRoomVolumes;                                   // 0x0618 (size: 0x10)
    float mTimeInNewRoomVolume;                                                       // 0x0628 (size: 0x4)
    TMap<class FString, class bool> mCurrentCameraLocks;                              // 0x0650 (size: 0x50)
    bool mbCanMoveCharacter;                                                          // 0x06A0 (size: 0x1)
    bool mbClientShouldSendMovementData;                                              // 0x06A1 (size: 0x1)
    EFaction mFaction;                                                                // 0x06A2 (size: 0x1)
    class UCorsairPeripheralComponent* mpCorsairPeripheralComponet;                   // 0x06A8 (size: 0x8)
    FBaseCharPostUpdateTickFunction mBaseCharPostUpdateTick;                          // 0x06B8 (size: 0x30)
    bool mbIsTutorialCharacter;                                                       // 0x0718 (size: 0x1)
    bool mbIsFrontEndCharacter;                                                       // 0x0719 (size: 0x1)
    bool mbIsAIControlledCharacter;                                                   // 0x071A (size: 0x1)

    bool UsingManualRotation();
    void UpdateRotationMode();
    void UpdateRotation(float DeltaTime);
    void UpdateMovementFriction();
    void UpdateMovement(float DeltaTime);
    void UpdateMoveAxisInput();
    void UpdateMenuNavigation(float DeltaTime);
    void UpdateMenuAxisInput();
    void UpdateLookAxisInput();
    void UpdateLongHoldInput(float DeltaTime);
    void UpdateInputBuffers(float DeltaTime);
    void UpdateCharacterAuras();
    void SetSpawnTransform(FTransform SpawnTransform);
    void SetSpawnedLobbyIndex(int32 lobbyIdx);
    void SetRotationRateMultiplier(float mulitplier);
    void SetRotationMode(ERotationMode RotationMode);
    void SetIsTutorialCharacter(bool Val);
    void SetIsFrontEndCharacter(bool bSet);
    void SetIsAIControlledCharacter(bool Val);
    void SetFaction(EFaction faction);
    void SetCanMoveCharacter(bool bCanMove);
    void SetCameraLockValue(FString lockName, bool bNewValue);
    void SetAutoEquipLoadout(bool bSet);
    void ServerSetMovementData(FVector movementInput, FRotator lookRotation, FVector lookPosition, FRotator TargetRotation, FRotator characterRotation);
    void ResetAverageDistanceTravelled();
    void RecieveRoomVolumeOverlap(class ARoomVolume* pOverlappedFrame);
    void OnRep_Manifested();
    void OnBufferableAction(EGameActionType ActionType);
    void OnAuraUpdated(FName auraName, bool bAuraActive, class ABaseChar* pLocalViewBaseChar);
    void ModifyCharacterRotation(FRotator TargetRotation, float interpSpeed);
    bool IsTutorialCharacter();
    bool IsReplayView();
    bool IsPlayingInEditor();
    bool IsPauseMenuActive();
    bool IsObserverCharacter();
    bool IsMoving();
    bool IsManifested();
    bool IsLocalOrSpectatorView();
    bool IsInGame();
    bool IsGoodCharacter();
    bool IsFrontEndCharacter();
    bool IsEvilCharacter();
    bool IsAimingPing();
    bool IsAIControlledCharacter();
    bool HasMovementInput();
    float GetWalkSpeed();
    FRotator GetTargetRotation();
    FName GetSpineName();
    FTransform GetSpawnTransform();
    float GetRunSpeed();
    float GetRotationRateMultiplier();
    ERotationMode GetRotationMode();
    class UExtAkComponent* GetPrimaryAkEmitter();
    float GetPingVisibilityRadius();
    float GetMovementInputAndVelocityDiff();
    FVector GetMovementInput();
    float GetManualRotationRate();
    FRotator GetManualRotation();
    FRotator GetLookRotation();
    FVector GetLookPosition();
    class AGameplayHUD* GetLocalGameplayHUD();
    FVector2D GetLeanGrounded();
    FRotator GetLastVelocityRotation();
    FRotator GetLastMovementInputRotation();
    float GetHidePointOffset();
    class AGameplayPS* GetGameplayPS();
    class AGameplayPC* GetGameplayPC(bool bUseCached);
    class AGameplayGS* GetGameplayGS();
    class AGameplayGM* GetGameplayGM();
    float GetDistanceTravelledOverLastPeriod();
    float GetDirection();
    class ARoomVolume* GetCurrentRoomVolume();
    class UCorsairPeripheralComponent* GetCorsairPeripheralComponent();
    UClass* GetClassFromCharacterType(ECharacterType CharacterType);
    class UCharVisualization* GetCharVis();
    FRotator GetCharacterRotation();
    class UCameraComponent* GetCameraComponent();
    float GetBaseSpeed(bool bIgnoreModifiers);
    float GetBasePingVisibilityRadius();
    void DoServerUpdateManualRotation();
    void DoServerSetupManualRotation(FRotator manualRotation, float RotationRate);
    void DoServerSetManifested_WithNotify(bool bSet);
    void DoServerSetCharacterRotationRaw(FRotator NewRot);
    void DoServerReactToScream(class AEvilScreamEffect* pEffect);
    void DoServerDebugKill();
    void DoServerClearManualRotation();
    void DoServerCheckScreams();
    bool CreateCorsairPeripheralComponent();
    void ClientUnregisterInputBindings();
    bool ClientShouldSendMovementData();
    void ClientSetShouldSendMovementData(bool bSet);
    void ClientRegisterInputBindings();
    void ClearRoomVolumeOverlap(class ARoomVolume* pOverlappedFrame);
    bool CanMoveCamera();
    float CalculateVelocityRotationRate();
    float CalculateSpeed();
    float CalculateLocomotionPlayRate();
    void CalculateGroundedLeaningValues();
    float CalculateGaitValue();
    bool AllowTutorialFunctions();
    bool AllowMouseLook();
    bool AllowedToMove();
    bool AllowedToInputBuffer();
    bool AllowDebugKeys();
}; // Size: 0x720

class ABaseHUD : public AHUD
{
    class UNavWidgetManager* mpNavWidgetManager;                                      // 0x0310 (size: 0x8)
    EMenuScreen mPreviousScreen;                                                      // 0x0318 (size: 0x1)
    EMenuScreen mCurrentScreen;                                                       // 0x0319 (size: 0x1)
    EMenuScreen mTransitionOutScreen;                                                 // 0x031A (size: 0x1)
    EMenuScreen mTransitionInScreen;                                                  // 0x031B (size: 0x1)
    class UBaseScreen* mpActiveScreen;                                                // 0x0320 (size: 0x8)
    class UBaseScreen* mpModalReturnScreen;                                           // 0x0328 (size: 0x8)
    class UButtonBarWidget* mpButtonBarWidget;                                        // 0x0330 (size: 0x8)
    TSubclassOf<class UButtonBarWidget> mButtonBarWidget;                             // 0x0338 (size: 0x8)
    class UTipsPanelWidget* mpTipsPanelWidget;                                        // 0x0340 (size: 0x8)
    TSubclassOf<class UTipsPanelWidget> mTipsPanelWidgetClass;                        // 0x0348 (size: 0x8)
    class UDebugVoiceChatWidget* mpDebugVoiceChatWidget;                              // 0x0350 (size: 0x8)
    TSubclassOf<class UDebugVoiceChatWidget> mDebugVoiceChatWidgetClass;              // 0x0358 (size: 0x8)
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0360 (size: 0x8)
    bool mbMasterHUDVisibility;                                                       // 0x0368 (size: 0x1)

    void UpdateCurrentCameraLocation(float Duration);
    void TransitionToScreen(EMenuScreen screen, bool bNoAnimation);
    void ShowScreen(EMenuScreen screen, bool bNoAnimation);
    void SetMasterHUDVisibility(bool bSet);
    void RethinkHUDVisibility();
    void PlayUISound(FString wiseEventStr);
    void OnTransitionOutComplete();
    void OnTransitionInComplete();
    bool IsModalActive();
    bool IsMasterHUDVisible();
    void HideScreen(EMenuScreen screen);
    void HideModal();
    class UExtAkComponent* GetPrimaryAkEmitter();
}; // Size: 0x370

class ABasePC : public APlayerController
{
    float mMouseInvertYScale;                                                         // 0x0570 (size: 0x4)
    float mControllerInvertYScale;                                                    // 0x0574 (size: 0x4)
    float mMouseSensitivity;                                                          // 0x0578 (size: 0x4)
    FVector2D mControllerSensitivity;                                                 // 0x057C (size: 0x8)
    FVector2D mMouseWeaponSensitivity;                                                // 0x0584 (size: 0x8)
    FVector2D mControllerWeaponSensitivity;                                           // 0x058C (size: 0x8)
    bool mbKbdCrouchToggle;                                                           // 0x0594 (size: 0x1)
    bool mbKbdSprintToggle;                                                           // 0x0595 (size: 0x1)
    bool mbControllerCrouchToggle;                                                    // 0x0596 (size: 0x1)
    bool mbControllerSprintToggle;                                                    // 0x0597 (size: 0x1)
    TSubclassOf<class UMatineeCameraShake> mCowerCameraShakeClass;                    // 0x0598 (size: 0x8)
    TSubclassOf<class UMatineeCameraShake> mTalismanBeamCameraShakeClass;             // 0x05A0 (size: 0x8)
    TSubclassOf<class UMatineeCameraShake> mSlingshotCameraShakeClass;                // 0x05A8 (size: 0x8)
    class UMaterialParameterCollection* mLocalViewDataMaterialParameterCollection;    // 0x05B0 (size: 0x8)
    TArray<class UPlayerLoadStep*> mActiveLoadSteps;                                  // 0x05B8 (size: 0x10)

    void SetMouseWeaponSensitivity(FVector2D Sensitivity);
    void SetMouseSensitivity(float Sensitivity);
    void SetMouseInvertYScale(float invertYScale);
    void SetKbdSprintToggle(bool Val);
    void SetKbdCrouchToggle(bool Val);
    void SetControllerWeaponSensitivity(FVector2D Sensitivity);
    void SetControllerSprintToggle(bool Val);
    void SetControllerSensitivity(FVector2D Sensitivity);
    void SetControllerInvertYScale(float invertYScale);
    void SetControllerCrouchToggle(bool Val);
    bool IsKbdSprintToggle();
    bool IsKbdCrouchToggle();
    bool IsControllerSprintToggle();
    bool IsControllerCrouchToggle();
    TEnumAsByte<EHBWorldType> GetWorldType();
    class UAkComponent* GetPlayerCameraAkListener();
    FVector2D GetMouseWeaponSensitivity();
    float GetMouseSensitivity();
    float GetMouseInvertYScale();
    float GetLoadStepsProgress();
    TSubclassOf<class UMatineeCameraShake> GetCowerCameraShake();
    FVector2D GetControllerWeaponSensitivity();
    FVector2D GetControllerSensitivity();
    float GetControllerInvertYScale();
    void ClientSetControllerSettings(bool isEvil);
    void ClientQueueReformLobby();
    bool CheckLoadStepsComplete();
}; // Size: 0x5C8

class ABoxPhysicsProp : public APhysicsPropBase
{
    class UBoxComponent* mpBoxCollision;                                              // 0x0248 (size: 0x8)

}; // Size: 0x250

class ACable : public ASplineTubeActorBase
{
    TArray<FCableLength> mCables;                                                     // 0x0330 (size: 0x10)
    class UStaticMesh* mpCableMesh;                                                   // 0x0340 (size: 0x8)
    float mLengthOffset;                                                              // 0x0348 (size: 0x4)
    float mRandomLength;                                                              // 0x034C (size: 0x4)
    float mRandomTension;                                                             // 0x0350 (size: 0x4)
    float mRandomHeight;                                                              // 0x0354 (size: 0x4)
    int32 mResolutionOffset;                                                          // 0x0358 (size: 0x4)
    int32 mSeed;                                                                      // 0x035C (size: 0x4)
    FRandomStream mRandomStream;                                                      // 0x0360 (size: 0x8)
    class UStaticMesh* mpCableHangerMesh;                                             // 0x0368 (size: 0x8)
    bool bSwapHangerOrientation;                                                      // 0x0370 (size: 0x1)
    float mHangerHeightOffset;                                                        // 0x0374 (size: 0x4)
    TArray<float> mCableRotations;                                                    // 0x0378 (size: 0x10)
    TArray<class USplineComponent*> mpSplineComponentArray;                           // 0x0388 (size: 0x10)
    TArray<class USplineMeshComponent*> mpSplineMeshComponentArray;                   // 0x0398 (size: 0x10)
    TArray<class USceneComponent*> mpSceneComponentArray;                             // 0x03A8 (size: 0x10)
    TArray<class UStaticMeshComponent*> mpCableHangerArray;                           // 0x03B8 (size: 0x10)
    bool bNeedsConstruction;                                                          // 0x03C8 (size: 0x1)

}; // Size: 0x3D0

class ACapsuleCollisionTester : public AActor
{
    class UCapsuleComponent* mpCapsuleComponent;                                      // 0x0220 (size: 0x8)

    void SetCapsuleSize(float HalfHeight, float Radius);
    class UCapsuleComponent* GetCapsuleComponent();
}; // Size: 0x228

class ACinematicEnd : public AActor
{
    class USpringArmComponent* mpCameraBoom;                                          // 0x0220 (size: 0x8)
    class UCameraComponent* mpCameraComponent;                                        // 0x0228 (size: 0x8)
    class ATPChar* mpTPChar;                                                          // 0x0230 (size: 0x8)

}; // Size: 0x2A0

class AClientUpdaterGM : public AGameMode
{
    float mProgress;                                                                  // 0x0308 (size: 0x4)
    bool bShowProgressWidget;                                                         // 0x030C (size: 0x1)

    void ShowInstallerProgress();
    void OnFailureExit();
    void OnChunkInstallFinished(uint32 chunk, bool bSuccess);
    void NotEnoughDiskSpace();
    bool isFirstTimeInstall();
    float GetRequiredDiskSpace();
    void GetRemoteBuildManifest();
    float GetLocalDiskFreeSpace();
    void CheckPrerequisites();
    void CheckPatchAvaliable();
}; // Size: 0x360

class AClientUpdaterHUD : public AHUD
{
}; // Size: 0x320

class ACraftPoint : public APointBase
{
    bool mbIsCrafting;                                                                // 0x02A8 (size: 0x1)
    class AStationBase* mpStationBase;                                                // 0x02B0 (size: 0x8)
    bool mbInitialSetup;                                                              // 0x02B8 (size: 0x1)

    bool IsCrafting();
    class AStationBase* GetOwningStation();
    void DoServerBeginCrafting();
    void DoServerActivate(class ATPChar* pOwningTPChar);
}; // Size: 0x2C0

class ACrossWeapon : public AWeaponBase
{
    class USpotLightComponent* mpSpotLight;                                           // 0x0370 (size: 0x8)
    class UStaticMeshComponent* mpTargetCone;                                         // 0x0378 (size: 0x8)
    class UPointLightComponent* mpPointLightComponent;                                // 0x0380 (size: 0x8)
    class USceneCaptureComponent2D* mpShadowMapCapture;                               // 0x0388 (size: 0x8)
    class UTextureRenderTarget2D* mpShadowMapRenderTarget;                            // 0x0390 (size: 0x8)
    class UMaterialInstance* mpDepthTestMaterialInstance;                             // 0x0398 (size: 0x8)
    class UParticleSystemComponent* mpCrossParticleSystemComponent;                   // 0x03A0 (size: 0x8)
    bool mbDamageActive;                                                              // 0x03A8 (size: 0x1)
    float mCrossActiveTime;                                                           // 0x03AC (size: 0x4)

    void UpdateConeSize();
    void MulticastAllStopCrossActive();
    void MulticastAllPlayCrossActive();
    bool IsDamageActive();
    float GetTimeToMaxEffect();
    class UStaticMeshComponent* GetTargetCone();
    float GetEffectiveRange();
    float GetCrossActiveTime();
}; // Size: 0x3B0

class ACustomCullDistanceVolume : public AVolume
{
    FCustomCullDistanceAutomaticSettings mAutomaticCullDistanceSettings;              // 0x0258 (size: 0x1C)
    TArray<FCustomCullDistanceSizePair> CullDistances;                                // 0x0278 (size: 0x10)
    bool mbUseManualCullDistances;                                                    // 0x0288 (size: 0x1)
    uint8 bEnabled;                                                                   // 0x028C (size: 0x1)
    int32 mPriority;                                                                  // 0x0290 (size: 0x4)
    TArray<class UClass*> mAllowedClasses;                                            // 0x0298 (size: 0x10)

    void UpdateCustomCullDistanceVolumes(class UWorld* pWorld, class AActor* ActorToUpdate, class UPrimitiveComponent* ComponentToUpdate, bool bForceUpdate);
    void OnPreSaveWorld(uint32 SaveFlags, class UWorld* World);
}; // Size: 0x2A8

class ADamageSourcePreview : public AActor
{
    class UItemDataAsset* mpDamageSourceSkin;                                         // 0x0228 (size: 0x8)
    class AActor* mpOverrideAimTarget;                                                // 0x0230 (size: 0x8)
    class UAnimSequence* mpAnimOverride;                                              // 0x0238 (size: 0x8)
    bool mbShowAnimProperties;                                                        // 0x0240 (size: 0x1)
    float mAnimStartPosition;                                                         // 0x0244 (size: 0x4)
    float mAnimPlayRate;                                                              // 0x0248 (size: 0x4)
    bool mbLoopAnim;                                                                  // 0x024C (size: 0x1)
    class AActor* mpDamageSource;                                                     // 0x0250 (size: 0x8)
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0258 (size: 0x8)
    bool mbTickInEditor;                                                              // 0x0260 (size: 0x1)

    void UpdateAnimation();
    void SpawnDamageSource();
    bool ShouldTickInEditor();
    void SetWeaponActive(bool bActive, bool bAlternateMode);
    void SetTickInEditor(bool bTickInEditor);
    void SetDamageSourceSkin(class UItemDataAsset* pDamageSourceSkin);
    class UItemDataAsset* GetDamageSourceSkin();
    void Deactivate();
    void ActivateAlt();
    void Activate();
}; // Size: 0x268

class ADarkShard : public AActor
{
    class UMaterialParameterCollection* mpDarkShardMaterialParameterCollection;       // 0x0288 (size: 0x8)
    class USceneComponent* mpDummyRoot;                                               // 0x0290 (size: 0x8)
    class USceneComponent* mpShardFXContainer;                                        // 0x0298 (size: 0x8)
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x02A0 (size: 0x8)
    class UExtAkComponent* mpUnattenuatedAkEmitter;                                   // 0x02A8 (size: 0x8)
    class UPostProcessComponent* mpPostProcessComponent;                              // 0x02C8 (size: 0x8)
    class UMaterialInstance* mpVHSWorldPostProcessMaterial;                           // 0x02D0 (size: 0x8)
    bool mbCanSpawn;                                                                  // 0x02D8 (size: 0x1)
    class UStaticMeshComponent* mpIconMeshComponent;                                  // 0x02E0 (size: 0x8)
    class UParticleSystemComponent* mpRiftParticleSystem;                             // 0x02E8 (size: 0x8)
    class UParticleSystemComponent* mpRiftBeamParticleSystem;                         // 0x02F0 (size: 0x8)
    float mTeenActivationProgress;                                                    // 0x02F8 (size: 0x4)
    float mEvilActivationProgress;                                                    // 0x02FC (size: 0x4)
    bool mbActivatedLastFrame;                                                        // 0x0300 (size: 0x1)
    float mActivationEffectAlpha;                                                     // 0x0304 (size: 0x4)
    TArray<class ATPChar*> mCharactersActivating;                                     // 0x0308 (size: 0x10)
    float mRevealProgress;                                                            // 0x0318 (size: 0x4)
    float mLifetimeProgress;                                                          // 0x031C (size: 0x4)
    float mExplodingProgress;                                                         // 0x0320 (size: 0x4)
    float mDestroyedProgress;                                                         // 0x0324 (size: 0x4)
    EShardState mShardState;                                                          // 0x0328 (size: 0x1)
    bool mbServerIsQuickCompleteEnabled;                                              // 0x0329 (size: 0x1)
    class UMaterialInterface* mpUnrevealedIconMaterial;                               // 0x0330 (size: 0x8)
    class UMaterialInterface* mpDormantIconMaterial;                                  // 0x0338 (size: 0x8)
    class UMaterialInterface* mpInProgressIconMaterial;                               // 0x0340 (size: 0x8)
    class UMaterialInterface* mpShardActivatedIconMaterial;                           // 0x0348 (size: 0x8)
    bool mbShouldBeVisible;                                                           // 0x0350 (size: 0x1)
    class UCapsuleComponent* mpPingCapsuleCollision;                                  // 0x0358 (size: 0x8)
    bool mbEmpowered;                                                                 // 0x0360 (size: 0x1)

    void UpdateVisuals(float DeltaTime);
    void UpdateRenderCustomDepth();
    void UpdateIcon(float DeltaTime);
    void UpdateAkEmitters();
    void SetShardVisible(bool bSet);
    void OnRep_ShardState();
    void OnRep_IsEmpowered();
    void MulticastAllPlayReveal();
    void MulticastAllPlayDestroy(bool bActivated, bool bIsEvilEffect);
    bool IsShardInProgress();
    bool IsShardActivated();
    bool IsRevealed();
    bool IsQuickCompleteEnabled();
    bool IsPendingReveal();
    bool IsEmpowered();
    bool IsBeingActivated();
    class UExtAkComponent* GetUnattenuatedAkEmitter();
    float GetTeenActivationProgress();
    float GetShardTimeProgressRequired();
    EShardState GetShardState();
    float GetShardProgressFactor();
    class USceneComponent* GetShardFXContainer();
    float GetRevealProgress();
    class UExtAkComponent* GetPrimaryAkEmitter();
    float GetLifetimeProgress();
    float GetIconMeshComponentHeight();
    class UStaticMeshComponent* GetIconMesh();
    float GetEvilActivationProgress();
    float GetDestroyedProgress();
    TArray<class ATPChar*> GetCharactersActivating();
    float GetActivationProgress();
    void DoServerUpdateShardState(float DeltaSeconds);
    void DoServerUpdateActivatingCharacters();
    void DoServerSetShardState(EShardState newState);
    void DoServerSetQuickCompleteEnabled(bool bSet);
    void DoServerSetLifetimeProgress(float Time);
    void DoServerSetEmpowered(bool bNewValue);
    void DoServerSetCharactersActivating(const TArray<class ATPChar*>& pChar);
    void DoServerReveal();
    void DoServerDestroy(bool bWasActivated, bool bIsEvilEffect);
    void DoServerCreateScream(class ATPChar* pOwnerChar);
    void DoServerBeginPendingReveal();
    bool CanSpawn();
}; // Size: 0x368

class ADarkShardListener : public AActor
{
    class UParticleSystemComponent* mpParticleSystemComponent;                        // 0x0220 (size: 0x8)
    class UExtAkComponent* mpPrimaryAkComponent;                                      // 0x0228 (size: 0x8)
    class USkeletalMeshComponent* mpSkeletalMeshComponent;                            // 0x0230 (size: 0x8)
    class UMaterialInstance* mpBloodMaterial;                                         // 0x0238 (size: 0x8)
    bool mbListenerActive;                                                            // 0x0240 (size: 0x1)
    float mTimeBeforeNextBloodDrop;                                                   // 0x0244 (size: 0x4)
    float mActivationProgress;                                                        // 0x0248 (size: 0x4)

    void UpdateEffects(float DeltaSeconds);
    void StopSounds();
    void SetTimeBeforeNextBloodDrop(float timeBeforeNextBloodDrop);
    void SetListenerActive(bool bListenerActive);
    void PlaySounds();
    void OnDarkShardSpawned();
    void OnDarkShardDestroyed();
    bool IsListenerActive();
    float GetTimeBeforeNextBloodDrop();
    class USkeletalMeshComponent* GetSkeletalMeshComponent();
    class UExtAkComponent* GetPrimaryAkEmitter();
    class UParticleSystemComponent* GetParticleSystem();
    class UMaterialInstance* GetBloodMaterial();
    void DropBloodDecal();
}; // Size: 0x250

class ADarkShardSpawner : public AActor
{
    class ADarkShard* mpSpawnedDarkShard;                                             // 0x0220 (size: 0x8)
    class AEvilEnergyPowerup* mpSpawnedEvilEnergy;                                    // 0x0228 (size: 0x8)
    UClass* mpDarkShardClass;                                                         // 0x0230 (size: 0x8)
    UClass* mpEvilEnergyClass;                                                        // 0x0238 (size: 0x8)

    bool HasSpawnedEvilEnergy();
    bool HasSpawnedDarkShard();
    class ADarkShard* GetSpawnedDarkShard();
    class AEvilEnergyPowerup* GetEvilEnergy();
    float GetDistanceScoreToActors(const TArray<class AActor*>& inActors);
    class AEvilEnergyPowerup* DoServerSpawnEvilEnergy();
    class ADarkShard* DoServerSpawnDarkShard();
    void DoServerDestroySpawnedEvilEnergy();
}; // Size: 0x240

class ADecalSpawner : public AActor
{
    class UNiagaraComponent* mpNiagaraSystem;                                         // 0x0220 (size: 0x8)

}; // Size: 0x228

class ADemonSwordProjectile : public AActor
{
    class UParticleSystemComponent* mpTrailParticleSystemComp;                        // 0x0238 (size: 0x8)
    class UParticleSystemComponent* mpExplosionParticleSystemComp;                    // 0x0240 (size: 0x8)
    class UProjectileMovementComponent* mpProjectileMovementComponent;                // 0x0248 (size: 0x8)
    class UTexture2D* mpCollisionDepthTexture;                                        // 0x0250 (size: 0x8)
    class USceneComponent* mpTrailCollisionContainer;                                 // 0x0258 (size: 0x8)
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0260 (size: 0x8)
    class UExtAkComponent* mpTrailAkEmitter;                                          // 0x0268 (size: 0x8)
    class UDecalComponent* mpTrailDecalComponent;                                     // 0x0270 (size: 0x8)
    class UStaticMeshComponent* mpTrailMeshComponent;                                 // 0x0278 (size: 0x8)
    class UAIPerceptionStimuliSourceComponent* mpPerceptionStimuliComponent;          // 0x0280 (size: 0x8)
    bool mbHasHit;                                                                    // 0x0288 (size: 0x1)
    bool mbCleaningUp;                                                                // 0x0289 (size: 0x1)
    FRotator mProjectileRotation;                                                     // 0x028C (size: 0xC)
    bool mbIsHittingEvil;                                                             // 0x0298 (size: 0x1)
    float mServerLifetime;                                                            // 0x029C (size: 0x4)
    bool mbTrailDamageEnabled;                                                        // 0x02A0 (size: 0x1)
    class UDemonSwordSkinDataAsset* mpDemonSwordSkin;                                 // 0x02A8 (size: 0x8)
    FVector mInitialLocation;                                                         // 0x02B0 (size: 0xC)
    float mTimeCleaningUp;                                                            // 0x02BC (size: 0x4)
    float mCurrentMaxTrailLength;                                                     // 0x02C0 (size: 0x4)
    FIntPoint mCollisionDepthTextureDimensions;                                       // 0x02C4 (size: 0x8)
    FVector mCollisionExtent;                                                         // 0x02CC (size: 0xC)
    float mMaxTrailDistance;                                                          // 0x02D8 (size: 0x4)
    TArray<float> mCollisionDistances;                                                // 0x02E0 (size: 0x10)
    TArray<class AFPChar*> mCollidingEvils;                                           // 0x02F0 (size: 0x10)

    void UpdateTrailEmitter();
    void UpdateTrailEffects(float DeltaTime);
    void UpdateTrailCollision(float DeltaTime);
    void OnHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit);
    void MulticastAllStopWhistleSound();
    void MulticastAllStopTrailSound();
    void MulticastAllSetProjectileSpeed(float NewValue);
    void MulticastAllPlayWhistleSound();
    void MulticastAllPlayTrailSound();
    void MulticastAllExplode();
    bool IsTrailDamageEnabled();
    bool IsDamagingEvil();
    bool IsCleaningUp();
    bool HasHit();
    float GetTrailLength();
    float GetMaxSpeed();
    EDamageType GetDamageType();
    float GetBaseProjectileTrailDistance();
    void DoServerUpdateLifetime(float DeltaTime);
    void DoServerSetTrailDamageEnabled(bool bSet);
    void DoServerSetProjectileRotation();
    void DoServerSetLifetime(float LifeTime);
    void DoServerSetIsDamagingEvil(bool bSet);
    void DoServerSetHasHit(bool bSet);
    void DoServerSetCleaningUp(bool bSet);
    float DoServerGetLifetime();
    void DoServerExplode();
    void DoServerExpire();
    void DoServerCheckTrailOverlap(float DeltaSeconds);
    void DoServerCheckScreams();
    void DoServerBeginCleanup(bool bTrailDamageDuringCleanup);
}; // Size: 0x300

class ADemonSwordWeapon : public AProjectileWeaponBase
{
    class UParticleSystemComponent* mpSwipeParticleSystemComponent;                   // 0x0398 (size: 0x8)
    float mSwordAlpha;                                                                // 0x03A0 (size: 0x4)
    bool mbInInitialFireSequence;                                                     // 0x03A4 (size: 0x1)
    bool mbIsInFiringState;                                                           // 0x03A5 (size: 0x1)
    TSubclassOf<class ADemonSwordProjectile> mDemonSwordProjectileClass;              // 0x03A8 (size: 0x8)

    void MulticastAllPlayDemonSwordSlash();
    bool InInitialFireSequence();
    FTransform GetProjectileSpawnTransform();
    float GetProjectileBaseLifetime();
    TSubclassOf<class ADemonSwordProjectile> GetDemonSwordProjectileToSpawn();
    float GetBaseProjectileSpeed();
    void FireSwooshEffect(FName particleEventName);
    void DoServerSetInInitialFireSequence(bool mbValue);
}; // Size: 0x3B0

class ADollMasterChar : public AFPChar
{
    class UAnimMontage* mpDLMRTrapPlacementMontage;                                   // 0x1770 (size: 0x8)
    class UAnimMontage* mpDOLLTrapPlacementMontage;                                   // 0x1778 (size: 0x8)
    class USkeletalMeshComponent* mpTrapPlacementSequenceMesh;                        // 0x1780 (size: 0x8)
    class UParticleSystemComponent* mpChannelingParticleSystem;                       // 0x1788 (size: 0x8)
    UClass* mpTrapClass;                                                              // 0x1790 (size: 0x8)
    UClass* mpDepartParticleBPClass;                                                  // 0x1798 (size: 0x8)
    class USkeletalMeshComponent* mpTrapPlacementVisual;                              // 0x17A0 (size: 0x8)
    class UMaterialInstanceDynamic* mpTrapPlacementMID;                               // 0x17A8 (size: 0x8)
    class UAnimationAsset* mpTrapPlacementVisualIdle;                                 // 0x17B0 (size: 0x8)
    class UCapsuleComponent* mpTrapCharacterSizeCapsule;                              // 0x17B8 (size: 0x8)
    FTransform mLastPlacementTransform;                                               // 0x17C0 (size: 0x30)
    FVector mPlacementLocation;                                                       // 0x17F0 (size: 0xC)
    bool mbShowFinalPlacement;                                                        // 0x17FC (size: 0x1)
    FTransform mFinalPlacementTransform;                                              // 0x1800 (size: 0x30)
    TArray<class ADollMasterTrap*> mTraps;                                            // 0x1830 (size: 0x10)
    class ADollMasterTrap* mpSelectedTrap;                                            // 0x1840 (size: 0x8)
    class ADollMasterTrap* mpFurthestTrap;                                            // 0x1848 (size: 0x8)
    bool mbUsingSelectedTrap;                                                         // 0x1850 (size: 0x1)
    bool mbIsInTrapPlacementSequence;                                                 // 0x1851 (size: 0x1)
    class ADollMinionChar* mpActiveDollMinion;                                        // 0x1858 (size: 0x8)
    float mTrapCooldown;                                                              // 0x1860 (size: 0x4)
    float mSummonCooldown;                                                            // 0x1864 (size: 0x4)
    float mTeleportCooldown;                                                          // 0x1868 (size: 0x4)
    float mTeleportSpeedBoostTimer;                                                   // 0x186C (size: 0x4)
    bool mbTeleportSpeedBoostActive;                                                  // 0x1870 (size: 0x1)
    float mTeleportHitRefreshTimer;                                                   // 0x1874 (size: 0x4)
    float mDoubleTeleportTimer;                                                       // 0x1878 (size: 0x4)
    bool mbDoubleTeleportWindowActive;                                                // 0x187C (size: 0x1)
    bool mbCloseToTrap;                                                               // 0x187D (size: 0x1)
    class UMaterialInterface* mpPossessMaterialInstance;                              // 0x1880 (size: 0x8)
    float mOnReleasePossessPPTimer;                                                   // 0x1888 (size: 0x4)
    float mTimeSinceLastTrapTriggered;                                                // 0x188C (size: 0x4)
    float mTimeSinceLastTeleport;                                                     // 0x1890 (size: 0x4)
    int32 mTrapCountPenalty;                                                          // 0x1898 (size: 0x4)

    void UpdateTrapPlacementVisual();
    void UpdateTrapMeshVisibility();
    void UpdateSelectedTrap();
    void UpdatePossessPostProcess(float DeltaSeconds);
    void StopChannelingAkEvent();
    bool ShowFinalPlacement();
    void ServerSetSelectedTrap(class ADollMasterTrap* pTrap);
    void PlayTrapTriggerNotifyAkEvent();
    void PlayTrapDisarmNotifyAkEvent();
    void PlayChannelingAkEvent();
    void MulticastAllUpdatePlacementLoop();
    void MulticastAllStopTrapPlacement();
    void MulticastAllPlayTrapTeleport(FVector v3DepartPos, FVector v3ArrivePos, FRotator trapRot);
    void MulticastAllPlayTrapPlacementOutro();
    void MulticastAllPlayTrapPlacementIntro();
    void MulticastAllPlayTrapDisarmNotify();
    void MulticastAllPlayMinionStunNotify();
    void MulticastAllDollMinionRelease();
    void MulticastAllCreateStunHUDAuraIndicator(float TimeRemaining);
    bool IsUsingSelectedTrap();
    bool IsTeleportHitRefreshActive();
    bool IsInTrapPlacementSequence();
    bool IsDoubleTeleportWindowOpen();
    bool IsCloseToTrap();
    bool HasJustTeleportedForSpeedBoost();
    bool HasActiveDollMinion();
    TArray<class ADollMasterTrap*> GetTraps();
    int32 GetTrapCountPenalty();
    float GetTimeSinceLastTeleport();
    float GetTeleportSpeedBonusTimeRemaining();
    float GetTeleportSpeedBonusDuration();
    float GetTeleportSpeedBonus();
    float GetTeleportHitRefreshTimeRemaining();
    float GetTeleportHitRefreshTimer();
    float GetTeleportHitRefreshDuration();
    class ADollMasterTrap* GetSelectedTrap();
    class ADollMasterTrap* GetOldestTrap();
    int32 GetNumTrapsRemaining();
    int32 GetNumTrapsPlaced();
    int32 GetNumSelectableTrapsPlaced();
    int32 GetMaxTraps();
    class ADollMasterTrap* GetFurthestTrap();
    float GetDoubleTeleportWindowDuration();
    float GetDoubleTeleportTimeRemaining();
    int32 GetAvailableTraps();
    class ADollMinionChar* GetActiveDollMinion();
    void DoServerUpdateTraps();
    void DoServerUpdateTrapProximities(float Time);
    void DoServerUpdateTrapPlacement();
    void DoServerUpdateTeleportTimers(float DeltaTime);
    void DoServerThrowTrap();
    bool DoServerTeleport();
    bool DoServerSummon();
    void DoServerStunFromMinionLoss();
    void DoServerSetTrapCountPenalty(int32 trapCountPenalty);
    void DoServerSetTimeSinceLastTrapTriggered(float NewValue);
    void DoServerSetTimeSinceLastTeleport(float Time);
    void DoServerSetTeleportHitRefreshTimer(float Timer);
    void DoServerSetShowFinalPlacement(bool bShow);
    void DoServerSetSelectedTrap(class ADollMasterTrap* pTrap);
    void DoServerSetFurthestTrap(class ADollMasterTrap* pTrap);
    void DoServerSetCloseToTrap(bool bSet);
    void DoServerSetActiveDollMinion(class ADollMinionChar* pDollMinion);
    void DoServerRequestBeginAbilityCharge(int32 abilityIndex);
    void DoServerRequestAbortAbilityCharge(bool bCompleted);
    bool DoServerRemoveTrap();
    class ADollMasterTrap* DoServerPlaceTrapWithTransform(const FTransform& Transform, bool bSetTarget, bool bBeginInactive);
    void DoServerPlaceTrap();
    bool DoServerPerformTrapPlacement();
    void DoServerHandleTrapTriggered(class ADollMasterTrap* pTriggeredTrap);
    float DoServerGetTimeSinceLastTrapTriggered();
    void DoServerDestroyTrap(class ADollMasterTrap* pTrap, ETrapDestroyReason reason);
    void DoServerDestroyOldestTrap(bool bWithPenalty);
    void DoServerDestroyNearbyTraps(class ADollMasterTrap* pNewTrap);
    void DoServerDestroyAllTraps();
    void DoServerDeactivateDoubleTeleport();
    void DoServerBeginSetSelectedTrap(class ADollMasterTrap* pTrap);
    void DoServerAddTrap(class ADollMasterTrap* pTrap);
    bool CanTrap();
    bool CanTeleport();
    bool CanSummon();
    bool CanRemoveTrap();
    bool AllowedToSelectTraps(class AFPChar* pLocalChar);
}; // Size: 0x18A0

class ADollMasterTrap : public AActor
{
    class ATPChar* mpDisarmingTPChar;                                                 // 0x0238 (size: 0x8)
    bool mbIsBeingThrown;                                                             // 0x0240 (size: 0x1)
    bool mbIsSettling;                                                                // 0x0241 (size: 0x1)
    FTransform mThrowTarget;                                                          // 0x0250 (size: 0x30)
    FTransform mThrowStart;                                                           // 0x0280 (size: 0x30)
    FClientSmoothedTimer mThrowTimer;                                                 // 0x02B0 (size: 0x14)
    FTransform mClientThrowStart;                                                     // 0x02D0 (size: 0x30)
    bool mbDidClientSetThrowStart;                                                    // 0x0300 (size: 0x1)
    float mProximityAlpha;                                                            // 0x0304 (size: 0x4)
    class UStaticMeshComponent* mpDetectionMeshComponent;                             // 0x0308 (size: 0x8)
    class USkeletalMeshComponent* mpSkeletalMeshComponent;                            // 0x0310 (size: 0x8)
    class UParticleSystemComponent* mpTriggerParticleSystemComponent;                 // 0x0318 (size: 0x8)
    class UStaticMeshComponent* mpTrapIconMeshComponent;                              // 0x0320 (size: 0x8)
    class UStaticMeshComponent* mpSelectIconMeshComponent;                            // 0x0328 (size: 0x8)
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0330 (size: 0x8)
    class UParticleSystem* mpDestroyedParticleSystem;                                 // 0x0338 (size: 0x8)
    bool mbTriggered;                                                                 // 0x0340 (size: 0x1)
    float mTriggerYaw;                                                                // 0x0344 (size: 0x4)
    float mServerTriggeredTime;                                                       // 0x0348 (size: 0x4)
    class ADollMasterChar* mpDollMaster;                                              // 0x0350 (size: 0x8)
    float mDisarmTime;                                                                // 0x0358 (size: 0x4)
    float mInactiveTimer;                                                             // 0x035C (size: 0x4)
    TArray<class UMaterialInstanceDynamic*> mpDynamicMaterials;                       // 0x0360 (size: 0x10)
    TArray<class UStaticMesh*> mTrapIconMeshes;                                       // 0x0370 (size: 0x10)
    class UMaterialInstance* mpIncorporealMaterialInstance;                           // 0x0380 (size: 0x8)
    class UCurveVector* mpTrapIconScaleCurve;                                         // 0x0388 (size: 0x8)
    bool mbIncorporeal;                                                               // 0x03C0 (size: 0x1)
    bool mbDisarmed;                                                                  // 0x03C1 (size: 0x1)
    bool mbDisarming;                                                                 // 0x03C2 (size: 0x1)
    bool mbSummoning;                                                                 // 0x03C3 (size: 0x1)
    bool mbTeleporting;                                                               // 0x03C4 (size: 0x1)
    bool mbRemoving;                                                                  // 0x03C5 (size: 0x1)
    bool mbIsBeingDestroyed;                                                          // 0x03C6 (size: 0x1)
    float mDestroyTimeRemaining;                                                      // 0x03C8 (size: 0x4)
    class UDollMasterSkinDataAsset* mpDollMasterSkin;                                 // 0x03D0 (size: 0x8)
    FInterpCurveFloat mChargeTimeToAlphaCurve;                                        // 0x03D8 (size: 0x18)
    float mImprovedDetectTimeRemaining;                                               // 0x03F0 (size: 0x4)
    UClass* mpRemovalParticleBPClass;                                                 // 0x03F8 (size: 0x8)

    void UpdateVisuals(float DeltaTime);
    void UpdateVisibility();
    void UpdateTrapStatus(float DeltaSeconds);
    void UpdateRenderMeshAura();
    void UpdatePositioning(float DeltaSeconds);
    void UpdateFacing(float DeltaSeconds);
    void UpdateDisintegration(float DeltaSeconds);
    void UpdateAkEmitters();
    void StopTriggeredAkEvent();
    void SetTeleporting(bool bSet);
    void SetSummoning(bool bSet);
    void SetRemoving(bool bSet);
    void SetDisarming(bool bSet);
    void PlayTriggeredAkEvent();
    void PlayPlaceAkEvent();
    void MulticastAllStopTriggeredAkEvent();
    void MulticastAllSetDetectionMeshScale(FVector v3Scale);
    void MulticastAllPlayTriggered();
    void MulticastAllPlayDestroyed(ETrapDestroyReason reason);
    bool IsTriggered();
    bool IsTeleporting();
    bool IsSummoning();
    bool IsSleepy();
    bool IsSettling();
    bool IsRepositioning();
    bool IsRemoving();
    bool IsIncorporeal();
    bool IsInactive();
    bool IsImprovedDetectActive();
    bool IsDisarming();
    bool IsDisarmed();
    bool IsBeingThrown();
    bool IsBeingDestroyed();
    bool IsActivelyBeingDisarmed();
    bool HasDisarmingTPChar();
    class AFPChar* GetUsingFPChar();
    float GetTriggerYaw();
    class UStaticMeshComponent* GetTrapIconComponent();
    FTransform GetThrowTarget();
    class UStaticMeshComponent* GetSelectIconComponent();
    float GetProximityAlpha();
    class UExtAkComponent* GetPrimaryAkEmitter();
    class USkeletalMeshComponent* GetMesh();
    FVector GetLOSLocation();
    float GetImprovedDetectTimeRemaining();
    class ADollMasterChar* GetDollMaster();
    float GetDisarmTime();
    class ATPChar* GetDisarmingTPChar();
    class UStaticMeshComponent* GetDetectionMeshComponent();
    class UStaticMesh* GetCurrentIconMesh();
    float GetBaseDisarmTime();
    void DoServerUpdatePlacementTarget(float DeltaSeconds);
    void DoServerUpdateLifetime(float DeltaSeconds);
    void DoServerUpdateImprovedDetectTimeRemaining(float DeltaSeconds);
    void DoServerUpdateDetection(float DeltaSeconds);
    void DoServerUpdateCorporeal(float DeltaSeconds);
    void DoServerTrigger(class ATPChar* pTriggerChar);
    void DoServerThrow(const FTransform& targetTransform);
    void DoServerSetTriggerYaw(float triggerYaw);
    void DoServerSetTriggeredTime(float Time);
    void DoServerSetTriggered(bool bSet);
    void DoServerSetThrowTarget(FTransform Transform);
    void DoServerSetSettling(bool bSet);
    void DoServerSetProximityAlpha(float Alpha);
    void DoServerSetIncorporeal(bool bIncorporeal);
    void DoServerSetInactiveTimer(float Time);
    void DoServerSetInactive(float Time);
    void DoServerSetImprovedDetectTimeRemaining(float TimeRemaining);
    void DoServerSetDollMaster(class ADollMasterChar* pDollMaster);
    void DoServerSetDisarmTime(float Time);
    void DoServerSetDisarmingTPChar(class ATPChar* pTPChar);
    void DoServerSetDisarmed(bool bSet);
    void DoServerSetBeingThrown(bool bSet);
    void DoServerOnTrapDisarmed();
    float DoServerGetTriggeredTime();
    void DoServerFinishThrowing();
    void DoServerDeactivate();
    void DoServerBeginDisarming();
    void DoServerBeginDestroy(ETrapDestroyReason reason);
    void DoServerActivate(class ATPChar* pTPChar);
    bool CanBeTriggered();
    bool CanBeSelected();
    bool CanBeDisarmed();
}; // Size: 0x400

class ADollMinionChar : public AFPChar
{
    class ADollMasterChar* mpDollMaster;                                              // 0x1770 (size: 0x8)
    UClass* mpSummonParticleBPClass;                                                  // 0x1778 (size: 0x8)
    UClass* mpReleaseParticleBPClass;                                                 // 0x1780 (size: 0x8)
    class UParticleSystem* mpDestroyedParticleSystem;                                 // 0x1788 (size: 0x8)
    float mActiveTimeRemaining;                                                       // 0x1790 (size: 0x4)
    float mActiveTime;                                                                // 0x1794 (size: 0x4)
    class UMaterialInterface* mpPossessMaterialInstance;                              // 0x1798 (size: 0x8)
    class UMaterialInterface* mpDollLifetimeVignetteMaterial;                         // 0x17A0 (size: 0x8)
    float mOnSpawnPossessPPTimer;                                                     // 0x17A8 (size: 0x4)
    float mSummonCooldown;                                                            // 0x17AC (size: 0x4)
    int32 mNumTeensKnockedDown;                                                       // 0x17B0 (size: 0x4)
    float mDangerSenseFactorLastFrame;                                                // 0x17B4 (size: 0x4)
    bool mbSummonedFromTriggeredTrap;                                                 // 0x17B8 (size: 0x1)

    void UpdatePossessPostProcess(float DeltaSeconds);
    void UpdateLifetimePostProcess();
    void ServerSetSelectedTrap(class ADollMasterTrap* pTrap);
    void ServerRelease();
    void MulticastAllStopLeapIntro();
    void MulticastAllPlayRelease(bool bRetainTrap);
    void MulticastAllPlayLeapIntro();
    void MulticastAllPlayLeap();
    void MulticastAllPerformSummon(FRotator summonRot);
    void MulticastAllCreateStunHUDAuraIndicator(float TimeRemaining);
    class ADollMasterChar* GetDollMaster();
    float GetActiveTimeRemaining();
    float GetActiveTime();
    void DoServerUpdateActiveTimeRemaining(float DeltaSeconds);
    bool DoServerSummon();
    void DoServerSetDollMaster(class ADollMasterChar* pDollMaster);
    void DoServerSetActiveTimeRemaining(float TimeRemaining);
    void DoServerSetActiveTime(float Time);
    void DoServerRequestBeginAbilityCharge(int32 abilityIndex);
    void DoServerRequestAbortAbilityCharge(bool bCompleted);
    void DoServerRelease(bool bRetainTrap);
    void DoServerRefreshActiveTime();
    int32 DoServerGetNumTeensKnockedDown();
    void DoServerBeginSetSelectedTrap(class ADollMasterTrap* pTrap);
    void DoServerAddTeenKnockedDown();
    bool CanSummon();
    bool AllowedToRelease();
}; // Size: 0x17C0

class AEffigyBase : public AActor
{
    class USkeletalMeshComponent* mpMesh;                                             // 0x0238 (size: 0x8)
    EEffigyType mEffigyType;                                                          // 0x0240 (size: 0x1)
    class AFPChar* mpOwningFPChar;                                                    // 0x0248 (size: 0x8)
    TSoftObjectPtr<UNiagaraSystem> mpSquishEffect;                                    // 0x0250 (size: 0x28)
    bool mbVisibility;                                                                // 0x0278 (size: 0x1)
    bool mbIsBeingUsed;                                                               // 0x0279 (size: 0x1)
    bool mbIsBeingCreated;                                                            // 0x027A (size: 0x1)
    class UEffigySkinDataAsset* mpEffigySkinDataAsset;                                // 0x0280 (size: 0x8)

    void MulticastAllSetSkin(class UItemDataAsset* pSkin);
    void MulticastAllPlaySquishParticleEffect();
    bool IsBeingUsed();
    bool IsBeingCreated();
    void GetValidSpawnableEffigyTypes(class AGameplayGS* pGameplayGS, TArray<EEffigyType>& outEffigyTypes);
    ECharacterType GetOwnerEvilCharType();
    class UEffigySkinDataAsset* GetEffigySkinBySeasonalEventType(ESeasonalEventType seasonalEventType);
    UClass* GetClassFromEffigyType(EEffigyType pickupType);
}; // Size: 0x288

class AEffigyOfAgony : public AEffigyBase
{
}; // Size: 0x288

class AEffigyOfDread : public AEffigyBase
{
}; // Size: 0x288

class AEffigyOfPestilence : public AEffigyBase
{
}; // Size: 0x288

class AEffigyOfPower : public AEffigyBase
{
}; // Size: 0x288

class AEffigyOfRage : public AEffigyBase
{
}; // Size: 0x288

class AEnergyPoint : public APointBase
{
    bool mbIsPowered;                                                                 // 0x02C0 (size: 0x1)
    class UStaticMeshComponent* mpStaticMeshComponent;                                // 0x02C8 (size: 0x8)
    class UParticleSystemComponent* mpSparkParticleSystemComponent;                   // 0x02D0 (size: 0x8)
    class UParticleSystemComponent* mpExplosionParticleSystemComponent;               // 0x02D8 (size: 0x8)
    class UParticleSystemComponent* mpArcParticleSystemComponent;                     // 0x02E0 (size: 0x8)
    class UStaticMeshComponent* mpIconMeshComponent;                                  // 0x02E8 (size: 0x8)
    class UStaticMeshComponent* mpElectricArcPositionMeshComponent;                   // 0x02F0 (size: 0x8)
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x02F8 (size: 0x8)
    float mTimeUntilPowered;                                                          // 0x0300 (size: 0x4)
    class UMaterialInstanceDynamic* mpSwitchOn;                                       // 0x0308 (size: 0x8)
    class UMaterialInstanceDynamic* mpSwitchOff;                                      // 0x0310 (size: 0x8)
    class UMaterialInstanceDynamic* mpFuseToggle;                                     // 0x0318 (size: 0x8)
    class ARCCopterElectricity* mpElectricArc;                                        // 0x0320 (size: 0x8)
    float mBaseFailGlowTime;                                                          // 0x0340 (size: 0x4)
    float mFailGlowTimer;                                                             // 0x0344 (size: 0x4)

    void UpdateAkEmitters();
    void SetButtonFuseAudioVisuals(bool bOn);
    void MulticastAllToggleButtonFuses(bool On);
    void MulticastAllPlayExplosion();
    void MulticastAllCreateHUDAuraIndicator();
    bool IsUnpowered();
    bool IsEnergizing();
    bool HasFailureGlow();
    float GetBaseFailGlowTime();
    void DoServerUpdateFailGlowTimer(float DeltaTime);
    void DoServerSetPower(bool bVal);
    void DoServerPowerOff();
    void DoServerFailEnergize(class ATPChar* pTPChar);
    void DoServerBeginEnergizing();
    void DoServerActivate(class ATPChar* pOwningTPChar);
}; // Size: 0x348

class AEntryServerGM : public AGameMode
{
}; // Size: 0x308

class AEntrySplashHUD : public ABaseHUD
{
    TSubclassOf<class USplashScreen> mSplashScreenClass;                              // 0x0370 (size: 0x8)
    class USplashScreen* mpSplashScreen;                                              // 0x0378 (size: 0x8)

}; // Size: 0x380

class AEntrySplashPC : public ABasePC
{
}; // Size: 0x5C8

class AEradicatorBeamEffect : public AActor
{
    class UStaticMeshComponent* mpTargetPyramidScanner;                               // 0x0220 (size: 0x8)
    class USceneComponent* mpScannerPivot;                                            // 0x0228 (size: 0x8)
    class USceneComponent* mpBaseSceneComponent;                                      // 0x0230 (size: 0x8)
    class AEradicatorChar* mpOwner;                                                   // 0x0238 (size: 0x8)
    bool mbIsScanning;                                                                // 0x0240 (size: 0x1)
    TArray<class ATPChar*> mCharsHitThisScan;                                         // 0x0248 (size: 0x10)
    float mScannerOpenTime;                                                           // 0x0258 (size: 0x4)
    float mScannerWarmupTime;                                                         // 0x025C (size: 0x4)
    float mScannerScanTeensTime;                                                      // 0x0260 (size: 0x4)
    float mScannerFadeoutTime;                                                        // 0x0264 (size: 0x4)
    float mScannerSize;                                                               // 0x0268 (size: 0x4)
    float mScannerDepth;                                                              // 0x026C (size: 0x4)
    float mScannerStartAngle;                                                         // 0x0270 (size: 0x4)
    float mScannerEndAngle;                                                           // 0x0274 (size: 0x4)
    bool mbIsMovingScanBeam;                                                          // 0x0278 (size: 0x1)
    float mScanBeamMovementTime;                                                      // 0x027C (size: 0x4)
    class UStaticMeshComponent* mpTargetPyramidMesh;                                  // 0x0280 (size: 0x8)
    float mScanTeenBatchTimer;                                                        // 0x0288 (size: 0x4)

    void UpdateBeam(float DeltaTime);
    void StartScan();
    void StartMovingScanBeam();
    void ShowBeam();
    void SetScanTeenBatchTimer(float NewValue);
    void SetEradOwner(class AEradicatorChar* NewValue);
    void PerformScan();
    void OnScanFinished();
    void OnScanBeamMoveFinished();
    bool IsTargetPyramidOverlappingTPChar(class ATPChar* pChar);
    void HideBeam();
    bool HasLocalAuthority();
    float GetScanTeenBatchTimer();
    class USceneComponent* GetScannerPivot();
    class AEradicatorChar* GetEradOwner();
    float GetDepth();
    void AbortScan();
}; // Size: 0x290

class AEradicatorChar : public AFPChar
{
    class UStateMachineComponent* mpOverlayHUD_StateMachine;                          // 0x1770 (size: 0x8)
    bool mbVehicleMode;                                                               // 0x1778 (size: 0x1)
    bool mbIsScanning;                                                                // 0x1779 (size: 0x1)
    bool mbShowScanBeam;                                                              // 0x177A (size: 0x1)
    class AEradicatorBeamEffect* mpBeamEffect;                                        // 0x1780 (size: 0x8)
    class AEradicatorTargetedSurgeEffect* mpTargetedSurgeEffect;                      // 0x1788 (size: 0x8)
    class UMaterialInterface* mpSkidmarkDecal;                                        // 0x1790 (size: 0x8)
    float mSkidmarkDecalDuration;                                                     // 0x1798 (size: 0x4)
    FVector mSkidmarkDecalSize;                                                       // 0x179C (size: 0xC)
    float mElectricSurgeCooldown;                                                     // 0x17A8 (size: 0x4)
    float mScannerBeamCooldown;                                                       // 0x17AC (size: 0x4)
    float mVehicleModeCooldown;                                                       // 0x17B0 (size: 0x4)
    FRotator mScanBeamProxyRotator;                                                   // 0x17B4 (size: 0xC)
    float mFastSurgeTimeRemaining;                                                    // 0x17C0 (size: 0x4)
    bool mbServerHasSetProxyRotatorForThisScan;                                       // 0x17C4 (size: 0x1)
    FRotator mTargetedSurgeProxyRotator;                                              // 0x17C8 (size: 0xC)
    float mVehicleModeSpeedBoostTimer;                                                // 0x17D4 (size: 0x4)
    bool mbIsVehicleModeAttack;                                                       // 0x17D8 (size: 0x1)
    bool mbWasScanningLastFrame;                                                      // 0x17D9 (size: 0x1)
    float mScanPercentageRemaining;                                                   // 0x17DC (size: 0x4)
    int32 mNumTargetedSurgesRemaining;                                                // 0x17E0 (size: 0x4)
    bool mbHasRecievedClientCameraRotation;                                           // 0x17E4 (size: 0x1)
    int32 mServerNumRotationFramesRecieved;                                           // 0x17E8 (size: 0x4)
    float mCurrentPostProcessScanEffectValue;                                         // 0x17EC (size: 0x4)
    float mCurrentPostProcessSurgeEffectValue;                                        // 0x17F0 (size: 0x4)
    bool mbPlayingElectricAmbient;                                                    // 0x17F4 (size: 0x1)
    bool mbIsWheelEffectActive;                                                       // 0x17F5 (size: 0x1)
    bool mbDidCancelSurge;                                                            // 0x17F6 (size: 0x1)
    class UMaterialInstance* mpEradicatorScanBeamPPMaterial;                          // 0x17F8 (size: 0x8)
    class UMaterialInstance* mpEradicatorVehicleModePPMaterial;                       // 0x1800 (size: 0x8)
    class UMaterialInstance* mpEradicatorTargetedSurgePPMaterial;                     // 0x1808 (size: 0x8)
    TSubclassOf<class AEradicatorBeamEffect> mBeamClass;                              // 0x1810 (size: 0x8)
    TSubclassOf<class AEradicatorTargetedSurgeEffect> mTargetedSurgeClass;            // 0x1818 (size: 0x8)
    TArray<class ATPChar*> mLastPositionTPCharList;                                   // 0x1820 (size: 0x10)
    TArray<FVector> mLastPositionVectorList;                                          // 0x1830 (size: 0x10)
    class UCurveFloat* mpChargeSpeedCurve;                                            // 0x1840 (size: 0x8)
    float mVehicleModeAttackTransformTime;                                            // 0x1848 (size: 0x4)
    float mServerTimeSinceLastModeSwap;                                               // 0x184C (size: 0x4)
    float mServerTimeSinceLastUsedTargetedSurge;                                      // 0x1850 (size: 0x4)
    float mServerTimeSinceLastUsedScanBeam;                                           // 0x1854 (size: 0x4)
    TArray<class ATPChar*> mServerCharsHitOnThisScan;                                 // 0x1858 (size: 0x10)
    bool mbProcessedTeenBatchForThisScan;                                             // 0x1868 (size: 0x1)
    bool mbServerLastScanAborted;                                                     // 0x1869 (size: 0x1)
    bool mSnapshotSurgeFastCharge;                                                    // 0x186A (size: 0x1)
    class UNiagaraSystem* mpSurgeParticleSystem;                                      // 0x1870 (size: 0x8)
    FRotator mClientLastSentSurgeRotation;                                            // 0x1878 (size: 0xC)
    int32 mServerNumHitsWhenLastAfterHitVoiceLineWasSpoken;                           // 0x1884 (size: 0x4)
    TArray<FString> mServerAfterHitVoiceLines;                                        // 0x1888 (size: 0x10)
    TArray<FString> mServerAfterKillVoiceLines;                                       // 0x1898 (size: 0x10)
    TArray<FVector> mMovementVectors;                                                 // 0x18A8 (size: 0x10)
    int32 mMaxNumberOfMovementVectors;                                                // 0x18B8 (size: 0x4)
    float mVehicleModeSpeedBoostMultiplier;                                           // 0x18BC (size: 0x4)
    float mInputClearTimer;                                                           // 0x18C0 (size: 0x4)

    bool WasScanningLastFrame();
    void UpdateVehicleModeMovementVectors(float DeltaTime);
    void UpdateVehicleModeFriction(float DeltaTime);
    void UpdateVehicleEffects(float DeltaTime);
    void UpdateTargetedSurgeEffect(float DeltaTime);
    void UpdateSlideEffects(float DeltaTime);
    void UpdateScannerBeamEffect(float DeltaTime);
    void SpawnSkidmarkDecal();
    bool ShouldShowScanBeam();
    void SetWasScanningLastFrame(bool NewValue);
    void SetIsVehicleModeAttack(bool bNewValue);
    void SetCurrentScanPostProcessEffectValue(float NewValue);
    void SetCurrentPostProcessSurgeValue(float NewValue);
    void SetClientLastSentSurgeRotation(FRotator NewRotation);
    void Server_OnScannerHitCharacter(class ATPChar* pCharHit);
    void Server_OnElectrocuteTargets(const TArray<class ATPChar*>& charsHit, FRotator clientAngle);
    void Server_OnClientScanStarted(FRotator clientAngle);
    void Server_OnClientReportedScanBatchCompleted();
    void ScannerBeam_Scan_Stop();
    void ScannerBeam_Scan_Play();
    void OnRep_VehicleMode();
    void OnAnimNotify_Surge_Release();
    void MulticastAllTargetedSurgeMiss_Play();
    void MulticastAllTargetedSurgeHit_Play();
    void MulticastAllTargeted_Surge_Charge_Stop();
    void MulticastAllTargeted_Surge_Charge_Play();
    void MulticastAllScannerBeam_Charge_Stop();
    void MulticastAllScannerBeam_Charge_Play();
    void MulticastAllScanFinished();
    void MulticastAllPlayVehicleSpeedBoost();
    void MulticastAllPlaySkidSound();
    void MulticastAllPerformTargetedSurge();
    void MulticastAllPerformScan();
    void MulticastAllOnVictoryPlay();
    void MulticastAllOnTeenKill04Play();
    void MulticastAllOnTeenKill03Play();
    void MulticastAllOnTeenKill02Play();
    void MulticastAllOnTeenKill01Play();
    void MulticastAllOnTeenHit02Play();
    void MulticastAllOnTeenHit01Play();
    void MulticastAllModeSwap_Stop();
    void MulticastAllModeSwap_Play();
    void MulticastAbortScanBeamEffect();
    bool IsVehicleModeTransforming();
    bool IsVehicleModeAttack();
    bool IsVehicleMode();
    bool IsScanning();
    bool IsAverageSpeedEnoughToTriggerSlide();
    bool IsAllowedToScanBeam();
    bool IsAllowedToModeSwap();
    bool IsAllowedToElectricSurge();
    bool HasRecievedClientCameraRotation();
    float GetVehicleModeTransformTime();
    float GetVehicleModeSpeedBoostTimeRemaining();
    float GetVehicleModeSpeedBoostTimer();
    float GetTargetedSurgesRemaining();
    FRotator GetTargetedSurgeProxyRotator();
    class AEradicatorTargetedSurgeEffect* GetTargetedSurgeEffect();
    void GetSurgeSize(float& surgeWidth, float& surgeHeight);
    FVector GetSurgePivotScale();
    FRotator GetScanBeamProxyRotator();
    float GetNormalizedAverageSpeedProgress();
    float GetFastSurgeTimeRemaining();
    float GetEradicatorBaseOverchargeTime();
    float GetCurrentScanPostProcessEffectValue();
    float GetCurrentPostProcessSurgeValue();
    FRotator GetClientLastSentSurgeRotation();
    class AEradicatorBeamEffect* GetBeamEffect();
    float GetBaseVehicleModeTransformTime();
    float GetBaseVehicleModeSpeedBoostTime();
    bool DoServerWasLastScanAborted();
    void DoServerUpdateVehicleModeTransformTime(float DeltaTime);
    void DoServerUpdateVehicleModeMovement(float DeltaTime);
    void DoServerUpdateTimeSinceUsedAbility(float DeltaTime);
    void DoServerUpdateTimeSinceLastModeSwap(float DeltaSeconds);
    void DoServerUpdateSpeedBoostTimer(float DeltaTime);
    void DoServerUpdateFastChargeTime(float Delta);
    void DoServerTransformOutOfVehicleMode();
    bool DoServerStartScan();
    void DoServerSetVehicleModeTransformTime(float NewValue);
    void DoServerSetVehicleModeSpeedBoostTimer(float Time);
    void DoServerSetVehicleMode(bool bNewValue);
    void DoServerSetTimeSinceModeSwap(float Val);
    void DoServerSetTimeSinceLastUsedTargetedSurge(float NewValue);
    void DoServerSetTimeSinceLastUsedScanBeam(float NewValue);
    void DoServerSetTargetedSurgeProxyRotator(FRotator NewValue);
    void DoServerSetShouldShowScanBeam(bool bNewValue);
    void DoServerSetScanBeamProxyRotator(FRotator NewValue);
    void DoServerSetProcessedTeenBatchForThisScan(bool bNewValue);
    void DoServerSetNumTargetedSurgesRemaining(int32 NewValue);
    void DoServerSetNumHitsWhenLastAfterHitVoiceLineWasSpoken(int32 numHitsSinceLastAfterHitVoiceLine);
    void DoServerSetLastScanAborted(bool bNewValue);
    void DoServerSetIsScanning(bool bNewValue);
    void DoServerSetHasSetProxyRotatorForThisScan(bool bNewValue);
    void DoServerSetHasRecievedClientCameraRotation(bool bNewValue);
    void DoServerSetFastSurgeTimeRemaining(float Value);
    void DoServerProcessScannedCharacters();
    void DoServerPlayRandomAfterKillVoiceLine();
    void DoServerPlayRandomAfterHitVoiceLine();
    bool DoServerPerformElectricSurge();
    void DoServerOnSurgeHitCharacter(class ATPChar* pChar, bool bUseMultiple);
    void DoServerOnScannerHitCharacter(class ATPChar* pChar);
    void DoServerOnScanFinished();
    void DoServerInputClearTimer(float DeltaTime);
    bool DoServerHasSetProxyRotatorForThisScan();
    bool DoServerHasProcessedTeenBatchForThisScan();
    float DoServerGetTimeSinceModeSwap();
    float DoServerGetTimeSinceLastUsedTargetedSurge();
    float DoServerGetTimeSinceLastUsedScanBeam();
    int32 DoServerGetNumHitsWhenLastAfterHitVoiceLineWasSpoken();
    TArray<FString> DoServerGetAfterKillVoiceLines();
    TArray<FString> DoServerGetAfterHitVoiceLines();
    void DoServerAddSurgeScore(int32 numPlayersHit);
    void DoServerAddScanScore(int32 numPlayersHit);
    bool CanSurgeFastCharge();
    bool AllowedToAttemptSlide();
}; // Size: 0x18D0

class AEradicatorTargetedSurgeEffect : public AEradicatorBeamEffect
{

    void DoClientElectrocuteTargets();
}; // Size: 0x290

class AEventPickup : public APickupBase
{
    EEventPickupType mEventPickupType;                                                // 0x02F8 (size: 0x1)
    class UNiagaraSystem* mpPostUseParticleSystem;                                    // 0x0300 (size: 0x8)

    void SetEventPickupType(EEventPickupType eventPickupType);
    void PostInitializeComponents();
    void MulticastAllSpawnPostUseParticleEmitter();
    void MulticastAllPlayUsed();
    void MulticastAllPlayOnUse();
    class UNiagaraSystem* GetPostUseParticleSystem();
    EEventPickupType GetEventPickupType();
}; // Size: 0x308

class AEvilEnergyPowerup : public APowerupBase
{
    bool mbCanBeHitByEvil;                                                            // 0x0268 (size: 0x1)
    FVector mMeshBaseRelativeLocation;                                                // 0x026C (size: 0xC)
    float mHeightOffset;                                                              // 0x0278 (size: 0x4)
    float mWobbleSpeedMultiplier;                                                     // 0x027C (size: 0x4)
    float mTimeSinceCollection;                                                       // 0x0280 (size: 0x4)
    class UNiagaraComponent* mpMainBodyNiagaraFXComponent;                            // 0x0288 (size: 0x8)
    FSoftObjectPath mMainBodyNiagaraSys;                                              // 0x0290 (size: 0x18)
    FSoftObjectPath mEvilOnlyFlareNiagaraSys;                                         // 0x02A8 (size: 0x18)
    class UStaticMeshComponent* mpAuraMesh;                                           // 0x02C0 (size: 0x8)

    void MulticastAllPlayOnEvilAttacked(class ATPChar* pAbsorbingTPChar);
}; // Size: 0x2D0

class AEvilEventPropBase : public AActor
{
    class USkeletalMeshComponent* mpSkeletalMeshComp;                                 // 0x0240 (size: 0x8)
    class UStaticMeshComponent* mpStaticMesh;                                         // 0x0248 (size: 0x8)
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0250 (size: 0x8)
    FCustomizeSimpleCollisionShape mTriggerCollisionShapeSpecs;                       // 0x0258 (size: 0x28)
    class UNiagaraSystem* mpDestructionEffect;                                        // 0x0280 (size: 0x8)
    class UNiagaraComponent* mpCurrentDestructionEffect;                              // 0x0288 (size: 0x8)
    class UParticleSystem* mpDestructionEffect_Cascade;                               // 0x0290 (size: 0x8)
    FEffectVisibility mEffectVisibility;                                              // 0x0298 (size: 0xB)
    FOmenSpawningSpecs mOmenSpawningSpecs;                                            // 0x02A8 (size: 0x20)
    TArray<class AInteractablePropBase*> mOmenObjects;                                // 0x02C8 (size: 0x10)
    float mOmenLifeTime;                                                              // 0x02D8 (size: 0x4)
    TSoftObjectPtr<UNiagaraSystem> mWispsNiagaraSystem;                               // 0x02E0 (size: 0x28)
    class UNiagaraComponent* mpWispsNiagaraComponent;                                 // 0x0308 (size: 0x8)
    class UShapeComponent* mpTriggerCollision;                                        // 0x0310 (size: 0x8)

    void StopAuraLoop();
    void PlayDestroyed();
    void PlayAuraLoop();
    void MulticastAllSpawnOmens(class AFPChar* pFPChar);
    void MulticastAllPlayEffects();
    void MulticastAllDestroyedOnEvilHit(class AFPChar* pFPChar);
    TArray<class AInteractablePropBase*> GetChildOmenObjects();
    void DoServerSetPropPlacementIndex(int32 newIndex);
    class AEvilEventPropBase* DoServerReplaceWithEventSpecificClass(ESeasonalEventType EventType);
    bool CanBeAttackedByEvil();
    void BP_UpdateVisibility(float DeltaSeconds);
    void BP_OnDestroyedOnEvilHit();
    void BP_DoServerOnHitByEvil(class AFPChar* pEvilSource);
}; // Size: 0x318

class AEvilEventProp_Easter : public AEvilEventPropBase
{
    FSoftObjectPath mEvilEasterNiagaraSystemPath;                                     // 0x0318 (size: 0x18)
    class UNiagaraComponent* mpEvilEasterNiagaraComponent;                            // 0x0330 (size: 0x8)
    FColor mEvilEasterNiagaraColor;                                                   // 0x0338 (size: 0x4)
    TArray<class UMaterialInstance*> mEggMaterials;                                   // 0x0340 (size: 0x10)
    TArray<class UMaterialInstance*> mBrokenEggMaterials;                             // 0x0350 (size: 0x10)
    class UStaticMesh* mpBrokenEggMesh;                                               // 0x0360 (size: 0x8)
    int32 mMaterialIndex;                                                             // 0x0368 (size: 0x4)

    void MulticastAll_SetEvilEasterNiagaraColor(int32 Index);
}; // Size: 0x370

class AEvilEventProp_Halloween : public AEvilEventPropBase
{
}; // Size: 0x318

class AEvilEventProp_Holiday : public AEvilEventPropBase
{
    UClass* mpHeldOrnamentClass;                                                      // 0x0318 (size: 0x8)
    bool mbContainsJackInTheBox;                                                      // 0x0320 (size: 0x1)

    void MulticastAll_PlayOrnamentFound();
    void MulticastAll_PlayJackFound();
    void DoServerSetHeldOrnamentClass(UClass* pClass);
    void DoServerSetContainsJackInTheBox(bool bNewValue);
}; // Size: 0x328

class AEvilPing : public APing
{
    class USpotLightComponent* mpSpotLightComponent;                                  // 0x02D8 (size: 0x8)
    float mSpotlightMaxIntensity;                                                     // 0x02E0 (size: 0x4)
    float mLifetimeSeconds;                                                           // 0x02E4 (size: 0x4)
    bool mbPlayingAmbientAudio;                                                       // 0x02E8 (size: 0x1)

}; // Size: 0x2F0

class AEvilScreamEffect : public AActor
{
    class UEvilScreamDataAsset* mpScreamSkin;                                         // 0x0238 (size: 0x8)
    class UMaterialInstance* mpSurfaceWarpMaterial;                                   // 0x0240 (size: 0x8)
    class UMaterialInstance* mpShockwaveMaterial;                                     // 0x0248 (size: 0x8)
    class UMaterialInstance* mpInvertedShockwaveMaterial;                             // 0x0250 (size: 0x8)
    TArray<FEvilScreamShockwave> mScreamShockwaves;                                   // 0x0258 (size: 0x10)
    class UStaticMeshComponent* mOuterSphereComponent;                                // 0x0268 (size: 0x8)
    class UEvilScreamDataAsset* mpBanismentScreamEffect;                              // 0x0270 (size: 0x8)
    class UEvilScreamDataAsset* mpTeenRiftScreamEffect;                               // 0x0278 (size: 0x8)
    class UEvilScreamDataAsset* mpEvilRiftScreamEffect;                               // 0x0280 (size: 0x8)
    class UStaticMesh* mSphereMesh;                                                   // 0x0288 (size: 0x8)
    class UStaticMesh* mInvertedSphereMesh;                                           // 0x0290 (size: 0x8)
    TArray<class AActor*> mCurrentVictims;                                            // 0x0298 (size: 0x10)
    float mShockwaveTimer;                                                            // 0x02A8 (size: 0x4)
    int32 mShockwavesRemaining;                                                       // 0x02AC (size: 0x4)
    int32 mMaxShockwaves;                                                             // 0x02B0 (size: 0x4)
    float mTritonVerticalOffset;                                                      // 0x02B4 (size: 0x4)
    int32 mLastShockwaveSortPriority;                                                 // 0x02B8 (size: 0x4)
    FPostProcessSettings mPostProcessSettings;                                        // 0x02C0 (size: 0x560)
    bool mbIsScreamActive;                                                            // 0x0820 (size: 0x1)
    EScreamType mScreamType;                                                          // 0x0821 (size: 0x1)
    float mScreamRange;                                                               // 0x0824 (size: 0x4)
    float mEffectDuration;                                                            // 0x0828 (size: 0x4)
    float mSubduedTime;                                                               // 0x082C (size: 0x4)
    bool mbIsEmpoweredScream;                                                         // 0x0830 (size: 0x1)
    bool mbIgnoreTriton;                                                              // 0x0831 (size: 0x1)
    bool mbAllowedToAffectVictims;                                                    // 0x0832 (size: 0x1)
    FPostProcessSettings Settings;                                                    // 0x0840 (size: 0x560)

    bool IsEmpowered();
    bool IsAllowedToAffectVictims();
    float GetTritonVerticalOffset();
    float GetSubduedTime();
    EScreamType GetScreamType();
    float GetScreamRange();
    int32 GetMaxShockwaves();
    float GetEffectDuration();
    TArray<class AActor*> GetCurrentVictims();
    void DoServerSetTritonVerticalOffset(float tritonVerticalOffset);
    void DoServerSetSubduedTime(float Time);
    void DoServerSetScreamType(EScreamType screamType);
    void DoServerSetScreamRange(float Range);
    void DoServerSetMaxShockwaves(int32 maxShockWaves);
    void DoServerSetIsEmpoweredScream(bool bNewValue);
    void DoServerSetIsAllowedToAffectVictims(bool bNewValue);
    void DoServerSetIgnoreTriton(bool bNewValue);
    void DoServerSetEffectDuration(float Duration);
    void ClearShockwaves();
    bool CheckWithinBoundsOfEffect(class AActor* pVictim);
}; // Size: 0xDA0

class AEvilShockwaveEffect : public AActor
{
    class AFPChar* mpOwner;                                                           // 0x0220 (size: 0x8)
    TArray<class ATPChar*> mHitTPChars;                                               // 0x0228 (size: 0x10)
    int32 mNumPlayersHit;                                                             // 0x0238 (size: 0x4)
    float mCurrentRadius;                                                             // 0x023C (size: 0x4)
    float mExpansionRate;                                                             // 0x0240 (size: 0x4)
    float mTimeAlive;                                                                 // 0x0244 (size: 0x4)
    float mMaxRange;                                                                  // 0x0248 (size: 0x4)

    void UpdateVisibility();
    void SetOwningFPChar(class AFPChar* pOwningChar);
    class AFPChar* GetOwningFPChar();
    float GetExpansionRate();
    float GetBaseLifespan();
    void DoServerUpdatePlayerCollision(bool bForceUpdate);
    void DoServerOnHitTPChar(class ATPChar* pCharHit);
}; // Size: 0x250

class AEvilTransformationEffect : public AActor
{
    class UParticleSystemComponent* mpAmbientParticleSystemComponent;                 // 0x0220 (size: 0x8)

}; // Size: 0x228

class AExtAcousticsRuntimeVolume : public AAcousticsRuntimeVolume
{
    float HorizontalTransitionSize;                                                   // 0x0278 (size: 0x4)
    float VerticalTransitionSize;                                                     // 0x027C (size: 0x4)

    void Apply(FVector Position, FAcousticsDesignParams& NewDesignParameters);
}; // Size: 0x280

class AExtAkAmbientSound : public AActor
{
    class UExtAkComponent* mpExtAkComponent;                                          // 0x0228 (size: 0x8)
    bool mStopWhenOwnerIsDestroyed;                                                   // 0x0230 (size: 0x1)
    bool mAutoPost;                                                                   // 0x0231 (size: 0x1)

    void StopAmbientSound();
    void StartAmbientSound();
}; // Size: 0x238

class AExtPlayerStart : public APlayerStart
{
    int32 mNumberOfTimesUsed;                                                         // 0x0250 (size: 0x4)
    bool mbSpawnHere;                                                                 // 0x0254 (size: 0x1)
    EPlayerStartType mStartType;                                                      // 0x0255 (size: 0x1)
    bool mbSelectedByEvil;                                                            // 0x0256 (size: 0x1)
    class AStationBase* mpAssociatedStation;                                          // 0x0258 (size: 0x8)

    void SetSelectedByEvil(bool bNewValue);
    void OnServerSpawnedSomethingHere();
    bool IsSelectedByEvil();
    bool IsAttachedToStation(class AStationBase* StationBase);
    TArray<FVector> GetSpawnPositionsForGroup(int32 NumPlayers);
    int32 GetServerNumberOfTimesUsed();
    EPlayerStartType GetPlayerStartType();
    void ClearServerNumberOfTimesUsed();
}; // Size: 0x260

class AExtWindSource : public AInfo
{
    class UExtWindDirectionalSourceComponent* mpWindSourceComponent;                  // 0x0220 (size: 0x8)

}; // Size: 0x228

class AExtWorldSettings : public AWorldSettings
{
    class UDataTable* mpFogPresetTable;                                               // 0x03A0 (size: 0x8)
    float mMinPercentAdrenalineInSearchables;                                         // 0x03A8 (size: 0x4)
    float mMaxPercentAdrenalineInSearchables;                                         // 0x03AC (size: 0x4)
    float mMinPercentPillsInSearchables;                                              // 0x03B0 (size: 0x4)
    float mMaxPercentPillsInSearchables;                                              // 0x03B4 (size: 0x4)
    float mMinPercentWalkieInSearchables;                                             // 0x03B8 (size: 0x4)
    float mMaxPercentWalkieInSearchables;                                             // 0x03BC (size: 0x4)
    float mMinPercentNoisemakerInSearchables;                                         // 0x03C0 (size: 0x4)
    float mMaxPercentNoisemakerInSearchables;                                         // 0x03C4 (size: 0x4)
    float mMinPercentSmokeBombInSearchables;                                          // 0x03C8 (size: 0x4)
    float mMaxPercentSmokeBombInSearchables;                                          // 0x03CC (size: 0x4)
    float mClockStartTimeHours;                                                       // 0x03D0 (size: 0x4)
    float mClockStartTimeMinutes;                                                     // 0x03D4 (size: 0x4)
    float mClockStartTimeSeconds;                                                     // 0x03D8 (size: 0x4)
    bool mbDebugEnableAllItems;                                                       // 0x03DC (size: 0x1)
    TArray<EMatchModType> mDebugMatchMods;                                            // 0x03E0 (size: 0x10)
    TArray<ESeasonalEventType> mDebugSeasonalEventTypes;                              // 0x03F0 (size: 0x10)
    class ULoadoutManager* mpOverrideLoadoutManager;                                  // 0x0400 (size: 0x8)
    class UCustomizationOverrideSettings* mpDefaultOverrideSettings;                  // 0x0408 (size: 0x8)
    FString mRoomLabelsGeneratorFileToAppend;                                         // 0x0410 (size: 0x10)
    FMatchSettings mDebugMatchSettings;                                               // 0x0420 (size: 0x50)

    bool HasPresetTable();
    FString GetRoomLabelsGeneratorFileToAppend();
    FVector2D GetMinAndMaxPercentForPickupType(EPickupType pickupType);
    class ULoadoutManager* GetLoadoutManagerOverride();
    FRoomFrameFogSettings GetFogPreset(FName PresetName);
    TArray<ESeasonalEventType> GetDebugSeasonalEventTypes();
    FMatchSettings GetDebugMatchSettings();
    TArray<EMatchModType> GetDebugMatchMods();
    class UCustomizationOverrideSettings* GetCustomizationOverrideSettings();
    void GetClockStartData(float& Hours, float& Minutes, float& Seconds);
    bool DoEnableAllItems();
}; // Size: 0x470

class AFEChar : public ABaseChar
{
}; // Size: 0x720

class AFEND_CustomizationFX : public AActor
{
    class AActor* NeonGroupLeft;                                                      // 0x0220 (size: 0x8)
    class AActor* NeonGroupRight;                                                     // 0x0228 (size: 0x8)
    class AActor* NeonGroupLeftShowPosition;                                          // 0x0230 (size: 0x8)
    class AActor* NeonGroupLeftHidePosition;                                          // 0x0238 (size: 0x8)
    class AActor* NeonGroupRightShowPosition;                                         // 0x0240 (size: 0x8)
    class AActor* NeonGroupRightHidePosition;                                         // 0x0248 (size: 0x8)
    TArray<class AActor*> NeonLights;                                                 // 0x0250 (size: 0x10)
    class UDataTable* mpFrontendColorPalette;                                         // 0x02D0 (size: 0x8)

    void SetCustomizeDuckLights(bool bSet, float Duration);
    FFrontEndLightCustomizationPalette GetColorPaletteFromLocalCharType();
}; // Size: 0x2E0

class AFPChar : public ATPChar
{
    TArray<FFPHideMontageData> mFPHideMontages;                                       // 0x1300 (size: 0x10)
    class USpringArmComponent* mpFPCameraBoom;                                        // 0x1310 (size: 0x8)
    class UCameraComponent* mpFPCameraComponent;                                      // 0x1318 (size: 0x8)
    class USkeletalMeshComponent* mpFPMesh;                                           // 0x1320 (size: 0x8)
    class UStaticMeshComponent* mpVictimFinderFrustum;                                // 0x1328 (size: 0x8)
    class UStaticMeshComponent* mpReticleAssistFrustum;                               // 0x1330 (size: 0x8)
    class UStaticMeshComponent* mpSpeedLinesComponent;                                // 0x1338 (size: 0x8)
    class UEvilDamageParticlesComponent* mpEvilDamageParticlesComponent;              // 0x1340 (size: 0x8)
    class UEvilSkinComponent* mpEvilSkinComponent;                                    // 0x1348 (size: 0x8)
    class UNiagaraComponent* mpRageParticlesComponent;                                // 0x1350 (size: 0x8)
    class UNiagaraComponent* mpRageFPParticlesComponent;                              // 0x1358 (size: 0x8)
    class UNiagaraComponent* mpPestilenceEffigyTPParticlesComponent;                  // 0x1360 (size: 0x8)
    class UNiagaraComponent* mpPestilenceEffigyFPParticlesComponent;                  // 0x1368 (size: 0x8)
    class UNiagaraSystem* mpPestilenceEffigyAttackHitParticleSystem;                  // 0x1370 (size: 0x8)
    class UFeastEffectComponent* mpFeastEffectComponent;                              // 0x1378 (size: 0x8)
    class UCapsuleComponent* mpForwardWallDetectionCapsuleComponent;                  // 0x1380 (size: 0x8)
    class UNiagaraComponent* mpFeastNiagaraComponent;                                 // 0x1388 (size: 0x8)
    class UNiagaraComponent* mpFPFeastNiagaraComponent;                               // 0x1390 (size: 0x8)
    class UEvilSeasonalEventComponent* mpEvilSeasonalEventComponent;                  // 0x1398 (size: 0x8)
    TArray<class UBaseEvilAbilityComponent*> mAttachedAbilities;                      // 0x13A0 (size: 0x10)
    class UMaterialParameterCollection* mpEvilDataMaterialParameterCollection;        // 0x13B0 (size: 0x8)
    class UPhysicsAsset* mpHitDetectionPhysicsAsset;                                  // 0x13B8 (size: 0x8)
    bool mDebugForceThirdPersonCamera;                                                // 0x13C0 (size: 0x1)
    TArray<FWeaponTypeDamageStatus> mCurrentWeaponTypeDamageStatus;                   // 0x13C8 (size: 0x10)
    TArray<FRecordedDamage> mCurrentRecordedDamage;                                   // 0x13D8 (size: 0x10)
    FRecordedDamage mLastRecordedDamage;                                              // 0x13E8 (size: 0x38)
    float mIncorporealTimeRemaining;                                                  // 0x1420 (size: 0x4)
    float mIncorporealTime;                                                           // 0x1424 (size: 0x4)
    class ATPChar* mpProjectileOwner;                                                 // 0x1428 (size: 0x8)
    class ATPChar* mpFeastingTarget;                                                  // 0x1430 (size: 0x8)
    bool mbAttackResolving;                                                           // 0x1438 (size: 0x1)
    bool mbHasAttackSucceeded;                                                        // 0x1439 (size: 0x1)
    bool mbHasAttackBounced;                                                          // 0x143A (size: 0x1)
    bool mbIsEnraged;                                                                 // 0x143B (size: 0x1)
    bool mbAttackEnraged;                                                             // 0x143C (size: 0x1)
    bool mbAttackHasPestilenceEffigyBuff;                                             // 0x143D (size: 0x1)
    float mAbilityChargeTime;                                                         // 0x1440 (size: 0x4)
    int32 mSelectedAbilityIndex;                                                      // 0x1444 (size: 0x4)
    int32 mCompletedAbilityIndex;                                                     // 0x1448 (size: 0x4)
    float mDangerSenseFactor;                                                         // 0x144C (size: 0x4)
    bool mbDangerSenseStunOnly;                                                       // 0x1450 (size: 0x1)
    bool mbCanHearCrafting;                                                           // 0x1451 (size: 0x1)
    float mUpdateCanHearCraftingTimer;                                                // 0x1454 (size: 0x4)
    class UMaterialInterface* mpDangerSenseMaterial;                                  // 0x1458 (size: 0x8)
    class UCurveFloat* mpDangerSenseCurve;                                            // 0x1460 (size: 0x8)
    TSubclassOf<class UMatineeCameraShake> mDamagedCameraShakeClass;                  // 0x1468 (size: 0x8)
    class UAnimMontage* mpTPAttackMontage;                                            // 0x1470 (size: 0x8)
    class UAnimMontage* mpFPAttackMontage;                                            // 0x1478 (size: 0x8)
    class UBehaviorTree* mpDefaultAIBehaviorTree;                                     // 0x1480 (size: 0x8)
    class UCurveFloat* mpDecalCurve;                                                  // 0x1488 (size: 0x8)
    class UMaterialInstance* mpIncorporealMaterial;                                   // 0x1490 (size: 0x8)
    float mServerAttackHeldTime;                                                      // 0x1498 (size: 0x4)
    float mLastAttackHeldTime;                                                        // 0x149C (size: 0x4)
    bool mbServerRequestReleaseAttack;                                                // 0x14A0 (size: 0x1)
    bool mbServerTriedHit;                                                            // 0x14A1 (size: 0x1)
    bool mbServerHitWindowOpen;                                                       // 0x14A2 (size: 0x1)
    bool mbClientHasAttackTarget;                                                     // 0x14A3 (size: 0x1)
    bool mbHasClientStartedAttackScan;                                                // 0x14A4 (size: 0x1)
    bool mbScreaming;                                                                 // 0x14A5 (size: 0x1)
    bool mbForwardWallDetected;                                                       // 0x14A6 (size: 0x1)
    class ATPChar* mpSelectedFeastChar;                                               // 0x14A8 (size: 0x8)
    FStunContext mStunContext;                                                        // 0x14B0 (size: 0xC)
    bool mbIsVanquished;                                                              // 0x14BC (size: 0x1)
    TArray<class AActor*> mScanAttackTargets;                                         // 0x14C0 (size: 0x10)
    EWeaponTypeEnum mDamagedWeaponType;                                               // 0x14E8 (size: 0x1)
    EWeaponTypeEnum mTickDamageType;                                                  // 0x14E9 (size: 0x1)
    float mCurrentRage;                                                               // 0x14EC (size: 0x4)
    float mMaxRage;                                                                   // 0x14F0 (size: 0x4)
    float mCurrentVengeance;                                                          // 0x14F4 (size: 0x4)
    float mMaxVengeance;                                                              // 0x14F8 (size: 0x4)
    class AEffigyBase* mpHeldEffigy;                                                  // 0x1500 (size: 0x8)
    EEffigyType mUsingEffigyType;                                                     // 0x1508 (size: 0x1)
    EEffigyType mCreatingEffigyType;                                                  // 0x1509 (size: 0x1)
    TMap<class EEffigyType, class UAnimSequence*> pEffigyTypeToAnimMap;               // 0x1510 (size: 0x50)
    TMap<class EEffigyType, class UAnimSequence*> pEffigyTypeToCreateAnimMap;         // 0x1560 (size: 0x50)
    TMap<class EEffigyType, class UNiagaraSystem*> pEffigyTypeToNiagaraSystemMap;     // 0x15B0 (size: 0x50)
    TSubclassOf<class UHUDEvilOverlayPanel> mpEvilOverlayPanelClass;                  // 0x1600 (size: 0x8)
    int32 mEffigyChargeHits;                                                          // 0x1608 (size: 0x4)
    float mFuryEffigyTimeRemaining;                                                   // 0x1610 (size: 0x4)
    float mPowerEffigyTimeRemaining;                                                  // 0x1614 (size: 0x4)
    float mRotationZLastFrame;                                                        // 0x1618 (size: 0x4)
    float mDeltaRotationZ;                                                            // 0x161C (size: 0x4)
    bool mbServerIsInCombat;                                                          // 0x1620 (size: 0x1)
    float mServerInCombatTimer;                                                       // 0x1624 (size: 0x4)
    float mRaygunRevealTime;                                                          // 0x1628 (size: 0x4)
    float mDemonSwordRevealTime;                                                      // 0x162C (size: 0x4)
    float mLeapTimeRemaining;                                                         // 0x1630 (size: 0x4)
    float mLeapCooldown;                                                              // 0x1634 (size: 0x4)
    TArray<float> mAbilityLockoutTimeRemaining;                                       // 0x1638 (size: 0x10)
    bool mbServerHasAttackReleased;                                                   // 0x1648 (size: 0x1)
    class USceneComponent* mpLeapablesComponent;                                      // 0x1650 (size: 0x8)
    class UCurveFloat* mpLeapHeightCurve;                                             // 0x1658 (size: 0x8)
    class UCurveFloat* mpStunCollisionCapsuleCurve;                                   // 0x1660 (size: 0x8)
    float mStunOutroTimer;                                                            // 0x1668 (size: 0x4)
    FVector mLeapOriginalCameraRelativeLocation;                                      // 0x166C (size: 0xC)
    FVector mLeapStartingAbsoluteLocation;                                            // 0x1678 (size: 0xC)
    bool mbTPMeshVisibleLastFrame;                                                    // 0x1684 (size: 0x1)
    bool mbStartedLeaping;                                                            // 0x1685 (size: 0x1)
    float mLeapTime;                                                                  // 0x1688 (size: 0x4)
    float mLeapFallSpeed;                                                             // 0x168C (size: 0x4)
    class ABaseChar* mpCharacterInLeapPath;                                           // 0x1690 (size: 0x8)
    class UDecalComponent* mpLeapTargetingDecal;                                      // 0x1698 (size: 0x8)
    class UEvilSkinDataAsset* mpEvilSkinDataAsset;                                    // 0x16A0 (size: 0x8)
    TArray<float> mTimeSinceUnsuccessfulAbilityUse;                                   // 0x16A8 (size: 0x10)
    TArray<float> mTimeSinceSuccessfulAbilityUse;                                     // 0x16B8 (size: 0x10)
    TArray<float> mTimeSinceLastAbilityTipShown;                                      // 0x16C8 (size: 0x10)
    TArray<EAbilityUnuseableReason> mLastUnsuccessfulAbilityUseReasons;               // 0x16D8 (size: 0x10)
    float mTimeSinceLastUnsuccessfulAttack;                                           // 0x16E8 (size: 0x4)
    EAbilityUnuseableReason mLastUnsuccessfulAttackUseReason;                         // 0x16EC (size: 0x1)
    float mEvilActionBlockDelayTimer;                                                 // 0x16F0 (size: 0x4)
    TArray<EGameActionType> mBlockedGameActionsList;                                  // 0x16F8 (size: 0x10)
    float mServerFeastDrainEssenseTime;                                               // 0x1708 (size: 0x4)
    float mSlowRecoveryTimeRemaining;                                                 // 0x170C (size: 0x4)
    bool mbWasAnyWeaponTypeJustApplied;                                               // 0x1710 (size: 0x1)
    float mTeenCollisionTimer;                                                        // 0x1714 (size: 0x4)
    float mCurrentFlinchTime;                                                         // 0x1718 (size: 0x4)
    float mBaseFlinchTime;                                                            // 0x171C (size: 0x4)
    class ABaseChar* mpClientVictimChar;                                              // 0x1720 (size: 0x8)
    class AActor* mpClientVictimEvilAttackableObject;                                 // 0x1728 (size: 0x8)
    class ABaseChar* mReticleAssistChar;                                              // 0x1730 (size: 0x8)
    bool mbWasFaceGuarding;                                                           // 0x1738 (size: 0x1)
    ELastHitType mServerLastHitType;                                                  // 0x1739 (size: 0x1)
    bool mbOverrideAllowedToUseEffigies;                                              // 0x173A (size: 0x1)
    FFPCharOnHitTeen mOnHitTeen;                                                      // 0x1758 (size: 0x10)
    void OnHitTeen(class AFPChar* pEvil, class ATPChar* pHitTeen, ELastHitType lastHitType);
    bool mbServerEvilEnergyInView;                                                    // 0x1768 (size: 0x1)
    bool mbHitAttackableObject;                                                       // 0x1769 (size: 0x1)

    bool WasAnyWeaponTypeJustApplied();
    bool ViewTeenAurasAsInvisibleAuras();
    bool UseFPCameraAnimation();
    void UpdateVictimFinderScale(float DeltaSeconds);
    void UpdateUnsuccessfulAbilityUse(float DeltaSeconds);
    void UpdateSuccessfulAbilityUse(float DeltaSeconds);
    void UpdatePeripherals(float DeltaTime);
    void UpdateForwardWallDetection();
    void UpdateFaceGuard();
    void UpdateDangerSenseEffects();
    void UpdateDangerSense();
    void UpdateAttackPlayRate(float DeltaSeconds);
    void StopGroanAkEvent();
    void StopFlinchAkEvent();
    void StopFeastAkEvent();
    void StopDamagedAkEvent();
    void StopAttackChargeAkEvent();
    bool ShouldPlayFaceGuard();
    void SetUsingThirdPersonCamera(bool bSet);
    void SetTimeSinceUnsuccessfulAttackUse(float NewValue);
    void SetTimeSinceUnsuccessfulAbilityUse(int32 abilityIndex, float Time);
    void SetTimeSinceSuccessfulAbilityUse(int32 abilityIndex, float Time);
    void SetTimeSinceLastAbilityTipShown(int32 abilityIndex, float Time);
    void SetReticleAssistChar(class ABaseChar* pAssistChar);
    void SetLastUnsuccessfulAbilityUseReason(int32 abilityIndex, EAbilityUnuseableReason reason);
    void SetHasClientStartedAttackScan(bool bSet);
    void SetForwardWallDetected(bool bSet);
    void SetDangerSenseStunOnly(bool bSet);
    void SetDangerSenseFactor(float Factor);
    void SetClientVictimEvilAttackableObject(class AActor* pAttackableObject);
    void SetClientVictimChar(class ABaseChar* pVictimChar);
    void SetAttackUnuseableReason(EAbilityUnuseableReason NewValue);
    void ServerUseHeldEffigy();
    void ServerSetFeastTarget(class ATPChar* pFeastTarget);
    void ServerSendHasClientStartedAttackScan();
    void ServerRequestStopChargeAbility(int32 abilityIndex);
    void ServerRequestScanAttackTargets(const TArray<class AActor*>& pCandidates);
    void ServerRequestReleaseAttack();
    void ServerRequestBeginChargeAbility(int32 abilityIndex);
    void ServerRequestAttack();
    void ServerRequestAbortFeast();
    void ServerDebugUpdateEffigyHitCount(int32 Val);
    void ServerDebugStun();
    void ServerDebugSetIncorporeal();
    void ServerDebugSetCorporeal();
    void ServerDebugResetAllCooldowns();
    void ServerDebugPerformScream();
    void ServerDebugModifyMainEvilRage(float rageModifier);
    void ServerDebugFlinch();
    void ServerDebugEquipEffigy(EEffigyType effigyType);
    void ServerDebugActivateAllCooldowns();
    void ServerCreateEffigy();
    bool ReceivesCooldownBonusFromScreaming();
    void PlayUseEffigyAkEvent(EEffigyType effigyType);
    void PlayTransformedAkEvent();
    void PlaySlashAkEvent();
    void PlayRecoveredAkEvent();
    void PlayGroanAkEvent();
    void PlayFeastAkEvent();
    void PlayDamagedAkEvent();
    void PlayCreateEffigyReadyAkEvent();
    void PlayCreateEffigyAkEvent(EEffigyType effigyType);
    void PlayAttackChargeAkEvent();
    void PlayAttackAkEvent();
    void OnRep_IsEnraged();
    void OnRep_EffigyChargeHitsChanged();
    void OnRep_CanHearCrafting();
    void OnReleasedInputFeast();
    void OnReleasedAttack();
    void OnPressedInputFeast();
    void OnPressedAttack();
    FOnHitTeenReturnValue OnHitTeen();
    void OnEvilSkinUpdated();
    void MulticastSpawnAttackEffects(class AActor* pOtherActor, class UPrimitiveComponent* pOtherComponent, int32 numDecals, float timeSeed);
    void MulticastAllUnsuccessfulAbilityUse(int32 abilityIndex, EAbilityUnuseableReason reason);
    void MulticastAllSuccessfulAbilityUse(int32 abilityIndex);
    void MulticastAllStopIncorporealWind();
    void MulticastAllStopFlinchAkEvent();
    void MulticastAllShowMonsterMessage(FString Message, float messageDuration);
    void MulticastAllShowDamage(class ATPChar* pDamageOwner, FVector damageOrigin, bool bShowOrigin, EWeaponTypeEnum wepaonType);
    void MulticastAllReleaseAttack(bool bAttackEnraged);
    void MulticastAllPlayWoundedSound();
    void MulticastAllPlayVanquished();
    void MulticastAllPlayUseEffigySound(EEffigyType effigyType);
    void MulticastAllPlayStunned();
    void MulticastAllPlayStigmaWoundSound(EDamageType DamageType);
    void MulticastAllPlayScreamSound();
    void MulticastAllPlayIncorporealWind();
    void MulticastAllPlayFlinchAkEvent();
    void MulticastAllPlayEvilPerkPingSound();
    void MulticastAllPlayEvilEnragedSound();
    void MulticastAllPlayEffigyReadySound();
    void MulticastAllPlayCreateEffigySound(EEffigyType effigyType);
    void MulticastAllPlayBanishmentScream();
    void MulticastAllPerformAttack(bool bAttackEnraged);
    void MulticastAllOnHitTeenChar(class ATPChar* pTeenHit, bool bAttackEnraged);
    void MulticastAllOnEvilWounded(EDamageType DamageType);
    void MulticastAllOnEvilStunEnded();
    void MulticastAllOnEvilBecomeStunned(EDamageType DamageType);
    void MulticastAllOnEvilBecomeIncorporeal();
    void MulticastAllOnEvilBecomeCorporeal();
    void MulticastAllOnEndTransformation();
    void MulticastAllOnEndScream(ELastHitType serverLastHitType);
    void MulticastAllDamagedShake();
    void MulticastAllCreatePickupUseRevealIndicator(class ATPChar* pTargetTPChar, float revealTime);
    void MulticastAllCreateCrowdRevealHUDAuraIndicator(class ATPChar* pTargetTPChar, float Time);
    void MulticastAllBounceAttack(FHitResult bounceHitResult);
    void MulticastAllAbortAttack();
    void MulticastAll_OnPestilenceEffigyAttackHit(FVector HitLocation, FVector hitDirection);
    bool IsWeaponDamageApplied();
    bool IsVanquished();
    bool IsValidAttackTarget(class ATPChar* pTPChar);
    bool IsUsingThirdPersonCamera();
    bool IsUsingEffigy();
    bool IsScreaming();
    bool IsRevealedByRaygun();
    bool IsRevealedByDemonSword();
    bool IsReleasingAttack();
    bool IsRecoveringFromAttack();
    bool IsPowerEffigyActive();
    bool IsMimicking();
    bool IsLeaping();
    bool IsHoldingAttack();
    bool IsForwardWallDetected();
    bool IsFocusing();
    bool IsFlinching();
    bool IsEvilEnergyInView();
    bool IsEvilActionBlockDelayActive();
    bool IsEnraged();
    bool IsEffigyCharged();
    bool IsDangerSenseStunOnly();
    bool IsDamageTypeBeingApplied(EDamageType DamageType);
    bool IsDamageTypeActive(EDamageType DamageType);
    bool IsCreatingEffigy();
    bool IsCharacterInLeapPath(class ABaseChar* pChar);
    bool IsBeingDamaged();
    bool IsBeginningAttack();
    bool IsAttackResolving();
    bool IsAttacking();
    bool IsAttackEnraged();
    bool IsAnyDamageActive();
    bool IsAnyAbilityOnCooldown();
    bool IsAbilityOnCooldown(int32 abilityIndex);
    bool IsAbilityCooldownOverridden(int32 abilityIndex);
    bool HasHitAttackableObject();
    bool HasEffigy();
    bool HasClientStartedAttackScan();
    bool HasAttackSucceeded();
    bool HasAttackBounced();
    bool HasAtLeastOneChargeOfMultichargeAbility(int32 abilityIndex);
    float GetWeaponTypeRunSpeedMultiplier(EWeaponTypeEnum weaponType);
    float GetWeaponTypeRequiredTime(EWeaponTypeEnum weaponType);
    float GetWeaponTypeCompletion(EWeaponTypeEnum weaponType);
    float GetWeaponTypeBaseRunSpeedMultiplier(EWeaponTypeEnum weaponType);
    float GetWeaponTypeAppliedTime(EWeaponTypeEnum weaponType);
    float GetWeaponDirectionalRunSpeedMultiplier(EWeaponTypeEnum weaponType, bool bUseNormal);
    float GetVigilanceExposeTime();
    class UStaticMeshComponent* GetVictimFinderFrustum();
    float GetVengeanceSpeedBonus();
    EEffigyType GetUsingEffigyType();
    float GetTimeUntilNextChargeOfMultipleChargeAbility(int32 abilityIndex);
    float GetTimeToUseAbility(int32 abilityIndex);
    float GetTimeSinceUnsuccessfulAttackUse();
    float GetTimeSinceUnsuccessfulAbilityUse(int32 abilityIndex);
    EWeaponTypeEnum GetTickDamageType();
    float GetTeenCollisionTimer();
    class ATPChar* GetTeenCharMimicking();
    float GetStunTimeRemaining();
    float GetStunTimeMultiplier();
    float GetStunTime();
    float GetStunResistanceTimeRemaining();
    float GetStunResistanceTime();
    float GetStunResistanceMultiplier();
    float GetStunOutroTimer();
    float GetSlowRecoveryTimeRemaining();
    class ATPChar* GetSelectedFeastChar();
    int32 GetSelectedAbilityIndex();
    TArray<class AActor*> GetScanAttackTargets();
    class UStaticMeshComponent* GetReticleAssistFrustum();
    class ABaseChar* GetReticleAssistChar();
    bool GetResonanceCloneVisualSpecs(FResonanceCloneTriggerSpecs& outResonanceSpecs);
    float GetRaygunRevealTime();
    float GetRageSpeedAugmentBonus();
    class UNiagaraComponent* GetRageParticleComponent(bool bFirstPerson);
    float GetPowerEffigyTimeRemaining();
    int32 GetNumSuccessfulHits();
    float GetMinTensionDistance();
    float GetMinAttackHoldTime();
    float GetMaxVengeance();
    float GetMaxTensionDistance();
    float GetMaxRage();
    int32 GetMaxNumChargesForAbility(int32 abilityIndex);
    float GetMaxLeapHeight();
    float GetMaxAttackHoldTime();
    class AFPChar* GetMainEvil(class UObject* pWorldContextObject);
    float GetLeapTimeRemaining();
    float GetLeapSpeedDamaged();
    float GetLeapSpeed();
    float GetLeapMinAccelerationScale();
    float GetLeapMaxAccelerationScale();
    class USceneComponent* GetLeapablesComponent();
    EAbilityUnuseableReason GetLastUnsuccessfulAbilityUseReason(int32 abilityIndex);
    FRecordedDamage GetLastRecordedDamage();
    float GetLastAttackHeldTime();
    float GetIncorporealTimeRemaining();
    float GetIncorporealTime();
    float GetIncorporealSpeed();
    class USkeletalMeshComponent* GetHitDetectionMesh();
    float GetHighestDamagePercentage();
    EEffigyType GetHeldEffigyType();
    class AEffigyBase* GetHeldEffigy();
    float GetFuryEffigyTimeRemaining();
    class USkeletalMeshComponent* GetFPMesh();
    class UAnimMontage* GetFPHideMontage(EHideObjectType hideObjectType);
    class UCameraComponent* GetFPCameraComponent();
    class USpringArmComponent* GetFPCameraBoomComponent();
    float GetFlinchTimeRemaining();
    class ATPChar* GetFeastingTarget();
    class UFeastEffectComponent* GetFeastEffectComponent();
    TArray<class AActor*> GetFeastCandidates();
    float GetEvilActionBlockDelayTimer();
    float GetEvilActionBlockDelay();
    TArray<EEvilAbilityType> GetEvilAbilitiesFromCharacter(ECharacterType CharType);
    int32 GetEffigyChargeHitsRequired();
    int32 GetEffigyChargeHits();
    float GetDisperseSpeed();
    float GetDisintegrationRunSpeed();
    float GetDemonSwordRevealTime();
    float GetDeltaRotationLastFrame();
    float GetDangerSenseRange();
    class AFPChar* GetDangerSenseOrigin();
    float GetDangerSenseMultiplier();
    float GetDangerSenseFactor();
    void GetDangerousActors(TArray<class AActor*>& dangerousActors);
    EWeaponTypeEnum GetDamageWeaponType();
    EDamageType GetDamageTypeCurrentlyAppliedByCharacter(class ABaseChar* pBaseChar);
    float GetDamageTypeCompletion(EDamageType DamageType);
    float GetDamagedRunSpeedMultiplier();
    float GetCurrentVengeance();
    TArray<FRecordedDamage> GetCurrentRecordedDamage();
    float GetCurrentRage();
    int32 GetCurrentNumChargesForAbility(int32 abilityIndex);
    EEffigyType GetCreatingEffigyType();
    float GetCooldownSpeedModifier(float DeltaSeconds, int32 abilityIndex);
    float GetCooldownReductionBonuses(float DeltaSeconds, int32 abilityIndex);
    int32 GetCompletedAbilityIndex();
    class AActor* GetClientVictimEvilAttackableObject();
    class ABaseChar* GetClientVictimChar();
    bool GetCanHearCrafting();
    class UBehaviorTree* GetBehaviorTree();
    FVector GetBaseVictimFinderScale();
    float GetBaseTimeUntilChargeOfMultipleChargeAbility(int32 abilityIndex);
    float GetBaseStunTime();
    float GetBaseRaygunRevealTime();
    float GetBaseLeapTime();
    float GetBaseFlinchTime();
    float GetBaseDemonSwordRevealTime();
    float GetBaseDangerSenseRange();
    EAbilityUnuseableReason GetAttackUnuseableReason();
    float GetAttackRecoverRunSpeed();
    float GetAttackLungeMinAcceleration();
    float GetAttackLungeMaxAcceleration();
    float GetAttackHeldRunSpeed();
    TArray<class UBaseEvilAbilityComponent*> GetAttachedAbilities();
    class AFPChar* GetActiveEvilFPChar(class UObject* pWorldContextObject);
    EGameActionType GetActionTypeForAbilityIndex(int32 Index);
    EAbilityUnuseableReason GetAbilityUnuseableReason(int32 abilityIndex);
    float GetAbilityOnHitLockoutTime(int32 abilityIndex);
    float GetAbilityLockoutRemaining(int32 abilityIndex);
    float GetAbilityCooldownRemaining(int32 abilityIndex);
    float GetAbilityCooldown(int32 abilityIndex);
    float GetAbilityChargeTime();
    float GetAbilityChargeRunSpeed(int32 abilityIndex);
    void GetAbilityChargePercent(float& outPercent, int32& outAbilityIndex);
    void DoServerWeaponHit(float DeltaSeconds, class AActor* pDamagingActor, FVector damageSourceLocation, bool bInstantStrike, bool bIsDirectHit, float timeScalingDuration, float damageDecayDelay);
    bool DoServerWasWeaponTypeAppliedThisFrame(EWeaponTypeEnum weaponType);
    bool DoServerWasAnyWeaponTypeAppliedThisFrame();
    void DoServerUsedEffigy();
    void DoServerUpdateVengeance(float DeltaSeconds);
    void DoServerUpdateUseEffigy(float DeltaTime);
    void DoServerUpdateTeenCollision(float DeltaTime);
    void DoServerUpdateStunResistanceResetTime(float Delta);
    void DoServerUpdateSlowRecoveryTime(float TimeRemaining);
    void DoServerUpdateRecordedDamage(float DeltaSeconds);
    void DoServerUpdateRaygunReveal(float DeltaTime);
    void DoServerUpdateRage(float DeltaSeconds);
    void DoServerUpdateProneReveal(float DeltaTime);
    void DoServerUpdatePowerEffigy(float DeltaTime);
    void DoServerUpdateOpenHitWindow(float DeltaSeconds);
    void DoServerUpdateLeapTimeRemaining(float DeltaSeconds);
    void DoServerUpdateIncorporealTime(float DeltaSeconds);
    void DoServerUpdateHealSenseForEvil(float DeltaTime);
    void DoServerUpdateFuryEffigy(float DeltaTime);
    void DoServerUpdateFlinch(float DeltaTime);
    void DoServerUpdateFeasting(float DeltaSeconds);
    void DoServerUpdateFeastDrainEssense(float DeltaTime);
    void DoServerUpdateDemonSwordReveal(float DeltaTime);
    void DoServerUpdateDamageTime(float DeltaSeconds);
    void DoServerUpdateCrowdReveal(float DeltaTime);
    void DoServerUpdateCreateEffigy(float DeltaTime);
    void DoServerUpdateCombatStatus(float DeltaSeconds);
    void DoServerUpdateCanHearCrafting(float DeltaTime);
    void DoServerUpdateBlockedActionDelay(float DeltaSeconds);
    void DoServerUpdateAbilityLockouts(float DeltaTime);
    void DoServerUpdateAbilityCooldowns(float DeltaSeconds);
    void DoServerUpdateAbilityCharge(float DeltaSeconds);
    bool DoServerTriedHit();
    void DoServerStun();
    void DoServerSpawnBanishmentScream();
    bool DoServerShouldRemoveWeaponForHit();
    void DoServerSetWeaponTypeHitTimer(EWeaponTypeEnum weaponType, float Duration);
    void DoServerSetWeaponTypeDamageDecayTimer(EWeaponTypeEnum weaponType, float Duration);
    void DoServerSetWeaponTypeAppliedTime(EWeaponTypeEnum weaponType, float Time);
    void DoServerSetWasWeaponTypeAppliedThisFrame(EWeaponTypeEnum weaponType, bool bSet);
    void DoServerSetWasAnyWeaponTypeJustApplied(bool bSet);
    void DoServerSetVanquished(bool bSet);
    void DoServerSetTriedHit(bool bSet);
    void DoServerSetTickDamageType(EWeaponTypeEnum tickDamageType);
    void DoServerSetTeenCollisionTimer(float NewValue);
    void DoServerSetStunTimeRemaining(float TimeRemaining);
    void DoServerSetStunResistanceRemaining(float Val);
    void DoServerSetStunResistanceMultiplier(float Val);
    void DoServerSetStunOutroTimer(float Val);
    void DoServerSetStunned(bool bSet);
    void DoServerSetSpawnCooldowns();
    void DoServerSetSlowRecoveryTimeRemaining(float TimeRemaining);
    void DoServerSetSelectedAbilityIndex(int32 Index);
    void DoServerSetScreaming(bool bSet);
    void DoServerSetScanAttackTargets(TArray<class AActor*> pScanAttackTargets);
    void DoServerSetRequestReleaseAttack(bool bSet);
    void DoServerSetRaygunRevealTimeRemaining(float NewValue);
    void DoServerSetPowerEffigyTimeRemaining(float Time);
    void DoServerSetMaxVengeance(float maxVengeance);
    void DoServerSetMaxRage(float maxRage);
    void DoServerSetLeapTimeRemaining(float newLeapTime);
    void DoServerSetLastHitType(ELastHitType lastHitType);
    void DoServerSetLastAttackHeldTime(float Time);
    void DoServerSetIsInCombat(bool bSet);
    void DoServerSetIncorporealTimeRemaining(float TimeRemaining);
    void DoServerSetIncorporealTime(float Time);
    void DoServerSetIncorporeal(float Time);
    void DoServerSetHitWindowOpen(bool bSet);
    void DoServerSetHitAttackableObject(bool bHitAttackableObject);
    void DoServerSetHasAttackSucceeded(bool bSet);
    void DoServerSetHasAttackReleased(bool bNewValue);
    void DoServerSetHasAttackBounced(bool bHasAttackBounced);
    void DoServerSetFuryEffigyTimeRemaining(float Time);
    void DoServerSetFlinchTimeRemaining(float NewValue);
    void DoServerSetFeastingTarget(class ATPChar* pTPChar);
    void DoServerSetFeastDrainEssenseTime(float NewValue);
    void DoServerSetEvilActionBlockDelayTimer(float NewValue);
    void DoServerSetEffigyChargeHits(int32 chargeHits);
    void DoServerSetDemonSwordRevealTimeRemaining(float NewValue);
    void DoServerSetDamagedType(EWeaponTypeEnum tickDamageType);
    void DoServerSetCurrentVengeance(float currentVengeance);
    void DoServerSetCurrentRage(float currentRage);
    void DoServerSetCorporeal();
    void DoServerSetCompletedChargingAbility(int32 abilityIndex);
    void DoServerSetCanHearCrafting(bool bVal);
    void DoServerSetBaseFlinchTime(float Time);
    void DoServerSetAttackResolving(bool bSet);
    void DoServerSetAttackHeldTime(float TimeHeld);
    void DoServerSetAttackHasPestilenceEffigyBuff(bool bNewValue);
    void DoServerSetAttackEnraged(bool bSet);
    void DoServerSetAbilityLockoutRemaining(int32 abilityIndex, float lockoutRemaining);
    void DoServerSetAbilityCooldownRemaining(int32 abilityIndex, float cooldownRemaining);
    void DoServerScreamAttack();
    void DoServerRewardHit(class ATPChar* pTPChar, bool bKnockdown, bool bDead);
    void DoServerRecordDamage(FRecordedDamage damageSource);
    void DoServerReactDamagedByWeapon();
    void DoServerPlayScreamAnimSequence();
    void DoServerOpenHitWindow();
    void DoServerOnTPCharUsedPickup(class ATPChar* pTPChar, EPickupType pickupType);
    void DoServerOnTPCharLeftHidePoint(class AHidePoint* pPoint);
    void DoServerOnEndScream();
    bool DoServerLeap();
    void DoServerLandLeap();
    bool DoServerIsInCombat();
    bool DoServerIsBeingZoned();
    bool DoServerInHitWindow();
    void DoServerHitTPChar(class ATPChar* pHitTPChar);
    void DoServerHideEffigy();
    float DoServerGetWeaponTypeHitTimer(EWeaponTypeEnum weaponType);
    float DoServerGetWeaponTypeDamageDecayTimer(EWeaponTypeEnum weaponType);
    void DoServerGetValidSpawnableEffigyTypes(TArray<EEffigyType>& outEffigyTypes);
    float DoServerGetUnresponsiveMaxAttackHoldTime();
    FText DoServerGetTeenDamagedEvilText();
    float DoServerGetTargetMarredTimeOnAttack();
    bool DoServerGetRequestReleaseAttack();
    float DoServerGetMaxTeenDamagedEvilScore();
    ELastHitType DoServerGetLastHitType();
    bool DoServerGetHasAttackReleased();
    float DoServerGetGreatestWeaponDecayTimer();
    float DoServerGetFeastDrainEssenseTime();
    float DoServerGetAttackHeldTime();
    void DoServerFlinch(float Time);
    void DoServerDoHit(class AActor* pActor);
    void DoServerDoAbilityLockouts();
    void DoServerCreatedEffigy();
    void DoServerCloseHitWindow();
    void DoServerClearScreamAttack();
    void DoServerClearMainEvilRageWhenDamaged();
    void DoServerClearMainEvilRageFromUse();
    void DoServerClearLeap();
    void DoServerClearLastRecordedDamage();
    void DoServerClearDamageTypeAppliedTime(EDamageType DamageType);
    void DoServerClearDamageAppliedTime();
    void DoServerClearCreatingEffigy();
    void DoServerClearActiveAbilities(bool bFromKnockdownHit);
    bool DoServerCheckEffigyReady(class AFPChar* pGivenEvilChar);
    void DoServerAttemptStrikeEvil(class AActor* pAttackerActor, EWeaponTypeEnum weaponType, EDamageType DamageType);
    void DoServerAttack();
    void DoServerApplyOnInjuryStatus(class ATPChar* pVictimChar);
    void DoServerAnalyticRecordAbility();
    bool DoServerActivateSelectedAbility();
    void DoServerActivateCooldown(int32 abilityIndex);
    void DoServerActivateAllCooldowns();
    void DoServerAbortUsingEffigy();
    bool DoesAbilityHaveMultipleCharges(int32 abilityIndex);
    void ClientUpdateVictims();
    void ClientUpdateAttack(float DeltaSeconds);
    void ClientSetHasAttackTarget(bool bSet);
    bool ClientHasAttackTarget();
    bool CanUseSelectedAbility();
    bool CanUseAbility(int32 abilityIndex);
    bool CanLeap();
    bool CanBeDamaged();
    float CalculateIncorporealTime();
    bool AttackHasPestilenceEffigyBuff();
    bool AllowTeensToPassThrough();
    bool AllowedToUpdateVictimFinder();
    bool AllowedToStartFeasting();
    bool AllowedToSpawnBanishmentScream();
    bool AllowedToFeast();
    bool AllowedToBeInstantStruckByWeapons();
    bool AllowedToBecomeCorporeal();
    bool AllowedToAttack();
    bool AllowedToAbilityCharge();
    void AddRequiredStatusComponentsToTPChar(class ATPChar* pTPChar);
}; // Size: 0x1770

class AFlameMineChar : public ARemoteCharBase
{
    class UFlameMineSkinDataAsset* mpFlameMineSkinDataAsset;                          // 0x07C0 (size: 0x8)
    float mDisintegrationLevel;                                                       // 0x07C8 (size: 0x4)
    class USceneComponent* mpTargetContainer;                                         // 0x07D0 (size: 0x8)
    class UStaticMeshComponent* mpTargetMesh;                                         // 0x07D8 (size: 0x8)
    class USceneCaptureComponentCube* mpCubeCaptureComponent;                         // 0x07E0 (size: 0x8)
    class UTextureRenderTargetCube* mpCubeCaptureRenderTarget;                        // 0x07E8 (size: 0x8)
    class UParticleSystemComponent* mpFloatingParticleSystemComponent;                // 0x07F0 (size: 0x8)
    class UDecalComponent* mpTargetingDecal;                                          // 0x07F8 (size: 0x8)
    class ARCCopterElectricity* mpBeamComponent;                                      // 0x0800 (size: 0x8)
    bool mbFiring;                                                                    // 0x0808 (size: 0x1)
    FVector mTargetBeamLocation;                                                      // 0x080C (size: 0xC)
    bool mbHitWall;                                                                   // 0x0818 (size: 0x1)
    bool mbIsHittingEvil;                                                             // 0x0819 (size: 0x1)
    bool mbDetectsEvil;                                                               // 0x081A (size: 0x1)
    bool mbEvilViewing;                                                               // 0x081B (size: 0x1)
    class USkeletalMeshComponent* mpAuraMesh;                                         // 0x0820 (size: 0x8)
    class UMaterialInterface* mpAuraMeshMaterial;                                     // 0x0828 (size: 0x8)
    bool mbIsStopped;                                                                 // 0x0840 (size: 0x1)
    class AFlameMineWeapon* mpOwningWeapon;                                           // 0x0860 (size: 0x8)

    void UpdateVisuals();
    void StopBeamStartupAkEvent();
    void StopBeamActiveAkEvent();
    void SetBeamParticles();
    void Server_RequestAbortFire();
    void PlayBeamStartupAkEvent();
    void PlayBeamShutdownAkEvent();
    void PlayBeamActiveAkEvent();
    void OnRep_TargetBeamLocation();
    void OnInputAction_FlameMinePrimaryFire(bool bPressed);
    void OnHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit);
    void MulticastAllStopBeam();
    void MulticastAllStartBeam();
    bool IsHittingEvil();
    bool IsFiring();
    bool IsEvilViewing();
    bool IsEvilInFiringRange(class AFPChar* pEvil);
    bool IsDisabled();
    FVector GetTargetBeamLocation();
    bool GetServerIsStopped();
    class AFlameMineWeapon* GetOwningWeapon();
    void DoServerUpdateMovement(float DeltaSeconds);
    void DoServerUpdateFiringAndDetection(float DeltaSeconds);
    void DoServerStartSeeking();
    void DoServerSetOwningWeapon(class AFlameMineWeapon* pOwningWeapon);
    void DoServerSetIsStopped(bool bNewValue);
    void DoServerSetFiring(bool bSet);
    void DoServerSetEvilViewing(bool bSet);
    void DoServerSetDisintegrationLevel(float percent);
    void DoServerSetDetectsEvil(bool bSet);
    bool DetectsEvil();
}; // Size: 0x870

class AFlameMineWeapon : public AWeaponBase
{
    class UParticleSystemComponent* mpSummoningParticleSystem;                        // 0x0370 (size: 0x8)
    class UNiagaraComponent* mpDiscNiagaraComponent;                                  // 0x0378 (size: 0x8)
    TSubclassOf<class AFlameMineChar> mMineToSpawn;                                   // 0x0380 (size: 0x8)
    class AFlameMineChar* mpSummoningMine;                                            // 0x0388 (size: 0x8)
    TArray<class AFlameMineChar*> mMines;                                             // 0x0390 (size: 0x10)
    float mEvilViewingTime;                                                           // 0x03A0 (size: 0x4)
    bool mbMineViewedThisFrame;                                                       // 0x03A4 (size: 0x1)

    void UpdateSummoningParticles();
    void UpdateDiscParticles();
    void MulticastAllPlayFireStartup();
    void MulticastAllPlayFireShutdown();
    void MulticastAllPlayFireLoop();
    bool IsSummoningPastCancelTime();
    bool IsSummoning();
    bool IsBeingViewedByEvil();
    bool HasMines();
    float GetTimeSummoningCancelOldMine();
    TArray<class AFlameMineChar*> GetMines();
    int32 GetMaxMinesAtOnce();
    float GetEvilViewingTime();
    float GetCurrentDrainFactor();
    void DoServerUpdateSummoningMode(float DeltaSeconds);
    void DoServerUpdateFiringMode(float DeltaSeconds);
    void DoServerUpdateEvilViewingTime(float DeltaSeconds);
    void DoServerSetEvilViewingTime(float Time);
    void DoServerRemoveFlameMine(class AFlameMineChar* pFlameMineChar);
    void DoServerOnChargeExhausted();
    void DoServerCancelMines();
    void DoServerAddFlameMine(class AFlameMineChar* pFlameMineChar);
}; // Size: 0x3A8

class AFlamethrowerProjectile : public AActor
{
    class UStaticMeshComponent* mpStaticMeshComponent;                                // 0x0228 (size: 0x8)
    class UProjectileMovementComponent* mpProjectileMovement;                         // 0x0230 (size: 0x8)
    class UCapsuleComponent* mpCollisionCapsuleComponent;                             // 0x0238 (size: 0x8)
    class UCapsuleComponent* mpDamageCapsuleComponent;                                // 0x0240 (size: 0x8)
    class UBoxComponent* mpDamageBoxComponent;                                        // 0x0248 (size: 0x8)
    class UParticleSystemComponent* mpParticleSystem;                                 // 0x0250 (size: 0x8)
    class UParticleSystem* mpScorchSystem;                                            // 0x0258 (size: 0x8)
    class AFlamethrowerProjectile* mpTrailingProjectile;                              // 0x0260 (size: 0x8)
    float mProjectileSlowdownRate;                                                    // 0x0268 (size: 0x4)
    float mLifetime;                                                                  // 0x026C (size: 0x4)
    float mLifetimeRemaining;                                                         // 0x0270 (size: 0x4)
    class AFlamethrowerWeapon* mpOwningFlamethrower;                                  // 0x0278 (size: 0x8)
    float mFalloffTime;                                                               // 0x0280 (size: 0x4)
    float mDrag;                                                                      // 0x0284 (size: 0x4)
    EDamageType mDamageType;                                                          // 0x0288 (size: 0x1)
    TArray<FTrailingDamagePoint> mTrailingDamagePoints;                               // 0x0290 (size: 0x10)
    FVector mFurthestTrailingDamage;                                                  // 0x02A0 (size: 0xC)

    void SetVelocity(FVector Velocity);
    void SetLifetime(float LifeTime);
    void SetDrag(float Drag);
    void OnProjectileBounce(const FHitResult& Result, const FVector& ImpactVelocity);
    void DoServerWeaponUsageTick(float DeltaSeconds, class ATPChar* pOwningTPChar);
    void DoServerUpdateDamageCapsule(float DeltaSeconds);
}; // Size: 0x2C0

class AFlamethrowerWeapon : public AWeaponBase
{
    FRotator mTargetDirection;                                                        // 0x0370 (size: 0xC)
    FRotator mLaggedDirection;                                                        // 0x037C (size: 0xC)
    FVector2D mReticleOffset;                                                         // 0x0388 (size: 0x8)
    class UParticleSystemComponent* mpIdleFlameParticleComponent;                     // 0x0390 (size: 0x8)
    class UParticleSystemComponent* mpFlamethrowerParticleComponent;                  // 0x0398 (size: 0x8)
    float mBaseFireRate;                                                              // 0x03A0 (size: 0x4)
    float mFireRate;                                                                  // 0x03A4 (size: 0x4)
    float mProjectileSpeedScale;                                                      // 0x03A8 (size: 0x4)
    float mProjectileSpeedRamp;                                                       // 0x03AC (size: 0x4)
    float mTimeFiring;                                                                // 0x03B0 (size: 0x4)
    float mGlowTimer;                                                                 // 0x03B4 (size: 0x4)
    float mBaseSpeed;                                                                 // 0x03B8 (size: 0x4)
    float mDrag;                                                                      // 0x03BC (size: 0x4)
    float mCurrentAcceleration;                                                       // 0x03C0 (size: 0x4)
    TArray<class AFlamethrowerProjectile*> mSpawnedProjectiles;                       // 0x03C8 (size: 0x10)
    class AFlamethrowerProjectile* mpNozzleProjectile;                                // 0x03D8 (size: 0x8)
    TSubclassOf<class AFlamethrowerProjectile> mFlamethrowerProjectileToSpawn;        // 0x03E0 (size: 0x8)
    float mInjuredFreeFireTime;                                                       // 0x03E8 (size: 0x4)
    FTransform mPreviousTransform;                                                    // 0x03F0 (size: 0x30)

    void UpdateSpeedAndAcceleration(float DeltaSeconds);
    void UpdateParticles(float DeltaSeconds);
    void UpdateNozzleGlow(float DeltaSeconds);
    void MulticastAllStopFlamethrowerActive();
    void MulticastAllPlayFlamethrowerActive();
    TSubclassOf<class AFlamethrowerProjectile> GetFlamethrowerProjectileToSpawn();
}; // Size: 0x430

class AFrontEndCameraActor : public ACameraActor
{
    class AFrontEndCameraActor* mpZoomOutTargetCamera;                                // 0x07B0 (size: 0x8)
    class ATransformLocator* mpFocalTargetLocator;                                    // 0x07B8 (size: 0x8)
    bool mbFlipZoomDirection;                                                         // 0x07C0 (size: 0x1)
    float mBaseZoom;                                                                  // 0x07C4 (size: 0x4)

    FPostProcessSettings LerpPostProcessSettings(const FPostProcessSettings& Source, const FPostProcessSettings& Target, float Alpha);
    FPostProcessSettings GetZoomedPostProcessSettings(float Zoom);
    FPostProcessSettings GetPostProcessSettings();
    FTransform GetCameraTransform(float Zoom);
    float GetCameraFieldOfView(float Zoom);
    float GetCameraBaseZoom();
}; // Size: 0x7D0

class AFrontEndCameraPool : public AActor
{
    class AFrontEndCameraActor* MainCamera;                                           // 0x0220 (size: 0x8)
    TMap<class EFrontEndLocation, class ACameraActor*> Cameras;                       // 0x0228 (size: 0x50)

}; // Size: 0x278

class AFrontEndGM : public AGameMode
{
}; // Size: 0x308

class AFrontEndHUD : public ABaseHUD
{
    class UGuideSystem* mpGuideSystem;                                                // 0x03A8 (size: 0x8)
    class UModalManager* mpModalManager;                                              // 0x03B0 (size: 0x8)
    TSubclassOf<class UMainMenuWidget> mMainMenuClass;                                // 0x03B8 (size: 0x8)
    class UMainMenuWidget* mpMainMenu;                                                // 0x03C0 (size: 0x8)
    TSubclassOf<class ULetterboxBordersWidget> mBottomBorderClass;                    // 0x03C8 (size: 0x8)
    class ULetterboxBordersWidget* mpBottomBorder;                                    // 0x03D0 (size: 0x8)
    TSubclassOf<class UScreenHeaderWidget> mScreenHeaderClass;                        // 0x03D8 (size: 0x8)
    class UScreenHeaderWidget* mpScreenHeaderWidget;                                  // 0x03E0 (size: 0x8)
    TSubclassOf<class UToasterWidget> mToasterClass;                                  // 0x03E8 (size: 0x8)
    class UToasterWidget* mpToasterWidget;                                            // 0x03F0 (size: 0x8)
    TSubclassOf<class UContextMenuWidget> mContextMenuClass;                          // 0x03F8 (size: 0x8)
    class UContextMenuWidget* mpContextMenu;                                          // 0x0400 (size: 0x8)
    class AFrontEndCameraActor* mpCameraActor;                                        // 0x0408 (size: 0x8)
    class AFrontEndCameraActor* mpCameraAttract;                                      // 0x0410 (size: 0x8)
    class AFrontEndCameraActor* mpCameraMainMenu;                                     // 0x0418 (size: 0x8)
    class AFrontEndCameraActor* mpCameraLobby;                                        // 0x0420 (size: 0x8)
    class AFrontEndCameraActor* mpCameraCustomize;                                    // 0x0428 (size: 0x8)
    class AFrontEndCameraActor* mpCameraSeasonPass;                                   // 0x0430 (size: 0x8)
    class AFrontEndCameraActor* mpCameraOptions;                                      // 0x0438 (size: 0x8)
    class AFrontEndCameraActor* mpCameraMutations;                                    // 0x0440 (size: 0x8)
    class AFrontEndCameraActor* mpCameraCharacterSelect;                              // 0x0448 (size: 0x8)
    class AFrontEndCameraActor* mpCameraCharacterSelectBio;                           // 0x0450 (size: 0x8)
    class AFrontEndCameraActor* mpCameraCustomizeTeenCostume;                         // 0x0458 (size: 0x8)
    class AFrontEndCameraActor* mpCameraCustomizeTeenHead;                            // 0x0460 (size: 0x8)
    class AFrontEndCameraActor* mpCameraCustomizeTeenTop;                             // 0x0468 (size: 0x8)
    class AFrontEndCameraActor* mpCameraCustomizeTeenOuter;                           // 0x0470 (size: 0x8)
    class AFrontEndCameraActor* mpCameraCustomizeTeenHands;                           // 0x0478 (size: 0x8)
    class AFrontEndCameraActor* mpCameraCustomizeTeenBottom;                          // 0x0480 (size: 0x8)
    class AFrontEndCameraActor* mpCameraCustomizeTeenSocks;                           // 0x0488 (size: 0x8)
    class AFrontEndCameraActor* mpCameraCustomizeTeenFeet;                            // 0x0490 (size: 0x8)
    class AFrontEndCameraActor* mpCameraCustomizeEvilCostume;                         // 0x0498 (size: 0x8)
    class AFrontEndCameraActor* mpCameraCustomizeEvilEffect;                          // 0x04A0 (size: 0x8)
    class AFrontEndCameraActor* mpCameraCustomizeEvilAccessoryUpper;                  // 0x04A8 (size: 0x8)
    class AFrontEndCameraActor* mpCameraCustomizeEvilAccessoryMid;                    // 0x04B0 (size: 0x8)
    class AFrontEndCameraActor* mpCameraCustomizeEvilAccessoryLower;                  // 0x04B8 (size: 0x8)
    class AFrontEndCameraActor* mpCameraCustomizeEmote;                               // 0x04C0 (size: 0x8)
    class AFrontEndCameraActor* mpCameraWeaponSkins;                                  // 0x04C8 (size: 0x8)
    class AFrontEndCameraActor* mpCameraWeaponInfo;                                   // 0x04D0 (size: 0x8)
    class AFrontEndCameraActor* mpCameraWeaponPowers;                                 // 0x04D8 (size: 0x8)
    class AFrontEndCameraActor* mpCameraMoviePreview;                                 // 0x04E0 (size: 0x8)
    class AFrontEndCameraActor* mpCameraScenesPreview;                                // 0x04E8 (size: 0x8)
    class AFrontEndCameraActor* mpCameraMiniGame;                                     // 0x04F0 (size: 0x8)
    class AFrontEndCameraPool* mpCameraPool;                                          // 0x04F8 (size: 0x8)
    class UBaseOverlay* mpActiveOverlay;                                              // 0x0500 (size: 0x8)
    class UAttractScreen* mpAttractScreen;                                            // 0x0508 (size: 0x8)
    TSubclassOf<class UAttractScreen> mAttractScreenClass;                            // 0x0510 (size: 0x8)
    class UMatchmakingScreen* mpMatchmakingScreen;                                    // 0x0518 (size: 0x8)
    TSubclassOf<class UMatchmakingScreen> mMatchmakingScreenClass;                    // 0x0520 (size: 0x8)
    class ULobbyScreen* mpLobbyScreen;                                                // 0x0528 (size: 0x8)
    TSubclassOf<class ULobbyScreen> mLobbyScreenClass;                                // 0x0530 (size: 0x8)
    class UEventScreen* mpEventScreen;                                                // 0x0538 (size: 0x8)
    TSubclassOf<class UEventScreen> mEventScreenClass;                                // 0x0540 (size: 0x8)
    class UServerBrowserOverlayWidget* mpServerBrowserOverlayWidget;                  // 0x0548 (size: 0x8)
    TSubclassOf<class UServerBrowserOverlayWidget> mServerBrowserOverlayWidgetClass;  // 0x0550 (size: 0x8)
    class UPlayerAccountScreen* mpPlayerAccountScreen;                                // 0x0558 (size: 0x8)
    TSubclassOf<class UPlayerAccountScreen> mPlayerAccountScreenClass;                // 0x0560 (size: 0x8)
    class UWeaponsScreen* mpWeaponsScreen;                                            // 0x0568 (size: 0x8)
    TSubclassOf<class UWeaponsScreen> mWeaponsScreenClass;                            // 0x0570 (size: 0x8)
    class UWeaponCustomizationScreen* mpWeaponCustomizationScreen;                    // 0x0578 (size: 0x8)
    TSubclassOf<class UWeaponCustomizationScreen> mWeaponCustomizationScreenClass;    // 0x0580 (size: 0x8)
    class ULoadoutScreen* mpLoadoutScreen;                                            // 0x0588 (size: 0x8)
    TSubclassOf<class ULoadoutScreen> mLoadoutScreenClass;                            // 0x0590 (size: 0x8)
    class UMoviesScreen* mpMoviesScreen;                                              // 0x0598 (size: 0x8)
    TSubclassOf<class UMoviesScreen> mMoviesScreenClass;                              // 0x05A0 (size: 0x8)
    class UScenesScreen* mpScenesScreen;                                              // 0x05A8 (size: 0x8)
    TSubclassOf<class UScenesScreen> mScenesScreenClass;                              // 0x05B0 (size: 0x8)
    class UNewsScreen* mpNewsScreen;                                                  // 0x05B8 (size: 0x8)
    TSubclassOf<class UNewsScreen> mNewsScreenClass;                                  // 0x05C0 (size: 0x8)
    class UStoreScreen* mpStoreScreen;                                                // 0x05C8 (size: 0x8)
    TSubclassOf<class UStoreScreen> mStoreScreenClass;                                // 0x05D0 (size: 0x8)
    class UJourneyScreen* mpJourneyScreen;                                            // 0x05D8 (size: 0x8)
    TSubclassOf<class UJourneyScreen> mJourneyScreenClass;                            // 0x05E0 (size: 0x8)
    class USeasonPassPreviewScreen* mpSeasonPassPreviewScreen;                        // 0x05E8 (size: 0x8)
    TSubclassOf<class USeasonPassPreviewScreen> mSeasonPassPreviewScreenClass;        // 0x05F0 (size: 0x8)
    class USeasonPassScreen* mpSeasonPassScreen;                                      // 0x05F8 (size: 0x8)
    TSubclassOf<class USeasonPassScreen> mSeasonPassScreenClass;                      // 0x0600 (size: 0x8)
    class UCharacterSelectScreen* mpCharacterSelectScreen;                            // 0x0608 (size: 0x8)
    TSubclassOf<class UCharacterSelectScreen> mCharacterSelectScreenClass;            // 0x0610 (size: 0x8)
    class UOptionsScreen* mpOptionsScreen;                                            // 0x0618 (size: 0x8)
    TSubclassOf<class UOptionsScreen> mOptionsScreenClass;                            // 0x0620 (size: 0x8)
    class UEndOfRoundScreen* mpEndOfRoundScreen;                                      // 0x0628 (size: 0x8)
    TSubclassOf<class UEndOfRoundScreen> mEndOfRoundScreenClass;                      // 0x0630 (size: 0x8)
    class USystemScreen* mpSystemScreen;                                              // 0x0638 (size: 0x8)
    TSubclassOf<class USystemScreen> mSystemScreenClass;                              // 0x0640 (size: 0x8)
    class ULoadoutClothingMenuScreen* mpLoadoutClothingMenuScreen;                    // 0x0648 (size: 0x8)
    TSubclassOf<class ULoadoutClothingMenuScreen> mLoadoutClothingMenuScreenClass;    // 0x0650 (size: 0x8)
    class ULoadoutPerksMenuScreen* mpLoadoutPerksMenuScreen;                          // 0x0658 (size: 0x8)
    TSubclassOf<class ULoadoutPerksMenuScreen> mLoadoutPerksMenuScreenClass;          // 0x0660 (size: 0x8)
    class UMutationsScreen* mpMutationsScreen;                                        // 0x0668 (size: 0x8)
    TSubclassOf<class UMutationsScreen> mMutationsScreenClass;                        // 0x0670 (size: 0x8)
    class UStorePreviewMenuScreen* mpStorePreviewMenuScreen;                          // 0x0678 (size: 0x8)
    TSubclassOf<class UStorePreviewMenuScreen> mStorePreviewMenuScreenClass;          // 0x0680 (size: 0x8)
    class UStoreItemContentsPreviewMenuScreen* mpStoreItemContentsPreviewMenuScreen;  // 0x0688 (size: 0x8)
    TSubclassOf<class UStoreItemContentsPreviewMenuScreen> mStoreItemContentsPreviewMenuScreen; // 0x0690 (size: 0x8)
    class UAssetFeatureScreen* mpAssetFeatureScreen;                                  // 0x0698 (size: 0x8)
    TSubclassOf<class URewardClaimScreen> mClaimRewardScreenClass;                    // 0x06A0 (size: 0x8)
    class URewardClaimScreen* mpClaimRewardScreen;                                    // 0x06A8 (size: 0x8)
    class UHBCreditsScreen* mpCreditsScreen;                                          // 0x06B0 (size: 0x8)
    TSubclassOf<class UHBCreditsScreen> mCreditsScreenClass;                          // 0x06B8 (size: 0x8)
    TSubclassOf<class UAssetFeatureScreen> mAssetFeatureScreenClass;                  // 0x06C0 (size: 0x8)
    class ULobbyStatusWidget* mpLobbyStatus;                                          // 0x06C8 (size: 0x8)
    TSubclassOf<class ULobbyStatusWidget> mLobbyStatusClass;                          // 0x06D0 (size: 0x8)
    class UUserWidget* mpCopyrightWidget;                                             // 0x06D8 (size: 0x8)
    TSubclassOf<class UUserWidget> mCopyrightWidgetClass;                             // 0x06E0 (size: 0x8)
    class UIssueTrackerWidget* mpIssueTrackerWidget;                                  // 0x06E8 (size: 0x8)
    TSubclassOf<class UIssueTrackerWidget> mIssueTrackerWidgetClass;                  // 0x06F0 (size: 0x8)
    class UCharacterSelectBioScreen* mpCharacterSelectBioScreen;                      // 0x06F8 (size: 0x8)
    TSubclassOf<class UCharacterSelectBioScreen> mCharacterSelectBioScreenClass;      // 0x0700 (size: 0x8)
    class UCharacterSelectOverlayWidget* mpCharacterSelectOverlayWidget;              // 0x0708 (size: 0x8)
    TSubclassOf<class UCharacterSelectOverlayWidget> mCharacterSelectOverlayWidgetClass; // 0x0710 (size: 0x8)
    class ULobbyMatchSettingsOverlayWidget* mpLobbyMatchSettingsOverlayWidget;        // 0x0718 (size: 0x8)
    TSubclassOf<class ULobbyMatchSettingsOverlayWidget> mpLobbyMatchSettingsOverlayWidgetClass; // 0x0720 (size: 0x8)
    class UBotSettingsOverlayWidget* mpBotSettingsOverlayWidget;                      // 0x0728 (size: 0x8)
    TSubclassOf<class UBotSettingsOverlayWidget> mpBotSettingsOverlayWidgetClass;     // 0x0730 (size: 0x8)
    class USocialWidget* mpSocialWidget;                                              // 0x0738 (size: 0x8)
    TSubclassOf<class USocialWidget> mSocialWidgetClass;                              // 0x0740 (size: 0x8)
    class USocialOverlayWidget* mpSocialOverlayWidget;                                // 0x0748 (size: 0x8)
    TSubclassOf<class USocialOverlayWidget> mSocialOverlayWidgetClass;                // 0x0750 (size: 0x8)
    class UPrizeMenuOverlayWidget* mpPrizeMenuOverlayWidget;                          // 0x0758 (size: 0x8)
    TSubclassOf<class UPrizeMenuOverlayWidget> mPrizeMenuOverlayWidgetClass;          // 0x0760 (size: 0x8)
    class UPrizePackOverlayWidget* mpPrizePackOverlayWidget;                          // 0x0768 (size: 0x8)
    TSubclassOf<class UPrizePackOverlayWidget> mPrizePackOverlayWidgetClass;          // 0x0770 (size: 0x8)
    class UPrizeRevealOverlayWidget* mpPrizeRevealOverlayWidget;                      // 0x0778 (size: 0x8)
    TSubclassOf<class UPrizeRevealOverlayWidget> mPrizeRevealOverlayWidgetClass;      // 0x0780 (size: 0x8)
    class ULoadoutRadialOverlayWidget* mpLoadoutRadialOverlayWidget;                  // 0x0788 (size: 0x8)
    TSubclassOf<class ULoadoutRadialOverlayWidget> mLoadoutRadialOverlayWidgetClass;  // 0x0790 (size: 0x8)
    class UPerkEquipmentOverlayWidget* mpPerkEquipmentOverlayWidget;                  // 0x0798 (size: 0x8)
    TSubclassOf<class UPerkEquipmentOverlayWidget> mPerkEquipmentOverlayWidgetClass;  // 0x07A0 (size: 0x8)
    class USceneSummaryOverlayWidget* mpSceneSummaryOverlayWidget;                    // 0x07A8 (size: 0x8)
    TSubclassOf<class USceneSummaryOverlayWidget> mSceneSummaryOverlayWidgetClass;    // 0x07B0 (size: 0x8)
    class UAnnouncementOverlayWidget* mpAnnouncementOverlayWidget;                    // 0x07B8 (size: 0x8)
    TSubclassOf<class UAnnouncementOverlayWidget> mAnnouncementOverlayWidgetClass;    // 0x07C0 (size: 0x8)
    class UNewsOverlayWidget* mpNewsOverlayWidget;                                    // 0x07C8 (size: 0x8)
    TSubclassOf<class UNewsOverlayWidget> mNewsOverlayWidgetClass;                    // 0x07D0 (size: 0x8)
    class UGameModeOverlayWidget* mpGameModeOverlayWidget;                            // 0x07D8 (size: 0x8)
    TSubclassOf<class UGameModeOverlayWidget> mGameModeOverlayWidgetClass;            // 0x07E0 (size: 0x8)
    class UTutorialsTrainingOverlayWidget* mpTutorialsTrainingOverlayWidget;          // 0x07E8 (size: 0x8)
    TSubclassOf<class UTutorialsTrainingOverlayWidget> mTutorialsTrainingOverlayWidgetClass; // 0x07F0 (size: 0x8)
    class UBusyModalWidget* mpSignOutModal;                                           // 0x07F8 (size: 0x8)
    class UBusyModalWidget* mpDiscoverBusyModal;                                      // 0x0800 (size: 0x8)
    class UConfirmationModalWidget* mpLoginEntitlementModal;                          // 0x0808 (size: 0x8)
    int32 mMainMenuTabIndex;                                                          // 0x0810 (size: 0x4)
    class AFrontEndCameraActor* mpSourceCamera;                                       // 0x0818 (size: 0x8)
    class AFrontEndCameraActor* mpTargetCamera;                                       // 0x0820 (size: 0x8)
    float mCurrentCameraTransformTime;                                                // 0x0828 (size: 0x4)
    float mTargetCameraTransformTime;                                                 // 0x082C (size: 0x4)
    TMap<class FName, class ULevelStreamingDynamic*> mStoreDioramaLevelBySku;         // 0x08F8 (size: 0x50)
    FName mCurrentStoreDioramaLevel;                                                  // 0x0948 (size: 0x8)
    FName mCurrentLoadingSKUPurchaseLevel;                                            // 0x0950 (size: 0x8)
    bool mbCurrentlyPlayingSKUPurchaseAnimation;                                      // 0x0958 (size: 0x1)
    bool mbFEMusicIsPlaying;                                                          // 0x0959 (size: 0x1)

    void UpdateVerifyVoiceChatClient();
    void UpdateStoreEntitlementCheck();
    void UpdateSetScreen();
    void UpdateMainMenuVisibility();
    void UpdateLobbyCountdownSounds();
    void UpdateCheckMinigame();
    void UpdateCameraTransform(float DeltaTime);
    void ToggleFEDebug();
    void StartMenuPlaylist();
    void Shutdown();
    void ShowTutorialsTrainingOverlay();
    void ShowSocialOverlay(ESocialCategoryType Category);
    void ShowSignOutModal();
    void ShowServerBrowserOverlay();
    void ShowSceneSummaryOverlay();
    void ShowRestartRequiredModal();
    void ShowReplayModal();
    void ShowPrizeRevealOverlay();
    void ShowPrizePackOverlay(bool bReturnToPrizeMenu);
    void ShowPrizeMenuOverlay(EFaction faction);
    void ShowNewsOverlay();
    void ShowLobbyMatchSettingsOverlay();
    void ShowLeaveLobbyModal();
    void ShowGameModeOverlay();
    void ShowExitModal();
    void ShowDiscardOptionsModal();
    void ShowDeclineEulaModal();
    void ShowBotSettingsOverlay(int32 botIdx);
    void ShowAnnouncementOverlay();
    void SetLobbyState(ELobbyClientState State);
    void SetLobbyDetails(const FLobbyDetails& LobbyDetails);
    void SetActiveStoreDiorama(const FName& sku, FString Level);
    void ResumeNavigation();
    void RefreshSocialWidgets();
    void RefreshPartyWidgets();
    void RefreshLobby();
    void RefreshActiveScreen();
    void PresentContextMenu(FContextMenuData menuData, class UWidget* pAnchorWidget, bool bPreferLeft);
    void OnStoreEntitlementCheckAccepted();
    void OnStoreDioramaFinishedLoading();
    void OnSKUPurchased(const FName& sku, FString Level);
    void OnSKUPurchaseAnimationComplete();
    void OnSignOut();
    void OnSaveOptions();
    void OnPresentLicenseModal();
    void OnPartyForcedCharacterChange();
    void OnLoginEntitlementCheckComplete(bool bFoundEntitlements);
    void OnLeaveLobby();
    void OnExitGame();
    void OnDiscardOptions();
    void OnDeviceTypeChanged();
    bool IsTextEntryFocused();
    bool IsOverlayActive();
    bool IsCountdownLocked();
    bool IsContextMenuVisible();
    void HideOverlay();
    void HideContextMenuIfUnselected();
    void HideContextMenu();
    int32 GetStoredMainMenuTabIndex();
    class UServerBrowserOverlayWidget* GetServerBrowserOverlayWidget();
    class UScreenHeaderWidget* GetScreenHeader();
    class ULobbyScreen* GetLobbyScreen();
    FLobbyDetails GetLobbyDetails();
    class UIssueTrackerWidget* GetIssueTracker();
    void DoCharacterSelectSpectator();
    void BeginLockdownAndCommitChanges();
    void BeginFEMusicPlayback();
    void ActivateSKUPurchasedScene(const FName& sku);
}; // Size: 0x960

class AFrontEndLevel : public ALevelBase
{
    TMap<class ESeasonalEventType, class UMapDataAsset*> mSeasonalMapData;            // 0x0250 (size: 0x50)

}; // Size: 0x2A0

class AFrontEndPC : public ABasePC
{
    TArray<FNetPlayerInfoStruct> mAllConnectedPlayerInfo;                             // 0x05D8 (size: 0x10)
    TArray<FLobbyCharSlotData> mLobbyCharSlots;                                       // 0x05E8 (size: 0x10)
    class ATPChar* mpEvilAvatarChar;                                                  // 0x05F8 (size: 0x8)
    FTransform mMainCharLocator;                                                      // 0x0600 (size: 0x30)
    FTransform mCustomizeCharLocator;                                                 // 0x0630 (size: 0x30)
    FTransform mCustomizeSpawnableCharLocator;                                        // 0x0660 (size: 0x30)
    FTransform mEvilAvatarCharLocator;                                                // 0x0690 (size: 0x30)
    FTransform mWeaponLocator;                                                        // 0x06C0 (size: 0x30)
    FTransform mSpectralLocator;                                                      // 0x06F0 (size: 0x30)
    FTransform mMoviePreviewLocator;                                                  // 0x0720 (size: 0x30)
    EFrontEndLocation mCurrentCameraLocation;                                         // 0x0750 (size: 0x1)
    ECharacterType mSelectedCharacter;                                                // 0x0751 (size: 0x1)
    class ULobbyScreen* mpLobbyScreen;                                                // 0x0758 (size: 0x8)
    class ALobbyBeaconClient* mpLobbyBeaconClient;                                    // 0x0760 (size: 0x8)
    class ATPChar* mpFrontEndChar;                                                    // 0x0768 (size: 0x8)
    ECharacterType mFrontEndCharType;                                                 // 0x0770 (size: 0x1)
    ECharacterType mCustomizationCharType;                                            // 0x0771 (size: 0x1)
    ECharacterType mFrontEndOverrideCharType;                                         // 0x0772 (size: 0x1)
    class ATPChar* mpCustomizeChar;                                                   // 0x0778 (size: 0x8)
    class ATPChar* mpCustomizeCharSpawnable;                                          // 0x0780 (size: 0x8)
    class ATPChar* mpCustomizeFeastTargetChar;                                        // 0x0788 (size: 0x8)
    class AWeaponBase* mpCustomizeWeapon;                                             // 0x0790 (size: 0x8)
    class AWeaponBase* mpTempCustomizeWeapon;                                         // 0x0798 (size: 0x8)
    class AActor* mpCustomizeWeaponSpawnable;                                         // 0x07A0 (size: 0x8)
    class AActor* mpTempCustomizeWeaponSpawnable;                                     // 0x07A8 (size: 0x8)
    class AActor* mpCustomizeSpectral;                                                // 0x07B0 (size: 0x8)
    class AActor* mpTempCustomizeSpectral;                                            // 0x07B8 (size: 0x8)
    class AStaticMeshActor* mpMoviePreviewActor;                                      // 0x07C0 (size: 0x8)
    FRotator mCustomizeCharRotation;                                                  // 0x07C8 (size: 0xC)
    float mCustomizeCharZoom;                                                         // 0x07D4 (size: 0x4)
    float mCustomizeCharBaseZoom;                                                     // 0x07D8 (size: 0x4)
    FRotator mMoviePreviewRotation;                                                   // 0x07DC (size: 0xC)
    FRotator mFrontendCharRotation;                                                   // 0x07E8 (size: 0xC)
    float mFrontEndCharacterDisintegrationLevel;                                      // 0x07F4 (size: 0x4)
    float mCustomizeCharacterDisintegrationLevel;                                     // 0x07F8 (size: 0x4)
    float mEvilAvatarCharacterDisintegrationLevel;                                    // 0x07FC (size: 0x4)
    float mEvilAvatarDistintegrationTarget;                                           // 0x0800 (size: 0x4)
    float mEvilAvatarDisintegrationSpeed;                                             // 0x0804 (size: 0x4)
    float mLobbyFlavorCooldownTimer;                                                  // 0x0808 (size: 0x4)
    EServerMatchMode mServerMatchMode;                                                // 0x0918 (size: 0x1)
    bool mbCustomizeCharacterLoadoutDirty;                                            // 0x0919 (size: 0x1)
    ECustomizationModel mCustomizationModelMode;                                      // 0x091A (size: 0x1)
    ECustomizationPreviewMode mCustomizationPreviewMode;                              // 0x091B (size: 0x1)
    bool mbCustomizeWeaponIsVisible;                                                  // 0x0920 (size: 0x1)
    bool mbCustomizeSpectralIsVisible;                                                // 0x0921 (size: 0x1)
    bool mbFrontEndCharacterIsVisible;                                                // 0x0922 (size: 0x1)
    bool mbMoviePreviewIsVisible;                                                     // 0x0923 (size: 0x1)
    TArray<TSoftObjectPtr<UItemDataAsset>> mWeaponDataAssets;                         // 0x0948 (size: 0x10)
    TSoftObjectPtr<UItemDataAsset> mSpectralDataAsset;                                // 0x0958 (size: 0x28)
    bool mbEquipInProgress;                                                           // 0x0980 (size: 0x1)
    class UMaterialParameterCollection* mpFrontendMaterialParameterCollection;        // 0x0988 (size: 0x8)
    class UStaticMesh* mpMoviePreviewMesh;                                            // 0x0990 (size: 0x8)
    class UClothingItemDataAsset* mpFeastPreviewRoot;                                 // 0x0998 (size: 0x8)
    class UClothingItemDataAsset* mpFeastPreviewTop;                                  // 0x09A0 (size: 0x8)
    class UClothingItemDataAsset* mpFeastPreviewBtm;                                  // 0x09A8 (size: 0x8)
    class UEvilSpectralDataAsset* mpLobbyEvilSpectralDataAsset;                       // 0x09B0 (size: 0x8)
    float mRotationClamp;                                                             // 0x09BC (size: 0x4)
    TMap<ECharacterType, float> mTimeSpentOnCharacter;                                // 0x09C0 (size: 0x50)
    TMap<ECharacterType, int32> mCountSpentOnCharacter;                               // 0x0A10 (size: 0x50)

    void UpdateAllLobbyPlayerInfo(const TArray<FNetPlayerInfoStruct>& connectedPlayers);
    void ToggleReady();
    void SubmitChatText(const FText& Text);
    void SpawnTPChar(class ATPChar* pChar, ECharacterType Type, EAvatarType avatarType);
    void SpawnLobbyTPCharAtSlot(const FNetPlayerInfoStruct& playerInfo, FLobbyCharSlotData& Slot);
    void SetMoviePreviewTexture(class UTexture2D* pMovieTexture);
    void SetFrontEndCharacterVisible(bool bSet);
    void SetFrontEndCharacterType(ECharacterType Type, bool bSaveToSettings);
    void SetFrontendCharacterRotation(FRotator Amount);
    void SetCustomizeCharacterBaseZoom(float Zoom);
    void SetCustomizationWeaponBySkin(FDbItemId skinId);
    void SetCustomizationSpectralSkin(FDbItemId skinId);
    void SetCustomizationMode(ECustomizationModel Model, ECustomizationPreviewMode Preview);
    void SetCustomizationDuckLights(bool bDuck, float Duration);
    void SetCustomizationCharacterType(ECharacterType Type, bool bForceCharChange);
    void ResetMainCharacterDisintegration();
    void ResetCustomizeRotation();
    void ResetCustomizeCharacterZoom();
    void ResetCustomizationCharacterType();
    void OverrideFrontEndCharacterModel(ECharacterType Type);
    void OnSKUPurchaseAnimationComplete();
    void OnCustomizeCharacterEquipmentUpdated();
    void OnClientUpdateQuitPressed();
    void MarkLobbyWeaponLoadoutDirty(int32 lobbyIndex, EWeaponTypeEnum weaponType);
    void MarkLobbyCharacterLoadoutDirty(int32 lobbyIndex, ECharacterType CharType);
    void MarkLobbyAbilityLoadoutDirty(int32 lobbyIndex, EEvilAbilityType abilityType);
    bool IsReady();
    bool IsASpectator();
    bool IsAHost();
    bool IsAClient();
    void InitializePlayerInformationFromSettings();
    class ATPChar* GetTPCharForIndex(int32 Index);
    ECharacterType GetSelectedCharacter();
    FNetPlayerInfoStruct GetPlayerInfo();
    ECharacterType GetOverrideFrontEndCharacterType();
    class ALobbyBeaconClient* GetLobbyClient();
    ECharacterType GetFrontEndCharacterType();
    class ATPChar* GetFrontEndCharacter();
    ECharacterType GetFeastingPreviewCharacterType();
    class ATPChar* GetCustomizeSpawnableCharacter();
    class ATPChar* GetCustomizeFeastTargetChar();
    class ATPChar* GetCustomizeCharacter();
    ECharacterType GetCustomizationCharacterType();
    TArray<FNetPlayerInfoStruct> GetAllConnectedPlayerInfo();
    void DestroyLobbyClientBeacon();
    void DestroyFrontEndChars();
    bool CreateLobbyClientBeaconFromURL(FURL URL, int32 Port);
    void ConnectToStoredSession();
    void ClearReady();
    void ClearLobbyCharacters();
    bool CancelMatchmaking();
    void AsyncLoadWeaponDataAsset();
    void AsyncLoadSpectralDataAsset();
    void AddMoviePreviewRotation(FRotator Rotation);
    void AddFrontendCharacterRotation(FRotator Amount);
    void AddCustomizeCharacterZoom(float Zoom);
    void AddCustomizeCharacterRotation(FRotator Rotation);
}; // Size: 0xA70

class AFrontEndSession : public AGameSession
{
}; // Size: 0x238

class AGameplayGM : public AGameMode
{
    FTimerHandle mTimerHandle;                                                        // 0x0308 (size: 0x8)
    TArray<class APlayerController*> mAllPlayerControllers;                           // 0x0310 (size: 0x10)
    FMatchSummaryInfoData mMatchSummaryData;                                          // 0x0328 (size: 0x80)
    TArray<FColor> mAllPlayerColors;                                                  // 0x03A8 (size: 0x10)
    FColor mPlayer1Color;                                                             // 0x03B8 (size: 0x4)
    FColor mPlayer2Color;                                                             // 0x03BC (size: 0x4)
    FColor mPlayer3Color;                                                             // 0x03C0 (size: 0x4)
    FColor mPlayer4Color;                                                             // 0x03C4 (size: 0x4)
    FColor mPlayer5Color;                                                             // 0x03C8 (size: 0x4)
    FColor mPlayer6Color;                                                             // 0x03CC (size: 0x4)
    FColor mPlayer7Color;                                                             // 0x03D0 (size: 0x4)
    TArray<class AGameplayPS*> mSortedByPositionPlayers;                              // 0x03D8 (size: 0x10)
    TArray<FTransform> mSortedByPositionSpawnTransforms;                              // 0x03E8 (size: 0x10)
    bool mbDidGameEndFromDisconnect;                                                  // 0x03F8 (size: 0x1)
    bool mbHasConsumedPrizes;                                                         // 0x03F9 (size: 0x1)
    bool mbWaitingOnPrizeConsumption;                                                 // 0x03FA (size: 0x1)
    bool mbAllScoresAppended;                                                         // 0x03FB (size: 0x1)
    bool mbHasFinishedLoading;                                                        // 0x03FC (size: 0x1)
    bool mbRequestAbortMatch;                                                         // 0x0410 (size: 0x1)
    float mGameExpiryTime;                                                            // 0x0414 (size: 0x4)

    void VerifyVoiceChatUsers();
    void UpdateStationCraftingDecay(float DeltaSeconds);
    void TeleportToLeastUsedSpawnLocation(class ATPChar* pTPChar);
    class APowerupBase* SpawnPowerup(UClass* pPowerupClass, FTransform SpawnTransform, class AActor* pOwner);
    class APickupBase* SpawnPickup(UClass* pPickupClass, FTransform SpawnTransform, class ATPChar* pOwningTPChar);
    class AAnimSpawnableItemBase* SpawnAnimSpawnableItem(UClass* pAnimSpawnableClass, FTransform SpawnTransform);
    class ATPChar* SpawnAIBot(ECharacterType typeToSpawn, TSubclassOf<class AAIController> AIControllerClass, FTransform SpawnTransform, EAIDifficultyLevel diffLevel);
    bool ShouldRemoveWeaponOnEvilHit(class AFPChar* pEvilHit);
    float ShouldGameModeTakeAwayChargeOnHit(class ATPChar* pTargetHit, EWeaponTypeEnum weaponType);
    bool ShouldGameModeSkipHuntStage();
    void SetRequestAbortMatch(bool bSet);
    void SetNumberOfGoodPlayerMainTPCharsDown(int32 numGoodActorsDown);
    void SetHasFinishedLoading(bool bSet);
    void SetGameEndedFromDisconnect(bool bSet);
    void SetCurrentRoundNumber(int32 Val);
    void SetAllPlayerSpawnsByMatchMod(TArray<FTransform>& placedLocations, TArray<class AGameplayPS*>& placedPlayers);
    void SendPlayerDisconnectedMatchEventQueue(class AGameplayPC* pGameplayPC);
    void SaveMatchSummaryState();
    void RespawnPlayer(class APlayerController* pPlayerController, UClass* pCharacterClass);
    void ResetAllEvilBotBehaviors();
    void ReportPlayerDisconnect(class APlayerController* pController);
    void RemovePlayerController(class APlayerController* pPlayerController);
    void RemoveDownGoodPlayerMainTPChar();
    void RecordAnalyticsFinishedGameStatsForCharacter(class AGameplayPC* pGameplayPC, class AGameplayPS* pGameplayPS, FNetPlayerInfoStruct& playerInfo);
    void QuitGame();
    void ProcessEndGameData_CheckAllPlayersLeft();
    void PopulateSearchablesAndPickupSpawnGroups();
    void PopulateEvilWeaponDamageRequired();
    void P2PHostRequestsEndGame();
    void OnSomeoneLoggedOut(class AController* pExitingController);
    void OnPlayerLoadoutsReady(bool bSuccess);
    void OnJoinGame(class APlayerController* pNewPlayer);
    void OnEvilTookFatalDamage();
    void OnDestroyed();
    int32 NumberOfPlayerControllers();
    void NobodyWins();
    void KickPlayerFromVoiceChat(class AGameplayPC* pGivenPlayerController);
    void KickParticipantFromVoiceChatDueToInvalidPS(FString UniqueId);
    bool IsShippingBuild();
    bool IsRequestAbortMatch();
    bool IsPlayingInEditor();
    bool HasPlayerController(class APlayerController* pPlayerController);
    bool HasFinishedLoading();
    void HandleDisconnectRequest(class AGameplayPC* pGameplayPC);
    void GoodWins();
    float GetWeaponCraftSpeedTimeMultiplier();
    FTransform GetRandomSpawnTransform();
    class AExtPlayerStart* GetRandomSpawnPointWithRestrictions(ESpawnSearchType searchType, FVector spawnAwayFromLocation);
    TArray<class AGameplayPS*> GetPromotedEvils();
    class AGameplayPS* GetPromotedEvil();
    class APlayerController* GetPlayerControllerByIndex(int32 Index);
    int32 GetNumberOfGoodPlayerMainTPCharsDown();
    class AExtPlayerStart* GetLeastUsedSpawnLocation();
    bool GetIsTutorialModeActive();
    float GetIncubatingStageTime();
    class AGameplayGS* GetGameplayGS();
    class AExtPlayerStart* GetFirstLeastUsedSpawnPointFromList(TArray<class AActor*> spawnPointList);
    float GetBaseWaitingStageTime();
    float GetBaseTransformingStageTime();
    float GetBaseStartupStageTime();
    TArray<class APlayerController*> GetAllPlayerControllers();
    bool FindPlayerController(class APlayerController* pPlayerController, int32& Index);
    void FinalizePlayerPositions();
    void EvilWins();
    void EndGame(EGameplayStage newStage);
    void DoRespawnPlayer(class APlayerController* pPlayerController, UClass* pCharacterClass, FTransform SpawnTransform);
    void DoFirstTickSetup();
    bool DoesGameModeAllowPermMarred();
    void DoBeginWaitingStage();
    void DoBeginTVIntroStage();
    void DoBeginTransformingStage();
    void DoBeginStartupStage();
    void DoBeginIncubatingStage();
    void DoBeginHuntingStage();
    bool DidGameEndFromDisconnect();
    void DetermineEOMState(FPlayerMatchInfoData& PlayerMatchInfoData, class AGameplayPC* pGameplayPC);
    void DetermineCharacterTypes();
    void DestroyAllTeenBots();
    void DestroyAllEvilBots();
    void DestroyActor(class AActor* pActor, bool bPlayerLeaving);
    void DebugDarkShard();
    void ConsumePrizesForPlayers();
    void CollectStartOfMatchAnalytics();
    void CollectEndOfMatchAnalytics();
    void ClearSortedPlayerControllers();
    void CheckIfGameIsExpired(float DeltaSeconds);
    void CheckAllPlayersPresent();
    void CalculateRankAdjustment(FPlayerMatchInfoData& PlayerMatchInfoData, class AGameplayPC* pGameplayPC);
    void BlockVoiceChatTeenPlayers();
    void BeginShutdownStage();
    void BeginSendFinalAnalyticsDataStage();
    void BeginProcessEndGameDataStage();
    void AwardEndGameScoreBonuses();
    void AttemptKickEvilFromVoiceChat();
    void AssignStoredPlayerInfoToGameplayPS(class APlayerController* pOldPlayerController, class APlayerController* pNewPlayerController);
    void AssignPlayerColors();
    void AssignMatchModStartingPickups();
    void AssignMatchMods();
    void AssignMatchModResurrectModifiers();
    void AssignMatchModGlobalMultiplier();
    void AssignMatchModEffigy(class AGameplayPS* pGameplayPS, class AFPChar* pFPChar);
    void AppendPlayingAsAgainstEvents();
    void AnalyticsEventDelegateResponse(bool eventSucceeded, int32 responseCode, FString Response);
    void AddPlayerController(class APlayerController* pPlayerController, int32& Index);
    void AddDownGoodPlayerMainTPChar(class ATPChar* pDownedTPChar);
}; // Size: 0x438

class AGameplayGS : public AGameState
{
    EGameplayStage mGameplayStage;                                                    // 0x0290 (size: 0x1)
    float mTimeRemaining;                                                             // 0x0294 (size: 0x4)
    float mTotalStageTime;                                                            // 0x0298 (size: 0x4)
    TArray<int32> mEvilDamageRequired;                                                // 0x02A0 (size: 0x10)
    TArray<EWeaponTypeEnum> mEvilWeaponTypeHit;                                       // 0x02B0 (size: 0x10)
    TArray<class ATPChar*> mAllMainTPChars;                                           // 0x02C0 (size: 0x10)
    TArray<class APickupBase*> mAllPickups;                                           // 0x02D0 (size: 0x10)
    class UPingSystemComponent* mpPingSystemComponent;                                // 0x02E0 (size: 0x8)
    class UDarkShardManager* mpDarkShardManager;                                      // 0x02E8 (size: 0x8)
    class USearchablePointManagerComponent* mpSearchablePointManagerComponent;        // 0x02F0 (size: 0x8)
    class UStickerSystemComponent* mpStickerSystemComponent;                          // 0x02F8 (size: 0x8)
    TArray<class AEvilScreamEffect*> mEvilScreams;                                    // 0x0300 (size: 0x10)
    TArray<FDisconnectedPlayerStruct> mInactivePlayers;                               // 0x0310 (size: 0x10)
    TArray<EResurrectModifier> mActiveResurrectModifiers;                             // 0x0320 (size: 0x10)
    TArray<ESeasonalEventType> mClientActiveSeasonalEvents;                           // 0x0330 (size: 0x10)
    FMatchSettings mMatchSettings;                                                    // 0x0340 (size: 0x50)
    class UNiagaraParameterCollection* mGameplayNiagaraParameterCollection;           // 0x0390 (size: 0x8)
    class UMaterialParameterCollection* mpGameplayMaterialParameterCollection;        // 0x0398 (size: 0x8)
    TMap<class ATPChar*, class FCoopAssistData> mServerCoopScoreCandidates;           // 0x03A0 (size: 0x50)
    TArray<int32> mEvilTimesWounded;                                                  // 0x03F0 (size: 0x10)
    class ACinematicEnd* mpCinematicEnd;                                              // 0x0400 (size: 0x8)
    bool mbIsUsingMonkey;                                                             // 0x0408 (size: 0x1)
    bool mbIsScoreDataDirty;                                                          // 0x0409 (size: 0x1)
    class UMatchModManager* mpMatchModManager;                                        // 0x0410 (size: 0x8)
    float mGlobalPointMultiplier;                                                     // 0x0418 (size: 0x4)
    TArray<class ALifeEssenceSpawner*> mLifeEssenceSpawnerList;                       // 0x0420 (size: 0x10)
    float mTimeSinceLastLifeEssenceSpawned;                                           // 0x0430 (size: 0x4)
    int32 mServerNumSinceLargeLifeEssence;                                            // 0x0434 (size: 0x4)
    int32 mServerTotalLifeEssenceSpawned;                                             // 0x0438 (size: 0x4)
    class UWorldEffectsManager* mpWorldEffectsManager;                                // 0x0440 (size: 0x8)
    TArray<class AStationBase*> mStationList;                                         // 0x0448 (size: 0x10)
    TArray<class AEnergyPoint*> mEnergyPointList;                                     // 0x0458 (size: 0x10)
    TArray<class AHidePoint*> mHidePointList;                                         // 0x0468 (size: 0x10)
    class UInteractablePropManager* mpInteractablePropManager;                        // 0x0478 (size: 0x8)
    TArray<class ANoisemakerActor*> mNoisemakerActorList;                             // 0x0480 (size: 0x10)
    TArray<class AFlameMineChar*> mFlameMineCharExposedEvilList;                      // 0x0490 (size: 0x10)
    bool mbEvilWon;                                                                   // 0x04A0 (size: 0x1)
    FMatchSummaryInfoData mSharedMatchSummaryInfoData;                                // 0x04A8 (size: 0x80)
    bool mbGameAborted;                                                               // 0x0528 (size: 0x1)
    float mTimeSpentIncubating;                                                       // 0x052C (size: 0x4)
    bool mbResurrectPickupUsed;                                                       // 0x0530 (size: 0x1)
    bool mbHaveTeensSeenTheEvil;                                                      // 0x0531 (size: 0x1)
    bool mbLockboxDiscovered;                                                         // 0x0532 (size: 0x1)
    float mTimeSecondsWhenGameplayBegan;                                              // 0x0534 (size: 0x4)
    ESeasonalEventType mEffigySeasonalEventType;                                      // 0x0538 (size: 0x1)

    bool WasResurrectPickupUsed();
    bool ShowDollsDamagePanel();
    void SetScoreDataDirty(bool bSet);
    void SetIsUsingMonkey(bool isUsing);
    void SendEvent(class ABaseChar* pBaseChar, EAnalyticsEventType Event);
    void SendCraftingStationEvent(class ABaseChar* pBaseChar);
    void OverrideSearchableMinAndMaxRechargeTime(float Min, float Max, ESearchableType searchType);
    void OnRep_MatchSettings();
    void OnRep_InactivePlayers();
    void OnRep_GameplayStage();
    int32 NumberOfGoodPlayers();
    void MulticastAllStartCinematicEnd();
    void MulticastAllSpawnCinematicEnd(class ATPChar* pTPChar);
    void MulticastAllAdjustHearingMultiplier(float Val);
    void MulicastAllWorldEffectsTrigger(class AWorldEffectsTrigger* pWorldEffectsTrigger);
    bool IsStage(EGameplayStage aStage);
    bool IsScoreDataDirty();
    bool IsPlayingInEditor();
    bool IsMainEvil(class ABaseChar* pBaseChar);
    bool IsLockboxDiscovered();
    bool IsInHuntStage();
    bool IsGameScored();
    bool IsGameFinished();
    bool IsGameAborted();
    bool IsFlameMineCharExposedEvil(class ATPChar* pTPChar);
    bool IsAnyTeenInjured();
    bool IsActiveEvil(class ABaseChar* pBaseChar);
    bool HaveTeensSeenTheEvil();
    bool HasGameStarted();
    class UWorldEffectsManager* GetWorldEffectsManager();
    FText GetWinConditionText(bool bTeamGood);
    float GetTimeSpentIncubating();
    float GetTimeSecondsWhenGameplayBegan();
    float GetTimeSecondsSinceGameplayBegan();
    class ATPChar* GetTeenBecomingEvil();
    class UStickerSystemComponent* GetStickerSystemComponent();
    TArray<class AStationBase*> GetStationsOfType(EDamageType DamageType);
    TArray<class AStationBase*> GetStationList();
    float GetStageTimeRemaining();
    EGameplayStage GetStage();
    FMatchSummaryInfoData GetSharedMatchInfoData();
    class USearchablePointManagerComponent* GetSearchablePointManagerComponent();
    TArray<EResurrectModifier> GetResurrectModifiers();
    class ANoisemakerActor* GetPrimaryRevealingNoisemaker();
    class AGameplayPS* GetPreviousGameplayPS(class AGameplayPS* pCurrentGameplayPS);
    class UPingSystemComponent* GetPingSystemComponent();
    int32 GetNumTeensProne();
    int32 GetNumTeensDead();
    int32 GetNumTeensAlive();
    int32 GetNumMarredTeens();
    int32 GetNumberOfAliveEvils();
    int32 GetNumArmedTeens();
    int32 GetNumActiveTeens();
    class AGameplayPS* GetNextGameplayPS(class AGameplayPS* pCurrentGameplayPS);
    int32 GetMaxEvilDamageRequired();
    int32 GetMaxAllowedLifeEssenceOnMap();
    FMatchSettings GetMatchSettings();
    class UMatchModManager* GetMatchModManager();
    class AFPChar* GetMainEvil();
    class UInteractablePropManager* GetInteractablePropManager();
    TArray<class AHidePoint*> GetHidePointList();
    TArray<class ATPChar*> GetGoodTPChars();
    TArray<class AGameplayPS*> GetGoodPlayers();
    EGameplayStage GetGameplayStage();
    class AGameplayPS* GetGameplayPSFromPlayerMainTPChar(class ABaseChar* pBaseChar);
    TArray<EWeaponTypeEnum> GetEvilWeaponTypeHit();
    TArray<int32> GetEvilTimesWhenWounded();
    TArray<class AEvilScreamEffect*> GetEvilScreams();
    int32 GetEvilDamageRequiredByDamageType(EDamageType DamageType);
    TArray<int32> GetEvilDamageRequiredArray();
    TArray<class AEnergyPoint*> GetEnergyPointList();
    ESeasonalEventType GetEffigySeasonalEventType();
    TArray<FDisconnectedPlayerStruct> GetDisconnectedPlayers();
    class UDarkShardManager* GetDarkShardManager();
    int32 GetCurrentEvilDamageTaken();
    int32 GetCurrentEvilDamageRequired();
    TArray<ESeasonalEventType> GetClientActiveSeasonalEvents();
    class AActor* GetCinematicEnd();
    TArray<class ATPChar*> GetAllTPChars(bool bExcludeObserver);
    TArray<class ANoisemakerActor*> GetAllRegisteredNoisemakers();
    TArray<class ATPChar*> GetAllPlayerMainTPChars();
    TArray<class APickupBase*> GetAllPickups();
    TArray<class ATPChar*> GetAllMainTPChars();
    TArray<class AFPChar*> GetAllEvils();
    TArray<class ATPChar*> GetAllActiveTPChars();
    class AFPChar* GetActiveEvilFPChar();
    class ATPChar* GetActiveEvil();
    void DoServerUpdateLifeEssenceSpawners(float DeltaTime);
    void DoServerUpdateEvilSpectrals(float DeltaSeconds);
    void DoServerUpdateCoopCandidatesOnHit(class AFPChar* pEvil, class AActor* pAttackerActor, EWeaponHitType awardType);
    void DoServerUpdateCoopCandidates(float DeltaTime);
    void DoServerUnregisterStation(class AStationBase* pStation);
    void DoServerUnregisterHidePoint(class AHidePoint* pHidePoint);
    void DoServerUnregisterEnergyPoint(class AEnergyPoint* pEnergyPoint);
    void DoServerUnregisterDarkShardSpawner(class ADarkShardSpawner* pDarkShardSpawner);
    void DoServerSpawnLifeEssence();
    void DoServerSetTotalLifeEssenceSpawned(int32 Total);
    void DoServerSetTimeWounded();
    void DoServerSetTimeSpentIncubating(float timeIncubating);
    void DoServerSetTimeSinceLastLifeEssenceSpawned(float NewValue);
    void DoServerSetTimeSecondsWhenGameplayBegan(float TimeSeconds);
    void DoServerSetStageTimeRemaining(float TimeRemaining);
    void DoServerSetSeasonalEvents(TArray<ESeasonalEventType> seasonalEvent);
    void DoServerSetResurrectPickupUsed(bool bSet);
    void DoServerSetNumberOfAliveEvils(int32 Val);
    void DoServerSetMatchSettings(const FMatchSettings& MatchSettings);
    void DoServerSetLockboxDiscovered(bool bSet);
    void DoServerSetHaveTeensSeenTheEvil(bool bSet);
    void DoServerSetGameplayStage(EGameplayStage stage, float timeRemainingInStage);
    void DoServerSetGameAborted(bool bAborted);
    void DoServerSetEvilWon(bool bNewValue);
    void DoServerSetEvilDamageRequiredByDamageType(EDamageType DamageType, int32 newDamageRequired);
    void DoServerSetEvilDamageHitByWeaponType(EWeaponTypeEnum weaponType);
    void DoServerSetEffigySeasonalEventType(ESeasonalEventType effigySeasonalEventType);
    void DoServerResetGameplayStage();
    void DoServerRemoveMainTPChar(class ATPChar* pTPChar);
    void DoServerRemoveFlameMineCharExposedEvil(class AFlameMineChar* pFlameMineChar);
    void DoServerRemoveEvilScream(class AEvilScreamEffect* newScream);
    void DoServerRemoveCoopScoreCandidate(class ATPChar* pCandidate);
    void DoServerRegisterStation(class AStationBase* pStation);
    void DoServerRegisterNoisemaker(class ANoisemakerActor* pNoisemaker);
    void DoServerRegisterLifeEssenceSpawner(class ALifeEssenceSpawner* pSpawner);
    void DoServerRegisterHidePoint(class AHidePoint* pHidePoint);
    void DoServerRegisterEnergyPoint(class AEnergyPoint* pEnergyPoint);
    void DoServerRegisterDarkShardSpawner(class ADarkShardSpawner* pDarkShardSpawner);
    void DoServerOnEvilHitTeen();
    int32 DoServerGetTotalLifeEssenceSpawned();
    float DoServerGetTimeUntilLifeEssenceSpawn();
    float DoServerGetTimeSinceLastLifeEssenceSpawned();
    float DoServerGetGlobalPointMultiplier();
    float DoServerGetDamagingAssistTimeRemaining(class ATPChar* pCandidate);
    void DoServerAwardCoopCandidates(class AFPChar* pEvil);
    void DoServerApplyScoreOnMimicBreak(class AFPChar* pEvil);
    void DoServerAddResurrectModifier(EResurrectModifier newMod);
    void DoServerAddRandomResurrectModifier();
    void DoServerAddMainTPChar(class ATPChar* pTPChar);
    void DoServerAddGlobalPointMultiplier(float toAdd);
    void DoServerAddFlameMineCharExposedEvil(class AFlameMineChar* pFlameMineChar);
    void DoServerAddEvilScream(class AEvilScreamEffect* newScream);
    void DoServerAddCoopScoreCandidate(class ATPChar* pCandidate, FCoopAssistData assistData);
    void DoServerActivateWorldEffectsTrigger(class AWorldEffectsTrigger* pWorldEffectsTrigger);
    void DoEvent(EAnalyticsEventType Event, bool delaySend);
    bool DidGoodWin();
    bool DidEvilWin();
    void ChangeCharacter(ECharacterType CharacterType);
    bool CanWeaponHarmEvil(class AWeaponBase* pWeapon);
    bool CanDamageTypeHarmEvil(EDamageType DamageType);
    bool AllowTutorialFunctions();
    bool AllowDebugKeys();
}; // Size: 0x540

class AGameplayHUD : public ABaseHUD
{
    class ATPChar* mpTrackedTPChar;                                                   // 0x0370 (size: 0x8)
    float mMaximumEvilVignetteAlpha;                                                  // 0x0378 (size: 0x4)
    float mMaximumTeenSpectralVignetteAlpha;                                          // 0x037C (size: 0x4)
    float mHighSurvivorVignetteAlpha;                                                 // 0x0380 (size: 0x4)
    float mLowSurvivorVignetteAlpha;                                                  // 0x0384 (size: 0x4)
    class UFont* mpRobotoFont;                                                        // 0x0388 (size: 0x8)
    class UTexture2D* mpDamageVignetteTexture;                                        // 0x0390 (size: 0x8)
    class UTexture2D* mpTalismanVignetteTexture;                                      // 0x0398 (size: 0x8)
    class UTexture2D* mpDangerVignetteTexture;                                        // 0x03A0 (size: 0x8)
    class UBaseOverlay* mpActiveOverlay;                                              // 0x03A8 (size: 0x8)
    class UGameplayHUDInterface* mpTeenHUDInterface;                                  // 0x03B0 (size: 0x8)
    TSubclassOf<class UGameplayHUDInterface> mTeenHUDInterfaceClass;                  // 0x03B8 (size: 0x8)
    class UGameplayHUDInterface* mpEvilHUDInterface;                                  // 0x03C0 (size: 0x8)
    TSubclassOf<class UGameplayHUDInterface> mEvilHUDInterfaceClass;                  // 0x03C8 (size: 0x8)
    class UHUDStatusPanels* mpStatusPanelsHUD;                                        // 0x03D0 (size: 0x8)
    TSubclassOf<class UHUDStatusPanels> mpStatusPanelsHUDClass;                       // 0x03D8 (size: 0x8)
    TSubclassOf<class UHUDPingIndicatorWidget> mPingIndicatorHUDClass;                // 0x03E0 (size: 0x8)
    TSubclassOf<class UHUDAuraIndicatorWidget> mAuraIndicatorHUDClass;                // 0x03E8 (size: 0x8)
    TSubclassOf<class UHUDFailedStationIndicatorWidget> mFailedStationIndicatorHUDClass; // 0x03F0 (size: 0x8)
    class UOptionsScreen* mpOptionsScreen;                                            // 0x03F8 (size: 0x8)
    TSubclassOf<class UOptionsScreen> mOptionsScreenHUD;                              // 0x0400 (size: 0x8)
    class UPauseMenuScreen* mpPauseMenuScreen;                                        // 0x0408 (size: 0x8)
    TSubclassOf<class UPauseMenuScreen> mPauseMenuScreenHUD;                          // 0x0410 (size: 0x8)
    class UWinLoseScreen* mpWinLoseScreen;                                            // 0x0418 (size: 0x8)
    TSubclassOf<class UWinLoseScreen> mWinLoseScreenClass;                            // 0x0420 (size: 0x8)
    class UDebugScreen* mpDebugScreen;                                                // 0x0428 (size: 0x8)
    TSubclassOf<class UScenarioLoaderWidget> mScenarioLoaderClass;                    // 0x0430 (size: 0x8)
    class UScenarioLoaderWidget* mpScenarioLoader;                                    // 0x0438 (size: 0x8)
    TSubclassOf<class UDebugScreen> mDebugScreenHUD;                                  // 0x0440 (size: 0x8)
    class UHUDEvilPanel* mpEvilPanelHUD;                                              // 0x0448 (size: 0x8)
    TSubclassOf<class UHUDEvilPanel> mEvilPanelHUDClass;                              // 0x0450 (size: 0x8)
    class UHUDEvilWheelPanel* mpEvilWheelPanelHUD;                                    // 0x0458 (size: 0x8)
    TSubclassOf<class UHUDEvilWheelPanel> mEvilWheelPanelHUDClass;                    // 0x0460 (size: 0x8)
    TSubclassOf<class UHUDTutorialPanel> mTutorialPanelHUDClass;                      // 0x0468 (size: 0x8)
    class UHUDTutorialPanel* mpTutorialPanelHUD;                                      // 0x0470 (size: 0x8)
    class UHUDPickupPanel* mpPickupPanelHUD;                                          // 0x0478 (size: 0x8)
    class UHUDEffigyPanel* mpEffigyPanelHUD;                                          // 0x0480 (size: 0x8)
    class UHUDAugmentPanel* mpAugmentPanelHUD;                                        // 0x0488 (size: 0x8)
    class UHUDWeaponPanel* mpWeaponPanelHUD;                                          // 0x0490 (size: 0x8)
    class UHUDAnnouncementPanel* mpAnnouncementPanelHUD;                              // 0x0498 (size: 0x8)
    class UHUDServerTypeWidget* mpServerTypeWidgetHUD;                                // 0x04A0 (size: 0x8)
    TSubclassOf<class UHUDReticle> mReticleHUDClass;                                  // 0x04A8 (size: 0x8)
    class UHUDReticle* mpReticleHUD;                                                  // 0x04B0 (size: 0x8)
    TSubclassOf<class UHUDDangerSenseWidget> mpDangerSenseHUDClass;                   // 0x04B8 (size: 0x8)
    class UHUDDangerSenseWidget* mpDangerSenseHUD;                                    // 0x04C0 (size: 0x8)
    TSubclassOf<class UHUDPickupPanel> mPickupPanelHUDClass;                          // 0x04C8 (size: 0x8)
    TSubclassOf<class UHUDEffigyPanel> mEffigyPanelHUDClass;                          // 0x04D0 (size: 0x8)
    TSubclassOf<class UHUDAugmentPanel> mAugmentPanelHUDClass;                        // 0x04D8 (size: 0x8)
    TSubclassOf<class UHUDWeaponPanel> mWeaponPanelHUDClass;                          // 0x04E0 (size: 0x8)
    TSubclassOf<class UHUDAnnouncementPanel> mAnnouncementPanelHUDClass;              // 0x04E8 (size: 0x8)
    TSubclassOf<class UHUDTabScreen> mUHUDTabScreenClass;                             // 0x04F0 (size: 0x8)
    TSubclassOf<class UHUDServerTypeWidget> mHUDServerTypeWidgetClass;                // 0x04F8 (size: 0x8)
    TSubclassOf<class UHUDScorePopup> mHUDScorePopupClass;                            // 0x0500 (size: 0x8)
    class UHUDTabScreen* mpTabScreen;                                                 // 0x0508 (size: 0x8)
    TSubclassOf<class UHUDStickerMenu> mHUDStickerMenuClass;                          // 0x0510 (size: 0x8)
    class UHUDStickerMenu* mpStickerMenuHUD;                                          // 0x0518 (size: 0x8)
    class UVoiceChatMenuScreen* mpVoiceChatMenuScreen;                                // 0x0520 (size: 0x8)
    TSubclassOf<class UVoiceChatMenuScreen> mVoiceChatMenuScreenClass;                // 0x0528 (size: 0x8)
    class UPlayerDetailsMenuScreen* mpPlayerDetailsScreen;                            // 0x0530 (size: 0x8)
    TSubclassOf<class UPlayerDetailsMenuScreen> mpPlayerDetailsScreenClass;           // 0x0538 (size: 0x8)
    class UCinematicCameraControlPanel* mpCinematicCameraControlPanel;                // 0x0540 (size: 0x8)
    TSubclassOf<class UCinematicCameraControlPanel> mpCinematicCameraControlPanelClass; // 0x0548 (size: 0x8)
    class UHUDEvilOverlayPanel* mpEvilOverlayPanel;                                   // 0x0550 (size: 0x8)
    TSubclassOf<class UHUDEvilOverlayPanel> mpCurrentEvilOverlayClass;                // 0x0558 (size: 0x8)
    class UHUDEmoteMenu* mpEmoteMenuHUD;                                              // 0x0560 (size: 0x8)
    TSubclassOf<class UHUDEmoteMenu> mpEmoteMenuClass;                                // 0x0568 (size: 0x8)
    TArray<class UHUDPlayerName*> mpPlayerNameWidgetList;                             // 0x0570 (size: 0x10)
    TSubclassOf<class UHUDPlayerName> mpPlayerNameClass;                              // 0x0580 (size: 0x8)
    TSubclassOf<class UHUDReplayPanel> mpReplayPanelClass;                            // 0x0588 (size: 0x8)
    TSubclassOf<class UHUDMinigame_Rotator> mpMinigameRotatorClass;                   // 0x0590 (size: 0x8)
    class UHUDMinigame_Rotator* mpMinigameRotatorWidget;                              // 0x0598 (size: 0x8)
    TSubclassOf<class UHUDMinigame_RingAligning> mpMinigameRingAligningClass;         // 0x05A0 (size: 0x8)
    class UHUDMinigame_RingAligning* mpMinigameRingAligningWidget;                    // 0x05A8 (size: 0x8)
    TSubclassOf<class UHUDMinigame_BarTiming> mpMinigameBarTimingClass;               // 0x05B0 (size: 0x8)
    class UHUDMinigame_BarTiming* mpMinigameBarTimingWidget;                          // 0x05B8 (size: 0x8)
    TSubclassOf<class UHUDActionPromptPanel> mpActionPromptClass;                     // 0x05C0 (size: 0x8)
    class UHUDActionPromptPanel* mpActionPromptWidget;                                // 0x05C8 (size: 0x8)
    TSubclassOf<class UHUDWeaponSelectionWheel> mpWeaponSelectionWheelClass;          // 0x05D0 (size: 0x8)
    class UHUDWeaponSelectionWheel* mpWeaponSelectionWheelWidget;                     // 0x05D8 (size: 0x8)
    class UHUDReplayPanel* mpReplayPanelHUD;                                          // 0x05E0 (size: 0x8)
    TArray<class UHUDScorePopup*> mCurrentlyDisplayedScorePopup;                      // 0x0690 (size: 0x10)
    TArray<class UHUDAuraIndicatorWidget*> mCurrentlyDisplayedAuraIndicators;         // 0x06A8 (size: 0x10)

    void UpdateScorePopupQueue();
    void UpdateGameplayHUDInterfaces(class ATPChar* pTrackedChar);
    void UpdateGameplayCursorState();
    void UpdateEvilSelection(bool bAnimateLeft);
    void ToggleCinematicCameraControlPanel();
    void ShowPlayerDetailsScreen();
    void ShowLeaveMatchModal();
    void ShowInGameScores();
    void ShowExitGameModal();
    void ShowEvilSelection();
    void ShowEndMatchModal();
    void ShowDiscardOptionsModal();
    void ShowCinematicCameraControlPanel();
    void SetTutorialTextMode(bool bConfirmationOverlay);
    void SetTutorialTextBoxVisibility(ESlateVisibility Visibility);
    void SetTutorialText(FText tutorialText, float timeToPrint);
    void SetTutorialSubTextBoxVisibility(ESlateVisibility Visibility);
    void SetTutorialSubText(FText subText, float timeToPrint);
    void SetTutorialPanelVisibility(ESlateVisibility Visibility);
    void SetTutorialHideUI(bool Val);
    void SetTrackedTPChar(class ATPChar* pTrackedTPChar);
    void SetShowingCursor();
    void SetDisableStatusBar(bool bNewValue);
    void SetDisableSpeechIndicators(bool bNewValue);
    void SetDisablePlayerCards(bool bNewValue);
    void SetDisablePings(bool bNewValue);
    void SetDisablePickupPanel(bool bNewValue);
    void SetDisableItemGlint(bool bNewValue);
    void SetDisableEvilAbilityPanel(bool bNewValue);
    void SetDisableDamagePanel(bool bNewValue);
    void SetDisableCraftingIcons(bool bNewValue);
    void SetDisableActionPanel(bool bNewValue);
    void SetActiveOverlay(class UBaseOverlay* pOverlayScreen);
    void RemoveHUDAuraIndicatorForActor(class AActor* pActor);
    void OnTrackedCharChanged();
    void OnScrolled(int32 Direction);
    void OnSaveOptions();
    void OnLeaveMatch();
    void OnExitGame();
    void OnEndMatch();
    void OnDiscardOptions();
    bool IsTutorialOverlayActive();
    bool IsTrackingOwnedTPChar();
    bool IsTabScreenActive();
    bool IsStatusBarDisabled();
    bool IsSpeechIndicatorsDisabled();
    bool IsScorePopupsDisabled();
    bool IsReticleDisabled();
    bool IsPlayerCardsDisabled();
    bool IsPingsDisabled();
    bool IsPickupPanelDisabled();
    bool IsItemGlintDisabled();
    bool IsGameHUDDisabled();
    bool IsEvilAbilityPanelDisabled();
    bool IsDamagePanelDisabled();
    bool IsCraftingIconsDisabled();
    bool IsActionPanelDisabled();
    void HidePlayerDetailsScreen();
    void HideOverlay();
    void HideInGameScores();
    void HideEvilSelection();
    void HideCinematicCameraControlPanel();
    bool HasActiveOverlay();
    class UHUDWeaponSelectionWheel* GetWeaponSelectionWheel();
    class UVoiceChatMenuScreen* GetVoiceChatMenuOverlay();
    class ATPChar* GetTrackedTPChar();
    class UHUDStickerMenu* GetStickerMenu();
    class UHUDReticle* GetReticleHUD();
    class UPlayerDetailsMenuScreen* GetPlayerDetailsMenuScreen();
    class UHUDPlayerCardPanel* GetPlayerCardPanel();
    class ATPChar* GetOwningTPChar();
    class UHUDNotificationsPanel* GetNotificationsPanel();
    TSubclassOf<class UHUDEvilOverlayPanel> GetEvilOverlayPanelClass();
    class UHUDEvilOverlayPanel* GetEvilOverlayPanel();
    class UHUDEvilDamagePanel* GetEvilDamagePanel();
    class UHUDEmoteMenu* GetEmoteMenu();
    class UHUDEffigyPanel* GetEffigyPanel();
    class UHUDRadialMenu* GetCurrentlyDisplayedRadialMenu();
    class UGameplayHUDInterface* GetCurrentHUDInterface();
    class UCinematicCameraControlPanel* GetCinematicCameraControlPanel();
    class UHUDAnnouncementPanel* GetAnnouncementPanel();
    void ForceCloseAnyOpenRadialMenus(bool bCancel);
    void EnqueueScorePopup(const FText& Text, int32 baseAmount, int32 bonusAmount);
    void DrawTalismanVignetteOverlay();
    void DrawDamageVignetteOverlay();
    void CycleEvilSelectionRight();
    void CycleEvilSelectionLeft();
    void CreateHUDPingIndicator(class APing* pPingToAdd);
    void CreateHUDFailedStationIndicator(class AStationBase* pStation);
    void ClearHUDPingIndicator(class AActor* pPingToRemove);
    void ClearHUDFailedStationIndicator(class AStationBase* pStation);
    bool AreAnyRadialMenusCurrentlyVisible();
    bool AllowWeaponSelectionWheel();
    bool AllowWeaponPanel();
    bool AllowStatusPanels();
    bool AllowReticle();
    bool AllowPlayerCardPanel();
    bool AllowPings();
    bool AllowPickupPanel();
    bool AllowNotificationsPanel();
    bool AllowEvilRagePanel();
    bool AllowEvilPanel();
    bool AllowEvilDamagePanel();
    bool AllowEffigyPanel();
    bool AllowDarkShardOverlay();
    bool AllowAugmentPanel();
    bool AllowAnnouncementPanel();
    bool AllowActionPrompt();
    bool AllowActionBarPanel();
    void AddScoreScorePopup(const FText& Text, int32 baseAmount, int32 bonusAmount);
}; // Size: 0x6C0

class AGameplayPC : public ABasePC
{
    class UPrimitiveComponent* mpComponentToAlign;                                    // 0x05C8 (size: 0x8)
    EComponentAlignType mComponentAlignType;                                          // 0x05D0 (size: 0x1)
    int32 mUniquePlayerIndex;                                                         // 0x05D4 (size: 0x4)
    class UBusyModalWidget* mpBusyModal;                                              // 0x05D8 (size: 0x8)
    bool mbKbForwardPressed;                                                          // 0x05E0 (size: 0x1)
    bool mbKbRightPressed;                                                            // 0x05E1 (size: 0x1)
    bool mbKbBackwardPressed;                                                         // 0x05E2 (size: 0x1)
    bool mbKbLeftpressed;                                                             // 0x05E3 (size: 0x1)
    bool mbCharacterSpawned;                                                          // 0x05E4 (size: 0x1)
    float mPingCooldownPenalty;                                                       // 0x05E8 (size: 0x4)
    float mPingCooldown;                                                              // 0x05EC (size: 0x4)
    bool mbDidDoubleClickPingThisClick;                                               // 0x05F0 (size: 0x1)
    float mStickerCooldownTimer;                                                      // 0x05F4 (size: 0x4)
    float mEmoteCooldownTimer;                                                        // 0x05F8 (size: 0x4)
    int32 mSelectedStickerIndex;                                                      // 0x05FC (size: 0x4)
    bool mbDebugAugmentsPanelEnabled;                                                 // 0x0600 (size: 0x1)
    float mStickerHoldDownTimer;                                                      // 0x0604 (size: 0x4)
    bool mHoldingDownStickerButton;                                                   // 0x0608 (size: 0x1)
    float mPingHoldDownTimer;                                                         // 0x060C (size: 0x4)
    bool mHoldingDownPingButton;                                                      // 0x0610 (size: 0x1)
    bool mbHoldingDownEmoteButton;                                                    // 0x0611 (size: 0x1)
    float mEmoteHoldDownTimer;                                                        // 0x0614 (size: 0x4)
    int32 mLastPickedEmoteSlot;                                                       // 0x0618 (size: 0x4)
    bool mbWaitingToDisconnect;                                                       // 0x061C (size: 0x1)
    float mTimeSinceLastIconPingRequest;                                              // 0x0620 (size: 0x4)
    bool mbLastPingRequestSelfType;                                                   // 0x0624 (size: 0x1)
    bool mbWaitingForReleaseAfterClosingRadialMenu;                                   // 0x0625 (size: 0x1)
    bool mbWaitingOnSecondPingClick;                                                  // 0x0626 (size: 0x1)
    bool mbDeathenticateAccepted;                                                     // 0x0627 (size: 0x1)
    bool mbServerRequestedDeauthenticate;                                             // 0x0628 (size: 0x1)
    bool mbServerDeauthenticateGranted;                                               // 0x0629 (size: 0x1)
    float mDeauthenticateTimeoutTimer;                                                // 0x062C (size: 0x4)
    ETritonSpatializationMode mTritonSpatializationMode;                              // 0x0639 (size: 0x1)
    class UDamageIndicatorManager* mpDamageIndicatorManager;                          // 0x0640 (size: 0x8)

    bool WaitingForReleaseAfterClosingRadialMenu();
    void UpdateStickerHoldDownTimer();
    void UpdateRunningMode();
    void UpdateRequestLeaveMatch(float DeltaTime);
    void UpdatePingRequestTimer();
    void UpdatePingHoldDownTimer();
    void UpdateMatchStarted();
    void UpdateEmoteHoldDownTimer();
    void UpdateAlignToComponent(float DeltaSeconds);
    void StickerStopHoldDown();
    void StickerStartHoldDown();
    void SetWaitingToDisconnect(bool bNewValue);
    void SetWaitingOnSecondPingClick(bool bNewValue);
    void SetUniquePlayerIndex(int32 Index);
    void SetTritonSpatializationMode(ETritonSpatializationMode Mode);
    void SetTimeSinceLastIconPingRequest(float NewValue);
    void SetSelectedSticker(int32 selectedSticker);
    void SetLoadingScreenToWait(const TArray<FString>& Names);
    void ServerSpawnAICharacter(ECharacterType typeToSpawn, TSubclassOf<class AAIController> AIControllerClass, FTransform SpawnTransform, EAIDifficultyLevel aiDiffLevel);
    void ServerSetViewTarget(class AActor* pNewViewTarget, FViewTargetTransitionParams Params);
    void ServerRequestLeaveMatch();
    void ServerRequestDisconnect();
    void ServerReportClientSpawned();
    void ServerReportClientLoadProgress(float Progress);
    void ServerReportClientLoadComplete();
    void ServerPassCharacterInfoToServer(FNetPlayerInfoStruct aPlayerInfoStructSettings);
    void ServerKillAICharacters(bool bKillTeens, bool bKillEvils);
    void ServerDebugSpawnEvilEnergy(bool bEnabled, bool bDestroySpawnedOrbs);
    void ServerDebugModifyTimeScale(float mod);
    void ServerDebugDarkShard();
    void ServerChangeCharacter(ECharacterType CharacterType);
    void ServerAttemptRemovePing(class APing* pPing);
    void ServerAttemptPing(EPingType pingType, FVector WorldLocation, FVector WorldDirection, FColor colorOverride);
    void RequestExitMatch();
    void ReleaseRadialCameraLock();
    void PingStopHoldDown();
    void PingStartHoldDown();
    void OnPingInput(bool bPressed, bool bSelfType);
    bool IsWaitingToDisconnect();
    bool IsWaitingOnSecondPingClick();
    bool IsProgressionEligible();
    bool IsPlayingInEditor();
    int32 GetUniquePlayerIndex();
    ETritonSpatializationMode GetTritonSpatializationMode();
    float GetTimeUntilCanPlaceSticker();
    float GetTimeUntilCanEmote();
    float GetTimeSinceLastIconPingRequest();
    float GetStickerCooldownTimer();
    int32 GetSelectedSticker();
    float GetPingCooldownPenalty();
    float GetPingCooldown();
    class AGameplayPS* GetGameplayPS();
    class AGameplayHUD* GetGameplayHUD();
    class UPrimitiveComponent* GetComponentToAlign();
    void EmoteStopHoldDown();
    void EmoteStartHoldDown();
    void DoServerSetComponentToAlign(class UPrimitiveComponent* pComponentToAlign, EComponentAlignType componentAlignType);
    void DoServerModifyTimeScale(float mod);
    void DoServerGrantDisconnect();
    void DisconnectTutorial();
    void DisconnectMatch();
    void ClientSetLoadingScreenToWait(const TArray<FString>& Names);
    void ClientSetFinalMatchSummaryInfo(FMatchSummaryInfoData Val);
    void ClientBeginTVIntroStage();
    void ClientBeginStartupStage();
    void ClientBeginHuntStage();
    void ClientBeginEndGameStage(bool bAborted, bool bReturningToLobby);
    void ClientAskToDisconnectFromVoice();
    void ClientAllowDisconnect();
    bool CanPlaceSticker();
    bool CanPing();
    bool CanEmote();
    void BeginFadeOutLoadingScreen();
    void AttemptRemovePing(class APing* pPing);
    void AttemptPlaceSticker(int32 stickerIndex);
    void AttemptPing(EPingType pingType);
    bool AllowDebugKeys();
}; // Size: 0x648

class AGameplayPS : public APlayerState
{
    bool mbRunningMode;                                                               // 0x0320 (size: 0x1)
    bool mbCrouchingMode;                                                             // 0x0321 (size: 0x1)
    bool mbIsSpeakingLocally;                                                         // 0x0322 (size: 0x1)
    bool mbIsKbdCrouchToggle;                                                         // 0x0323 (size: 0x1)
    bool mbIsKbdSprintToggle;                                                         // 0x0324 (size: 0x1)
    bool mbIsControllerCrouchToggle;                                                  // 0x0325 (size: 0x1)
    bool mbIsControllerSprintToggle;                                                  // 0x0326 (size: 0x1)
    FNetPlayerInfoStruct mPlayerInfo;                                                 // 0x0328 (size: 0x178)
    bool mbRequestedDisconnect;                                                       // 0x04A0 (size: 0x1)
    FCharStatsStruct mCharacterStats;                                                 // 0x04A8 (size: 0x4D0)
    bool mbShowCharVisualization;                                                     // 0x0978 (size: 0x1)
    bool mbHasActivatedSeasonalEvilSpectrals;                                         // 0x0979 (size: 0x1)
    FAnalyticServerCharStatsStruct mAnalyticServerCharacterStats;                     // 0x0980 (size: 0xC8)
    FPlayerMatchInfoData mLocalPlayerMatchInfoData;                                   // 0x0A48 (size: 0x190)

    void ToggleShowCharVisualization();
    void SetIsSpeakingLocally(bool bNewValue);
    void ServerSetSteamId(FString steamId);
    void ServerSetRunningMode(bool bRunning);
    void ServerSetKbdToggleSprint(bool bVal);
    void ServerSetKbdToggleCrouch(bool bVal);
    void ServerSetCrouchingMode(bool bCrouching);
    void ServerSetControllerToggleSprint(bool bVal);
    void ServerSetControllerToggleCrouch(bool bVal);
    void ServerRequestPossession();
    bool RequestedDisconnect();
    void OnRep_PlayerInfo();
    void MulticastOtherSetRunningMode(bool bRunning);
    void MulticastOtherSetCrouchingMode(bool bCrouching);
    bool IsSpeakingLocally();
    bool IsPromotedEvil();
    bool GetShowCharVisualization();
    ECharacterType GetPreferredTeenCharacterType();
    ECharacterType GetPreferredEvilCharacterType();
    void GetPlayerLoadoutInfo(class ATPChar* pTPChar, class UCharacterLoadout* pCharLoadout, FPlayerEOMLoadOutData& playerLoadoutData, class UPlayerLoadout* pPlayerLoadout);
    FNetPlayerInfoStruct GetPlayerInfo();
    class ATPChar* GetMainTPChar();
    FPlayerMatchInfoData GetLocalPlayerMatchInfoData();
    ECharacterType GetEvilOriginalCharacterType();
    FCharStatsStruct GetCharStatsStruct();
    FAnalyticServerCharStatsStruct GetAnalyticServerCharStats();
    void DoServerSetTimeStat(FCharStatType Type, float Time);
    void DoServerSetRequestedDisconnect(bool bSet);
    void DoServerSetRankAdjustment(int32 rankAdjustment);
    void DoServerSetKbdToggleSprint(bool bVal);
    void DoServerSetKbdToggleCrouch(bool bVal);
    void DoServerSetControllerToggleSprint(bool bVal);
    void DoServerSetControllerToggleCrouch(bool bVal);
    void DoServerIncrementTimeStat(FCharStatType Type, float DeltaTime);
    void DoServerIncrementStats(FCharStatType Type, int32 Amount);
    void DoServerIncreaseScore(EScoringCategory Category, float scoreIncrease, float Multiplier, float& outBaseIncrease, float& outBonusIncrease);
}; // Size: 0xBD8

class AHeatmapGenerator : public AActor
{
    TArray<FVector> mHeatmap;                                                         // 0x0220 (size: 0x10)
    TArray<float> mHeatmapAlpha;                                                      // 0x0230 (size: 0x10)
    int32 mHorizontalResolution;                                                      // 0x0240 (size: 0x4)
    int32 mVerticalSlicesSqrt;                                                        // 0x0244 (size: 0x4)
    class UBoxComponent* mpHeatmapVolume;                                             // 0x0248 (size: 0x8)
    FIntPoint mCharacterPixelDimensions;                                              // 0x0250 (size: 0x8)
    bool mbEvilCharacterMovement;                                                     // 0x0258 (size: 0x1)
    bool mbGoodCharacterMovement;                                                     // 0x0259 (size: 0x1)
    bool mbWeaponUsage;                                                               // 0x025A (size: 0x1)
    bool mbFramerate;                                                                 // 0x025B (size: 0x1)
    class UPostProcessComponent* mpHeatmapVisualizer;                                 // 0x0260 (size: 0x8)
    FString mHeatmapPath;                                                             // 0x0268 (size: 0x10)
    EHeatmapFileLocation mHeatmapSourceLocation;                                      // 0x0278 (size: 0x1)
    class UTexture2D* mpHeatmapToVisualize;                                           // 0x0280 (size: 0x8)
    EHeatmapAccumulationMethod mHeatmapAccumulationMethod;                            // 0x0288 (size: 0x1)
    bool mbVisualizeHeatmap;                                                          // 0x0289 (size: 0x1)
    class UTexture2D* mpAccumulateHeatmapsTexture;                                    // 0x0290 (size: 0x8)
    class UMaterialInstanceConstant* mpHeatmapVisualizerMaterial;                     // 0x0298 (size: 0x8)
    bool mbHeatmapPathDirty;                                                          // 0x02A0 (size: 0x1)
    TArray<FString> mCurrentHeatmaps;                                                 // 0x02A8 (size: 0x10)
    TArray<FHeatmapPreviewSettings> mHeatmapPathPreviewSettings;                      // 0x02B8 (size: 0x10)

}; // Size: 0x2C8

class AHidePoint : public APointBase
{
    EHideState mHideState;                                                            // 0x02C8 (size: 0x1)
    class ATPChar* mpInspectorTPChar;                                                 // 0x02D0 (size: 0x8)
    EHideMoveType mEnteringHideMoveType;                                              // 0x02D8 (size: 0x1)
    EHideMoveType mExitingHideMoveType;                                               // 0x02D9 (size: 0x1)
    class USkeletalMeshComponent* mpSkeletalMeshComponent;                            // 0x02E0 (size: 0x8)
    class USkeletalMeshComponent* mpHalloweenSkeletonMeshComponent;                   // 0x02E8 (size: 0x8)
    class USkeletalMesh* mpSkeletonMesh;                                              // 0x02F0 (size: 0x8)
    TSubclassOf<class UAnimInstance> mSkeletonAnimInstanceClass;                      // 0x02F8 (size: 0x8)
    class UAnimMontage* mpSkeletonOutMontage;                                         // 0x0300 (size: 0x8)
    bool mbCanSpawnSkeleton;                                                          // 0x0318 (size: 0x1)
    bool mbIsSkeletonActive;                                                          // 0x0319 (size: 0x1)
    class UCapsuleComponent* mpPingCapsuleCollision;                                  // 0x0320 (size: 0x8)
    class UCapsuleComponent* mpEvilCapsuleComponent;                                  // 0x0328 (size: 0x8)
    class UBillboardComponent* mpEvilGoodSprite;                                      // 0x0330 (size: 0x8)
    class UBillboardComponent* mpEvilBadSprite;                                       // 0x0338 (size: 0x8)
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0340 (size: 0x8)
    bool mbServer_OwnerRequestExit;                                                   // 0x0348 (size: 0x1)
    EHideObjectType mHideObjectType;                                                  // 0x0349 (size: 0x1)
    bool mbQuietEntry;                                                                // 0x0380 (size: 0x1)
    bool mbGlintEnabled;                                                              // 0x0381 (size: 0x1)
    bool mbOutlineEnabled;                                                            // 0x0382 (size: 0x1)
    float mTimeBeforeHideSenseReveal;                                                 // 0x0384 (size: 0x4)
    float mHideSenseRevealTime;                                                       // 0x0388 (size: 0x4)
    bool mbHideSenseRevealedLastFrame;                                                // 0x038C (size: 0x1)

    bool WasRevealedByHideSenseLastFrame();
    void UpdateAkEmitters();
    void SetRevealedByHideSenseLastFrame(bool bNewValue);
    void SetCollisionVisibilityTrace(bool bSet);
    void OnSkeletonOut(class UAnimMontage* pMontage, bool bInterrupted);
    void OnRep_HideState();
    void MulticastAllSpawnSkeleton();
    bool IsRevealedByHideSense();
    bool IsQuietEntryEnabled();
    bool IsInteractable();
    class UCapsuleComponent* GetTargetEvilCapsule();
    class UCapsuleComponent* GetTargetCapsuleByFaction(class ATPChar* pTPChar);
    class UCapsuleComponent* GetTargetCapsule();
    class USkeletalMeshComponent* GetSkeletalMesh();
    FVector GetPingAnchorLocation();
    EHideObjectType GetObjectType();
    class ATPChar* GetInspectorTPChar();
    EHideState GetHideState();
    float GetHideSenseRevealTime();
    EHideMoveType GetExitingHideMoveType();
    EHideMoveType GetEnteringHideMoveType();
    EHideMoveType GetActiveHideMoveType();
    void DoServerVerifyMinimumRootMotionPerformed();
    void DoServerUpdateHideSense(float DeltaTime);
    void DoServerSetTimeBeforeHideSenseReveal(float NewValue);
    void DoServerSetQuietEntry(bool bSet);
    void DoServerSetOwnerRequestExit(bool bRequestExit);
    void DoServerSetHideSenseRevealTime(float NewValue);
    void DoServerInspect(class ATPChar* pInspectorTPChar);
    float DoServerGetTimeBeforeHideSenseReveal();
    bool DoServerGetOwnerRequestExit();
    void DoServerDeactivateInspector();
    void DoServerClaim(class ATPChar* pOwningTPChar);
    void DoServerAttackOwner();
}; // Size: 0x398

class AHighschoolFountain : public AActor
{
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0220 (size: 0x8)

}; // Size: 0x228

class AHighschoolFurnace : public AActor
{
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0220 (size: 0x8)

}; // Size: 0x228

class AHolySlingshotProjectile : public AActor
{
    class USphereComponent* mpCollisionComponent;                                     // 0x0238 (size: 0x8)
    class USceneComponent* mpRotationComponent;                                       // 0x0240 (size: 0x8)
    class UStaticMeshComponent* mpStaticMeshComponent;                                // 0x0248 (size: 0x8)
    class UProjectileMovementComponent* mpProjectileMovementComponent;                // 0x0250 (size: 0x8)
    class UParticleSystemComponent* mpTrailParticleSystemComp;                        // 0x0258 (size: 0x8)
    class UParticleSystemComponent* mpLightBeamsParticleSystemComp;                   // 0x0260 (size: 0x8)
    class UParticleSystemComponent* mpEvilBeamParticleSystemComp;                     // 0x0268 (size: 0x8)
    class UParticleSystem* mpExplosionParticles;                                      // 0x0270 (size: 0x8)
    class UDecalComponent* mpDecalComponent;                                          // 0x0278 (size: 0x8)
    class USphereComponent* mpDamageSphereComponent;                                  // 0x0280 (size: 0x8)
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0288 (size: 0x8)
    class UAIPerceptionStimuliSourceComponent* mpPerceptionStimuliComponent;          // 0x0290 (size: 0x8)
    class UHolySlingshotSkinDataAsset* mpHolySlingshotSkinDataAsset;                  // 0x0298 (size: 0x8)
    bool mbHasHit;                                                                    // 0x02A0 (size: 0x1)
    bool mbCleaningUp;                                                                // 0x02A1 (size: 0x1)
    float mServerLifetime;                                                            // 0x02A4 (size: 0x4)
    bool mbServerStuckToArmor;                                                        // 0x02A8 (size: 0x1)
    bool mbServerStuckToMimic;                                                        // 0x02A9 (size: 0x1)
    class AFPChar* mpStuckEvil;                                                       // 0x02B0 (size: 0x8)
    FName mStuckEvilBoneName;                                                         // 0x02B8 (size: 0x8)
    FVector mImpactReflection;                                                        // 0x02C0 (size: 0xC)
    FVector mImpactLocation;                                                          // 0x02CC (size: 0xC)
    float mTrailUpdateTimer;                                                          // 0x02D8 (size: 0x4)
    uint8 mTrailLocationToUpdate;                                                     // 0x02DC (size: 0x1)

    void UpdateStuckToEvilAttachment(float DeltaSeconds);
    void UpdateEvilBeamParticle();
    void UpdateEffects(float DeltaTime);
    void OnHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit);
    void OnComponentBeginOverlap(class UPrimitiveComponent* pOverlappedComponent, class AActor* pOtherActor, class UPrimitiveComponent* pOtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);
    void MulticastAllStopWhistleSound();
    void MulticastAllStopSparklesSound();
    void MulticastAllStickToSurface(const FHitResult& Hit);
    void MulticastAllPositionCollidedEmitter(const FHitResult& Hit);
    void MulticastAllPlayWhistleSound();
    void MulticastAllPlaySparklesSound();
    void MulticastAllPlayHolyGrenadeExplosion();
    void MulticastAllExplode(bool bStuckEvil);
    void MulticastAllClearVisibility();
    bool IsStuckToEvil();
    bool IsCleaningUp();
    bool HasHit();
    FName GetStuckEvilBoneName();
    class AFPChar* GetStuckEvil();
    void DoServerUpdateLifetime(float DeltaTime);
    void DoServerSetStuckToArmor(bool bStuckToArmor);
    void DoServerSetStuckEvilBoneName(FName BoneName);
    void DoServerSetStuckEvil(class AFPChar* pStuckEvil);
    void DoServerSetLifetime(float LifeTime);
    void DoServerSetHolySlingshotSkin(class UHolySlingshotSkinDataAsset* pSkinDataAsset);
    void DoServerSetHasHit(bool bSet);
    void DoServerSetCleaningUp(bool bSet);
    bool DoServerIsStuckToArmor();
    float DoServerGetLifetime();
    void DoServerExplode();
    void DoServerExpire();
    void DoServerCheckScreams();
    void DoServerBeginCleanup();
}; // Size: 0x2E0

class AHolySlingshotWeapon : public AWeaponBase
{
    class USceneComponent* mpTargetContainer;                                         // 0x0370 (size: 0x8)
    class UStaticMeshComponent* mpTargetMesh;                                         // 0x0378 (size: 0x8)
    class UDecalComponent* mpTargetDecal;                                             // 0x0380 (size: 0x8)
    float mReloadTime;                                                                // 0x0398 (size: 0x4)
    int32 mNumBullets;                                                                // 0x039C (size: 0x4)
    bool mbRequestCancel;                                                             // 0x03A0 (size: 0x1)
    class AActor* mpProjectionHitResultActor;                                         // 0x03A8 (size: 0x8)
    TSubclassOf<class AHolySlingshotProjectile> mSlingshotProjectileToSpawn;          // 0x03B0 (size: 0x8)
    class USkeletalMeshComponent* mpSlingshotMesh;                                    // 0x03C8 (size: 0x8)

    void UpdateTargetingVisuals(float DeltaSeconds);
    void MulticastAllStopSlingshotActive();
    void MulticastAllSlingshotShake();
    void MulticastAllPlaySlingshotActive();
    void MulticastAllPlayHolyGrenadeThrowSound();
    bool IsReloading();
    class USkeletalMeshComponent* GetSlingshotMesh();
    bool GetRequestCancel();
    float GetReloadTime();
    float GetProjectileLifetime();
    int32 GetNumBullets();
    int32 GetMaxNumBullets();
    TSubclassOf<class AHolySlingshotProjectile> GetHolySlingshotProjectileToFire();
    void DoServerUpdateInput();
    void DoServerUpdateBuffer();
    void DoServerSetMaxNumBullets(int32 bulletNumber);
    void DoServerRequestCancel();
}; // Size: 0x3E0

class AHolyStaffBeam : public AActor
{
    FVector mTargetPosition;                                                          // 0x0220 (size: 0xC)
    class UStaticMeshComponent* mpBeamStaticMesh;                                     // 0x0230 (size: 0x8)
    bool mbIsBeamActivated;                                                           // 0x0238 (size: 0x1)
    float mExpansionTime;                                                             // 0x023C (size: 0x4)

    void UpdateVisibility();
    void UpdateSize(float DeltaTime);
    void UpdatePosition(float DeltaTime);
    void SetTargetPosition(FVector NewPosition);
    void SetIsBeamActivated(bool bNewValue);
}; // Size: 0x240

class AHolyStaffWeapon : public AWeaponBase
{
    class UNiagaraComponent* mpNiagaraEffectsComponent;                               // 0x0378 (size: 0x8)
    bool mbDrainingHealth;                                                            // 0x0380 (size: 0x1)
    class USphereComponent* mpCollisionComponent;                                     // 0x0388 (size: 0x8)
    bool mbLockedOn;                                                                  // 0x0390 (size: 0x1)
    bool mbIsHittingEvil;                                                             // 0x0391 (size: 0x1)
    int32 mHitBoneIdx;                                                                // 0x0394 (size: 0x4)
    class AFPChar* mpHitEvil;                                                         // 0x0398 (size: 0x8)
    class UStaticMeshComponent* mpTargetCone;                                         // 0x03A0 (size: 0x8)
    bool mbInFrontEnd;                                                                // 0x03C8 (size: 0x1)
    float mFrontEndGlow;                                                              // 0x03CC (size: 0x4)
    bool mbPowered;                                                                   // 0x03D0 (size: 0x1)
    float mTimeUntilPowered;                                                          // 0x03D4 (size: 0x4)

    void UpdateTargetCone();
    void StopStaffPoweredAkEvent();
    void PlayStaffPoweredAkEvent();
    void MulticastAllStopHolyStaffBeamActive();
    void MulticastAllPlayHolyStaffBeamStartup();
    void MulticastAllPlayHolyStaffBeamShutdown();
    void MulticastAllPlayHolyStaffBeamActive();
    bool IsLockedOn();
    bool IsHittingEvil();
    EWise_WEP_HolyStaff GetHolyStaffSwitchName();
    class USphereComponent* GetCollisionComponent();
    void DoServerOnFullyCharged();
    void DoServerOnAllChargeSpent();
    void DoServerHitEvil(class AFPChar* pEvilHitting, float DeltaSeconds);
    void DoServerDebugTogglePower();
    void DoServerAddHealingCharge(float DeltaTime);
}; // Size: 0x3D8

class AInGameLevel : public ALevelBase
{
    TArray<class UMapDataAsset*> mMapDataAssets;                                      // 0x0250 (size: 0x10)
    bool mbPlayAmbientMusic;                                                          // 0x0260 (size: 0x1)
    bool mbSkipToHuntStage;                                                           // 0x0261 (size: 0x1)
    class AActor* mpAcousticsSpaceActor;                                              // 0x0268 (size: 0x8)

    void StopMatchEndedWinAkEvent();
    void StopMatchEndedLoseAkEvent();
    void StopMatchEndedAkEvent();
    void SetSkipToHuntStage(bool bSet);
    void SetPlayAmbientMusic(bool bPlay);
    void PlayMatchEndedWinAkEvent();
    void PlayMatchEndedLoseAkEvent();
    void PlayMatchEndedAkEvent();
    void OverrideSearchableMinAndMaxRechargeTime(float Min, float Max, ESearchableType searchType);
    void MulticastAllPlayEvilSpawns();
    void MulticastAllPlayDisconnect();
    bool IsTutorialLevel();
    TArray<ESubLevelType> GetSelectableSubLevelTypes(ELevelType LevelType);
    TArray<ELevelType> GetSelectableLevelTypes();
    TArray<ELevelType> GetRandomLevelTypes(class UWorld* pCurrentWorld);
    ELevelType GetCurrentLevelType();
    ESubLevelType GetActiveSubLevel();
    bool CanPlayAmbientMusic();
}; // Size: 0x2B8

class AInteractablePropBase : public AActor
{
    class USoundImpactComponent* mpSoundImpactComponent;                              // 0x0238 (size: 0x8)
    EInteractablePropType mPropType;                                                  // 0x0240 (size: 0x1)
    ETriggerCollisionShape mCollisionShape;                                           // 0x0241 (size: 0x1)
    FEffectVisibility mPropVisibility;                                                // 0x0242 (size: 0xB)
    FEffectVisibility mInteractionVisibility;                                         // 0x024D (size: 0xB)
    class UMaterialInstance* mpPropFadeMaterial;                                      // 0x0258 (size: 0x8)
    class UParticleSystem* mpSpectralTransitionParticles;                             // 0x0260 (size: 0x8)
    TArray<FImpactableComponent> mImpactableComponents;                               // 0x0268 (size: 0x10)
    float mWobbleMultiplier;                                                          // 0x0278 (size: 0x4)
    float mWobbleTime;                                                                // 0x027C (size: 0x4)
    float mImpactCooldown;                                                            // 0x0280 (size: 0x4)
    float mWeightForThreshold;                                                        // 0x0284 (size: 0x4)
    FTransform mCollisionTransform;                                                   // 0x0290 (size: 0x30)
    FVector mImpulseOffset;                                                           // 0x02C0 (size: 0xC)
    float mRadius;                                                                    // 0x02CC (size: 0x4)
    float mCapsuleHalfHeight;                                                         // 0x02D0 (size: 0x4)
    FVector mBoxExtent;                                                               // 0x02D4 (size: 0xC)
    class UShapeComponent* mpTriggerCollision;                                        // 0x02E0 (size: 0x8)
    bool mbHasAlreadySimulated;                                                       // 0x02E8 (size: 0x1)
    float mActivationTime;                                                            // 0x02EC (size: 0x4)
    bool mbSimulating;                                                                // 0x02F0 (size: 0x1)
    bool mbWobbling;                                                                  // 0x02F1 (size: 0x1)
    bool mbEnableEvilSpectralSpawn;                                                   // 0x02F2 (size: 0x1)
    float mLastImpactTime;                                                            // 0x02F4 (size: 0x4)
    class UCurveFloat* mpFloatCurve;                                                  // 0x02F8 (size: 0x8)
    bool mbAllowMovement;                                                             // 0x0300 (size: 0x1)
    bool mbIsFading;                                                                  // 0x0301 (size: 0x1)
    bool mbIsSpectral;                                                                // 0x0302 (size: 0x1)
    class AActor* mpSpectralTargetActor;                                              // 0x0308 (size: 0x8)
    class USkeletalMeshComponent* mpSpectralMeshComponent;                            // 0x0310 (size: 0x8)
    class USkeletalMeshComponent* mpSpawnedSkeletalMeshComp;                          // 0x0318 (size: 0x8)
    bool mbNeedTick;                                                                  // 0x0320 (size: 0x1)
    TArray<class AWeaponBase*> mWeaponsInTriggerRange;                                // 0x0328 (size: 0x10)
    TArray<class ATPChar*> mTeensOverlappingTrigger;                                  // 0x0338 (size: 0x10)

    void StartImpact(FVector Velocity, FPropInteractionProperties interactionType, class UPrimitiveComponent* pHitComponent, class USceneComponent* pSourceComponent);
    void StartExternalImpact(FVector Velocity, FPropInteractionProperties interactionType);
    void SetPropType(EInteractablePropType propType);
    void SetPropHidden(bool bPropHidden);
    void SetAllowMovement(bool bAllowMovement);
    void OnPropStartedSimulating();
    void OnPropStartedCustomImpact(FVector Velocity, FPropInteractionProperties interactionType, class USceneComponent* pSourceComponent, class UPrimitiveComponent* pTargetComponent);
    void OnImpact(FVector Velocity, FPropInteractionProperties interactionType, class USceneComponent* pSourceComponent);
    void OnActorHit(class UPrimitiveComponent* pHitComponent, class AActor* pOtherActor, class UPrimitiveComponent* pOtherComp, FVector NormalImpulse, const FHitResult& Hit);
    void LaunchComponent(class UPrimitiveComponent* pComponent, FVector Velocity);
    bool IsEvilSpectralSpawnEnabled();
    bool IsBlueprintTickRequired();
    class USoundImpactComponent* GetSoundImpactComponent();
    EInteractablePropType GetPropType();
    float GetCooldownTimeRemaining();
    void EnableActorTickWithComponent();
    void DisableActorTickWithComponent();
    void AddSkeletalMesh(class USkeletalMesh* pSkeletalMesh);
    void ActorEndOverlap(class UPrimitiveComponent* pOverlappedComponent, class AActor* pOtherActor, class UPrimitiveComponent* pOtherComp, int32 OtherBodyIndex);
    void ActorBeginOverlap(class UPrimitiveComponent* pOverlappedComponent, class AActor* pOtherActor, class UPrimitiveComponent* pOtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);
}; // Size: 0x350

class AKeyboardMonkey : public AActor
{
    bool mbMonkeyActive;                                                              // 0x0228 (size: 0x1)
    int32 mMonkeySpeed;                                                               // 0x022C (size: 0x4)

}; // Size: 0x230

class ALevelBase : public ALevelScriptActor
{
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0228 (size: 0x8)
    class UMaterialParameterCollection* mpLevelMaterialParameterCollection;           // 0x0230 (size: 0x8)
    class UMapDataAsset* mpActiveMapDataAsset;                                        // 0x0238 (size: 0x8)
    TArray<class ULevelStreamingDynamic*> mDynamicStreamedInLevels;                   // 0x0240 (size: 0x10)

    void StartLevelTypeAmbientSounds();
    void OnSeasonalEventsUpdated(const TArray<ESeasonalEventType>& currentEvents);
    void OnActiveMapDataChanged();
}; // Size: 0x250

class ALifeEssencePowerup : public APowerupBase
{
    FVector mMeshBaseRelativeLocation;                                                // 0x0260 (size: 0xC)
    float mHeightOffset;                                                              // 0x026C (size: 0x4)
    float mWobbleSpeedMultiplier;                                                     // 0x0270 (size: 0x4)
    class ATeenSpectralChar* mpCollectingTeenSpectral;                                // 0x0278 (size: 0x8)
    float mTimeSinceCollection;                                                       // 0x0280 (size: 0x4)
    class UNiagaraComponent* mpNiagaraFXComponent;                                    // 0x0288 (size: 0x8)
    FSoftObjectPath mNiagaraSystemPath;                                               // 0x0290 (size: 0x18)
    class UStaticMeshComponent* mpAuraMesh;                                           // 0x02A8 (size: 0x8)
    float mEssenceSizeAlpha;                                                          // 0x02B0 (size: 0x4)

    void UpdateAkEmitters();
    void MulticastAllPlayAbsorb(class ATPChar* pAbsorbingTPChar);
    void DoServerUpdateTeenSpectralOverlaps();
    void DoServerSetEssenceSize(float Size);
    void DoServerDestroyEssence();
}; // Size: 0x2D8

class ALifeEssenceSpawner : public AActor
{
    class UStaticMeshComponent* mpVisualIndicatorComponent;                           // 0x0220 (size: 0x8)
    float mServerSpawnerCooldown;                                                     // 0x0228 (size: 0x4)

    bool HasSpawnedLifeEssence();
    void DoServerSpawnLifeEssence();
    void DoServerSetSpawnerCooldown(float Time);
    bool DoServerIsAllowedToSpawnLifeEssence();
    float DoServerGetSpawnerCooldown();
    int32 DoServerGetNumEssencesSpawned();
}; // Size: 0x230

class ALobbyBeaconClient : public AOnlineBeaconClient
{
    FNetPlayerInfoStruct mPlayerInfo;                                                 // 0x02B0 (size: 0x178)
    class ALobbyBeaconState* mpLobbyState;                                            // 0x0428 (size: 0x8)
    int32 mTimeoutStrikes;                                                            // 0x0430 (size: 0x4)
    ELobbyDisconnectReason mDisconnectReason;                                         // 0x0434 (size: 0x1)
    bool mbMatchStarted;                                                              // 0x0435 (size: 0x1)
    float mServerTimeout;                                                             // 0x0438 (size: 0x4)
    class ALobbyBeaconHostObject* mpLobbyHostObject;                                  // 0x0440 (size: 0x8)
    FString mPlayFabId;                                                               // 0x0450 (size: 0x10)
    FString mUsername;                                                                // 0x0460 (size: 0x10)
    bool mbHasGeneratedLoadout;                                                       // 0x0470 (size: 0x1)
    bool mbClientAddedToVoiceKickQueue;                                               // 0x0473 (size: 0x1)
    bool mbInLobby;                                                                   // 0x0474 (size: 0x1)

    void SetHasGeneratedLoadout(bool bNewValue);
    void ServerUpdateReadyStatus(bool bSet);
    void ServerUpdatePlayerInfo(const FNetPlayerInfoStruct& playerInfo);
    void ServerToggleReadyStatus();
    void ServerSubmitChatMessage(const FText& Text);
    void ServerSetMatchSettings(FMatchSettings MatchSettings);
    void ServerSetMap(class UMapDataAsset* pMapData);
    void ServerSetInLoadoutLockdown();
    void ServerSetCharacterType(ECharacterType CharType);
    void ServerRequestUpdate();
    void ServerRequestLeaveLobby(ELobbyDisconnectReason reason);
    void ServerRequestChangePortrait(FGrantable Grantable);
    void ServerRequestChangeLoadout(FLoadoutChange aChange);
    void ServerReplaceBotPlayer(int32 lobbyIdx, ECharacterType CharacterType);
    void ServerPong();
    void ServerAddToGameModeIndex(int32 Val);
    void ServerAddPlayerInfo(const FNetPlayerInfoStruct& playerInfo, const FMatchmakingPlayerInfo& matchmakingInfo);
    void OnRep_LobbyState();
    bool IsReady();
    void IncrementTimeoutStrikes();
    bool HasGeneratedLoadout();
    int32 GetTimeoutStrikes();
    FNetPlayerInfoStruct GetPlayerInfo();
    class ALobbyBeaconHostObject* GetLobbyHostObject();
    void DoServerSetReadyStatus(bool bSet);
    void DoServerCallUpate();
    void ClientUpdateAllPlayerInfo(const TArray<FNetPlayerInfoStruct>& allPlayers);
    void ClientShowPrizes(ELevelType LevelType, ESubLevelType SubLevelType, ECharacterType clientCharacterType);
    void ClientSetLobbyIndex(int32 lobbyIndex);
    void ClientRemoveLockdown();
    void ClientRecieveReplicatedLoadoutData_WeaponSlotType(int16 aLobbyIndexToUpdate, ECharacterType aCharToUpdate, EWeaponTypeEnum aWeaponToUpdate, EPlayerSlot aPlayerSlot, FString aNewGrantable);
    void ClientRecieveReplicatedLoadoutData_WeaponPointType(int16 aLobbyIndexToUpdate, EWeaponTypeEnum aWeaponToUpdate, EPointType aPointTypeToUpdate, int32 aNewValue);
    void ClientRecieveReplicatedLoadoutData_WeaponIsUpToDate(int16 aLobbyIndexToUpdate, ECharacterType aCharType, EWeaponTypeEnum aWeaponToUpdate);
    void ClientRecieveReplicatedLoadoutData_PlayerSlot(int16 aLobbyIndexToUpdate, uint16 uiSlotExtended, FString aNewGrantable);
    void ClientRecieveReplicatedLoadoutData_PlayerPointType(int16 aLobbyIndexToUpdate, EPointType aPointTypeToUpdate, int32 aNewValue);
    void ClientRecieveReplicatedLoadoutData_PlayerIsUpToDate(int16 aLobbyIndexToUpdate);
    void ClientRecieveReplicatedLoadoutData_CharacterUiSlot(int16 aLobbyIndexToUpdate, ECharacterType aCharToUpdate, uint16 uiSlotExtended, FString aNewGrantable);
    void ClientRecieveReplicatedLoadoutData_CharacterPointType(int16 aLobbyIndexToUpdate, ECharacterType aCharToUpdate, EPointType aPointTypeToUpdate, int32 aNewValue);
    void ClientRecieveReplicatedLoadoutData_CharacterIsUpToDate(int16 aLobbyIndexToUpdate, ECharacterType aCharToUpdate);
    void ClientRecieveReplicatedLoadoutData_CharacterAffinityDiscount(int16 aLobbyIndexToUpdate, ECharacterType aCharToUpdate, EPerkAffinityType aAffinityDiscountToUpdate, int32 aNewValue);
    void ClientRecieveReplicatedLoadoutData_AbilitySlotType(int16 aLobbyIndexToUpdate, ECharacterType aCharToUpdate, EEvilAbilityType aAbilityToUpdate, EPlayerSlot aPlayerSlot, FString aNewGrantable);
    void ClientRecieveReplicatedLoadoutData_AbilityIsUpToDate(int16 aLobbyIndexToUpdate, ECharacterType aCharType, EEvilAbilityType aAbilityToUpdate);
    void ClientPing();
    void ClientJoinVoiceChannel(FString InChannelName, FString InChannelCredentials);
    void ClientJoinStagingSession();
    void ClientJoinLobby(FString InLobbyId);
    void ClientDisplayLobbyMessage(const FText& Text);
    void ClientDisconnectPlayer(ELobbyDisconnectReason aReason);
    void ClientConnected(int32 connectionUID);
    void ClientBeginLockdownAndCommitPendingChanges();
    void ClientAddLobbyIndex(int32 lobbyIndex);
}; // Size: 0x478

class ALobbyBeaconHost : public AOnlineBeaconHost
{
    bool mbIsInitialized;                                                             // 0x0308 (size: 0x1)

    bool Start();
    void RemoveHost();
    void AddHost(class AOnlineBeaconHostObject* pHostObject);
}; // Size: 0x310

class ALobbyBeaconHostObject : public AOnlineBeaconHostObject
{
    class ALobbyBeaconState* mpLobbyBeaconState;                                      // 0x0250 (size: 0x8)
    TMap<uint32, ALobbyBeaconClient*> mConnectedUnitializedClients;                   // 0x0258 (size: 0x50)
    TMap<uint32, ALobbyBeaconClient*> mAllClients;                                    // 0x02A8 (size: 0x50)
    float mCountdownTimer;                                                            // 0x02F8 (size: 0x4)
    float mLobbyDetailsUpdateTimer;                                                   // 0x02FC (size: 0x4)
    float mTimeoutTimer;                                                              // 0x0300 (size: 0x4)
    ELobbyHostState mLobbyHostState;                                                  // 0x0304 (size: 0x1)
    EServerMatchMode mServerMatchMode;                                                // 0x0305 (size: 0x1)
    float mRequestBackfillTime;                                                       // 0x0308 (size: 0x4)
    bool mbIsInitialBackfillDone;                                                     // 0x030C (size: 0x1)
    float mInvalidGameLiftPlayerSessionCheckTime;                                     // 0x0310 (size: 0x4)
    int32 mDispatchTicks;                                                             // 0x0314 (size: 0x4)
    TArray<uint32> mDirtyKeys;                                                        // 0x0318 (size: 0x10)
    TArray<uint32> mPendingRediscovers;                                               // 0x0328 (size: 0x10)
    bool mbVotedOnMapSelection;                                                       // 0x038C (size: 0x1)
    bool mbQueueFinalizeCharacterTypes;                                               // 0x038D (size: 0x1)
    bool mbQueueReportP2PClientLeave;                                                 // 0x038E (size: 0x1)
    bool mbReportP2pClientLeaveProcess;                                               // 0x038F (size: 0x1)

    void SetServerMatchMode(EServerMatchMode Mode);
    void KickParticipantFromVoiceChatDueToInvalidPS(FString UniqueId);
    EServerMatchMode GetServerMatchMode();
    int32 GetNumTeens();
    int32 GetNumPlayersReady();
    int32 GetNumEvils();
    int32 GetNumCurrentSpectators();
    int32 GetNumCurrentPlayers();
    int32 GetNumConnectingPlayers();
    class ULobbyManager* GetLobbyManager();
    ELobbyHostState GetLobbyHostState();
    FLobbyDetails GetLobbyDetails();
    class ALobbyBeaconClient* FindLobbyBeaconClientByLobbyIndex(int32 lobbyIndex);
    class ALobbyBeaconClient* FindLobbyBeaconClientByBackendManager(class UBackendManager* pBackendManager);
    void DoTimeoutCheck();
    void DoServerStorePlayerInformation();
    void DoServerSetMap(class UMapDataAsset* pMapData);
    void DoServerSetGameMode(class UGameModeDataAsset* pGameModeData);
    void DoServerOnClientConnectedAndReportedIn(int32 lobbyIndex);
    uint32 DoServerGenerateUniqueID();
    void DoServerDisconnectPlayerFromLobby(class ALobbyBeaconClient* pClient, ELobbyDisconnectReason reason);
    void DoServerClearLoadoutLockdownState();
    void DoServerCheckReadyStatus();
    void DoServerCallEveryoneUpdate();
    void DoServerBroadcastMessage(const FText& Text);
    void DoServerBroadcastMatchStart();
    void DoServerBroadcastLobbyDetails();
    void DoServerBroadcastClientPrizesScreen();
    void DoServerBroadcastClientLoadingScreen();
    void DoServerBeginDisbandingLobby();
    void DoServerAssignLobbyAuthority();
    bool DoServerAreAllClientsInLoadoutLockdown();
    void DoInvalidClientCheck();
    void DoCheckGameLiftPlayerSessionsOfGameLift(float DeltaSeconds);
    void DisplayChosenMap();
    void DetermineLevelByVotes();
    bool AssignLobbyIndexToLobbyBeaconClient(class ALobbyBeaconClient* pLobbyBeaconClient);
    void AssignGenericNameToLobbyBeaconClient(class ALobbyBeaconClient* pTargetBeaconClient);
}; // Size: 0x390

class ALobbyBeaconState : public AInfo
{
    FMatchSettings mMatchSettings;                                                    // 0x0220 (size: 0x50)
    FLobbyDetails mLobbyDetails;                                                      // 0x0270 (size: 0x14)
    FString mMatchId;                                                                 // 0x0288 (size: 0x10)
    FString mLobbyCode;                                                               // 0x0298 (size: 0x10)

    void OnRep_MatchSettings();
    void OnRep_MatchId();
    void OnRep_LobbyDetails();
    void OnRep_LobbyCode();
}; // Size: 0x2A8

class AMagazineActor : public AActor
{
    TSubclassOf<class APageActor> mPageClass;                                         // 0x0220 (size: 0x8)
    TSubclassOf<class UIssuePageWidget> DefaultPageWidget;                            // 0x0228 (size: 0x8)
    class UDataTable* mpIssueDefTable;                                                // 0x0230 (size: 0x8)
    class UDataTable* mpIssueDefines;                                                 // 0x0238 (size: 0x8)

    void UpdatePageMouseInteraction();
    void OnTurnRight();
    void OnTurnLeft();
}; // Size: 0x288

class AMagicSphere : public ARemoteCharBase
{
    class UDecalComponent* mpTargetingDecal;                                          // 0x07C0 (size: 0x8)
    class UParticleSystemComponent* mpTargetingParticleSystem;                        // 0x07C8 (size: 0x8)
    class UParticleSystemComponent* mpMagicSphereParticleSystem;                      // 0x07D0 (size: 0x8)
    class UParticleSystem* mpExplosionParticleSystem;                                 // 0x07D8 (size: 0x8)
    float mDetonationChargeTime;                                                      // 0x07E0 (size: 0x4)
    class UParchmentSkinDataAsset* mpParchmentSkinDataAsset;                          // 0x07E8 (size: 0x8)
    float mDisintegrationLevel;                                                       // 0x07F0 (size: 0x4)
    float mTeleportChargeTime;                                                        // 0x07F4 (size: 0x4)
    bool mbChargingTeleport;                                                          // 0x07F8 (size: 0x1)
    float mTimeSinceEvilLastSeen;                                                     // 0x07FC (size: 0x4)
    class AFPChar* mRevealedEvil;                                                     // 0x0800 (size: 0x8)
    class AParchmentWeapon* mpOwningWeapon;                                           // 0x0808 (size: 0x8)
    bool mbDamagingMimic;                                                             // 0x0810 (size: 0x1)

    void UpdatePulseEffects(float DeltaSeconds);
    void ServerRequestReleasePrimaryFire();
    void ServerRequestBeginPrimaryFire();
    void OnRep_DamagingMimic();
    void OnRep_ChargingTeleport();
    void MulticastAllSphereTeleport_Play(FVector sourcePosition, FVector destinationPosition);
    void MulticastAllSphereActive_Play();
    void MulticastAllSetSphereSize(float Size);
    bool IsFocusing();
    bool IsDamagingMimic();
    bool IsChargingTeleport();
    float GetTeleportChargeTime();
    class AParchmentWeapon* GetOwningWeapon();
    float GetDetonationChargeTime();
    float GetDamageRadius();
    float GetBaseEvilCollisionRadius();
    void DoServerSetTimeSinceEvilLastSeen(float NewTime);
    void DoServerSetRevealedEvil(class AFPChar* pChar);
    void DoServerSetOwningWeapon(class AParchmentWeapon* pOwningWeapon);
    float DoServerGetTimeSinceEvilLastSeen();
    class AFPChar* DoServerGetRevealedEvil();
    void ClientParchementEvilSense_Play();
}; // Size: 0x820

class AMedKitPoint : public APointBase
{
    bool mbIsHealing;                                                                 // 0x0308 (size: 0x1)
    class UStaticMeshComponent* mpStaticMeshComponent;                                // 0x0310 (size: 0x8)
    class USphereComponent* mpPingSphereCollision;                                    // 0x0318 (size: 0x8)

    void UpdateRenderCustomDepth();
    bool IsHealing();
    FVector GetPingCollisionSphereOffset();
    FVector GetPingAnchorLocation();
    void DoServerBeginHealing();
    void DoServerActivate(class ATPChar* pOwningTPChar);
}; // Size: 0x320

class AMergedActor : public AActor
{
    TArray<class AActor*> mMergedActors;                                              // 0x0220 (size: 0x10)

}; // Size: 0x230

class AMeshPhysicsProp : public APhysicsPropBase
{
}; // Size: 0x248

class AMiscMacroLibrary : public AActor
{
}; // Size: 0x220

class AMolotovDebris : public AActor
{
    class USceneComponent* mpDummyRoot;                                               // 0x0228 (size: 0x8)
    class UProjectileMovementComponent* mpProjectileMovement;                         // 0x0230 (size: 0x8)
    class UStaticMeshComponent* mpMeshComponent;                                      // 0x0238 (size: 0x8)
    class USphereComponent* mpCollisionSphereComponent;                               // 0x0240 (size: 0x8)
    class UAIPerceptionStimuliSourceComponent* mpPerceptionStimuliComponent;          // 0x0248 (size: 0x8)
    float mFadeTime;                                                                  // 0x0250 (size: 0x4)
    float mStartLightIntensity;                                                       // 0x0254 (size: 0x4)
    bool mbServerWindTriggered;                                                       // 0x0258 (size: 0x1)
    TArray<class AFPChar*> mpEvilChars;                                               // 0x0260 (size: 0x10)
    class AActor* mpOwningProjectile;                                                 // 0x0270 (size: 0x8)
    bool mbServerIsActive;                                                            // 0x0278 (size: 0x1)
    FVector mWindDirection;                                                           // 0x027C (size: 0xC)
    bool mbHasSpread;                                                                 // 0x0288 (size: 0x1)
    bool mbSpawnedBlueParticles;                                                      // 0x0289 (size: 0x1)
    float mSpreadTimer;                                                               // 0x028C (size: 0x4)
    int32 mSpreadLevel;                                                               // 0x0290 (size: 0x4)

    void SetOwningProjectile(class AActor* pProjectile);
    void OnStopEmitting();
    void OnRemove();
    void MulticastAllStopEmitting();
    FVector GetWindDirection();
    class ATPChar* GetOwningTPChar();
    class AActor* GetOwningProjectile();
    void DoServerUpdateOverlaps(float DeltaSeconds);
    void DoServerUpdateLifetime(float DeltaSeconds);
    void DoServerTerminate();
    void DoServerSetWindTriggered(bool Val);
    void DoServerSetSpreadTimer(float spreadTimer);
    void DoServerSetSpreadLevel(int32 spreadLevel);
    void DoServerSetActive(bool Val);
    void DoServerScreamOccurred(FVector Direction);
    bool DoServerIsActive();
    bool DoServerGetWindTriggered();
    void DoServerExpireOwnerChildren();
    void DoServerCheckScreams();
}; // Size: 0x298

class AMolotovProjectile : public AActor
{
    class USphereComponent* mpCollisionComponent;                                     // 0x0238 (size: 0x8)
    class USceneComponent* mpRotationComponent;                                       // 0x0240 (size: 0x8)
    class UProjectileMovementComponent* mpProjectileMovementComponent;                // 0x0248 (size: 0x8)
    class USkeletalMeshComponent* mpSkeletalMeshComponent;                            // 0x0250 (size: 0x8)
    class UParticleSystemComponent* mpParticleSystemComponent;                        // 0x0258 (size: 0x8)
    class UParticleSystemComponent* mpFallingFlamesParticleSystem;                    // 0x0260 (size: 0x8)
    class UParticleSystemComponent* mpFlamePoolParticleSystem;                        // 0x0268 (size: 0x8)
    class UParticleSystemComponent* mpExplosionParticleSystemComponent;               // 0x0270 (size: 0x8)
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0278 (size: 0x8)
    UClass* mpMolotovDebrisClass;                                                     // 0x0280 (size: 0x8)
    class UMolotovSkinDataAsset* mpMolotovSkinDataAsset;                              // 0x0288 (size: 0x8)
    FVector mImpactLocation;                                                          // 0x0290 (size: 0xC)
    FVector mImpactReflection;                                                        // 0x029C (size: 0xC)
    FVector mImpactNormal;                                                            // 0x02A8 (size: 0xC)
    int32 mMaxDamageZones;                                                            // 0x02B4 (size: 0x4)
    float mDamageSpread;                                                              // 0x02B8 (size: 0x4)
    float mMinDebrisSpeed;                                                            // 0x02BC (size: 0x4)
    float mMaxDebrisSpeed;                                                            // 0x02C0 (size: 0x4)
    TArray<class AActor*> mpChildDebris;                                              // 0x02C8 (size: 0x10)
    float mLifetime;                                                                  // 0x02D8 (size: 0x4)
    bool mbIsDetonated;                                                               // 0x02DC (size: 0x1)
    bool mbIsCleaningUp;                                                              // 0x02DD (size: 0x1)
    float mParticleProgress;                                                          // 0x02E0 (size: 0x4)
    bool mbShouldBounce;                                                              // 0x02E4 (size: 0x1)
    int32 mNumberOfBounces;                                                           // 0x02E8 (size: 0x4)
    float mTotalDebrisDuration;                                                       // 0x02EC (size: 0x4)
    class AFPChar* mpServerFPCharStuckTo;                                             // 0x02F0 (size: 0x8)
    bool mbServerStuckToArmor;                                                        // 0x02F8 (size: 0x1)

    void UpdateVisuals(float DeltaTime);
    void UpdateParticleProgress(float DeltaTime);
    void OnHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit);
    void MulticastAllStopWhistleSound();
    void MulticastAllStopBurnSound();
    void MulticastAllSetVelocity(FVector Velocity, float Gravity);
    void MulticastAllPositionCollidedEmitter(const FHitResult& Hit);
    void MulticastAllPlayWhistleSound();
    void MulticastAllPlayBurnSound();
    void MulticastAllPlayBounceSound();
    void MulticastAllMolotovExplosion(FTransform trans);
    void MulticastAllClearVisibility();
    bool IsDetonated();
    bool IsCleaningUp();
    float GetTotalDebrisDuration();
    float GetParticleProgress();
    float GetMolotovLifetime();
    void FireInDirection(const FVector& ShootDirection, float powerMultiplier);
    void DoServerUpdateStuckFPChar(float DeltaTime);
    void DoServerUpdateLifetime(float DeltaTime);
    void DoServerUpdateEvilHit();
    void DoServerSpawnDebris();
    void DoServerSetTotalDebrisDuration(float TotalDuration);
    void DoServerSetStuckToArmor(bool bSet);
    void DoServerSetShouldBounce(bool bNewValue);
    void DoServerSetMolotovLifetime(float LifeTime);
    void DoServerSetFPCharStuckTo(class AFPChar* pChar);
    void DoServerSetCleaningUp(bool bSet);
    void DoServerOnDetonate();
    bool DoServerGetStuckToArmor();
    class AFPChar* DoServerGetFPCharStuckTo();
    void DoServerExpireChildren();
    void DoServerDestroyAll();
    void DoServerCheckScreams();
    void DoServerAddChildDebris(class AMolotovDebris* pDebris);
}; // Size: 0x300

class AMolotovWeapon : public AWeaponBase
{
    class USceneComponent* mpTargetContainer;                                         // 0x0380 (size: 0x8)
    class UDecalComponent* mpTargetDecal;                                             // 0x0388 (size: 0x8)
    TArray<class UParticleSystemComponent*> mpProjectionBeamParticles;                // 0x0390 (size: 0x10)
    class UParticleSystemComponent* mpIdleFlameParticleComponent;                     // 0x03A0 (size: 0x8)
    class UPointLightComponent* mpIdleFlameLightComponent;                            // 0x03A8 (size: 0x8)
    class AActor* mpProjectionHitResultActor;                                         // 0x03B0 (size: 0x8)
    UClass* mMolotovProjectileClass;                                                  // 0x03B8 (size: 0x8)
    bool mbBufferFire;                                                                // 0x03C0 (size: 0x1)
    bool mbRequestCancel;                                                             // 0x03C1 (size: 0x1)
    float mCurrentReloadTime;                                                         // 0x03C4 (size: 0x4)

    void UpdateMolotovProjection();
    void MulticastAllStopMolotovActive();
    void MulticastAllPlayMolotovActive();
    bool GetRequestCancel();
    TSubclassOf<class AMolotovProjectile> GetMolotovProjectileToSpawn();
    float GetMolotovDebrisDuration();
    void DoServerUpdateReloadTime(float DeltaTime);
    void DoServerUpdateInput();
    void DoServerSetRequestCancel(bool bNewValue);
    void DoServerSetReloadTime(float NewValue);
    void ClearMolotovProjection();
}; // Size: 0x3D8

class ANavigationCleaner : public AActor
{
    FString Prefix;                                                                   // 0x0220 (size: 0x10)
    bool Affect;                                                                      // 0x0230 (size: 0x1)

    void UpdateVaultPointNavLinks();
    void UpdateCanAffectNavigation();
}; // Size: 0x238

class ANoisemakerActor : public AActor
{
    float mRevealTimeRemaining;                                                       // 0x0238 (size: 0x4)
    bool mbDetectedEvil;                                                              // 0x023C (size: 0x1)
    float mZAngleFacing;                                                              // 0x0240 (size: 0x4)
    class ATPChar* mpOwningTPChar;                                                    // 0x0248 (size: 0x8)
    bool mbShuttingDown;                                                              // 0x0250 (size: 0x1)
    class USkeletalMeshComponent* mpMeshComponent;                                    // 0x0258 (size: 0x8)
    class USphereComponent* mpSphereComponent;                                        // 0x0260 (size: 0x8)
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0268 (size: 0x8)
    class UExtAkComponent* mpUnattenuatedAkEmitter;                                   // 0x0270 (size: 0x8)
    class UCurveFloat* mpVHSEffectCurve;                                              // 0x0278 (size: 0x8)
    float mVHSEffectAlpha;                                                            // 0x0280 (size: 0x4)
    bool mbFadeOut;                                                                   // 0x0284 (size: 0x1)
    class UMaterialInstance* mpEffectMaterial;                                        // 0x0288 (size: 0x8)
    float mPostShutdownLifetime;                                                      // 0x0290 (size: 0x4)
    class UBillboardEffectsComponent* mpVHSEffectsComponent;                          // 0x0298 (size: 0x8)
    class AFPChar* mpLocallyRevealedEvil;                                             // 0x02A0 (size: 0x8)
    class UPickupSkinDataAsset* mpPickupSkinDataAsset;                                // 0x02A8 (size: 0x8)

    void UpdateVisualEffects(float DeltaTime);
    void UpdateRotation();
    void SetLocallyRevealedEvil(class AFPChar* pNewValue);
    void SetIsFadingOut(bool bNewValue);
    void MulticastAllStopNoisemakerIdleLoop();
    void MulticastAllStopNoisemakerAlertLoop();
    void MulticastAllSetSkin(class UItemDataAsset* pSkin);
    void MulticastAllPlayNoisemakerShutdown();
    void MulticastAllPlayNoisemakerIdleLoop();
    void MulticastAllPlayNoisemakerAlertLoop();
    void MulticastAllCreateHUDAuraIndicator(class AFPChar* pNewEvil);
    bool HasDetectedEvil();
    float GetZAngleFacing();
    class UExtAkComponent* GetUnattenuatedAkEmitter();
    float GetRevealTimeRemaining();
    class UExtAkComponent* GetPrimaryAkEmitter();
    class ATPChar* GetOwningTPChar();
    class USkeletalMeshComponent* GetMesh();
    class AFPChar* GetLocallyRevealedEvil();
    bool GetIsFadingOut();
    float GetBaseRevealTime();
    void FinishDeathAnimation();
    void DoServerUpdateDetection(float DeltaTime);
    void DoServerSetZAngleFacing(float NewValue);
    void DoServerSetShuttingDown(bool bNewValue);
    void DoServerSetRevealTimeRemaining(float NewValue);
    void DoServerSetOwningTPChar(class ATPChar* pNewValue);
    void DoServerSetHasDetectedEvil(bool bNewValue);
    bool DoServerGetIsShuttingDown();
}; // Size: 0x2B0

class ANoisemakerPickup : public APickupBase
{
}; // Size: 0x2F8

class AObserverChar : public ATPChar
{
    bool mbObserving;                                                                 // 0x12B8 (size: 0x1)
    bool mbFastMode;                                                                  // 0x12B9 (size: 0x1)
    bool mbCinematicMode;                                                             // 0x12BA (size: 0x1)
    bool mbEnginePaused;                                                              // 0x12BB (size: 0x1)
    bool mbFOVOverridingRoll;                                                         // 0x12BC (size: 0x1)
    bool mbAllowedToTakeInput;                                                        // 0x12BD (size: 0x1)
    FVector mTVPosition;                                                              // 0x12C0 (size: 0xC)
    FVector mOrbitOffset;                                                             // 0x12CC (size: 0xC)
    class AActor* mAttachedActor;                                                     // 0x12D8 (size: 0x8)
    class AActor* mTrackedActor;                                                      // 0x12E0 (size: 0x8)
    bool mbZLocked;                                                                   // 0x12E8 (size: 0x1)
    float mFOVValue;                                                                  // 0x12EC (size: 0x4)
    bool mbHUDEnabled;                                                                // 0x12F0 (size: 0x1)
    ECameraMode mCurrentCameraMode;                                                   // 0x12F1 (size: 0x1)
    bool mbRollLeft;                                                                  // 0x12F2 (size: 0x1)
    bool mbRollRight;                                                                 // 0x12F3 (size: 0x1)
    bool mbCraneUp;                                                                   // 0x12F4 (size: 0x1)
    bool mbCraneDown;                                                                 // 0x12F5 (size: 0x1)
    bool mbCameraFOVIncrease;                                                         // 0x12F6 (size: 0x1)
    bool mbCameraFOVDecrease;                                                         // 0x12F7 (size: 0x1)
    bool mbTriggersAndBumpersSwapped;                                                 // 0x12F8 (size: 0x1)
    bool mbAlreadySwappedCommand;                                                     // 0x12F9 (size: 0x1)
    FVector mBaseAttachedObjectOffset;                                                // 0x12FC (size: 0xC)
    class AActor* mpAttachedObject;                                                   // 0x1308 (size: 0x8)
    float mAttachDistance;                                                            // 0x1310 (size: 0x4)
    float mFlySpeedMultiplier;                                                        // 0x1314 (size: 0x4)
    float mFlyAccelerationMultiplier;                                                 // 0x1318 (size: 0x4)
    float mRotateSpeedMultiplier;                                                     // 0x131C (size: 0x4)
    float mCraneSpeedMultiplier;                                                      // 0x1320 (size: 0x4)
    float mRollSpeedMultiplier;                                                       // 0x1324 (size: 0x4)
    float mFOVSpeedMultiplier;                                                        // 0x1328 (size: 0x4)
    bool mbDOFEnabled;                                                                // 0x132C (size: 0x1)
    float mTimescaleOverride;                                                         // 0x1330 (size: 0x4)
    float mCurrentDOFIntensity;                                                       // 0x1334 (size: 0x4)
    float mCurrentFocusPlane;                                                         // 0x1338 (size: 0x4)
    FVector mPrePausePosition;                                                        // 0x133C (size: 0xC)
    class UCineCameraComponent* mpCinematicCameraComponent;                           // 0x1348 (size: 0x8)
    class UCinematicCameraControlPanel* mpOwnerPanel;                                 // 0x1350 (size: 0x8)
    float mTimeSinceLastLStickPress;                                                  // 0x1358 (size: 0x4)
    float mTimeSinceLastRStickPress;                                                  // 0x135C (size: 0x4)

    void UpdateCinematicMode(float DeltaTime);
    float SetTimescale(float NewValue, bool bFromUI);
    float SetRotateSpeedMultiplier(float NewValue, bool bNeedsAdjusting);
    float SetRollSpeedMultiplier(float NewValue);
    void SetRollRight(bool bNewValue);
    void SetRollLeft(bool bNewValue);
    void SetOwnerPanel(class UCinematicCameraControlPanel* pPanel);
    float SetFOVSpeedMultiplier(float NewValue);
    void SetFOVOverridingRoll(bool bNewValue);
    float SetFlySpeedMultiplier(float NewValue, bool bNeedsAdjusting);
    void SetFlySpeed(float NewValue);
    float SetFlyAccelerationMultiplier(float NewValue);
    void SetFlyAcceleration(float NewValue);
    void SetEnginePaused(bool bNewValue);
    void SetEnableDOF(bool bNewValue);
    float SetDOFIntensity(float NewValue);
    float SetDOFFocusPlane(float NewValue);
    void SetCurrentCameraMode(ECameraMode NewMode);
    float SetCraneSpeedMultiplier(float NewValue);
    void SetCameraFOVIncrease(bool bNewValue);
    void SetCameraFOVDecrease(bool bNewValue);
    float SetCameraFOV(float NewValue, bool bAddValue, bool bNeedsScaling);
    void SetBaseAttachedObjectOffset(FVector NewValue);
    void SetAttachedObject(class AActor* newObj);
    void SetAlreadySwappedCommand(bool bNewValue);
    void SetAllowedToTakeInput(bool bNewValue);
    void ServerStopObserving();
    void ServerSelectSpectatorTarget(int32 PlayerIndex);
    void ServerDebugSetTimeScale(float NewValue);
    void ResetRoll();
    void ResetFOV();
    void MulticastAllSetTimeScale(float NewValue);
    bool IsTriggersAndBumpersSwapped();
    bool IsObserving();
    bool IsEnginePaused();
    bool IsCinematicMode();
    bool IsAttachedToObject();
    void InputAction_TogglePauseEngine(bool bPressed);
    void InputAction_ToggleFastMode(bool bPressed);
    void InputAction_SwapTriggerAndBumperFunctions(bool bPressed);
    void InputAction_SwapRollAndFOV(bool bPressed);
    void InputAction_RollRight(bool bPressed);
    void InputAction_RollLeft(bool bPressed);
    void InputAction_IncreaseCameraRotateSpeed(bool bPressed);
    void InputAction_IncreaseCameraMoveSpeed(bool bPressed);
    void InputAction_FOVIncrease(bool bPressed);
    void InputAction_FOVDecrease(bool bPressed);
    void InputAction_DecreaseCameraRotateSpeed(bool bPressed);
    void InputAction_DecreaseCameraMoveSpeed(bool bPressed);
    void InputAction_CycleCurrentMode(bool bPressed);
    void InputAction_CraneUp(bool bPressed);
    void InputAction_CraneDown(bool bPressed);
    void InputAction_AttemptAttach(bool bPressed);
    float GetTimeScaleOverride();
    float GetSpeedMultiplierMax();
    float GetRotateSpeedMultiplier();
    float GetRollSpeedMultiplier();
    bool GetRollRight();
    bool GetRollLeft();
    class UCinematicCameraControlPanel* GetOwnerPanel();
    FVector GetMovementForwardVector();
    bool GetIsAlreadySwappedCommand();
    float GetFOVSpeedMultiplier();
    bool GetFOVOverridingRoll();
    float GetFlySpeedMultiplier();
    float GetFlyAccelerationMultiplier();
    float GetFastModeSpeedMultiplier();
    float GetDPadIncrementAmount();
    bool GetDOFEnabled();
    ECameraMode GetCurrentCameraMode();
    class UCameraComponent* GetCurrentCamera();
    float GetCraneSpeedMultiplier();
    bool GetCanMoveCharacterForMode(ECameraMode Mode);
    bool GetCanMoveCameraForMode(ECameraMode Mode);
    bool GetCameraFOVIncrease();
    bool GetCameraFOVDecrease();
    float GetBaseFlySpeed();
    float GetBaseFlyAcceleration();
    FVector GetBaseAttachedObjectOffset();
    float GetAttachDistance();
    bool GetAllowedToTakeInput();
    void DoServerSetObserving(bool bSet);
    void DoServerSelectSpectatorTarget(int32 PlayerIndex);
    void DoRoll(float Direction);
    void DoOrbitZoom(float Value);
    void DoCrane(float Value);
}; // Size: 0x1360

class APageActor : public AActor
{
    class UStaticMeshComponent* mpPageMesh;                                           // 0x02A8 (size: 0x8)
    class UCurveVector* mpTurnCurve;                                                  // 0x02B0 (size: 0x8)
    class UMeshWidgetComponent* mpFrontWidget;                                        // 0x02B8 (size: 0x8)
    class UMeshWidgetComponent* mpBackWidget;                                         // 0x02C0 (size: 0x8)
    class UMaterialInstance* mpMaterialInstance;                                      // 0x02C8 (size: 0x8)
    class UMaterialInstanceDynamic* mpDynFrontMaterialInstance;                       // 0x02D0 (size: 0x8)
    class UMaterialInstanceDynamic* mpDynBackMaterialInstance;                        // 0x02D8 (size: 0x8)

}; // Size: 0x310

class AParchmentAIController : public AAIController
{
    class UBlackboardComponent* mBlackboardComponent;                                 // 0x0328 (size: 0x8)
    class UBehaviorTree* mBehaviorTree_CDO;                                           // 0x0330 (size: 0x8)

}; // Size: 0x338

class AParchmentWeapon : public AWeaponBase
{
    class UParticleSystemComponent* mpParchmentParticleSystem;                        // 0x0370 (size: 0x8)
    TSubclassOf<class AMagicSphere> mSphereToSpawn;                                   // 0x0378 (size: 0x8)
    bool mbServerDidPlaySenseEvilAudio;                                               // 0x0381 (size: 0x1)
    class AMagicSphere* mpMagicSphere;                                                // 0x0388 (size: 0x8)

    class AMagicSphere* DoServerSpawnMagicSphere();
    void DoServerSetMagicSphere(class AMagicSphere* pMagicSphere);
    void DoServerPossessMagicSphere();
}; // Size: 0x390

class APatrolEvilSpawner : public AActor
{
    TArray<ECharacterType> mEvilList;                                                 // 0x0220 (size: 0x10)

}; // Size: 0x230

class APhysicsPropBase : public AActor
{
    class USoundImpactComponent* mpSoundImpactComponent;                              // 0x0220 (size: 0x8)
    float mImpactCooldown;                                                            // 0x0228 (size: 0x4)
    bool mbDespawnsAfterTouched;                                                      // 0x022C (size: 0x1)
    float mBaseDespawnTime;                                                           // 0x0230 (size: 0x4)
    bool mbHasBeenTouched;                                                            // 0x0234 (size: 0x1)
    float mTimeUntilDespawn;                                                          // 0x0238 (size: 0x4)
    class UStaticMeshComponent* mpStaticMesh;                                         // 0x0240 (size: 0x8)

    void ActorBeginOverlap(class UPrimitiveComponent* pOverlappedComponent, class AActor* pOtherActor, class UPrimitiveComponent* pOtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);
}; // Size: 0x248

class APickupBase : public AActor
{
    class USkeletalMeshComponent* mpMesh;                                             // 0x0238 (size: 0x8)
    class USkeletalMeshComponent* mpGlintMesh;                                        // 0x0240 (size: 0x8)
    class UMaterialInstance* mpGlintOverlayMaterial;                                  // 0x0248 (size: 0x8)
    class UMaterialInstanceDynamic* mpDynamicGlintMaterial;                           // 0x0250 (size: 0x8)
    class UBoxComponent* mpBoxCollision;                                              // 0x0258 (size: 0x8)
    class USphereComponent* mpPingSphereCollision;                                    // 0x0260 (size: 0x8)
    EPickupType mPickupType;                                                          // 0x0268 (size: 0x1)
    FPickupInfoStruct mPickupInfoStruct;                                              // 0x026C (size: 0xC)
    class ASearchablePoint* mpOwningSearchablePoint;                                  // 0x0278 (size: 0x8)
    class ATPChar* mpGrabbingTPChar;                                                  // 0x0280 (size: 0x8)
    class ATPChar* mpOwningTPChar;                                                    // 0x0288 (size: 0x8)
    bool mbGlintEnabled;                                                              // 0x0290 (size: 0x1)
    class UBillboardComponent* mpGoodSprite;                                          // 0x0298 (size: 0x8)
    class UBillboardComponent* mpBadSprite;                                           // 0x02A0 (size: 0x8)
    class ATPChar* mpLockoutChar;                                                     // 0x02B0 (size: 0x8)
    float mLockoutTimeLeft;                                                           // 0x02B8 (size: 0x4)
    bool mbPositionIsValid;                                                           // 0x02BC (size: 0x1)
    TArray<class UNetConnection*> mRelevantNetConnections;                            // 0x02C0 (size: 0x10)
    bool mbAllowedToBePickedUp;                                                       // 0x02D0 (size: 0x1)
    class UPickupSkinDataAsset* mpPickupSkinDataAsset;                                // 0x02D8 (size: 0x8)
    FText mPickupText;                                                                // 0x02E0 (size: 0x18)

    void UpdatePingCollision();
    bool ShouldGlintBeDisabled();
    void SetOwningSearchablePoint(class ASearchablePoint* pPoint);
    void SetOwnerNoSee(bool bOwnerNoSee);
    void MulticastAllSetSkin(class UItemDataAsset* pSkin);
    class USphereComponent* GetPingResponderSphere();
    FText GetPickupTypeName();
    EPickupType GetPickupType();
    class UPickupSkinDataAsset* GetPickupSkinBySeasonalEventType(ESeasonalEventType seasonalEventType);
    FPickupInfoStruct GetPickupInfoStruct();
    class ATPChar* GetOwningTPChar();
    class ASearchablePoint* GetOwningSearchablePoint();
    class ATPChar* GetLockoutChar();
    class ATPChar* GetGrabbingTPChar();
    UClass* GetClassFromPickupType(EPickupType pickupType, EEventPickupType eventPickupType);
    float GetCharge();
    class UBoxComponent* GetBoxCollision();
    void DoServerUpdateLockout(float DeltaTime);
    void DoServerUpdateCharge(float DeltaSeconds);
    void DoServerSetPickupInfoStruct(FPickupInfoStruct newPickupInfo);
    void DoServerSetOwningTPChar(class ATPChar* pOwningTPChar);
    void DoServerSetLockoutChar(class ATPChar* pTPChar);
    void DoServerSetGrabbingTPChar(class ATPChar* pGrabbingTPChar);
    void DoServerSetCharge(float charge);
    void DoServerSetAllowedToBePickedUp(bool bNewValue);
    void DoServerRemovePickupFromWorld();
    void DoServerOnUsePickupPressed();
    void DoServerOnUsed();
    void DoServerOnPickupDeactivated();
    void DoServerOnPickupActivated();
    void DoServerOnPickedUp();
    void DoServerAddPickupToWorld();
    bool CanBeUsed();
    bool AllowedToBePickedUp();
}; // Size: 0x2F8

class APillsPickup : public APickupBase
{

    void MulticastAllPlayUsePills();
    void MulticastAllPlayPillsHeal();
}; // Size: 0x2F8

class APing : public AActor
{
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0220 (size: 0x8)
    float mStartingScale;                                                             // 0x0228 (size: 0x4)
    FPingData mPingData;                                                              // 0x0230 (size: 0x38)
    bool mbSetVisibilityToHiddenOverride;                                             // 0x0268 (size: 0x1)
    bool mbHoveredOnClient;                                                           // 0x0269 (size: 0x1)
    class UStaticMeshComponent* mpCurrentPlaneMesh;                                   // 0x0270 (size: 0x8)
    class UStaticMesh* mpPlaneMesh;                                                   // 0x0278 (size: 0x8)
    class UMaterialInstanceDynamic* mpLineMatInstDynamic;                             // 0x0280 (size: 0x8)
    class UMaterialInstance* mpLineMatInst;                                           // 0x0288 (size: 0x8)
    bool mbLineDisabled;                                                              // 0x0290 (size: 0x1)
    class UTexture2D* mpSelectedIconTexture;                                          // 0x0298 (size: 0x8)
    class UTexture2D* mpSelectedBackgroundBorder;                                     // 0x02A0 (size: 0x8)
    class UTexture2D* mpHoveredIndicatorTexture;                                      // 0x02A8 (size: 0x8)
    class UTexture2D* mpSelectedBackgroundFill;                                       // 0x02B0 (size: 0x8)
    class UTexture2D* mpOffscreenTexture;                                             // 0x02B8 (size: 0x8)
    bool mbShowProgressBar;                                                           // 0x02C0 (size: 0x1)
    float mProgressPercentage;                                                        // 0x02C4 (size: 0x4)

    void UpdateVisibility();
    bool ShouldShowProgressBar();
    bool ShouldRenderPing();
    void SetVisibilityHiddenOverride(bool Val);
    void SetProperties(const FPingData& PingData);
    void SetPrimaryAkEmitter(class UExtAkComponent* Val);
    void SetHoveredOnClient(bool bNewValue);
    void OnRep_PingData();
    bool IsHoveredOnClient();
    class UTexture2D* GetSelectedIconTexture();
    class UTexture2D* GetSelectedBackgroundFill();
    class UTexture2D* GetSelectedBackgroundBorder();
    FPingData GetProperties();
    float GetProgressPercentage();
    class UExtAkComponent* GetPrimaryAkEmitter();
    class UTexture2D* GetOffscreenTexture();
    class UTexture2D* GetHoveredIndicatorTexture();
    void DoServerSetShowProgressBar(bool bShowProgressBar);
    void DoServerSetSelectedIconTexture(class UTexture2D* pSelectedIconTexture);
    void DoServerSetSelectedBackgroundFill(class UTexture2D* pSelectedBackgroundFill);
    void DoServerSetSelectedBackgroundBorder(class UTexture2D* pSelectedBackgroundBorder);
    void DoServerSetProgressPercentage(float progressPercentage);
    void DoServerSetOffscreenTexture(class UTexture2D* pOffscreenTexture);
    void DoServerSetHoveredIndicatorTexture(class UTexture2D* pHoveredIndicatorTexture);
    void DestroyPing();
}; // Size: 0x2C8

class APipeActor : public ASplineTubeActorBase
{
    class USplineComponent* mpSpline;                                                 // 0x0330 (size: 0x8)
    TEnumAsByte<ESplineMeshAxis::Type> mForwardAxis;                                  // 0x0338 (size: 0x1)
    class UStaticMesh* mpPipeBaseMesh;                                                // 0x0340 (size: 0x8)
    float mStartScale;                                                                // 0x0348 (size: 0x4)
    float mEndScale;                                                                  // 0x034C (size: 0x4)
    bool mbEnableEndcaps;                                                             // 0x0350 (size: 0x1)
    class UStaticMesh* mpEndCapMesh;                                                  // 0x0358 (size: 0x8)
    TArray<class UStaticMeshComponent*> mpEndCapArray;                                // 0x0360 (size: 0x10)
    TArray<class USplineMeshComponent*> mpSplineMeshComponentArray;                   // 0x0370 (size: 0x10)
    TArray<FPipeAccessory> mAccessoryComponents;                                      // 0x0380 (size: 0x10)
    TArray<class UStaticMeshComponent*> mpAccessoryComponentArray;                    // 0x0390 (size: 0x10)
    TArray<float> mAccessoryDistanceArray;                                            // 0x03A0 (size: 0x10)
    TArray<float> mAccessoryRotationArray;                                            // 0x03B0 (size: 0x10)
    TArray<float> mAccessoryScaleArray;                                               // 0x03C0 (size: 0x10)
    TArray<FDistributedPipeAccessories> mDistributedPipeAccessories;                  // 0x03D0 (size: 0x10)
    TArray<class UStaticMeshComponent*> mpDistributedStaticMeshComponents;            // 0x03E0 (size: 0x10)
    int32 mNumberOfComponents;                                                        // 0x03F0 (size: 0x4)
    bool isInit;                                                                      // 0x03F4 (size: 0x1)
    bool bNeedsConstruction;                                                          // 0x03F5 (size: 0x1)

}; // Size: 0x3F8

class APointBase : public AActor
{
    class ATPChar* mpOwningTPChar;                                                    // 0x0228 (size: 0x8)
    EPointState mPointState;                                                          // 0x0230 (size: 0x1)
    class UArrowComponent* mpArrowComponent;                                          // 0x0238 (size: 0x8)
    class UBoxComponent* mpCollisionComponent;                                        // 0x0240 (size: 0x8)
    class UStaticMeshComponent* mpZoneCylinderComponent;                              // 0x0248 (size: 0x8)
    class UCapsuleComponent* mpCapsuleComponent;                                      // 0x0250 (size: 0x8)
    class USplineComponent* mpSplineComponent;                                        // 0x0258 (size: 0x8)
    FVector mServerOwnerRootMotionStartPos;                                           // 0x0260 (size: 0xC)
    FLinearColor mValidLocationColor;                                                 // 0x026C (size: 0x10)
    FLinearColor mInvalidLocationColor;                                               // 0x027C (size: 0x10)

    void OnRep_PointState();
    bool IsVacant();
    bool IsActive();
    bool HasOwnerBecomeInvalid();
    FRotator GetTargetApproachRotation();
    class USplineComponent* GetSplineComponent();
    EPointState GetPointState();
    class ATPChar* GetOwningTPChar();
    FVector GetCandidateSelectionPos();
    void DoServerValidateRefs();
    void DoServerUpdatePointState(float DeltaSeconds);
    bool DoServerUpdateApproachState(float DeltaSeconds);
    void DoServerSetPointState(EPointState pointState);
    void DoServerSetOwnerRootMotionStartPos(FVector StartPos);
    FVector DoServerGetOwnerRootMotionStartPos();
    void DoServerDeactivate();
}; // Size: 0x2A8

class APowerupBase : public AActor
{
    class UBoxComponent* mpBoxCollision;                                              // 0x0220 (size: 0x8)
    EPowerupType mPowerupType;                                                        // 0x0228 (size: 0x1)
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0230 (size: 0x8)
    FVector mCurrentMovementDirection;                                                // 0x0238 (size: 0xC)
    bool mbHasHitFloor;                                                               // 0x0244 (size: 0x1)
    FVector mLastFloorHitPosition;                                                    // 0x0248 (size: 0xC)

    void UpdateVisuals();
    class UExtAkComponent* GetPrimaryAkEmitter();
    EPowerupType GetPowerupType();
    UClass* GetClassFromPowerupType(EPowerupType powerupType);
    void DoServerUpdatePositioning(float DeltaTime);
    void DoServerActorBeginOverlap(class AActor* pOverlappedActor, class AActor* pOtherActor);
}; // Size: 0x258

class AProjectileWeaponBase : public AWeaponBase
{
    float mProjectileLoadTime;                                                        // 0x0370 (size: 0x4)
    bool mbIsProjectileLoaded;                                                        // 0x0374 (size: 0x1)
    bool mbIsLoadingProjectile;                                                       // 0x0375 (size: 0x1)
    bool mbIsFiring;                                                                  // 0x0376 (size: 0x1)
    int32 mNumShotsRemaining;                                                         // 0x0378 (size: 0x4)
    bool mbWantsToShoot;                                                              // 0x037C (size: 0x1)
    bool mbBeginUsingBuffer;                                                          // 0x037D (size: 0x1)
    FVector mProjectileSpawnPosition;                                                 // 0x0380 (size: 0xC)
    bool mbIsWaitingForLaunch;                                                        // 0x038C (size: 0x1)
    int32 mServerPendingClientFireRequests;                                           // 0x0390 (size: 0x4)

    bool WantsToShoot();
    bool UseAimMagnetism();
    bool ShouldBeginUsingBuffer();
    bool IsWaitingForLaunch();
    bool IsProjectileLoaded();
    bool IsLoadingProjectile();
    bool IsFiring();
    float GetShotPercentageRemaining();
    float GetProjectileLoadTime();
    int32 GetNumShotsRemaining();
    int32 GetMaxNumShots();
    float GetBaseProjectileLoadTime();
    void DoServerStopUsingWeapon();
    void DoServerSetWantsToShoot(bool bNewValue);
    void DoServerSetProjectileLoadTime(float NewValue);
    void DoServerSetNumShotsRemaining(int32 NewValue);
    void DoServerSetIsWaitingForLaunch(bool bSet);
    void DoServerSetIsProjectileLoaded(bool bNewValue);
    void DoServerSetIsLoadingProjectile(bool bNewValue);
    void DoServerSetIsFiring(bool bNewValue);
    void DoServerSetBeginUsingBuffer(bool bNewValue);
    void DoServerOnAnimNotify();
    void DoServerIncrementPendingClientFireRequests();
    int32 DoServerGetPendingClientFireRequests();
    void DoServerDecrementPendingClientFireRequests();
    void DoServerClearPendingClientFireRequests();
    void CreateAndLaunchProjectile(FTransform trans);
}; // Size: 0x398

class ARCCopter : public ARemoteCharBase
{
    class UStaticMeshComponent* mpTargetCone;                                         // 0x07C0 (size: 0x8)
    class UParticleSystemComponent* mpRCCopterParticleSystemComponent;                // 0x07C8 (size: 0x8)
    class USphereComponent* mpPropCollisionComponent;                                 // 0x07D0 (size: 0x8)
    FVector mActorRotation;                                                           // 0x07D8 (size: 0xC)
    FVector mTargetBeamLocation;                                                      // 0x07E4 (size: 0xC)
    bool mbIsFiring;                                                                  // 0x07F0 (size: 0x1)
    bool mbHitWall;                                                                   // 0x07F1 (size: 0x1)
    bool mbIsHittingEvil;                                                             // 0x07F2 (size: 0x1)
    class UParticleSystem* mpExplosionParticleSystem;                                 // 0x07F8 (size: 0x8)
    class URCCopterSkinDataAsset* mpRCCopterSkinDataAsset;                            // 0x0800 (size: 0x8)
    FVector mDeltaRotation;                                                           // 0x0808 (size: 0xC)
    class ARCCopterElectricity* mpElectricBomb;                                       // 0x0818 (size: 0x8)
    FHitResult mAimTargetHitResult;                                                   // 0x0820 (size: 0x88)
    bool mbServerUnequipOnRelease;                                                    // 0x08A8 (size: 0x1)
    float mWarmupTime;                                                                // 0x08AC (size: 0x4)
    bool mbIsWarmingUp;                                                               // 0x08B0 (size: 0x1)
    class ARCCopterWeapon* mpOwningWeapon;                                            // 0x08B8 (size: 0x8)

    void UpdateTargetCone();
    void UpdateAimTargetHitResult();
    void ServerUpdateRotation(FVector Rotation);
    void ServerRequestStopPrimaryFire();
    void ServerRequestBeginPrimaryFire();
    void OnRep_TargetBeamLocation();
    void MulticastAllStopWarmup();
    void MulticastAllStopBeam();
    void MulticastAllStartWarmup();
    void MulticastAllStartBeam();
    bool IsHittingEvil();
    class ARCCopterWeapon* GetOwningWeapon();
    FVector GetDirectionToAimTarget(FVector startPoint);
    float GetCurrentRange();
    float GetBaseRange();
    bool DoServerUnequipOnRelease();
    void DoServerSetWarmupTime(float NewValue);
    void DoServerSetWarmingUp(bool bNewValue);
    void DoServerSetUnequipOnRelease(bool bSet);
    void DoServerOnHitByEvil();
}; // Size: 0x8C0

class ARCCopterAIController : public AAIController
{
    class UBlackboardComponent* mBlackboardComponent;                                 // 0x0328 (size: 0x8)
    class UBehaviorTree* mBehaviorTree_CDO;                                           // 0x0330 (size: 0x8)

}; // Size: 0x338

class ARCCopterArc : public AActor
{
    class USplineComponent* mpSplineComponent;                                        // 0x0220 (size: 0x8)
    class USplineMeshComponent* mpSplineMeshComponent;                                // 0x0228 (size: 0x8)
    class UPointLightComponent* mpPointLightComponent;                                // 0x0230 (size: 0x8)
    class UParticleSystemComponent* mpEmissionParticleSystemComponent;                // 0x0238 (size: 0x8)
    class UStaticMesh* mpSplineStaticMesh;                                            // 0x0240 (size: 0x8)
    class UMaterialInstanceDynamic* mpSplineMaterialInstance;                         // 0x0248 (size: 0x8)
    class ARCCopterElectricity* mpOriginActor;                                        // 0x0250 (size: 0x8)
    FLinearColor mArcColor;                                                           // 0x0258 (size: 0x10)
    FVector mHitLocation;                                                             // 0x0268 (size: 0xC)
    FVector mHitNormal;                                                               // 0x0274 (size: 0xC)
    FVector mStartTangent;                                                            // 0x0280 (size: 0xC)
    FVector mTargetHitLocation;                                                       // 0x028C (size: 0xC)
    float mArcLifetime;                                                               // 0x0298 (size: 0x4)
    float mPlayRate;                                                                  // 0x029C (size: 0x4)
    float mTimePast;                                                                  // 0x02A0 (size: 0x4)
    float mMaxDistance;                                                               // 0x02A4 (size: 0x4)
    float mMaxArcRotation;                                                            // 0x02A8 (size: 0x4)
    bool mbArcHasSpawned;                                                             // 0x02AC (size: 0x1)
    bool mbIsFocused;                                                                 // 0x02AD (size: 0x1)
    bool mbDidTraceHit;                                                               // 0x02AE (size: 0x1)
    bool mbEnableParticles;                                                           // 0x02AF (size: 0x1)
    int32 mSpawnIndex;                                                                // 0x02B0 (size: 0x4)

}; // Size: 0x2B8

class ARCCopterElectricity : public AActor
{
    class USphereComponent* mpSphereComponent;                                        // 0x0230 (size: 0x8)
    class USplineMeshComponent* mpSplineMeshComponent;                                // 0x0238 (size: 0x8)
    class USplineInterpComponent* mpRocketsComponent;                                 // 0x0240 (size: 0x8)
    class UParticleSystemComponent* mpEmissionParticleSystemComponent;                // 0x0248 (size: 0x8)
    FVector mTargetHitLocation;                                                       // 0x0250 (size: 0xC)
    FVector mCurrentStartTangentWorld;                                                // 0x025C (size: 0xC)
    bool mbIsSplineDataDirty;                                                         // 0x0268 (size: 0x1)
    bool mbIsFiring;                                                                  // 0x0269 (size: 0x1)
    bool mbHitEvil;                                                                   // 0x026A (size: 0x1)
    bool mbHitSurface;                                                                // 0x026B (size: 0x1)
    bool mbEnableParticles;                                                           // 0x026C (size: 0x1)
    bool mbIsWaitingForTargetUpdate;                                                  // 0x026D (size: 0x1)
    bool mbIsWarmingUp;                                                               // 0x026E (size: 0x1)
    class URCCopterSkinDataAsset* mpRCCopterSkinDataAsset;                            // 0x0270 (size: 0x8)
    class UFlameMineSkinDataAsset* mpFlameMineSkinDataAsset;                          // 0x0278 (size: 0x8)

    void OnRocketExpired(FTransform Transform);
    void OnRocketArrived(FTransform Transform);
}; // Size: 0x280

class ARCCopterWeapon : public AWeaponBase
{
    TSubclassOf<class ARCCopter> mCopterToSpawn;                                      // 0x0370 (size: 0x8)
    class ARCCopter* mpRCCopter;                                                      // 0x0378 (size: 0x8)

    void DoServerSpawnRCCopter();
}; // Size: 0x380

class ARayGunWeapon : public AProjectileWeaponBase
{
    TSubclassOf<class ARaygunProjectile> mRayGunProjectileClass;                      // 0x0398 (size: 0x8)
    TArray<class AFPChar*> mServerQueuedRaygunHits;                                   // 0x03A0 (size: 0x10)
    class URayGunSkinDataAsset* mpRayGunSkin;                                         // 0x03B0 (size: 0x8)

    void ServerCreateAndLaunchProjectile(FTransform trans);
    void PlayFireAkEvent();
    void MulticastAllPlayFireSound();
    TSubclassOf<class ARaygunProjectile> GetRaygunProjectileToSpawn();
    float GetProjectileBaseLifetime();
    void ClientRequestFireWeapon();
}; // Size: 0x3B8

class ARaygunProjectile : public AActor
{
    class USphereComponent* mpCollisionComponent;                                     // 0x0238 (size: 0x8)
    class UStaticMeshComponent* mpStaticMeshComponent;                                // 0x0240 (size: 0x8)
    class UProjectileMovementComponent* mpProjectileMovementComponent;                // 0x0248 (size: 0x8)
    class UParticleSystemComponent* mpTrailParticleSystemComp;                        // 0x0250 (size: 0x8)
    class UParticleSystemComponent* mpExplosionParticleSystemComp;                    // 0x0258 (size: 0x8)
    class UDecalComponent* mpDecalComponent;                                          // 0x0260 (size: 0x8)
    class USphereComponent* mpDamageSphereComponent;                                  // 0x0268 (size: 0x8)
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0270 (size: 0x8)
    class UAIPerceptionStimuliSourceComponent* mpPerceptionStimuliComponent;          // 0x0278 (size: 0x8)
    class URayGunSkinDataAsset* mpRayGunSkin;                                         // 0x0280 (size: 0x8)
    FVector mInitialLocation;                                                         // 0x0288 (size: 0xC)
    float mCurrentBeamLength;                                                         // 0x0294 (size: 0x4)
    bool mbHasHit;                                                                    // 0x0298 (size: 0x1)
    bool mbServerHitEvil;                                                             // 0x0299 (size: 0x1)
    bool mbCleaningUp;                                                                // 0x029A (size: 0x1)
    float mAuthorityLifetime;                                                         // 0x029C (size: 0x4)
    bool mbShouldBounce;                                                              // 0x02A0 (size: 0x1)
    int32 mNumberOfBounces;                                                           // 0x02A4 (size: 0x4)
    float mTimeCleaningUp;                                                            // 0x02A8 (size: 0x4)
    int32 mProjectileIndex;                                                           // 0x02AC (size: 0x4)
    FVector mServerLastBounceLocation;                                                // 0x02B0 (size: 0xC)

    void OnComponentBeginOverlap(class UPrimitiveComponent* pOverlappedComponent, class AActor* pOtherActor, class UPrimitiveComponent* pOtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);
    void MulticastAllStopWhistleSound();
    void MulticastAllSetVolume(float Level);
    void MulticastAllPlayWhistleSound();
    void MulticastAllClearVisibility();
    bool IsCleaningUp();
    bool HasHit();
    FVector GetInitialLocation();
    void DoServerSetHitEvil();
    bool DoServerHasHitEvil();
    FVector DoServerGetClientReportStartCheckLocation();
    void DoAuthorityUpdateLifetime(float DeltaTime);
    void DoAuthoritySetShouldBounce(bool bNewValue);
    void DoAuthoritySetProjectileIndex(int32 Index);
    void DoAuthoritySetLifetime(float LifeTime);
    void DoAuthoritySetHasHit(bool bSet);
    void DoAuthoritySetCleaningUp(bool bSet);
    void DoAuthorityOnHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit);
    float DoAuthorityGetLifetime();
    void DoAuthorityExplode(class AFPChar* pHitEvil);
    void DoAuthorityExpire();
    void DoAuthorityCheckScreams();
    void DoAuthorityBeginCleanup();
}; // Size: 0x2C0

class ARaygunProjectileHitEffects : public AActor
{
    class UParticleSystemComponent* mpExplosionParticleSystemComp;                    // 0x0230 (size: 0x8)
    class UDecalComponent* mpDecalComponent;                                          // 0x0238 (size: 0x8)
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0240 (size: 0x8)
    class URayGunSkinDataAsset* mpRayGunSkin;                                         // 0x0248 (size: 0x8)
    class ATPChar* mpOwningTPChar;                                                    // 0x0250 (size: 0x8)

}; // Size: 0x258

class ARemoteCharBase : public ABaseChar
{
    ERemoteCharState mRemoteCharState;                                                // 0x0738 (size: 0x1)
    class ATPChar* mpOwningTPChar;                                                    // 0x0740 (size: 0x8)
    class USpringArmComponent* mpCameraBoom;                                          // 0x0748 (size: 0x8)
    class UCameraComponent* mpCameraComponent;                                        // 0x0750 (size: 0x8)
    class UAIPerceptionStimuliSourceComponent* mpPerceptionStimuliSource;             // 0x0758 (size: 0x8)
    class UCapsuleComponent* mpEvilCollisionComponent;                                // 0x0760 (size: 0x8)
    float mCurrentLifespan;                                                           // 0x0768 (size: 0x4)
    class UPointLightComponent* mpPointLightComponent;                                // 0x0770 (size: 0x8)
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0778 (size: 0x8)
    ERemoteCharType mRemoteCharType;                                                  // 0x0780 (size: 0x1)
    float mStateTimer;                                                                // 0x0784 (size: 0x4)
    bool mbServerIsZoningEvil;                                                        // 0x0788 (size: 0x1)
    FRotator mFrontEndRotation;                                                       // 0x078C (size: 0xC)

    void UpdateRemoteCharState(float DeltaSeconds);
    void UpdateAkEmitters();
    void ServerRequestBeginSecondaryFire();
    void ServerRequestBeginAction1();
    void ServerOnClientViewTargetBlendComplete();
    void ServerDebugToggleSubdued();
    void ServerDebugToggleProne();
    void ServerDebugToggleCowering();
    void ServerDebugKill();
    void ServerDebugDisintegrate();
    void ServerDebugBecomeAlive(float life, bool bSetUndead);
    void RefreshSkinSwitch();
    void PlaySeekingEndAudio();
    void PlayExplosionEffects();
    void PlayExplosionAudio();
    void OnReactedToEvilScream();
    void MulticastAllPlaySeekingEnd();
    void MulticastAllPlayExplosion();
    void MulticastAllCowerShake();
    bool IsInFrontEnd();
    bool IsClientFinishedViewBlend();
    ERemoteCharType GetRemoteCharType();
    ERemoteCharState GetRemoteCharState();
    FRotator GetFrontEndRotation();
    float GetCurrentLifespan();
    void DoServerUpdateZoningEvil(float DeltaSeconds);
    void DoServerUpdateRemoteCharState(float DeltaSeconds);
    void DoServerSetZoningEvil(bool bSet);
    void DoServerSetStateTimer(float Timer);
    void DoServerSetRemoteCharState(ERemoteCharState desiredState);
    void DoServerRelease();
    void DoServerOnOwningTPCharSet();
    bool DoServerIsZoningEvil();
    void DoServerDetonate();
    void DoServerCancel(bool bImmediately);
    void DoClientSetFinishedViewBlend(bool bSet);
    float CalculateAcceleration();
    bool AllowedToSwitchViewTargetToThis();
}; // Size: 0x7C0

class AReplayPC : public ABasePC
{
    class ATPChar* mpViewTargetTPChar;                                                // 0x05C8 (size: 0x8)
    bool mbIsSpeedUpPressed;                                                          // 0x05D0 (size: 0x1)
    bool mbIsSlowDownPressed;                                                         // 0x05D1 (size: 0x1)
    bool mbSkipForwardPressed;                                                        // 0x05D2 (size: 0x1)
    bool mbSkipBackwardPressed;                                                       // 0x05D3 (size: 0x1)
    float mSkipTimer;                                                                 // 0x05D4 (size: 0x4)
    bool mbUsingFreeCam;                                                              // 0x05D8 (size: 0x1)
    bool mbIsDilationModifiedByTriggers;                                              // 0x05D9 (size: 0x1)
    uint8 mPauseFrameDelay;                                                           // 0x05DA (size: 0x1)
    float mSavedTimeDilation;                                                         // 0x05DC (size: 0x4)

    bool IsUsingFreeCam();
}; // Size: 0x608

class AResonanceClone : public AActor
{
    class UPostProcessComponent* mpPostProcessComponent;                              // 0x0230 (size: 0x8)
    FSoftObjectPath mTeenViewNiagaraSystemPath;                                       // 0x0238 (size: 0x18)
    float mInitialDelay;                                                              // 0x0250 (size: 0x4)
    FResonanceCloneParameters mCloneParameters;                                       // 0x0254 (size: 0x10)
    class UNiagaraComponent* mpEvilViewNiagaraComponent;                              // 0x0268 (size: 0x8)
    class UNiagaraComponent* mpTeenViewNiagaraComponent;                              // 0x0270 (size: 0x8)
    bool mbCreatedIndicator;                                                          // 0x0280 (size: 0x1)

    void OnTeenViewSystemFinished(class UNiagaraComponent* pComponent);
    void OnEvilViewSystemFinished(class UNiagaraComponent* pComponent);
}; // Size: 0x288

class AResurrectPickup : public APickupBase
{
    TSoftObjectPtr<UNiagaraSystem> mWispsNiagaraSystem;                               // 0x0300 (size: 0x28)
    class UNiagaraComponent* mpWispsNiagaraComponent;                                 // 0x0328 (size: 0x8)
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0330 (size: 0x8)

}; // Size: 0x338

class ARoomFrame : public AActor
{
    FText mRoomName;                                                                  // 0x0220 (size: 0x18)
    FLinearColor mRoomColor;                                                          // 0x0238 (size: 0x10)
    TArray<FRoomFrameAttribute> mRoomAttributes;                                      // 0x0248 (size: 0x10)
    FName mFogPresetName;                                                             // 0x0258 (size: 0x8)
    class UStaticMesh* mpDefaultMeshAsset;                                            // 0x0260 (size: 0x8)
    class UMaterial* mpDefaultMaterialAsset;                                          // 0x0268 (size: 0x8)
    class UMaterialInstance* mpTextBillboardMaterial;                                 // 0x0270 (size: 0x8)

}; // Size: 0x280

class ARoomFrameCollider : public AActor
{
    class UStaticMeshComponent* mpStaticMeshComponent;                                // 0x0220 (size: 0x8)
    EColliderType mCollisionType;                                                     // 0x0228 (size: 0x1)
    class UStaticMesh* mpCustomColliderMesh;                                          // 0x0230 (size: 0x8)
    class UStaticMesh* mpBoxMesh;                                                     // 0x0238 (size: 0x8)
    class UStaticMesh* mpSphereMesh;                                                  // 0x0240 (size: 0x8)
    class UStaticMesh* mpCapsuleMesh;                                                 // 0x0248 (size: 0x8)
    class ARoomFrame* mpOwner;                                                        // 0x0250 (size: 0x8)

}; // Size: 0x258

class ARoomFrameManager : public AActor
{
}; // Size: 0x220

class ARoomVolume : public ACustomCullDistanceVolume
{
    FText mRoomName;                                                                  // 0x02A8 (size: 0x18)
    TArray<FRoomFrameAttribute> mRoomAttributes;                                      // 0x02C0 (size: 0x10)

    void SpawnRoomVolumesFromRoomFrame(class ARoomFrame* pRoomFrame);
    void OnComponentEndOverlap(class UPrimitiveComponent* pOverlappedComponent, class AActor* pOtherActor, class UPrimitiveComponent* pOtherComp, int32 OtherBodyIndex);
    void OnComponentBeginOverlap(class UPrimitiveComponent* pOverlappedComponent, class AActor* pOtherActor, class UPrimitiveComponent* pOtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);
}; // Size: 0x2D0

class ASearchableEventObject : public ASearchablePoint
{
    bool mbIsSetToLocalPlayer;                                                        // 0x0350 (size: 0x1)
    float mLocalPlayerLightBrightness;                                                // 0x0354 (size: 0x4)
    float mOtherPlayerLightBrightness;                                                // 0x0358 (size: 0x4)
    TArray<FColor> mPlayerColors;                                                     // 0x0360 (size: 0x10)
    TArray<float> mPlayerLightMultipliers;                                            // 0x0370 (size: 0x10)
    class USceneComponent* mpPivotComponent;                                          // 0x0380 (size: 0x8)
    ESearchableEventObjectType mSearchableEventObjectType;                            // 0x0388 (size: 0x1)
    class USkeletalMesh* mpPostLootSkelMesh;                                          // 0x0390 (size: 0x8)
    int32 mSearchableSpawnIndex;                                                      // 0x0398 (size: 0x4)

    void SetPostLootSkelMesh(class USkeletalMesh* pPostLootSkelMesh);
    void OnRep_SearchableSpawnIndex();
    void MulticastAllOnLooted();
    int32 GetSpawnIndex();
    ESeasonalEventType GetSeasonalEventType();
    ESearchableEventObjectType GetSearchableEventObjectType();
    class USkeletalMesh* GetPostLootSkelMesh();
    EEventPickupType GetEventPickupType();
    void DoServerSetupSpawnedBP(class USearchablePointManagerComponent* pManager);
    void DoServerSetSpawnIndex(int32 Index);
    class ASearchableEventObject* DoServerReplaceWithEventSpecificClass(ESeasonalEventType EventType);
}; // Size: 0x3A0

class ASearchableEventObject_Easter : public ASearchableEventObject
{
    bool mbContainsJackInTheBox;                                                      // 0x03A8 (size: 0x1)
    TSoftObjectPtr<UNiagaraSystem> mWispsNiagaraSystem;                               // 0x03B0 (size: 0x28)
    class UNiagaraComponent* mpWispsNiagaraComponent;                                 // 0x03D8 (size: 0x8)
    FSoftObjectPath mTeenEasterNiagaraSystemPath;                                     // 0x03E0 (size: 0x18)
    class UNiagaraComponent* mpTeenEasterNiagaraComponent;                            // 0x03F8 (size: 0x8)
    FColor mEasterNiagaraColor;                                                       // 0x0400 (size: 0x4)
    class USceneComponent* mpNiagaraPivot;                                            // 0x0408 (size: 0x8)
    TArray<class UMaterialInstance*> mBasketMaterials;                                // 0x0410 (size: 0x10)
    TArray<class UMaterialInstance*> mPaperMaterials;                                 // 0x0420 (size: 0x10)

    void MulticastAllPlaySearchFinished();
}; // Size: 0x430

class ASearchableEventObject_Halloween : public ASearchableEventObject
{
    class AGameplayPS* mpOwnerPS;                                                     // 0x03A0 (size: 0x8)
    class UParticleSystemComponent* mpParticleSystemComponent;                        // 0x03A8 (size: 0x8)
    bool mbDebugOverrideIsActiveAsLocal;                                              // 0x03B0 (size: 0x1)
    class UParticleSystem* mpLocalTPCharParticleSystem;                               // 0x03B8 (size: 0x8)
    class UParticleSystem* mpOtherTPCharParticleSystem;                               // 0x03C0 (size: 0x8)
    class UPointLightComponent* mpPointLightComponent;                                // 0x03C8 (size: 0x8)

    void UpdateSearchableParticleEffects();
    void SetPointLightIntensity(int32 PlayerIndex, float Brightness);
    void SetParticleSystem(class UParticleSystemComponent* pParticleSystemComponent);
    class UPointLightComponent* GetPointLightComponent();
    int32 GetPlayerNumberByColor(FColor Color);
    class UParticleSystemComponent* GetParticleSystemComponent();
    class AGameplayPS* GetOwnerPS();
    class UParticleSystem* GetOtherTPCharParticleSystem();
    class UParticleSystem* GetLocalTPCharParticleSystem();
    void DoServerSetOwnerPS(class AGameplayPS* pOwnerPS);
    void DoServerSetDebugOverrideIsActiveAsLocal(bool bIsActiveAsLocal);
    bool DebugOverrideIsActiveAsLocal();
}; // Size: 0x3D0

class ASearchableEventObject_Holiday : public ASearchableEventObject
{
    bool mbContainsJackInTheBox;                                                      // 0x03A8 (size: 0x1)
    TSoftObjectPtr<UNiagaraSystem> mWispsNiagaraSystem;                               // 0x03B0 (size: 0x28)
    class UNiagaraComponent* mpWispsNiagaraComponent;                                 // 0x03D8 (size: 0x8)

    void MulticastAllPlayPresentFinished();
    void MulticastAllPlayJackInTheBox();
    void MulticastAllPlayEffects();
    void DoServerSetContainsJackInTheBox();
}; // Size: 0x3E0

class ASearchableLockbox : public ASearchablePoint
{
    TSoftObjectPtr<UNiagaraSystem> mLockboxWispsNiagaraSystem;                        // 0x0358 (size: 0x28)
    class UNiagaraComponent* mpLockboxWispsNiagaraComponent;                          // 0x0380 (size: 0x8)
    class UGameplayTasksComponent* mpGameplayTasksComponent;                          // 0x0388 (size: 0x8)
    bool mbTeenDeathSetup;                                                            // 0x0390 (size: 0x1)
    float mCurrentAuraAttenuationRampTime;                                            // 0x0394 (size: 0x4)
    class UExtAkComponent* mpAuraAkEmitter;                                           // 0x0398 (size: 0x8)

    void OnRep_AuraAttenuationChanged();
    void MulticastAllPlayLockboxFinish();
    void MulticastAllPlayDisintegrationEffect();
    void MulticastAllPlayAuraLoop();
    void MulticastAllEnableCollision(bool bCollisionEnabled);
    void DoServerSimulateTeenDeath();
    void DoServerHideLockboxOnFirstTimeSpawning();
    void DoServerBecomeInteractable();
}; // Size: 0x3A0

class ASearchablePoint : public APointBase
{
    float mAdrenalineDropChance;                                                      // 0x02C8 (size: 0x4)
    float mPillsDropChance;                                                           // 0x02CC (size: 0x4)
    float mWalkieDropChance;                                                          // 0x02D0 (size: 0x4)
    float mNoiseMakerDropChance;                                                      // 0x02D4 (size: 0x4)
    float mSmokeBombDropChance;                                                       // 0x02D8 (size: 0x4)
    float mBookOfDeadDropChance;                                                      // 0x02DC (size: 0x4)
    float mMinTimeToRecharge;                                                         // 0x02E0 (size: 0x4)
    float mMaxTimeToRecharge;                                                         // 0x02E4 (size: 0x4)
    int32 mBaseSearchPuzzles;                                                         // 0x02E8 (size: 0x4)
    class USkeletalMeshComponent* mpSkelMeshComponent;                                // 0x02F0 (size: 0x8)
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x02F8 (size: 0x8)
    FVector mSpawnedPickupLocation;                                                   // 0x0300 (size: 0xC)
    FRotator mSpawnPickupRotation;                                                    // 0x030C (size: 0xC)
    ESearchableType mSearchableType;                                                  // 0x0318 (size: 0x1)
    class USearchablePointManagerComponent* mpManager;                                // 0x0320 (size: 0x8)
    EPickupType mPickupToGive;                                                        // 0x0328 (size: 0x1)
    class APickupBase* mpSpawnedPickup;                                               // 0x0330 (size: 0x8)
    bool mbOneTimeUsage;                                                              // 0x0338 (size: 0x1)
    bool mbReadyImmediately;                                                          // 0x0339 (size: 0x1)
    float mServerSearchableRechargeTime;                                              // 0x033C (size: 0x4)
    bool mbIsBeingSearched;                                                           // 0x0340 (size: 0x1)
    ESearchableState mCurrentSearchableState;                                         // 0x0341 (size: 0x1)
    float mCurrentSearchableStateTime;                                                // 0x0344 (size: 0x4)
    float mCurrentLockoutTime;                                                        // 0x0348 (size: 0x4)

    void UpdateVisibility();
    void UpdateRenderCustomDepth();
    bool TutorialAbleToTakePickup();
    void SetManager(class USearchablePointManagerComponent* pManager);
    void OverrideMinAndMaxSearchableRechargeTimes(float Min, float Max);
    void MulticastAllStopActiveSearchLoop();
    void MulticastAllPlayActiveSearchLoop();
    bool IsUsable();
    bool IsSearching();
    bool IsSearcherValid(class ATPChar* pSearcher);
    bool IsOneTimeUsage();
    bool IsInUsedState();
    bool IsInPostSearchState();
    bool IsAbleToBeSearched();
    FRotator GetSpawnPickupRotation();
    FVector GetSpawnPickupLocation();
    ESearchableType GetSearchableType();
    float GetSearchableStateTime();
    float GetSearchablePreSearchSetupTime();
    FRotator GetRewardReferenceRotation();
    class UExtAkComponent* GetPrimaryAkEmitter();
    FVector GetPingAnchorLocation();
    EPickupType GetPickupToGive();
    float GetMinTimeToRecharge();
    class USkeletalMeshComponent* GetMesh();
    float GetMaxTimeToRecharge();
    float GetLockoutSetupTime();
    ESearchableState GetCurrentSearchableState();
    float GetCurrentLockoutTime();
    int32 GetBaseSearchPuzzles();
    void DoUpdateGlint();
    void DoServerUpdateUsability(float DeltaTime);
    void DoServerSetUsed();
    void DoServerSetSearchableState(ESearchableState newState);
    void DoServerSetSearchableRechargeTime(float Value);
    void DoServerSetPickupToGive(EPickupType Type);
    void DoServerSetMinTimeToRecharge(float Value);
    void DoServerSetMaxTimeToRecharge(float Value);
    void DoServerSetIsOneTimeUsage(bool Value);
    void DoServerSetDroppedPickupActor(class APickupBase* pPickup);
    void DoServerSetCurrentSearchableStateTime(float NewValue);
    void DoServerSetBaseSearchableLockoutTime(float NewValue);
    void DoServerGiveSearchableReward(class ATPChar* pTPChar);
    float DoServerGetSearchableRechargeTime();
    void DoServerForceGivePickup(EPickupType Type);
    void DoServerDetermineNextPickup();
    void DoServerDebugForceFillSearchable();
    void DoServerBeginSearching();
    void DoServerAwardSearchScore(class ATPChar* pTPChar);
    void DoServerActivate(class ATPChar* pOwningTPChar);
    bool AllowedToGivePickup();
    bool AbleToTakePickup();
}; // Size: 0x350

class ASearchableVendingMachine : public ASearchablePoint
{
    class UCapsuleComponent* mpEvilAttackCollision;                                   // 0x0358 (size: 0x8)
    float mMaxBrightness;                                                             // 0x0360 (size: 0x4)
    float mTimeToFlickerBeforeReady;                                                  // 0x0364 (size: 0x4)
    float mFlickerRate;                                                               // 0x0368 (size: 0x4)
    float mFlickerVariation;                                                          // 0x036C (size: 0x4)
    class UNiagaraSystem* mpLockoutParticleSystem;                                    // 0x0370 (size: 0x8)
    TMap<ULightComponent*, float> mLightComponents;                                   // 0x0378 (size: 0x50)
    bool mbPlayedResetSound;                                                          // 0x03C8 (size: 0x1)
    FRotator mWorldStartRotation;                                                     // 0x03CC (size: 0xC)
    FVector mMeshStartWorldLocation;                                                  // 0x03D8 (size: 0xC)

    void MulticastAllPlayVendingMachineReset();
    void MulticastAllPlayVendingMachineHit();
    void MulticastAllPlayVendingMachineDrinkDrop();
    void MulticastAllPlayVendingMachineCoinDrop();
    void MulticastAllHitByEvil(FVector HitLocation, FVector hitDirection);
}; // Size: 0x3E8

class ASearchableWasteBasket : public ASearchablePoint
{
    bool mbTippingOver;                                                               // 0x0350 (size: 0x1)
    class ATPChar* mpSearcherTPChar;                                                  // 0x0358 (size: 0x8)
    class USceneComponent* mpPivotComponent;                                          // 0x0360 (size: 0x8)

    void MulticastAllPlayWasteBasketFinish();
    bool IsTippingOver();
    class USceneComponent* GetPivot();
    float GetDesiredTipAngle();
    void DoServerSetSearcherChar(class ATPChar* NewValue);
    void DoServerSetIsTippingOver(bool bNewValue);
    class ATPChar* DoServerGetSearcherChar();
}; // Size: 0x368

class ASeasonalEventCenterpiecePoint : public APointBase
{
    class ASeasonalEventCenterpiece_Base* mpOwningEventCenterpiece;                   // 0x02A8 (size: 0x8)

    bool IsTPCharAllowedToManuallyLeave();
    ESeasonalEventType GetSeasonalEventType();
    class ASeasonalEventCenterpiece_Base* GetOwningEventCenterpiece();
    void DoServerUpdateTPChars();
    void DoServerSetOwningEventCenterpiece(class ASeasonalEventCenterpiece_Base* pCenterpiece);
    void DoServerBeginInteraction();
    void DoServerActivate(class ATPChar* pOwningTPChar);
}; // Size: 0x2B0

class ASeasonalEventCenterpiece_Base : public AActor
{
    ESeasonalEventType mSeasonalEventType;                                            // 0x0220 (size: 0x1)
    class USkeletalMeshComponent* mpSkeletalMeshComponent;                            // 0x0228 (size: 0x8)
    TArray<class ASeasonalEventCenterpiecePoint*> mChildPoints;                       // 0x0230 (size: 0x10)
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0240 (size: 0x8)

    bool TPCharAllowedToInteract(class ATPChar* pTPChar);
    bool IsTPCharAllowedToManuallyLeave();
    ESeasonalEventType GetSeasonalEventType();
    class ASeasonalEventCenterpiece_Base* DoServerReplaceSelfWithEventSpecificClass(ESeasonalEventType EventType);
    void DoServerOnTPCharBeginInteractionAnimation();
    void DoServerOnTPCharBeginInteraction(class ATPChar* pTPChar);
    void DoServerAddChildPoint(class ASeasonalEventCenterpiecePoint* pPoint);
}; // Size: 0x248

class ASeasonalEventCenterpiece_Holiday : public ASeasonalEventCenterpiece_Base
{
    TArray<class USceneComponent*> mOrnamentSockets;                                  // 0x0258 (size: 0x10)
    TArray<class AActor*> mPlacedOrnamentActors;                                      // 0x0268 (size: 0x10)
    TArray<class UStaticMeshComponent*> mTreeDecorationLayers;                        // 0x0278 (size: 0x10)
    int32 mCurrentOrnamentSocketIndex;                                                // 0x0288 (size: 0x4)
    TArray<class ASeasonalEvent_EvilOrnament*> mSpawnedEvilOrnamentActors;            // 0x0290 (size: 0x10)
    TArray<class ATPChar*> mContributingChars;                                        // 0x02A0 (size: 0x10)
    class USphereComponent* mpEvilCollisionComponent;                                 // 0x02B0 (size: 0x8)
    TArray<FEvilOrnamentAnimationData> mEvilOrnamentAnimationDataList;                // 0x02B8 (size: 0x10)
    TArray<float> mDecorationLayerDissolveAlphaList;                                  // 0x02C8 (size: 0x10)
    class UStaticMeshComponent* mpIconMeshComponent;                                  // 0x02D8 (size: 0x8)
    class UNiagaraComponent* mpNiagaraSystemComponent;                                // 0x02E0 (size: 0x8)
    class UStaticMeshComponent* mpIconBorderMeshComponent;                            // 0x02E8 (size: 0x8)

    void UpdateRenderCustomDepth();
    void UpdateIconFacing();
    void UpdateDecorationLayerEffects(float DeltaSeconds);
    void MulticastAll_PlayOrnamentOnUsed_Evil();
    void MulticastAll_PlayOrnamentOnUsed();
    void MulticastAll_PlayOrnamentOnUse();
    void MulticastAll_PlayOrnamentOnPlace();
    void MulticastAll_PlayMusicLoop();
    void MulticastAll_PlayCenterpieceCompleted();
    void MulticastAll_AddEvilOrnamentAnimationData(FEvilOrnamentAnimationData newData);
    bool IsCompleted();
    bool HasRoomForAdditionalOrnament();
    void DoServerUpdateOverlapChecks();
    void DoServerUpdateEvilOrnamentAnimations(float DeltaSeconds);
    void DoServerOnOrnamentClassAdded(UClass* pOrnamentClass);
    void DoServerOnOrnamentActorAdded(class AActor* pOrnamentClass);
    void DoServerOnFPCharEntered(class AFPChar* pFPChar);
}; // Size: 0x2F0

class ASeasonalEventObject_Holiday_JackInTheBox : public AActor
{
    class UAnimMontage* mpJackInTheBoxMontage;                                        // 0x0220 (size: 0x8)
    class USkeletalMeshComponent* mpSkeletalMeshComp;                                 // 0x0228 (size: 0x8)

}; // Size: 0x230

class ASeasonalEvent_EvilOrnament : public AActor
{
    class USkeletalMeshComponent* mpSkeletalMesh;                                     // 0x0220 (size: 0x8)
    float mCurrentLifetime;                                                           // 0x0228 (size: 0x4)
    bool mbHideOrnamentMesh;                                                          // 0x022C (size: 0x1)
    float mShrinkStartScale;                                                          // 0x0230 (size: 0x4)
    float mLocalShrinkTime;                                                           // 0x0234 (size: 0x4)
    bool mbPlayedDisappearParticles;                                                  // 0x0238 (size: 0x1)
    class UParticleSystem* mpOrnamentDisappearParticles;                              // 0x0240 (size: 0x8)

    bool ShowOrnamentString();
    void PlayOrnamentDisappearAnimation();
    void DoServerUpdateLifetime(float DeltaSeconds);
    void DoServerSetOrnamentLifetime(float NewValue);
    void DoServerSetHideOrnamentMesh(bool bNewValue);
    bool AllowedToShowOrnamentMesh();
}; // Size: 0x248

class AServerBeaconClient : public AOnlineBeaconClient
{

    void ServerSetMatchmakingInfo(FP2PMatchmakingInfo Info);
    void ClientJoinLobbyWithCode(FString code);
    void ClientJoinLobby();
    void ClientJoinGame();
}; // Size: 0x3C0

class AServerBeaconHost : public AOnlineBeaconHost
{
    bool mbIsInitialized;                                                             // 0x0308 (size: 0x1)

}; // Size: 0x310

class AServerBeaconHostObject : public AOnlineBeaconHostObject
{
}; // Size: 0x258

class ASingleShotParticleSystem : public AActor
{
    class USphereComponent* mpSphere;                                                 // 0x0220 (size: 0x8)
    class UParticleSystemComponent* mpParticleSystemComponent;                        // 0x0228 (size: 0x8)
    float mMaxLifetime;                                                               // 0x0230 (size: 0x4)
    FEffectVisibility mEffectVisibility;                                              // 0x0234 (size: 0xB)

    void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);
}; // Size: 0x240

class ASmartTeenController : public ATrainingTeenAIControllerV2
{
}; // Size: 0x350

class ASmokeBombActor : public AActor
{
    class USkeletalMeshComponent* mpMeshComponent;                                    // 0x0228 (size: 0x8)
    class UCapsuleComponent* mpCapsuleInnerCollider;                                  // 0x0230 (size: 0x8)
    class UNiagaraSystem* mpSmokeEmittingNiagara;                                     // 0x0238 (size: 0x8)
    class UGameplayTasksComponent* mpDisintegrationGameplayTasksComponent;            // 0x0240 (size: 0x8)
    class UGameplayTask_PlayMaterialEffects* disintegrationTask;                      // 0x0248 (size: 0x8)
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0250 (size: 0x8)
    bool mIsEvilInSmokeRadius;                                                        // 0x0258 (size: 0x1)
    bool mbCleaningUp;                                                                // 0x0259 (size: 0x1)
    class ATPChar* mpOwningTPChar;                                                    // 0x0260 (size: 0x8)
    float mEffectiveTimeRemaining;                                                    // 0x0268 (size: 0x4)
    float mNiagaraCleaningTimeRemaining;                                              // 0x026C (size: 0x4)
    class UNiagaraComponent* mpExplosionNiagaraInst;                                  // 0x0270 (size: 0x8)

    void TryHideSmokeVisualEffectOnTeen();
    void PlayDisintegrationEffect(float Duration);
    void MulticastAllStopSmokeEmittingLoop();
    void MulticastAllStopNiagara();
    void MulticastAllStartExtinguish();
    void MulticastAllSpawnExplosionNiagara();
    void MulticastAllPlaySmokeEmittingLoop();
    void MulticastAllPlaySmokeBombExplode();
    void MulticastAllPlaySelfCleaningDisintegration();
    class UExtAkComponent* GetPrimaryAkEmitter();
    class USkeletalMeshComponent* GetMesh();
    bool GetIsOutOfCharges();
    bool GetIsCleaningUp();
    float GetEffectiveTimeRemaining();
    float GetBaseEffectiveTime();
    void DoServerSetOwningTPChar(class ATPChar* pNewValue);
    void DoServerSetEffectiveTimeRemaining(float NewValue);
    void DoServerInflictBlindToEvilInRadius();
    class ATPChar* DoServerGetOwningTPChar();
}; // Size: 0x280

class ASmokeBombPickup : public APickupBase
{

    void MulticastAllPlayOnUse();
}; // Size: 0x2F8

class ASmokeTestCameraLocation : public ACameraActor
{
}; // Size: 0x7B0

class ASpawnGroupManager : public AActor
{
    class UStaticMeshComponent* mpStaticMesh;                                         // 0x0220 (size: 0x8)
    TArray<FSpawnGroup> mpSpawnGroupArray;                                            // 0x0228 (size: 0x10)
    ESpawnGroupType mSpawnGroupType;                                                  // 0x0238 (size: 0x1)
    bool mbDebugKeepAllItems;                                                         // 0x0239 (size: 0x1)
    FLockBoxSpawningContext mLockBoxSpawningContext;                                  // 0x0240 (size: 0x28)

    void SpawnLockboxOnTeenDead();
    void SetDebugKeepAllItems(bool bNewValue);
    void SelectRandom();
    bool IsEvilPropSpawnGroup();
    ESpawnGroupType GetSpawnGroupTypeFromPickupType(EPickupType pickupType);
    ESpawnGroupType GetSpawnGroupType();
    TArray<FSpawnGroup> GetSpawnGroupArray();
    int32 GetLeastUsedSpawnGroupIndex();
    void DetermineEventSpecificGroupCounts();
    void DestroyActorAndKillDependencies(class AActor* pActor);
    bool DebugKeepAllItems();
    void AddPickupsToPool(TArray<int32> numByType);
}; // Size: 0x268

class ASpawnableInteractableProp : public AInteractablePropBase
{
    FVector mLaunchImpulse;                                                           // 0x0348 (size: 0xC)
    float mLifetime;                                                                  // 0x0354 (size: 0x4)
    bool mbAutoDestroy;                                                               // 0x0358 (size: 0x1)
    class UStaticMeshComponent* mpStaticMeshComponent;                                // 0x0360 (size: 0x8)

    bool DestroyInteractableProp();
}; // Size: 0x370

class ASpinningVHS : public AActor
{
    class UStaticMeshComponent* mpMeshComponent;                                      // 0x0220 (size: 0x8)
    float mSpinSpeed;                                                                 // 0x0228 (size: 0x4)
    float mSwaySpeed;                                                                 // 0x022C (size: 0x4)
    float mSwayDistance;                                                              // 0x0230 (size: 0x4)

}; // Size: 0x238

class ASplineTubeActorBase : public AActor
{
    class USceneComponent* mpRoot;                                                    // 0x0220 (size: 0x8)
    bool mbGenerateCollision;                                                         // 0x0228 (size: 0x1)
    bool mbUseGeneratedStaticMesh;                                                    // 0x0229 (size: 0x1)
    bool mbStaticMeshLoaded;                                                          // 0x022A (size: 0x1)
    int32 mThreshold;                                                                 // 0x022C (size: 0x4)
    int32 mNumberOfStaticMeshes;                                                      // 0x0230 (size: 0x4)
    TArray<class UPrimitiveComponent*> mpSplineMeshComponents;                        // 0x0238 (size: 0x10)
    bool mbStaticMeshGenerated;                                                       // 0x0248 (size: 0x1)
    int32 mNumberOfGeneratedStaticMeshes;                                             // 0x024C (size: 0x4)
    TArray<class UStaticMesh*> mpGeneratedMeshArray;                                  // 0x0250 (size: 0x10)
    TArray<class UStaticMeshComponent*> mpGeneratedMeshComponentArray;                // 0x0260 (size: 0x10)
    TArray<FSoftObjectPath> mGeneratedObjectNameArray;                                // 0x0270 (size: 0x10)
    FString mEnvironmentDir;                                                          // 0x0280 (size: 0x10)
    FMeshMergingSettings mMergeSettings;                                              // 0x0290 (size: 0xA0)

}; // Size: 0x330

class AStagingGM : public AGameMode
{
    bool mCanWeStart;                                                                 // 0x0308 (size: 0x1)
    TArray<class APlayerController*> mAllPlayerControllers;                           // 0x0310 (size: 0x10)
    TArray<int32> mConnectedIDs;                                                      // 0x0320 (size: 0x10)
    float mTimeoutCountdown;                                                          // 0x0330 (size: 0x4)
    bool mbServerTravelBegun;                                                         // 0x0334 (size: 0x1)
    float mStagingExpiryTime;                                                         // 0x0338 (size: 0x4)

    void StorePlayerController();
    void ServerSubmitConnectionUID(uint32 uid);
    void ServerEveryoneUpdate();
    void RespawnPlayer(class APlayerController* pPlayerController, UClass* pCharacterClass);
    void ReportPlayerDisconnect(class APlayerController* pController);
    void LaunchTheGame();
    void DoRespawnPlayer(class APlayerController* pPlayerController, UClass* pCharacterClass, FTransform SpawnTransform);
    void CheckIfStagingIsExpired(float DeltaSeconds);
}; // Size: 0x340

class AStagingPC : public ABasePC
{
    FNetPlayerInfoStruct mPlayerInfo;                                                 // 0x05C8 (size: 0x178)

    void ServerSubmitConnectingUID(int32 uid);
    void ServerSpawnCharacter();
    void ClientRequestUID();
}; // Size: 0x740

class AStagingSession : public AGameSession
{
}; // Size: 0x238

class AStaticShieldWeapon : public AWeaponBase
{
    class USceneComponent* mpCharacterVFXContainer;                                   // 0x03A8 (size: 0x8)
    class USceneComponent* mpWeaponVFXContainer;                                      // 0x03B0 (size: 0x8)
    class UParticleSystemComponent* mpShieldParticleSystemComponent;                  // 0x03B8 (size: 0x8)
    class UParticleSystemComponent* mpShieldChargeLevelParticleSystem;                // 0x03C0 (size: 0x8)
    class UParticleSystemComponent* mpRimParticleSystemComponent;                     // 0x03C8 (size: 0x8)
    TArray<class UStaticMesh*> mLightningSphereTemplates;                             // 0x03D0 (size: 0x10)
    TArray<class UStaticMeshComponent*> mLightningMeshComponents;                     // 0x03E0 (size: 0x10)
    class UStaticMeshComponent* mpShieldMeshComponent;                                // 0x03F0 (size: 0x8)
    class USphereComponent* mpCollisionComponent;                                     // 0x03F8 (size: 0x8)
    bool mbIsBeingCharged;                                                            // 0x0400 (size: 0x1)
    bool mbShielding;                                                                 // 0x0401 (size: 0x1)
    bool mbFiring;                                                                    // 0x0402 (size: 0x1)
    FVector mTargetBeamLocation;                                                      // 0x0404 (size: 0xC)
    float mTimeEnergizing;                                                            // 0x0410 (size: 0x4)
    int32 mEnergyPoints;                                                              // 0x0414 (size: 0x4)
    int32 mMaxEnergyPoints;                                                           // 0x0418 (size: 0x4)
    float mEnergyProgress;                                                            // 0x041C (size: 0x4)
    float mTimeActive;                                                                // 0x0420 (size: 0x4)
    float mLightningTimer;                                                            // 0x0424 (size: 0x4)
    float mMeshFadeOutTimer;                                                          // 0x0428 (size: 0x4)
    bool mbHasGeneratedShieldActivationEvent;                                         // 0x042C (size: 0x1)
    bool mbPowered;                                                                   // 0x042D (size: 0x1)
    float mTimeUntilPowered;                                                          // 0x0430 (size: 0x4)
    bool mbDamagingMimic;                                                             // 0x0434 (size: 0x1)

    void StopStaticShieldZapAkEvent();
    void StopStaticShieldPoweredAkEvent();
    void StopStaticShieldActiveAkEvent();
    void PlayStaticShieldActiveAkEvent();
    void OnRep_DamagingMimic();
    void MulticastAllStopStaticShieldZap();
    void MulticastAllStopStaticShieldPoweredOn();
    void MulticastAllStopStaticShieldPowered();
    void MulticastAllPlayStaticShieldZap();
    void MulticastAllPlayStaticShieldPoweredOn();
    void MulticastAllPlayStaticShieldPoweredOff();
    void MulticastAllPlayStaticShieldPowered();
    void MulticastAllPlayStaticShieldEnergized();
    bool IsDamagingMimic();
    bool IsBeingCharged();
    float GetTimeEnergizing();
    float GetTimeActive();
    int32 GetMaxEnergyPoints();
    float GetEnergyProgress();
    int32 GetEnergyPoints();
    float GetEnergizeTime();
    float GetActiveSpeedRampFactor();
    void DoServerSetMaxEnergyPoints(int32 maxEnergyPoints);
    void DoServerSetEnergyProgress(float energyProgress);
    void DoServerSetBeingCharged(bool Val);
    void DoServerDebugTogglePower();
}; // Size: 0x438

class AStationBase : public AActor
{
    bool mbIsAvailable;                                                               // 0x02A0 (size: 0x1)
    EDamageType mDamageTypeCrafted;                                                   // 0x02A1 (size: 0x1)
    float mBaseFailGlowTime;                                                          // 0x02A4 (size: 0x4)
    float mPlacementMaxRadius;                                                        // 0x02A8 (size: 0x4)
    float mPlacementMinRadius;                                                        // 0x02AC (size: 0x4)
    float mFailGlowTimer;                                                             // 0x02B0 (size: 0x4)
    int32 mNumOfCraftingChars;                                                        // 0x02B4 (size: 0x4)
    int32 mNumOfCraftPoints;                                                          // 0x02B8 (size: 0x4)
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x02C0 (size: 0x8)
    class USceneComponent* mpDummyRoot;                                               // 0x02C8 (size: 0x8)
    class UNiagaraComponent* mpStationParticlesComponent;                             // 0x02D0 (size: 0x8)
    TMap<class EDamageType, class FStationDamageTypeAssets> mpDamageTypeAssets;       // 0x02D8 (size: 0x50)
    class UStaticMeshComponent* mpIconMeshComponent;                                  // 0x0328 (size: 0x8)
    class UStaticMeshComponent* mpIconBorderMeshComponent;                            // 0x0330 (size: 0x8)
    bool mbIsPlayingCraftingLoop;                                                     // 0x0338 (size: 0x1)
    bool mbGlowing;                                                                   // 0x0339 (size: 0x1)
    class UStaticMeshComponent* mpBaseStaticMeshComponent;                            // 0x0340 (size: 0x8)
    class USpotLightComponent* mpSpotLightComponent;                                  // 0x0348 (size: 0x8)
    class UCapsuleComponent* mpPingCapsuleCollision;                                  // 0x0350 (size: 0x8)
    EWeaponTypeEnum mLastLocallySelectedWeaponType;                                   // 0x0358 (size: 0x1)
    TArray<class ACraftPoint*> mGeneratedCraftPoints;                                 // 0x0360 (size: 0x10)
    bool mbIsIncorporealMasterIndicatorActive;                                        // 0x0370 (size: 0x1)

    void UpdateRenderCustomDepth();
    void UpdateIconVisibility();
    void UpdateGlow(float DeltaTime);
    void UpdateAudio();
    void StopCraftingSwitchAkEvent();
    void SetLastLocallySelectedWeaponType(EWeaponTypeEnum NewValue);
    void SetIsIncorporealMasterIndicatorActive(bool bNewValue);
    void SetGlowing(bool bGlowing);
    void PlayCraftingSwitchAkEvent();
    void MulticastAll_WeaponCompleted(class ATPChar* pTPChar, EDamageType DamageType);
    FStencilProperties ModifyStencilPropertiesWithColor(FStencilProperties Properties, FLinearColor col);
    bool IsUsingCraftingStation(class ATPChar* pTPChar);
    bool IsIncorporealMasterIndicatorActive();
    bool IsCancellingWeapon(class ATPChar* pTPChar);
    bool IsAvailable();
    bool IsAnyoneUsingStation();
    bool HasVacantCraftPoint();
    bool HasFailureGlow();
    float GetTotalCraftingTime(class ATPChar* pTPChar, EWeaponTypeEnum weaponTypeEnum);
    float GetStationAudibleDistance();
    EWeaponTypeEnum GetRequestedWeaponForCharacter(class ATPChar* pTPChar);
    class UExtAkComponent* GetPrimaryAkEmitter();
    EWeaponTypeEnum GetPreviousRequestedWeaponForCharacter(class ATPChar* pTPChar);
    float GetPercentCraftingComplete(class ATPChar* pTPChar, EWeaponTypeEnum wepType);
    float GetPercentCancelComplete(class ATPChar* pTPChar);
    int32 GetNumberOfPlayersUsingThisStation();
    EWeaponTypeEnum GetLastLocallySelectedWeaponType();
    FLinearColor GetIconColorForStationState(EStationState stationState);
    FLinearColor GetIconBorderColorForStationState(EStationState stationState);
    EDamageType GetDamageTypeCrafted();
    bool GetCurrentDistanceAudible(class ATPChar* pTPChar, float percentageFraction);
    TArray<class ATPChar*> GetCharsCraftingHere();
    float GetBaseFailGlowTime();
    void DoServerUpdateFailGlowTimer(float DeltaTime);
    void DoServerSetAvailable(bool bVal);
    void DoServerOnRequestStopUsingStation(class ATPChar* pTPChar);
    void DoServerOnRequestStartUsingStation(class ATPChar* pTPChar);
    float DoServerFailStation(class ATPChar* pTPChar);
    void DoServerChangeRequestedWeaponType(class ATPChar* pTPChar, EWeaponTypeEnum wepType);
}; // Size: 0x3E0

class AStationSpawnerBase : public AActor
{
}; // Size: 0x220

class ASticker : public ADecalActor
{
    class UMaterialInstance* mpMaterialInstance;                                      // 0x0228 (size: 0x8)
    class UMaterialInstance* mpMaskedMaterialInstance;                                // 0x0230 (size: 0x8)
    FStickerData mStickerData;                                                        // 0x0238 (size: 0x38)
    class UStaticMeshComponent* mpDecalPlane;                                         // 0x0270 (size: 0x8)
    float mLifetime;                                                                  // 0x0278 (size: 0x4)

    void OnRep_StickerData();
}; // Size: 0x280

// Teen main class
class ATPChar : public ABaseChar
{
    bool mbAnimDebugModeEnabled;                                                      // 0x07E4 (size: 0x1)
    class UAnimSequence* mpFaceAdditive;                                              // 0x07E8 (size: 0x8)
    UClass* mpDebugTeenAnimInstance;                                                  // 0x07F0 (size: 0x8)
    bool mbIsPlayingHealLoop;                                                         // 0x07F8 (size: 0x1)
    bool mbIsPlayingReviveLoop;                                                       // 0x07F9 (size: 0x1)
    bool mbIsPlayingResurrectLoop;                                                    // 0x07FA (size: 0x1)
    float mTimeUntilWeaponDiscarded;                                                  // 0x07FC (size: 0x4)
    float mTimeAssisting;                                                             // 0x0800 (size: 0x4)
    float mTimeUntilManualTransform;                                                  // 0x0804 (size: 0x4)
    bool mbJustWoundedEvil;                                                           // 0x0808 (size: 0x1)
    class AWeaponBase* mEquippedWeapon;                                               // 0x0810 (size: 0x8)
    class UTeenClothingComponent* mpTeenClothingComponent;                            // 0x0818 (size: 0x8)
    class UEmoteComponent* mpEmoteComponent;                                          // 0x0820 (size: 0x8)
    class UStickerComponent* mpStickerComponent;                                      // 0x0828 (size: 0x8)
    class USpectralComponent* mpSpectralComponent;                                    // 0x0830 (size: 0x8)
    TArray<class UBaseStatusComponent*> mStatusComponents;                            // 0x0838 (size: 0x10)
    class UCustomizableEffectsComponent* mpCustomizableEffectsComponent;              // 0x0848 (size: 0x8)
    class UAIPerceptionStimuliSourceComponent* mpPerceptionStimuliSource;             // 0x0850 (size: 0x8)
    class UCraftStationManagerComponent* mpCraftStationManagerComponent;              // 0x0858 (size: 0x8)
    class UPlayerTipsComponent* mpPlayerTipsComponent;                                // 0x0860 (size: 0x8)
    FSoftObjectPath mInjuredNiagaraEffectPath;                                        // 0x0868 (size: 0x18)
    FAdrenalineEffectContext mAdrenalineEffectContext;                                // 0x0880 (size: 0x10)
    float mCoweringTimeRemaining;                                                     // 0x0890 (size: 0x4)
    float mCoweringTime;                                                              // 0x0894 (size: 0x4)
    float mSubduedTimeRemaining;                                                      // 0x0898 (size: 0x4)
    float mSubduedTime;                                                               // 0x089C (size: 0x4)
    int32 mSearchPuzzlesCompleted;                                                    // 0x08A0 (size: 0x4)
    float mTimeBeingHealed;                                                           // 0x08A4 (size: 0x4)
    float mTimeHealing;                                                               // 0x08A8 (size: 0x4)
    class ATPChar* mpTPCharCurrentlyHealing;                                          // 0x08B0 (size: 0x8)
    TArray<class ATPChar*> mHealableAllies;                                           // 0x08B8 (size: 0x10)
    TArray<class ATPChar*> mHealedByAllies;                                           // 0x08C8 (size: 0x10)
    TArray<class ATPChar*> mCloseByTeensLastFrame;                                    // 0x08D8 (size: 0x10)
    float mTimeBeingRevived;                                                          // 0x08E8 (size: 0x4)
    float mTimeReviving;                                                              // 0x08EC (size: 0x4)
    class ATPChar* mpTPCharCurrentlyReviving;                                         // 0x08F0 (size: 0x8)
    TArray<class ATPChar*> mRevivableAllies;                                          // 0x08F8 (size: 0x10)
    TArray<class ATPChar*> mRevivedByAllies;                                          // 0x0908 (size: 0x10)
    float mTimeBeingResurrected;                                                      // 0x0918 (size: 0x4)
    float mTimeResurrecting;                                                          // 0x091C (size: 0x4)
    class ATPChar* mpTPCharCurrentlyResurrecting;                                     // 0x0920 (size: 0x8)
    TArray<class ATPChar*> mResurrectableAllies;                                      // 0x0928 (size: 0x10)
    TArray<class ATPChar*> mResurrectedByAllies;                                      // 0x0938 (size: 0x10)
    bool mbIsUndead;                                                                  // 0x0948 (size: 0x1)
    bool mbWasResurrected;                                                            // 0x0949 (size: 0x1)
    float mCrouchTimer;                                                               // 0x094C (size: 0x4)
    float mTimeSpentLanding;                                                          // 0x0950 (size: 0x4)
    FStatusProperty mBlindStatus;                                                     // 0x0954 (size: 0xC)
    float mCrouchToggleDisableTimer;                                                  // 0x0960 (size: 0x4)
    bool mbIsDisintegrating;                                                          // 0x0964 (size: 0x1)
    bool mbIsReintegrating;                                                           // 0x0965 (size: 0x1)
    bool mbIsWeaponHolstered;                                                         // 0x0966 (size: 0x1)
    float mDisintegrationTimeRemaining;                                               // 0x0968 (size: 0x4)
    float mReintegrationTimeRemaining;                                                // 0x096C (size: 0x4)
    bool mbAreMaterialsDynamic;                                                       // 0x0970 (size: 0x1)
    bool mbAurasEnabled;                                                              // 0x0971 (size: 0x1)
    bool mbServerDropPool;                                                            // 0x0974 (size: 0x1)
    class ATPChar* mpLastOverlapping;                                                 // 0x0978 (size: 0x8)
    float mOverlapTime;                                                               // 0x0980 (size: 0x4)
    EWeaponTypeEnum mDebugCharacterWeaponType;                                        // 0x0984 (size: 0x1)
    bool mDrawDebugKeyBindings;                                                       // 0x0985 (size: 0x1)
    bool mbInvincible;                                                                // 0x0986 (size: 0x1)
    bool mIsBledOut;                                                                  // 0x0987 (size: 0x1)
    bool mIsKilled;                                                                   // 0x0988 (size: 0x1)
    bool mIsDead;                                                                     // 0x0989 (size: 0x1)
    bool mbIsTricked;                                                                 // 0x098A (size: 0x1)
    bool mbFrostbit;                                                                  // 0x098B (size: 0x1)
    bool mbFeastedOn;                                                                 // 0x098C (size: 0x1)
    bool mIsThrowing;                                                                 // 0x098D (size: 0x1)
    float mLifeRemaining;                                                             // 0x0990 (size: 0x4)
    float mMaxLife;                                                                   // 0x0994 (size: 0x4)
    int32 mHitsByEvil;                                                                // 0x0998 (size: 0x4)
    bool mIsIncubating;                                                               // 0x099C (size: 0x1)
    bool mIsInjured;                                                                  // 0x099D (size: 0x1)
    bool mIsTransforming;                                                             // 0x099E (size: 0x1)
    bool mbInProneAnimSequence;                                                       // 0x099F (size: 0x1)
    bool mbInKilledAnimSequence;                                                      // 0x09A0 (size: 0x1)
    bool mIsProne;                                                                    // 0x09A1 (size: 0x1)
    bool mbIsPlacingPickup;                                                           // 0x09A2 (size: 0x1)
    class AStationBase* mpStationBeingUsed;                                           // 0x09A8 (size: 0x8)
    class AActor* mpLastPropUsed;                                                     // 0x09B0 (size: 0x8)
    bool mJustTransformed;                                                            // 0x09B8 (size: 0x1)
    bool mbIsPooling;                                                                 // 0x09B9 (size: 0x1)
    float mBleedIntervalIncrease;                                                     // 0x09BC (size: 0x4)
    float mServerBleedTime;                                                           // 0x09C0 (size: 0x4)
    class ATeenSpectralChar* mpTeenSpectralChar;                                      // 0x09D0 (size: 0x8)
    float mEchoLocatedDistance;                                                       // 0x09D8 (size: 0x4)
    class AFlameMineChar* mpServerPossessedFlameMineChar;                             // 0x09E0 (size: 0x8)
    float mTargetBoomArmLength;                                                       // 0x09E8 (size: 0x4)
    FVector mTargetBoomArmPosition;                                                   // 0x09EC (size: 0xC)
    float mBoomArmTransitionDuration;                                                 // 0x09F8 (size: 0x4)
    float mBoomArmTransitionTime;                                                     // 0x09FC (size: 0x4)
    float mMinigameBoostTimeRemaining;                                                // 0x0A00 (size: 0x4)
    float mMinigameBoostTime;                                                         // 0x0A04 (size: 0x4)
    float mMinigamePenaltyTimeRemaining;                                              // 0x0A08 (size: 0x4)
    float mMinigamePenaltyTime;                                                       // 0x0A0C (size: 0x4)
    float mAudioTravelDistanceToActiveEvil;                                           // 0x0A10 (size: 0x4)
    TArray<class ACraftPoint*> mCraftPoints;                                          // 0x0A18 (size: 0x10)
    class ACraftPoint* mpActiveCraftPoint;                                            // 0x0A28 (size: 0x8)
    TArray<class AVaultPoint*> mVaultPoints;                                          // 0x0A30 (size: 0x10)
    class AVaultPoint* mpActiveVaultPoint;                                            // 0x0A40 (size: 0x8)
    EVaultType mFallingVaultType;                                                     // 0x0A48 (size: 0x1)
    TArray<class ADollMasterTrap*> mDollMasterTraps;                                  // 0x0A50 (size: 0x10)
    class ADollMasterTrap* mpActiveDollMasterTrap;                                    // 0x0A60 (size: 0x8)
    float mPositionAdjustingTimer;                                                    // 0x0A68 (size: 0x4)
    class AGameplayPS* mpSpectatorTarget;                                             // 0x0A70 (size: 0x8)
    TArray<class AHidePoint*> mHidePoints;                                            // 0x0A78 (size: 0x10)
    class AHidePoint* mpActiveHidePoint;                                              // 0x0A88 (size: 0x8)
    TArray<class AEnergyPoint*> mEnergyPoints;                                        // 0x0A90 (size: 0x10)
    class AEnergyPoint* mpActiveEnergyPoint;                                          // 0x0AA0 (size: 0x8)
    TArray<class AMedKitPoint*> mMedKitPoints;                                        // 0x0AA8 (size: 0x10)
    class AMedKitPoint* mpActiveMedKitPoint;                                          // 0x0AB8 (size: 0x8)
    TArray<class ASearchablePoint*> mSearchablePoints;                                // 0x0AC0 (size: 0x10)
    class ASearchablePoint* mpActiveSearchablePoint;                                  // 0x0AD0 (size: 0x8)
    TArray<class ASeasonalEventCenterpiecePoint*> mSeasonalEventCenterpiecePoints;    // 0x0AD8 (size: 0x10)
    class ASeasonalEventCenterpiecePoint* mpActiveSeasonalEventCenterpiecePoint;      // 0x0AE8 (size: 0x8)
    TArray<class ADemonSwordProjectile*> mSpawnedDemonSwordProjectiles;               // 0x0AF0 (size: 0x10)
    TArray<class ARaygunProjectile*> mSpawnedRaygunProjectiles;                       // 0x0B00 (size: 0x10)
    uint8 mServerRaygunHitsQueued;                                                    // 0x0B10 (size: 0x1)
    TSubclassOf<class ARaygunProjectileHitEffects> mRaygunProjectileHitEffectClass;   // 0x0B18 (size: 0x8)
    class UParticleSystemComponent* mpCharacterParticleEffectsComponent;              // 0x0B20 (size: 0x8)
    class UWalkieEffectComponent* mpWalkieEffectComponent;                            // 0x0B28 (size: 0x8)
    class UStatusEffectsComponent* mpCharacterStatusEffectsComponent;                 // 0x0B30 (size: 0x8)
    TMap<FName, float> mActiveRoomFrameAttributes;                                    // 0x0B38 (size: 0x50)
    float mTimeDead;                                                                  // 0x0B88 (size: 0x4)
    float mTimeInjured;                                                               // 0x0B8C (size: 0x4)
    float mTimeSinceLastBeenHit;                                                      // 0x0B90 (size: 0x4)
    float mTimeSinceCraftFail;                                                        // 0x0B94 (size: 0x4)
    float mTimeSinceLoudCraftFail;                                                    // 0x0B98 (size: 0x4)
    bool mbFailedCrafting;                                                            // 0x0B9C (size: 0x1)
    bool mbCraftingComplete;                                                          // 0x0B9D (size: 0x1)
    float mTimeSinceEvilTransform;                                                    // 0x0BA0 (size: 0x4)
    float mTimeSinceEvilStun;                                                         // 0x0BA4 (size: 0x4)
    float mTimeSinceEvilBecomeCorporeal;                                              // 0x0BA8 (size: 0x4)
    float mTimeSinceLastEradicatorScan;                                               // 0x0BAC (size: 0x4)
    class UBarTimingMinigame* mpBarTimingMinigame;                                    // 0x0BB0 (size: 0x8)
    class URingAligningMinigame* mpRingAligningMinigame;                              // 0x0BB8 (size: 0x8)
    class URotatorMinigame* mpRotatorMinigame;                                        // 0x0BC0 (size: 0x8)
    class UAugmentManager* mpAugmentManager;                                          // 0x0BC8 (size: 0x8)
    float mAccelerationBoostTime;                                                     // 0x0BD0 (size: 0x4)
    float mWeaponPower;                                                               // 0x0BD4 (size: 0x4)
    class APickupBase* mpHeldPickup;                                                  // 0x0BD8 (size: 0x8)
    FPickupInfoStruct mHeldPickupInfoStruct;                                          // 0x0BE0 (size: 0xC)
    EPickupType mUsingPickupType;                                                     // 0x0BEC (size: 0x1)
    EPickupType mActivePickupType;                                                    // 0x0BED (size: 0x1)
    ECharacterType mEvilWheelTransformType;                                           // 0x0BEE (size: 0x1)
    bool mbEvilWheelSelectingRandomTransformType;                                     // 0x0BEF (size: 0x1)
    ECharacterType mCharacterType;                                                    // 0x0BF0 (size: 0x1)
    EWeaponTypeEnum mWeaponTypeUsing;                                                 // 0x0BF1 (size: 0x1)
    EWeaponTypeEnum mWeaponTypeCrafting;                                              // 0x0BF2 (size: 0x1)
    EWeaponTypeEnum mWeaponTypeEquippedLastFrame;                                     // 0x0BF3 (size: 0x1)
    EAnimSpawnableType mCurrentAnimSpawnableType;                                     // 0x0BF4 (size: 0x1)
    float mEradicatorTargetedSurgeStunTimeRemaining;                                  // 0x0BF8 (size: 0x4)
    class UDataTable* mpWeaponToAnimSpawnableItem;                                    // 0x0C00 (size: 0x8)
    bool mIsFemale;                                                                   // 0x0C08 (size: 0x1)
    class USpringArmComponent* mpTPCameraBoom;                                        // 0x0C10 (size: 0x8)
    class UCameraComponent* mpTPCameraComponent;                                      // 0x0C18 (size: 0x8)
    class UStaticMeshComponent* mpInteractionCylinderComponent;                       // 0x0C20 (size: 0x8)
    class UCapsuleComponent* mpSpawnerCapsuleComponent;                               // 0x0C28 (size: 0x8)
    class UAnimMontage* mVaultMontage;                                                // 0x0C30 (size: 0x8)
    TArray<FHideMontageData> mHideMontages;                                           // 0x0C38 (size: 0x10)
    class UPostProcessComponent* mpPostProcessComponent;                              // 0x0C48 (size: 0x8)
    class UParticleSystemComponent* mpProjectionParticleComponent;                    // 0x0C60 (size: 0x8)
    class UParticleSystemComponent* mpIdleWarningParticleComponent;                   // 0x0C70 (size: 0x8)
    class UParticleSystem* mpStaticShieldParticleSystem;                              // 0x0C78 (size: 0x8)
    class UParticleSystemComponent* mpStaticShieldParticleComponent;                  // 0x0C80 (size: 0x8)
    class UParticleSystem* mpCrossDamageBlockParticleSystem;                          // 0x0C88 (size: 0x8)
    class UParticleSystemComponent* mpCrossDamageBlockParticleComponent;              // 0x0C90 (size: 0x8)
    class UMotionSentinelComponent* mpMotionSentinelComponent;                        // 0x0C98 (size: 0x8)
    class UMaterial* mpWalkieMaterial;                                                // 0x0CA0 (size: 0x8)
    class UParticleSystem* mpResurrectRingParticleSystem;                             // 0x0CA8 (size: 0x8)
    class UParticleSystemComponent* mpResurrectionParticleComponent;                  // 0x0CB0 (size: 0x8)
    class UCapsuleComponent* mpTargetingCapsuleComponent;                             // 0x0CB8 (size: 0x8)
    float mChaseActiveTimeRemaining;                                                  // 0x0CF8 (size: 0x4)
    float mArmedActiveChaseActiveTimeRemaining;                                       // 0x0CFC (size: 0x4)
    bool mbAlarmed;                                                                   // 0x0D00 (size: 0x1)
    bool mbIsTensionMuted;                                                            // 0x0D01 (size: 0x1)
    class UDecalManager* mpDecalManager;                                              // 0x0D08 (size: 0x8)
    class UFootstepManager* mpFootstepManager;                                        // 0x0D10 (size: 0x8)
    class UTensionManager* mpTensionManager;                                          // 0x0D18 (size: 0x8)
    class USurfaceImpactManager* mpSurfaceImpactManager;                              // 0x0D20 (size: 0x8)
    class AResonanceClone* mpActiveResonanceClone;                                    // 0x0D30 (size: 0x8)
    EPickupType mGrabbingPickupType;                                                  // 0x0D38 (size: 0x1)
    EPickupHeightType mPickupHeightType;                                              // 0x0D39 (size: 0x1)
    class APickupBase* mpGrabbingPickup;                                              // 0x0D40 (size: 0x8)
    bool mbIsInPickupInteractingSequence;                                             // 0x0D48 (size: 0x1)
    float mHealPulseTime;                                                             // 0x0D4C (size: 0x4)
    float mAdrenalinePulseTime;                                                       // 0x0D50 (size: 0x4)
    class APickupBase* mpSelectedPickup;                                              // 0x0D58 (size: 0x8)
    class ACraftPoint* mpSelectedCraftPoint;                                          // 0x0D60 (size: 0x8)
    class AMedKitPoint* mpSelectedMedKitPoint;                                        // 0x0D68 (size: 0x8)
    class AVaultPoint* mpSelectedVaultPoint;                                          // 0x0D70 (size: 0x8)
    class AHidePoint* mpSelectedHidePoint;                                            // 0x0D78 (size: 0x8)
    class AEnergyPoint* mpSelectedEnergyPoint;                                        // 0x0D80 (size: 0x8)
    class ATPChar* mpSelectedReviveChar;                                              // 0x0D88 (size: 0x8)
    class ATPChar* mpSelectedHealChar;                                                // 0x0D90 (size: 0x8)
    class ATPChar* mpSelectedResurrectChar;                                           // 0x0D98 (size: 0x8)
    class ATPChar* mpSelectedTradePickupChar;                                         // 0x0DA0 (size: 0x8)
    class ADollMasterTrap* mpSelectedDollMasterTrap;                                  // 0x0DA8 (size: 0x8)
    class ASearchablePoint* mpSelectedSearchablePoint;                                // 0x0DB0 (size: 0x8)
    class ASeasonalEventCenterpiecePoint* mpSelectedSeasonalEventCenterpiecePoint;    // 0x0DB8 (size: 0x8)
    int32 mBloodMaterialCounter;                                                      // 0x0DC0 (size: 0x4)
    float mDollMasterRevealedTimeRemaining;                                           // 0x0DC4 (size: 0x4)
    EActiveActionType mActiveAction;                                                  // 0x0DC8 (size: 0x1)
    bool mbFrozen;                                                                    // 0x0DC9 (size: 0x1)
    class UMaterialInstance* mpAuraMaterialInstance;                                  // 0x0DD0 (size: 0x8)
    class UMaterialInstance* mpDoubleVisionMaterial;                                  // 0x0DD8 (size: 0x8)
    class UMaterialInstance* mpCowerMaterialInstance;                                 // 0x0DE0 (size: 0x8)
    class UMaterialInstance* mpSpiritWorldMaterialInstance;                           // 0x0DE8 (size: 0x8)
    class UMaterialInstance* mpEradicatorElectricPostProcessMaterial;                 // 0x0DF0 (size: 0x8)
    class ATVIntroEffect* mpTVIntroEffectActor;                                       // 0x0DF8 (size: 0x8)
    float mDoubleVisionTimer;                                                         // 0x0E00 (size: 0x4)
    float mSpiritWorldTransitionTimer;                                                // 0x0E04 (size: 0x4)
    bool mbIsMainMenuIdling;                                                          // 0x0E08 (size: 0x1)
    bool mbIsMainMenuRotationLocked;                                                  // 0x0E09 (size: 0x1)
    int32 mLobbyPoseIndex;                                                            // 0x0E0C (size: 0x4)
    int32 mLobbyPoseVariant;                                                          // 0x0E10 (size: 0x4)
    bool mbLobbyPoseFlavor;                                                           // 0x0E14 (size: 0x1)
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0E18 (size: 0x8)
    class UExtAkComponent* mpWhisperAkEmitter;                                        // 0x0E20 (size: 0x8)
    class UExtAkComponent* mpTensionAkEmitter;                                        // 0x0E28 (size: 0x8)
    class UExtAkComponent* mpUnattenuatedAkEmitter;                                   // 0x0E30 (size: 0x8)
    class UExtAkComponent* mpEmoteAkEmitter;                                          // 0x0E38 (size: 0x8)
    float mCowerPostProcessEffectStrength;                                            // 0x0E40 (size: 0x4)
    float mEradicatorElectricPostProcessEffectStrength;                               // 0x0E44 (size: 0x4)
    float mEradicatorElectricPreviousTime;                                            // 0x0E48 (size: 0x4)
    float mEffigyOfAgonyModifier;                                                     // 0x0E4C (size: 0x4)
    float mAgonyTimeRemaining;                                                        // 0x0E50 (size: 0x4)
    bool mbHasAgonyDebuff;                                                            // 0x0E54 (size: 0x1)
    int32 mMotivatedTier;                                                             // 0x0E58 (size: 0x4)
    bool mbInFallingAnimSequence;                                                     // 0x0E5C (size: 0x1)
    float mFallingSequenceFallbackTimer;                                              // 0x0E60 (size: 0x4)
    bool mbInWeaponShootingAnimSequence;                                              // 0x0E64 (size: 0x1)
    bool mbIsPlayingResurrectOutro;                                                   // 0x0E65 (size: 0x1)
    TArray<class ATPChar*> mTradePickupAllies;                                        // 0x0E68 (size: 0x10)
    class ATPChar* mpTradePickupReceiverChar;                                         // 0x0E78 (size: 0x8)
    class ATPChar* mpTradePickupGiverChar;                                            // 0x0E80 (size: 0x8)
    bool mbCoweringFromHowl;                                                          // 0x0E88 (size: 0x1)
    TArray<class AInteractablePropBase*> mFollowingEvilSpectrals;                     // 0x0E90 (size: 0x10)
    float mLifeLost;                                                                  // 0x0EA0 (size: 0x4)
    float mServerChaseDuration;                                                       // 0x0EA4 (size: 0x4)
    EChaseEndedType mServerChaseEndedType;                                            // 0x0EA8 (size: 0x1)
    EWeaponTypeEnum mServerChaseEndedWeaponTypeStruck;                                // 0x0EA9 (size: 0x1)
    bool mbPlayingUpperBodyPickupMontage;                                             // 0x0EAA (size: 0x1)
    bool mbIsWalkieIdling;                                                            // 0x0EAB (size: 0x1)
    float mCurrentStaggerTime;                                                        // 0x0EAC (size: 0x4)
    float mBaseStaggerTime;                                                           // 0x0EB0 (size: 0x4)
    TSubclassOf<class UMatineeCameraShake> mToadStaggerShake;                         // 0x0EB8 (size: 0x8)
    bool mbDeployingNoisemaker;                                                       // 0x0EC0 (size: 0x1)
    float mDeployingNoisemakerTimeRemaining;                                          // 0x0EC4 (size: 0x4)
    UClass* mpNoisemakerClass;                                                        // 0x0EC8 (size: 0x8)
    UClass* mpSmokeBombClass;                                                         // 0x0ED0 (size: 0x8)
    class UMaterialInstance* mpHolySlingshotBlindedVingettePPMaterial;                // 0x0ED8 (size: 0x8)
    float mEradicatorScannedRevealTimeRemaining;                                      // 0x0EE0 (size: 0x4)
    class AFPChar* mpMimicOwner;                                                      // 0x0EE8 (size: 0x8)
    bool mbIsDispersedInvisible;                                                      // 0x0EF0 (size: 0x1)
    int32 mClientAnomalyCharacterSwitchIgnoreFallingFrames;                           // 0x0EF4 (size: 0x4)
    bool mbIsSpeakingInFrontEnd;                                                      // 0x0EF8 (size: 0x1)
    bool mbHasActivePing;                                                             // 0x0EF9 (size: 0x1)
    class UStaticMeshComponent* mpVoiceChatIndicatorMesh;                             // 0x0F00 (size: 0x8)
    float mMolotovSpeedBoostTime;                                                     // 0x0F08 (size: 0x4)
    float mMolotovSpeedBoostTimeRemaining;                                            // 0x0F0C (size: 0x4)
    float mTeenHideInSmokeTime;                                                       // 0x0F10 (size: 0x4)
    float mCurrentBlindPPWeight;                                                      // 0x0F14 (size: 0x4)
    class UWeaponSkinManagerComponent* mpWeaponSkinManagerComponent;                  // 0x0F18 (size: 0x8)
    bool mbTutorialUseCustomManualRotation;                                           // 0x0F20 (size: 0x1)
    FRotator mTutorialCustomManualRotation;                                           // 0x0F24 (size: 0xC)
    float mTutorialCustomRotationSpeed;                                               // 0x0F30 (size: 0x4)
    bool mbTutorialObjectVolumeEnabled;                                               // 0x0F34 (size: 0x1)
    bool mbTutorialBloodTrailTimeOverrideEnabled;                                     // 0x0F35 (size: 0x1)
    float mTutorialBloodTrailTimeOverride;                                            // 0x0F38 (size: 0x4)
    bool mbTutorialOverrideMovementAllowed;                                           // 0x0F3C (size: 0x1)
    bool mbTutorialOverrideRun;                                                       // 0x0F3D (size: 0x1)
    bool mbTutorialIsImmortal;                                                        // 0x0F3E (size: 0x1)
    TSubclassOf<class AAIController> mpTutorialAIController;                          // 0x0F40 (size: 0x8)
    float mTimeSinceLastAction1;                                                      // 0x0F48 (size: 0x4)
    FEmoteData mFrontEndEmoteData;                                                    // 0x0F50 (size: 0x20)
    int32 mActiveEmoteIndex;                                                          // 0x0F70 (size: 0x4)
    bool mbIsEmoting;                                                                 // 0x0F74 (size: 0x1)
    float mEmoteLockInPlaceTimer;                                                     // 0x0F78 (size: 0x4)
    bool mbQueuedToLeaveSearchable;                                                   // 0x0F7C (size: 0x1)
    float mEradicatorOverchargeTime;                                                  // 0x0F80 (size: 0x4)
    bool mbHealingAction1Pressed;                                                     // 0x0F84 (size: 0x1)
    TArray<class ATPChar*> mIndividualPlayerRevealTPCharList;                         // 0x0F88 (size: 0x10)
    TArray<float> mIndividualPlayerRevealTimeList;                                    // 0x0F98 (size: 0x10)
    float mEnergizedMoveSpeedBoostTime;                                               // 0x0FA8 (size: 0x4)
    float mDemonSwordSpeedBoostTime;                                                  // 0x0FAC (size: 0x4)
    float mSpeedBoostByEvilTimeRemaining;                                             // 0x0FB0 (size: 0x4)
    float mBaseSpeedBoostByEvilTime;                                                  // 0x0FB4 (size: 0x4)
    float mSpeedBoostByEvilMultiplier;                                                // 0x0FB8 (size: 0x4)
    float mDemonSwordSelfRevealTime;                                                  // 0x0FBC (size: 0x4)
    TArray<EWeaponTypeEnum> mCurrentWeaponOptions;                                    // 0x0FC0 (size: 0x10)
    int32 mNumPlayersRevealedToByMagicSphere;                                         // 0x0FD0 (size: 0x4)
    int32 mNumPlayersRevealedToByFlameMine;                                           // 0x0FD4 (size: 0x4)
    float mRevealedByDollTrapTime;                                                    // 0x0FD8 (size: 0x4)
    float mHealSenseExposeTimeRemaining;                                              // 0x0FDC (size: 0x4)
    float mHealSenseActivationTimeRemaining;                                          // 0x0FE0 (size: 0x4)
    float mDeafenTime;                                                                // 0x0FE4 (size: 0x4)
    float mDeafenTimeRemaining;                                                       // 0x0FE8 (size: 0x4)
    float mDeafenRecoveryTimeRemaining;                                               // 0x0FEC (size: 0x4)
    float mInhibitedTime;                                                             // 0x0FF0 (size: 0x4)
    float mBaseInhibitedTime;                                                         // 0x0FF4 (size: 0x4)
    float mMarredTime;                                                                // 0x0FF8 (size: 0x4)
    float mBaseMarredTime;                                                            // 0x0FFC (size: 0x4)
    float mUntraceableTime;                                                           // 0x1000 (size: 0x4)
    float mBaseUntraceableTime;                                                       // 0x1004 (size: 0x4)
    float mShroudedTime;                                                              // 0x1008 (size: 0x4)
    float mBaseShroudedTime;                                                          // 0x100C (size: 0x4)
    float mEvilPickupUseRevealTimeRemaining;                                          // 0x1010 (size: 0x4)
    float mEvilPickupUseRevealTime;                                                   // 0x1014 (size: 0x4)
    float mEvilProneRevealTimeRemaining;                                              // 0x1018 (size: 0x4)
    float mEvilCrowdRevealTime;                                                       // 0x101C (size: 0x4)
    float mSpectralEssenceRestoreSpeedBoostTime;                                      // 0x1020 (size: 0x4)
    float mSpectralEssenceRestoreHealthLossPreventionTime;                            // 0x1024 (size: 0x4)
    bool mbIsRevealedByElectrocution;                                                 // 0x1028 (size: 0x1)
    float mFlamethrowerShowOwnerTime;                                                 // 0x102C (size: 0x4)
    TArray<class AMedKitPoint*> mAllMedKitPoints;                                     // 0x1030 (size: 0x10)
    float mGameplayTimeAtLastDeath;                                                   // 0x1040 (size: 0x4)
    float mYawWhenStopped;                                                            // 0x1044 (size: 0x4)
    bool mbHasJustStopped;                                                            // 0x1048 (size: 0x1)
    bool mbAnomalyReintegratingLastFrame;                                             // 0x1049 (size: 0x1)
    TMap<class EAuraIndicatorType, class bool> mAuraIndicatorActiveMap;               // 0x1050 (size: 0x50)
    bool mbForceDropHeldPickup;                                                       // 0x10A0 (size: 0x1)
    float mServerFedLifeRestored;                                                     // 0x10A4 (size: 0x4)
    float mServerFedLifeRequested;                                                    // 0x10A8 (size: 0x4)
    float mServerFedExponent;                                                         // 0x10AC (size: 0x4)
    float mFedTimeRemaining;                                                          // 0x10B0 (size: 0x4)
    float mFedTime;                                                                   // 0x10B4 (size: 0x4)
    float mBonusLifeTimeRemaining;                                                    // 0x10B8 (size: 0x4)
    float mBonusLifeTime;                                                             // 0x10BC (size: 0x4)
    float mCrossDamageBlockTimeRemaining;                                             // 0x10C0 (size: 0x4)
    TArray<float> mServerCapsulePositionTimeStampList;                                // 0x10C8 (size: 0x10)
    TArray<FVector> mServerCapsulePositionList;                                       // 0x10D8 (size: 0x10)
    TSoftObjectPtr<UNiagaraSystem> mParchmentTeleportNiagaraSystem;                   // 0x10E8 (size: 0x28)
    TSoftObjectPtr<UItemDataAsset> mMimicItemDataAsset;                               // 0x1110 (size: 0x28)
    TSoftObjectPtr<UItemDataAsset> mDisperseMimicItemDataAsset;                       // 0x1138 (size: 0x28)
    float mMimicRagdollEffectStrength;                                                // 0x1160 (size: 0x4)
    bool mbIsMimicRagdoll;                                                            // 0x1164 (size: 0x1)
    bool mbWaitingForMimicRagdollSpawn;                                               // 0x1165 (size: 0x1)
    bool mbHearingTensionTrack;                                                       // 0x1167 (size: 0x1)
    bool mbHearingTensionTrackClearly;                                                // 0x1168 (size: 0x1)
    bool mbServerBeganHidingDuringTensionTrack;                                       // 0x1169 (size: 0x1)
    float mServerTimeConsistentlyHearingTensionTrackWhileHiding;                      // 0x116C (size: 0x4)
    bool mbServerUsedSmokeBombToEscapeUnarmedChase;                                   // 0x1170 (size: 0x1)
    class UCurveFloat* mpLandingCollisionCurve;                                       // 0x1178 (size: 0x8)
    FVector mServerLastSafePickupLocation;                                            // 0x1180 (size: 0xC)
    bool mbSlowedDuringElectrocution;                                                 // 0x118C (size: 0x1)
    bool mbShouldNotUpdateCollisionProfile;                                           // 0x118D (size: 0x1)
    bool mbClientShouldNotUpdateCollisionProfile;                                     // 0x118E (size: 0x1)
    bool mbRagdoll;                                                                   // 0x118F (size: 0x1)
    class ATPChar* mpRagdollPoseTarget;                                               // 0x1190 (size: 0x8)
    bool mbMimicClone;                                                                // 0x1198 (size: 0x1)
    FTPCharOnTeenHit OnTeenHit;                                                       // 0x1278 (size: 0x10)
    void OnTeenHit(class ATPChar* pHitSource);

    bool WasResurrected();
    bool WasAuraIndicatorActiveLastFrame(EAuraIndicatorType auraIndType);
    bool WasAnomalyReintegratingLastFrame();
    bool WantsToShootProjectileWeapon();
    void UpdateWeaponHolstered();
    void UpdateWalkieTalkie();
    void UpdateVoiceIndicatorMesh();
    void UpdateVisibility();
    void UpdateTransforming();
    void UpdateTargetCapsuleSize(float DeltaSeconds);
    void UpdateSpiritWorldTransitionPostProcess(float DeltaTime);
    void UpdateSeenTheEvil();
    void UpdateResurrectionParticles();
    void UpdateRenderCustomDepth();
    void UpdateQueuedToLeaveSearchable();
    void UpdateOwnVisibilityBasedOnCameraNearClip();
    void UpdateEradicatorElectricPostProcess(float DeltaTime);
    void UpdateEnablePostProcessComponent();
    void UpdateDoubleVisionTimer(float DeltaTime);
    void UpdateDisintegration(float DeltaSeconds);
    void UpdateCrouch(float DeltaSeconds);
    void UpdateCraftingComplete();
    void UpdateCowerPostProcess(float DeltaTime);
    void UpdateCollisionProfile();
    void UpdateCollisionOffset(float DeltaTime);
    void UpdateCharacterParticleEffects(float DeltaTime);
    void UpdateCharacterMovementComponent(float DeltaSeconds);
    void UpdateCameraTransition(float DeltaSeconds);
    void UpdateBlindVisualEffect(float DeltaTime);
    void UpdateAllSelected();
    void UpdateAkEmitters();
    void TickStatusComponents(float DeltaSeconds);
    void StopWalkieLoopAkEvent();
    void StopStaticShieldEnergizingAkEvent();
    void StopStaticShieldActiveAkEvent();
    void StopRevivingAkEvent();
    void StopResurrectingAkEvent();
    void StopRCRemoteActiveAkEvent();
    void StopParchmentActiveAkEvent();
    void StopMolotovActiveAkEvent();
    void StopIdleWhisperActiveAkEvent();
    void StopHolyGrenadeActiveAkEvent();
    void StopHealingAkEvent();
    void StopFlamethrowerActiveAkEvent();
    void StopFeastedAkEvent();
    void StopCrossActiveAkEvent();
    void SpawnAnimProp(class USkeletalMeshComponent* MeshComp, class USkeletalMesh* PropSkeletalMesh, class UAnimationAsset* PropAnimSequence, FName PropSocket, FName SocketToAttach);
    bool ShouldUpdateCollisionProfile();
    bool ShouldStaticShieldBlockTension();
    bool ShouldPlayStaggerAnimation();
    bool ShouldPlayDisabledWeaponEffect();
    bool ShouldLocalViewMuteTeenGameplay(class UObject* pWorldContextObject, bool bCached);
    bool ShouldLocalViewHideTeenGameplay(class UObject* pWorldContextObject, bool bCached);
    bool ShouldHolsterWeapon();
    bool ShouldBarTimingGameHideProgressBars();
    void SetWeaponHolstered(bool bSet);
    void SetWaitingForMimicRagdollSpawn(bool bNewValue);
    void SetUsingLobbyFlavor(bool bSet);
    bool SetupWeaponAttachment(EWeaponAttachmentType attachmentType);
    void SetupCharacter();
    void SetTutorialOverrideRun(bool Val);
    void SetTensionMuted(bool Val);
    void SetReintegrationTimeRemaining(float Time);
    void SetQueuedToLeaveSearchable(bool bNewValue);
    void SetLobbyPoseVariant(int32 Index);
    void SetLobbyPoseIndex(int32 Index);
    void SetIsSpeakingInFrontEnd(bool bIsSpeaking);
    void SetIsRagdoll(bool bRagdoll, class ATPChar* pTargetPoseChar);
    void SetIsMimicRagdoll();
    void SetIsMainMenuRotationLocked(bool Val);
    void SetHealingAction1Pressed(bool bSet);
    void SetHasAura(bool bHasAura);
    void SetFaceAdditive(class UAnimSequence* Val);
    void SetDisintegrationTimeRemaining(float Time);
    void SetAuraIndicatorActiveThisFrame(EAuraIndicatorType auraIndType, bool bNewValue);
    void SetAnomalyReintegratingLastFrame(bool bNewValue);
    void ServerUseSecondWind();
    void ServerUseResolve();
    void ServerUseHeldPickup();
    void ServerToggleTorn();
    void ServerToggleProne();
    void ServerToggleGooped();
    void ServerSpawnTeenSpectralChar();
    void ServerSetWeaponActive(bool bActive);
    void ServerSetThrowing(bool bSet);
    void ServerSetSeenTheEvil(bool bSeenTheEvil);
    void ServerSetRequestedWeaponType(EWeaponTypeEnum NewType, class ACraftPoint* pPoint);
    void ServerSetMarred(float Duration, bool bPermanent);
    void ServerSetInhibited(float Duration);
    void ServerSetEvilWheelTransformType(ECharacterType TransformType);
    void ServerSetEvilWheelSelectingRandomTransformType(bool bNewValue);
    void ServerSetBufferShot();
    void ServerSetAlarmed(bool bAlarmed);
    void ServerSetActiveEmote(int32 emoteIndex);
    void ServerRequestWeaponHit_RaygunProjectile(class AFPChar* pEvil);
    void ServerRequestWantsToStopBeingHelped();
    void ServerRequestTradePickup(class ATPChar* pTPChar);
    void ServerRequestStopRevive();
    void ServerRequestStopResurrect();
    void ServerRequestStopHeal();
    void ServerRequestStopEmoting();
    void ServerRequestRevive(class ATPChar* pTPChar);
    void ServerRequestResurrect(class ATPChar* pTPChar);
    void ServerRequestHeal(class ATPChar* pTPChar);
    void ServerRequestCancelAim();
    void ServerRequestBeginManualTransform();
    void ServerRequestBeginDiscardWeapon();
    void ServerRequestAbortUsingPickup();
    void ServerRequestAbortSecondaryFire();
    void ServerRequestAbortRemoteChars(bool bImmediately);
    void ServerRequestAbortPrimaryFire();
    void ServerRequestAbortManualTransform();
    void ServerRequestAbortDiscardWeapon();
    void ServerRequestAbortAction3();
    void ServerRequestAbortAction1();
    void ServerRemoveInjury();
    void ServerRefreshChaseTeen(ECharacterType activeEvilCharacterType);
    void ServerRefreshChaseEvil(bool bArmed);
    void ServerOnMimicSearchedHidePoint(class AHidePoint* pPoint);
    void ServerOnMimicPrimaryFire(bool bPressed);
    void ServerOnClientReportedRaygunEvilOverlap(class AFPChar* pHitEvil, FVector HitLocation, int32 projectileIndex, float Time);
    void ServerMimicDebugResetAllCooldowns();
    void ServerMimicDebugActivateAllCooldowns();
    void ServerMimicAttack(bool bPressed);
    void ServerIncreaseHitsByEvil(int32 Delta);
    void ServerGrabPickup(class APickupBase* pPickup);
    void ServerFixStuck();
    void ServerExitHidePoint();
    void ServerDebugWeaponType(EWeaponTypeEnum weaponType);
    void ServerDebugUnequipWeapon();
    void ServerDebugToggleInvincible(bool bEnable);
    void ServerDebugSetSubdued(float screamTime);
    void ServerDebugSetStaggered(float staggerTime);
    void ServerDebugSetFrozen(bool bSet);
    void ServerDebugSetCowering(float cowerTime);
    void ServerDebugKill();
    void ServerDebugGivePickup(EPickupType ItemType, EEventPickupType eventPickupType);
    void ServerDebugEnableBarTimingMinigame(bool bEnable);
    void ServerDebugElectrocute();
    void ServerDebugDisintegrate();
    void ServerDebugClearSubdued();
    void ServerDebugClearCowering();
    void ServerCycleSpectatorTarget(bool bCycleBackwards);
    void ServerCycleEvilTypeRight();
    void ServerCycleEvilTypeLeft();
    void ServerClearMarred();
    void ServerClearInhibited();
    void ServerBeginUsingWeapon(bool bAlternateMode);
    void ServerBecomeAlive(float life, bool bSetUndead);
    void ServerApplyInjury();
    void ServerActivateVaultPoint(class AVaultPoint* pVaultPoint);
    void ServerActivateSeasonalEventCenterpiecePoint(class ASeasonalEventCenterpiecePoint* pPoint);
    void ServerActivateSearchablePoint(class ASearchablePoint* pSearchablePoint);
    void ServerActivateMedKitPoint(class AMedKitPoint* pMedKitPoint);
    void ServerActivateHidePoint(class AHidePoint* pHidePoint);
    void ServerActivateEnergyPoint(class AEnergyPoint* pEnergyPoint);
    void ServerActivateDollMasterTrap(class ADollMasterTrap* pDollMasterTrap);
    void ServerActivateCraftPoint(class ACraftPoint* pCraftPoint);
    void RemoveStatusComponent(class UBaseStatusComponent* pRemoveComponent);
    void RegisterAuras();
    void RefreshWWiseWeaponSkinSwitch(EWeaponTypeEnum wepType);
    void RefreshMeshStencilGroups();
    void PlayWalkieOutAkEvent();
    void PlayWalkieLoopAkEvent();
    void PlayTeenTeleport(FVector sourcePosition, FVector destinationPosition);
    void PlayTeenGruntAkEvent();
    void PlayStaticShieldExplosionAkEvent();
    void PlayStaticShieldEnergizingAkEvent();
    void PlayStaticShieldEnergizeFailedAkEvent();
    void PlayStaticShieldActiveAkEvent();
    void PlayRotatorSuccessAkEvent();
    void PlayRotatorFailAkEvent();
    void PlayRevivingAkEvent();
    void PlayRevivedAkEvent();
    void PlayResurrectingAkEvent();
    void PlayRCRemoteActiveAkEvent();
    void PlayProneAkEvent();
    void PlayParchmentActiveAkEvent();
    void PlayMolotovThrowAkEvent();
    void PlayMinionStunNotifyAkEvent();
    void PlayLandingAkEvent(bool bHigh);
    void PlayKilledAkEvent();
    void PlayInjuredAkEvent();
    void PlayIdleWhisperActiveAkEvent();
    void PlayHealingAkEvent();
    void PlayFlinchAkEvent();
    void PlayFlameMineEnterAlertChimeAkEvent();
    void PlayFeastedAkEvent();
    void PlayBledOutAkEvent();
    void PlayBeginPlayAkEvents();
    void PerformFrontEndEmote(class UEmoteDataAsset* pEmote, bool bForceLoop);
    void PerformEmoteAtSlot(int32 Index);
    void OnRep_IsReintegrating();
    void OnRep_IsProne();
    void OnRep_IsInjured();
    void OnRep_IsDisintegrating();
    void OnRep_IsDead();
    void OnRep_HearingTensionTrackClearly();
    void OnRep_ActiveAction();
    void MulticastCreateResonanceClone(float Delay);
    void MulticastAllUpdateEvilSelection(bool bLeft);
    void MulticastAllStopResurrectRing();
    void MulticastAllStopNoisemakerSetup();
    void MulticastAllStopIdleWhisperSound();
    void MulticastAllStopElectrocutionSound();
    void MulticastAllSpawnUsedPickup(EPickupType pickupType, class UItemDataAsset* pPickupSkin);
    void MulticastAllSpawnHealthDrainingBurstNiagaraAttachedToOwner(const FEffectVisibility& EffectVisibility);
    void MulticastAllSpawnHealingBurstNiagaraAttachedToOwner(const FEffectVisibility& EffectVisibility);
    void MulticastAllSimulateHit(FVector hitDirection);
    void MulticastAllShowScore(const FText& Text, float baseAmount, float bonus);
    void MulticastAllSetMimicTarget(int32 lobbyIdx, ECharacterType newTeenType);
    void MulticastAllSetIsRagdoll();
    void MulticastAllSetDoubleVisionTimer();
    void MulticastAllReintegrate();
    void MulticastAllRefreshChaseTeen(ECharacterType activeEvilCharacterType);
    void MulticastAllPlayTransformation();
    void MulticastAllPlayToadEcholocationDeafenSound();
    void MulticastAllPlayTeenEasterHuntComplete();
    void MulticastAllPlayStaticShieldImpactFlash();
    void MulticastAllPlayStaticShieldEnergizeFailed();
    void MulticastAllPlayShardEffect();
    void MulticastAllPlayResurrectRing();
    void MulticastAllPlayResurrectFail();
    void MulticastAllPlayResurrectBolt();
    void MulticastAllPlayProneSound();
    void MulticastAllPlayPickupSound();
    void MulticastAllPlayNoisemakerSetup();
    void MulticastAllPlayMolotovThrowSound();
    void MulticastAllPlayMinigameWarningSound();
    void MulticastAllPlayMinigameSuccessSound();
    void MulticastAllPlayMinigameBullseyeSound();
    void MulticastAllPlayLostWeaponSound();
    void MulticastAllPlayKilledSound();
    void MulticastAllPlayInjuredEffects();
    void MulticastAllPlayIdleWhisperSound();
    void MulticastAllPlayHUDCardEffect(FLinearColor Color);
    void MulticastAllPlayHolyStaffProneHealth();
    void MulticastAllPlayHolyGrenadeExplosion(FTransform trans);
    void MulticastAllPlayHealedSound();
    void MulticastAllPlayGivePickupSound();
    void MulticastAllPlayGainAdrenaline();
    void MulticastAllPlayForceDropPickup(class APickupBase* pickup);
    void MulticastAllPlayFlinchSound();
    void MulticastAllPlayEvilEasterHuntComplete();
    void MulticastAllPlayEvilChosen();
    void MulticastAllPlayElectrocutionSound(bool bUseMultiple);
    void MulticastAllPlayDropPickupSound();
    void MulticastAllPlayCrossDamageBlock();
    void MulticastAllPlayCraftingFailQuietSound();
    void MulticastAllPlayCowerCameraShake();
    void MulticastAllPlayBledOutSound();
    void MulticastAllOnTeenResurrected(bool bSetUndead);
    void MulticastAllOnTeenKnockdown();
    void MulticastAllOnTeenDeath();
    void MulticastAllNotifyFixStuck();
    void MulticastAllEradicatorScannerBeam_FoundTarget_Play();
    void MulticastAllEnableAttackCollision(bool bEnable);
    void MulticastAllEmpoweredShardHitTeen();
    void MulticastAllDetachTPCameraBoom();
    void MulticastAllCreateRaygunHitEffects(FVector Position, FRotator Rotation, bool bHitEvil, bool bEvilTookDamage);
    void MulticastAllCraftingFail();
    void MulticastAllClearEmoteEffects();
    void MulticastAllAttachTPCameraBoom();
    void MulticastAll_ToadStaggerCameraShake();
    void MulticastAll_HolyStaff_Charged_Stop();
    void MulticastAll_HolyStaff_Charged_Play();
    void MulticastAll_HolyStaff_Active_Stop();
    void MulticastAll_HolyStaff_Active_Play();
    void MulticastAll_Anomaly_Disperse_Out_AkEvent_Play();
    void MulticastAll_Anomaly_Disperse_Loop_AkEvent_Stop();
    void MulticastAll_Anomaly_Disperse_Loop_AkEvent_Play();
    void MulticastAll_Anomaly_Disperse_In_Charge_AkEvent_Stop();
    void MulticastAll_Anomaly_Disperse_In_Charge_AkEvent_Play();
    void MulticastAll_Anomaly_Disperse_In_AkEvent_Play();
    float LocalViewStressLevel(class UObject* pWorldContextObject, bool bCached);
    float LocalViewInjuryLevel(class UObject* pWorldContextObject, bool bCached);
    void Landed(const FHitResult& Hit);
    bool JustWoundedEvil();
    bool JustTransformed();
    bool IsWithinActiveEvilTensionDistance();
    bool IsWeaponHolstered();
    bool IsWalking();
    bool IsWaitingForMimicRagdollSpawn();
    bool IsViewLocal();
    bool IsVaultMasterActive();
    bool IsVaultingActive();
    bool IsVaulting();
    bool IsUsingStaticShield();
    bool IsUsingSkillTestObject();
    bool IsUsingPickup();
    bool IsUntraceable();
    bool IsUndead();
    bool IsTricked();
    bool IsTransforming();
    bool IsThrowing();
    bool IsTensionMuted();
    bool IsTeenBecomingEvil();
    bool IsTechnicianActive();
    bool IsSummoningMagicSphere();
    bool IsSummoningFlameMine();
    bool IsSubdued();
    bool IsStunned();
    bool IsStealthy();
    bool IsStaticShieldActive();
    bool IsStaggered();
    bool IsSprinting();
    bool IsSpectatingAnother();
    bool IsSlowedDuringElectrocution();
    bool IsSkillTestMinigameWarning();
    bool IsSkillTestMinigamePaused();
    bool IsSkillTestMinigameContributing();
    bool IsSkillTestMinigameActive();
    bool IsShrouded();
    bool IsSelfRevealedByRCCopter();
    bool IsSelfRevealedByDemonSword();
    bool IsSearchingActive();
    bool IsRunningMode();
    bool IsRunning();
    bool IsRevivingActive();
    bool IsReviving();
    bool IsRevealedByShard();
    bool IsRevealedByElectrocution();
    bool IsRevealed();
    bool IsResurrectingActive();
    bool IsResurrecting();
    bool IsReloadingWeapon();
    bool IsReintegrating();
    bool IsRagdoll();
    bool IsQueuedToLeaveSearchable();
    bool IsProneSkillTestActive();
    bool IsProneCrawling();
    bool IsProne();
    bool IsPlayingResurrectOutro();
    bool IsPlayerSpeaking();
    bool IsPlacingPickup();
    bool IsPermBlinded();
    bool IsPermanentlyMarred();
    bool IsOverchargedByEradicator();
    bool IsMinigamePenalty();
    bool IsMimicRagdoll();
    bool IsMimicClone();
    bool IsMimic();
    bool IsMedKitHealingActive();
    bool IsMedKitHealing();
    bool IsMarred();
    bool IsMainMenuRotationLocked();
    bool IsLoneWolfActive();
    bool IsLockedInPlaceDueToEmote();
    bool IsLocalViewTeenSpectral(class UObject* pWorldContextObject, bool bCached);
    bool IsLocalViewTeen(class UObject* pWorldContextObject, bool bCached);
    bool IsLocalViewMagicSphere(class UObject* pWorldContextObject, bool bCached);
    bool IsLocalViewIncorporeal(class UObject* pWorldContextObject, bool bCached);
    bool IsLocalViewHearing(class UObject* pWorldContextObject, bool bCached);
    bool IsLocalViewEvil(class UObject* pWorldContextObject, bool bCached);
    bool IsLocalViewDisintegrating(class UObject* pWorldContextObject, bool bCached);
    bool IsLocalViewDead(class UObject* pWorldContextObject, bool bCached);
    bool IsLobbyPoseFlavor();
    bool IsLanding();
    bool IsKilled();
    bool IsInWaitingStage();
    bool IsInvincible();
    bool IsInTutorialMode();
    bool IsInSeasonalEventCenterpieceAnimSequence();
    bool IsInSearchingIntroAnimSequence();
    bool IsInSearchingAnimSequence();
    bool IsInRangeOfSeeingWalkieEffect();
    bool IsInPickupInteractingSequence();
    bool IsInMedKitAnimSequence();
    bool IsInjured();
    bool IsInHuntStage();
    bool IsInhibited();
    bool IsInEnergizingAnimSequence();
    bool IsInDarkShardAnimSequence();
    bool IsIncubating();
    bool IsInCraftingAnimSequence();
    bool IsIncorporeal();
    bool IsHolyStaffInFireMode();
    bool IsHoldingPickup();
    bool IsHiding();
    bool IsHideInSmoke();
    bool IsHearingTensionTrackClearly();
    bool IsHearingTensionTrack();
    bool IsHearing();
    bool IsHealingSelfWithHolyStaff();
    bool IsHealingOtherWithHolyStaff();
    bool IsHealingActive();
    bool IsHealingAction1Pressed();
    bool IsHealing();
    bool IsGrabbingPickup();
    bool IsGoodAlignedCharacter();
    bool IsFrozen();
    bool IsFrostbit();
    bool IsForceRespositioningComplete();
    bool IsForceDropHeldPickup();
    bool IsFiringTalisman();
    bool IsFiringRayGun();
    bool IsFiringInitialDemonsword();
    bool IsFiringHolyStaff();
    bool IsFiringFlameMine();
    bool IsFiringDemonSword();
    bool IsFemale();
    bool IsFed();
    bool IsFeastingActive();
    bool IsFeasting();
    bool IsFeastedOnActive();
    bool IsFeastedOn();
    bool IsFallingOrLanding();
    bool IsExposedByVigilance();
    bool IsExposedByTalismanAbsorb();
    bool IsExposedByNoisemaker();
    bool IsExposedByHolyStaffFastHeal();
    bool IsExposedByHealSense();
    bool IsExposedByEvilProneReveal();
    bool IsExposedByEvilPickupUseReveal();
    bool IsExposedByEvilCrowdReveal();
    bool IsExposedByEradicatorScan();
    bool IsExposedByEradicatorElectricity();
    bool IsExposedByDollTrap();
    bool IsExposed();
    bool IsEvilWheelSelectingRandomTransformType();
    bool IsEvilAlignedCharacter();
    bool IsEquippedWeaponUsedUp();
    bool IsEnergizingActive();
    bool IsEmoting();
    bool IsDollMasterRevealed();
    bool IsDispersedInvisible();
    bool IsDispersed();
    bool IsDisintegrating();
    bool IsDiscardingWeapon();
    bool IsDisarmingDollMasterTrap();
    bool IsDeployingNoisemaker();
    bool IsDead();
    bool IsCrouchMoving();
    bool IsCrouchingMode();
    bool IsCraftingActive();
    bool IsCrafting();
    bool IsCowering();
    bool IsControllingRemoteWeapon();
    bool IsClotted();
    bool IsChaseActive();
    bool IsChargingWeapon();
    bool IsBusy();
    bool IsBlinded();
    bool IsBledOut();
    bool IsBeingRevived();
    bool IsBeingResurrected();
    bool IsBeingHealed();
    bool IsBeingElectrocuted();
    bool IsBeingActivelyRevived();
    bool IsBeingActivelyResurrected();
    bool IsBeingActivelyHealed();
    bool IsAtMaxLife();
    bool IsArmedChaseActive();
    bool IsArmed();
    bool IsApproachingActivePoint();
    bool IsAimingTalisman();
    bool IsAimingSlingshot();
    bool IsAimingRayGun(bool bIncludeWaiting);
    bool IsAimingPoweredTalisman();
    bool IsAimingMolotov();
    bool IsAimingHolyStaff();
    bool IsAimingFlamethrower();
    bool IsAimingDemonSword();
    bool IsAimingCross();
    bool IsAdjustingPositionForInteraction();
    bool IsActivelyDisarmingDollMasterTrap();
    bool IsActivatingDarkShard();
    bool InShootingWeaponAnimSequence();
    bool InProneAnimSequence();
    bool InKilledAnimSequence();
    bool InHideSequence();
    bool InFallingAnimSequence();
    bool HasWeapon();
    bool HasUnsafeClothingEquipped();
    bool HasTeenSpectralChar();
    bool HasSpeedBoostByEvil();
    bool HasShardVision();
    bool HasRCCopter();
    bool HasMolotovSpeedBoost();
    bool HasMagicSphere();
    bool HasEnergizedMoveSpeedBoost();
    bool HasDemonSwordSpeedBoost();
    bool HasCrossDamageBlock();
    bool HasBulkyClothingEquipped();
    bool HasBonusLife();
    bool HasAugment(EAugmentType augmentType, int32 minTier, bool bReqActive);
    bool HasAdrenalineFromPickup();
    bool HasAdrenaline();
    bool HasActivePing();
    bool HasActivePickup();
    class UExtAkComponent* GetWhisperAkEmitter();
    EWeaponTypeEnum GetWeaponTypeUsing();
    EWeaponTypeEnum GetWeaponTypeHeld();
    EWeaponTypeEnum GetWeaponTypeCrafting();
    class UWeaponSkinManagerComponent* GetWeaponSkinManagerComponent();
    float GetVaultSpeedMultiplier();
    TArray<class AVaultPoint*> GetVaultPoints();
    TArray<class AActor*> GetVaultPointCandidates();
    class UAnimMontage* GetVaultMontage();
    class USkillTestMinigameBase* GetValidSkillTest();
    EPickupType GetUsingPickup();
    class UExtAkComponent* GetUnattenuatedAkEmitter();
    float GetTurnInPlaceAlpha();
    class UParticleSystem* GetTransformationParticleSystem();
    class ATPChar* GetTradePickupReceiverChar();
    class ATPChar* GetTradePickupGiverChar();
    TArray<class AActor*> GetTradePickupCandidates();
    TArray<class ATPChar*> GetTradePickupAllies();
    class ATPChar* GetTPCharPerformingResurrection();
    class ATPChar* GetTPCharCurrentlyReviving();
    class ATPChar* GetTPCharCurrentlyResurrecting();
    class ATPChar* GetTPCharCurrentlyHealing();
    FVector GetTPCameraDefaultRelativeLocation();
    class UCameraComponent* GetTPCameraComponent();
    class USpringArmComponent* GetTPCameraBoomComponent();
    float GetTimeUntilWeaponDiscarded();
    float GetTimeUntilManualTransform();
    float GetTimeSinceLoudCraftFail();
    float GetTimeSinceLastEradicatorScan();
    float GetTimeSinceLastBeenHit();
    float GetTimeSinceEvilTransform();
    float GetTimeSinceEvilStun();
    float GetTimeSinceEvilBecomeCorporeal();
    float GetTimeSinceCraftFail();
    float GetTimeReviving();
    float GetTimeResurrecting();
    float GetTimeInjured();
    float GetTimeHealing();
    float GetTimeDead();
    float GetTimeBeingRevived();
    float GetTimeBeingResurrected();
    float GetTimeBeingHealed();
    float GetTimeAssisting();
    class UTensionManager* GetTensionManager();
    class UExtAkComponent* GetTensionAkEmitter();
    class ATeenSpectralChar* GetTeenSpectralChar();
    FVector GetTargetingCapsuleLineTracePosition();
    class UCapsuleComponent* GetTargetingCapsuleComponent();
    float GetTalismanWalkSpeed();
    float GetTalismanCrouchSpeed();
    float GetTalismanAimMovementSpeed();
    float GetSubduedTimeRemaining();
    float GetSubduedTime();
    float GetStealthSpeed();
    TArray<class UBaseStatusComponent*> GetStatusComponents();
    class AStationBase* GetStationBeingUsed();
    float GetStaticShieldAimMovementSpeed();
    float GetStaggerTimeRemaining();
    float GetStaggeredSpeedPenalty();
    float GetSpeedBoostByEvilTimeRemaining();
    float GetSpeedBoostByEvilBonus();
    float GetSpectralEssenceRestoreSpeedBoostTime();
    float GetSpectralEssenceRestoreHealthLossPreventionTime();
    class ATPChar* GetSpectatorTPChar();
    class AGameplayPS* GetSpectatorTarget();
    TArray<class ARaygunProjectile*> GetSpawnedRaygunProjectiles();
    TArray<class ADemonSwordProjectile*> GetSpawnedDemonSwordProjectiles();
    float GetSlingshotAimMovementSpeed();
    class AVaultPoint* GetSelectedVaultPoint();
    class ATPChar* GetSelectedTradePickupChar();
    class ASeasonalEventCenterpiecePoint* GetSelectedSeasonalEventCenterpiecePoint();
    class ASearchablePoint* GetSelectedSearchablePoint();
    class ATPChar* GetSelectedReviveChar();
    class ATPChar* GetSelectedResurrectChar();
    class APickupBase* GetSelectedPickup();
    class AMedKitPoint* GetSelectedMedKitPoint();
    class AHidePoint* GetSelectedHidePoint();
    class ATPChar* GetSelectedHealChar();
    class AEnergyPoint* GetSelectedEnergyPoint();
    class ADollMasterTrap* GetSelectedDollMasterTrap();
    class ACraftPoint* GetSelectedCraftPoint();
    TArray<class AActor*> GetSeasonalEventCenterpiecePointCandidates();
    int32 GetSearchPuzzlesCompleted();
    TArray<class ASearchablePoint*> GetSearchablePoints();
    TArray<class AActor*> GetSearchablePointCandidates();
    float GetReviveFraction();
    TArray<class ATPChar*> GetRevivedByAllies();
    TArray<class AActor*> GetReviveCandidates();
    TArray<class ATPChar*> GetRevivableAllies();
    float GetRevealedByDollTrapTimeRemaining();
    TArray<class AActor*> GetResurrectCandidates();
    TArray<class ATPChar*> GetResurrectableByAllies();
    TArray<class ATPChar*> GetResurrectableAllies();
    EWeaponTypeEnum GetRequestedWeaponType();
    float GetReintegrationTimeRemaining();
    class ARCCopter* GetRCCopter();
    float GetRayGunAimMovementSpeed();
    class USkeletalMeshComponent* GetRagdollPoseTarget();
    class UPostProcessComponent* GetPostProcessComponent();
    class UPlayerTipsComponent* GetPlayerTipsComponent();
    EPickupHeightType GetPickupHeightType();
    TArray<class AActor*> GetPickupCandidates();
    class UAIPerceptionStimuliSourceComponent* GetPerceptionStimuliComponent();
    float GetPercentCraftingComplete();
    class USkillTestMinigameBase* GetPendingSkillTest();
    int32 GetNumPlayersRevealedToByMagicSphere();
    float GetNoisemakerRevealTimeRemaining();
    float GetNoisemakerDeploymentTimeRemaining();
    class ANoisemakerActor* GetNoisemakerBeingRevealedBy();
    float GetNoisemakerBaseRevealTime();
    float GetNextHitMarredTime();
    int32 GetMotivatedTier();
    float GetMotivatedActionSpeedBonus();
    float GetMolotovSpeedBoostTimeRemaining();
    float GetMolotovSpeedBoostTime();
    float GetMolotovSpeedBonus();
    float GetMolotovAimMovementSpeed();
    float GetMinReviveTimeToActivateResolve();
    float GetMinimumProneLife();
    float GetMinigamePenaltyTimeRemaining();
    float GetMinigamePenaltyTime();
    float GetMinigameBoostTimeRemaining();
    float GetMinigameBoostTime();
    float GetMimicSpeedMultiplier();
    class AFPChar* GetMimicOwner();
    UClass* GetMimicClassForCharacterType(ECharacterType newTeenType);
    TArray<class AMedKitPoint*> GetMedKitPoints();
    TArray<class AActor*> GetMedKitPointCandidates(bool bCheckAllowedToUse);
    float GetMedkitMasterHealBonus();
    float GetMaxLife();
    float GetMaxAimingPitch();
    float GetMarredTimeRemaining();
    class AMagicSphere* GetMagicSphere();
    class UBlendSpaceBase* GetLocomotionOverride();
    float GetLocalViewHearingPercentage(class UObject* pWorldContextObject, bool bCached);
    TArray<EWeaponTypeEnum> GetLocalCurrentWeaponOptions(EDamageType DamageType);
    int32 GetLobbyPoseVariant();
    int32 GetLobbyPoseIndex();
    float GetLifeRemaining();
    float GetLifeLost();
    class AActor* GetLastPropUsed();
    float GetKnockdownLifeLoss();
    class UStaticMeshComponent* GetInteractionCylinderComponent();
    float GetInjuryLifeLoss();
    float GetInjuredWalkPenalty();
    float GetInjuredRunPenalty();
    float GetInhibitedTimeRemaining();
    TArray<class ATPChar*> GetIndividualPlayerRevealTPCharList();
    TArray<float> GetIndividualPlayerRevealTimeList();
    class UParticleSystemComponent* GetIdleWarningParticleComponent();
    class ATPChar* GetHUDTrackingTarget();
    class AActor* GetHolyStaffHealCandidate();
    float GetHolyStaffAimMovementSpeed();
    float GetHitsByEvil();
    class UAnimMontage* GetHidePointMontage(EHideObjectType hideObjectType);
    TArray<class AActor*> GetHidePointCandidates();
    class UAnimMontage* GetHideMontage(EHideObjectType hideObjectType);
    EPickupType GetHeldPickupType();
    FPickupInfoStruct GetHeldPickupInfoStruct();
    float GetHeldPickupCharge();
    class APickupBase* GetHeldPickup();
    EEventPickupType GetHeldEventPickupType();
    float GetHearingPercent();
    float GetHealSenseExposeTimeRemaining();
    float GetHealSenseActivationTimeRemaining();
    TArray<class AActor*> GetHealingCandidates(bool bCheckCandidatesAllowedToBeHealed);
    TArray<class ATPChar*> GetHealedByAllies();
    TArray<class ATPChar*> GetHealableAllies();
    bool GetHasAgonyDebuff();
    EPickupType GetGrabbingPickupType();
    class APickupBase* GetGrabbingPickup();
    float GetGameplayTimeAtLastDeath();
    EGameActionType GetGameActionFromEmoteIndex(int32 emoteIndex);
    FEmoteData GetFrontEndEmote();
    class UFootstepManager* GetFootstepManager();
    FVector GetFloorVector(bool bStrict);
    float GetFlamethrowerShowOwnerTime();
    float GetFlamethrowerAimMovementSpeed();
    float GetFlameMineAimMovementSpeed();
    ESearchableType GetFinishedSearchableType();
    float GetFedTimeRemaining();
    float GetFedTime();
    EVaultType GetFallingVaultType();
    float GetFallDistance();
    bool GetFailedSkilltestCrafting();
    EFaction GetFaction();
    class UAnimSequence* GetFaceAdditive();
    ECharacterType GetEvilWheelTransformType();
    float GetEvilPickupUseRevealTimeRemaining();
    float GetEvilPickupUseRevealTime();
    float GetEvilCrowdRevealTime();
    float GetEradicatorTargetedSurgeStunTimeRemaining();
    float GetEradicatorScannedRevealTimeRemaining();
    float GetEradicatorOverchargeTime();
    float GetEradicatorBaseScannedRevealTime();
    class AWeaponBase* GetEquippedWeapon();
    TArray<class AEnergyPoint*> GetEnergyPoints();
    TArray<class AActor*> GetEnergyPointCandidates();
    float GetEnergizedMoveSpeedBoostTimeRemaining();
    float GetEnergizedMoveSpeedBonus();
    int32 GetEmoteUISlotIndexFromEmoteIndex(int32 Index);
    int32 GetEmoteIndexFromGameAction(EGameActionType emoteActionType);
    FEmoteData GetEmoteDataByIndex(int32 Index);
    class UExtAkComponent* GetEmoteAkEmitter();
    float GetElectrocutionSpeedPenalty();
    float GetEffigyOfAgonyMultiplier();
    TArray<class ADollMasterTrap*> GetDollMasterTraps();
    TArray<class AActor*> GetDollMasterTrapCandidates();
    float GetDollMasterRevealedTimeRemaining();
    float GetDistanceToClosestGoodCharacter();
    float GetDisintegrationTimeRemaining();
    float GetDemonSwordSpeedBoostTimeRemaining();
    float GetDemonSwordSpeedBonus();
    float GetDemonSwordSelfRevealTimeRemaining();
    float GetDemonSwordAimMovementSpeed();
    float GetDeafenTimeRemaining();
    float GetDeafenTime();
    float GetDeafenRecoveryTimeRemaining();
    float GetCurrentWeaponRange();
    TArray<EWeaponTypeEnum> GetCurrentWeaponOptions();
    float GetCurrentUntraceableTimeRemaining();
    float GetCurrentShroudedTimeRemaining();
    class ARemoteCharBase* GetCurrentRemoteChar();
    FEmoteData GetCurrentEmoteData();
    EAnimSpawnableType GetCurrentAnimSpawnableItemType();
    float GetCurrentAdrenalineSpeedBonus();
    float GetCrouchSpeed();
    float GetCrossDamageBlockTimeRemaining();
    float GetCrossAimMovementSpeed();
    float GetCrawlSpeedMultiplier();
    float GetCrawlSpeed();
    class UCraftStationManagerComponent* GetCraftStationManagerComponent();
    TArray<class ACraftPoint*> GetCraftPoints();
    TArray<class AActor*> GetCraftPointCandidates();
    bool GetCraftingCompleted();
    float GetCoweringTimeRemaining();
    float GetCoweringTime();
    class ATPChar* GetClosestSurvivorBP(float maximumRange, bool bLineCheck);
    TArray<class AActor*> GetCloseByTeens(float Radius);
    int32 GetClientAnomalyCharacterSwitchIgnoreFallingFrames();
    float GetChaseActiveTimeRemaining();
    ECharacterType GetCharacterType();
    FText GetCharacterNameLoc();
    TArray<uint32> GetCharacterMETQueue();
    TArray<EPlayerSlot> GetCharacterCustomGameTemporarySlots();
    FVector GetCandidateSelectionPos(class AActor* pCandidate);
    float GetCameraBoomLength();
    float GetBonusLifeTimeRemaining();
    float GetBonusLifeTime();
    float GetBonusKnockdownLifelossMultiplier();
    float GetBonusInjuryLifelossMultiplier();
    float GetBlindTime();
    float GetBleedIntervalIncrease();
    class AActor* GetBestSecondaryFireCandidate();
    class AActor* GetBestCandidateByCharacterOrientation(TArray<class AActor*> candidateArray);
    class AActor* GetBestCandidate(TArray<class AActor*> candidateArray);
    class AActor* GetBestAction3Candidate();
    class AActor* GetBestAction1Candidate();
    float GetBaseWeaponDiscardTime();
    float GetBaseVaultSpeedMultiplier();
    float GetBaseUntraceableTime();
    float GetBaseStaggerTime();
    float GetBaseSpeedBoostByEvilTime();
    float GetBaseSpectralEssenceRestoreSpeedBoostTime();
    float GetBaseSpectralEssenceRestoreHealthLossPreventionTime();
    float GetBaseShroudedTime();
    float GetBaseReviveTime();
    float GetBaseRevealedByDollTrapTime();
    float GetBaseResurrectTime();
    float GetBaseNoisemakerDeploymentTime();
    float GetBaseMarredTime();
    float GetBaseManualTransformTime();
    float GetBaseInhibitedTime();
    float GetBaseHealTime();
    float GetBaseEvilCrowdRevealTime();
    float GetBaseEradicatorTargetedSurgeStunTime();
    float GetBaseEnergizedMoveSpeedBoostTime();
    float GetBaseDemonSwordSpeedBoostTime();
    float GetBaseDemonSwordSelfRevealTime();
    float GetBaseCrawlSpeed();
    float GetBaseBlindTime();
    float GetBaseAdrenalineTime();
    class UMaterialInstance* GetAuraMaterialInstance();
    float GetAugurRevealDuration();
    TArray<EWeaponTypeEnum> GetAugmentRemovedWeapons(EDamageType DamageType);
    class UAugmentManager* GetAugmentManager();
    float GetAudioTravelDistanceToActiveEvil();
    float GetArmedActiveChaseTimeRemaining();
    class UAnimInstance* GetAnimInstance();
    TArray<class AMedKitPoint*> GetAllMedKitPoints();
    float GetAgonyTimeRemaining();
    float GetAdrenalineTimeRemaining();
    float GetAdrenalineTime();
    float GetAdrenalineSpeedBonus();
    float GetAdrenalineRampTime();
    class AVaultPoint* GetActiveVaultPoint();
    TArray<class UBaseStatusComponent*> GetActiveStatusComponents();
    class USkillTestMinigameBase* GetActiveSkillTestMinigame();
    class ASeasonalEventCenterpiecePoint* GetActiveSeasonalEventCenterpiecePoint();
    ESearchableType GetActiveSearchablePointType();
    class ASearchablePoint* GetActiveSearchablePoint();
    EPickupType GetActivePickup();
    class AMedKitPoint* GetActiveMedKitPoint();
    class AHidePoint* GetActiveHidePoint();
    class AEnergyPoint* GetActiveEnergyPoint();
    class ADollMasterTrap* GetActiveDollMasterTrap();
    class ADarkShard* GetActiveDarkShard();
    class ACraftPoint* GetActiveCraftPoint();
    EActiveActionType GetActiveAction();
    bool ForceShowMeshWhileNotManifested();
    void Falling();
    void ExpireRaygunProjectiles();
    void EvaluateChase(float DeltaSeconds);
    void EquipPlayerLoadout(int32 playerLobbyIndex, ECharacterType CharacterType);
    void EnableAttackCollision(bool enable);
    void DropAttachedPhysicsProps();
    void DoUpdateHideInSmoke(float DeltaTime);
    void DoSetHideInSmoke(float NewValue);
    bool DoServerUsedSmokeBombToEscapeUnarmedChase();
    void DoServerUsedPickup();
    void DoServerUpdateWeaponTypeCrafting();
    void DoServerUpdateVaultMaster(float DeltaTime);
    void DoServerUpdateTimeSinceLoudCraftFail(float DeltaSeconds);
    void DoServerUpdateTimeSinceLastEradicatorScan(float DeltaSeconds);
    void DoServerUpdateTimeSinceLastBeenHit(float DeltaSeconds);
    void DoServerUpdateTimeSinceEvilTransform(float DeltaSeconds);
    void DoServerUpdateTimeSinceEvilStun(float DeltaSeconds);
    void DoServerUpdateTimeSinceEvilBecomeCorporeal(float DeltaSeconds);
    void DoServerUpdateTimeSinceCraftFail(float DeltaSeconds);
    void DoServerUpdateTimeInjured(float DeltaSeconds);
    void DoServerUpdateSubdued(float DeltaSeconds);
    void DoServerUpdateStatistics(float DeltaTime);
    void DoServerUpdateStagger(float DeltaTime);
    void DoServerUpdateSpeedBoostByEvil(float DeltaSeconds);
    void DoServerUpdateSpectralEssenceRestore(float DeltaTime);
    void DoServerUpdateSkillTestMinigameAnalytics(float DeltaTime);
    void DoServerUpdateSkillTestMinigame(float DeltaTime);
    void DoServerUpdateShroudedAndUntraceableTime(float DeltaSeconds);
    void DoServerUpdateSequenceFallbackCheck(float DeltaSeconds);
    void DoServerUpdateSearchableSearch(float DeltaSeconds);
    void DoServerUpdateRevive(float DeltaSeconds);
    void DoServerUpdateRevealedByDollTrapTime(float DeltaSeconds);
    void DoServerUpdateResurrect(float DeltaSeconds);
    void DoServerUpdateRepositioningTimer(float DeltaTime);
    void DoServerUpdateNoisemakerDeployment(float DeltaTime);
    void DoServerUpdateMotivatedTier(float DeltaTime);
    void DoServerUpdateMotionSentinel(float DeltaSeconds);
    void DoServerUpdateMolotovSpeedBoost(float DeltaSeconds);
    void DoServerUpdateMedKitHeal(float DeltaSeconds);
    void DoServerUpdateMarredTime(float DeltaTime);
    void DoServerUpdateManualTransform(float DeltaSeconds);
    void DoServerUpdateLife(float DeltaSeconds);
    void DoServerUpdateLastSafePickupLocation();
    void DoServerUpdateJustWoundedEvil();
    void DoServerUpdateInteractionLists();
    void DoServerUpdateInhibitedTime(float DeltaTime);
    void DoServerUpdateHealSenseForTeens(float DeltaSeconds);
    void DoServerUpdateHeal(float DeltaSeconds);
    void DoServerUpdateHasActivePing();
    void DoServerUpdateGivePickup(float DeltaSeconds);
    void DoServerUpdateFlamethrowerShowOwnerTime(float DeltaSeconds);
    void DoServerUpdateFed(float DeltaSeconds);
    void DoServerUpdateFalling(float DeltaSeconds);
    void DoServerUpdateEvilProneReveal(float DeltaSeconds);
    void DoServerUpdateEvilPickupUseReveal(float DeltaSeconds);
    void DoServerUpdateEvilNearDownedTeen(float DeltaTime);
    void DoServerUpdateEvilCrowdRevealTime(float DeltaSeconds);
    void DoServerUpdateEradicatorValues(float DeltaTime);
    void DoServerUpdateEradicatorTargetedSurgeStun(float DeltaTime);
    void DoServerUpdateEquipment(float DeltaSeconds);
    void DoServerUpdateEnergizedMoveSpeedBoostTime(float DeltaSeconds);
    void DoServerUpdateEmoteLockInPlace(float DeltaTime);
    void DoServerUpdateDollMasterRevealedTimeRemaining(float DeltaSeconds);
    void DoServerUpdateDiscardWeapon(float DeltaSeconds);
    void DoServerUpdateDemonSwordSpeedBoost(float DeltaSeconds);
    void DoServerUpdateDemonSwordSelfReveal(float DeltaSeconds);
    void DoServerUpdateDeafenTime(float DeltaSeconds);
    void DoServerUpdateCrossDamageBlock(float DeltaSeconds);
    void DoServerUpdateCowering(float DeltaSeconds);
    void DoServerUpdateCloseByTeens();
    void DoServerUpdateChase(float DeltaSeconds);
    void DoServerUpdateCapsulePositionList();
    void DoServerUpdateBonusLife(float DeltaSeconds);
    void DoServerUpdateBlindTime(float DeltaTime);
    void DoServerUpdateBleeding(float DeltaSeconds);
    void DoServerUpdateAgony(float DeltaTime);
    void DoServerUpdateAdrenaline(float DeltaSeconds);
    void DoServerUnequipWeapon(bool bForceDiscard, bool bThrown);
    void DoServerTrySpawnLockbox();
    void DoServerStartRecordingSkillTestAnalytics(int32 skillType);
    void DoServerSpawnTeenSpectralChar();
    void DoServerSpawnLifeEssence();
    void DoServerSimulateHit(FVector hitDirection);
    void DoServerSetWeaponTypeUsing(EWeaponTypeEnum weaponType);
    void DoServerSetWeaponDamageAppliedStats(EWeaponTypeEnum weaponType, float appliedTime);
    void DoServerSetWasResurrected(bool bWasResurrected);
    void DoServerSetUsingPickupType(EPickupType pickupType);
    void DoServerSetUsingPickup(EPickupType pickupType);
    void DoServerSetUsedSmokeBombToEscapeUnarmedChase(bool bServerUsedSmokeBombToEscapeUnarmedChase);
    void DoServerSetUpdateCollisionProfile(bool bUpdateCollisionProfile);
    void DoServerSetTransforming(bool IsTransforming);
    void DoServerSetTradePickupReceiverChar(class ATPChar* pReceiverChar);
    void DoServerSetTradePickupGiverChar(class ATPChar* pGiverChar);
    void DoServerSetTPCharCurrentlyReviving(class ATPChar* pTPChar);
    void DoServerSetTPCharCurrentlyResurrecting(class ATPChar* pTPChar);
    void DoServerSetTPCharCurrentlyHealing(class ATPChar* pTPChar);
    void DoServerSetTimeUntilWeaponDiscarded(float timeUntilWeaponDiscarded);
    void DoServerSetTimeUntilManualTransform(float TimeRemaining);
    void DoServerSetTimeSpentLanding(float timeSpentLanding);
    void DoServerSetTimeSinceLoudCraftFail(float Time);
    void DoServerSetTimeSinceLastEradicatorScan(float Time);
    void DoServerSetTimeSinceLastBeenHit(float Time);
    void DoServerSetTimeSinceEvilTransform(float Time);
    void DoServerSetTimeSinceEvilStun(float Time);
    void DoServerSetTimeSinceEvilBecomeCorporeal(float Time);
    void DoServerSetTimeSinceCraftFail(float Time);
    void DoServerSetTimeReviving(float Seconds);
    void DoServerSetTimeResurrecting(float Seconds);
    void DoServerSetTimeInjured(float Time);
    void DoServerSetTimeHealing(float TimeRemaining);
    void DoServerSetTimeConsistentlyHearingTensionTrackWhileHiding(float serverTimeConsistentlyHearingTensionTrackWhileHiding);
    void DoServerSetTimeBeingRevived(float Seconds);
    void DoServerSetTimeBeingResurrected(float Seconds);
    void DoServerSetTimeBeingHealed(float TimeRemaining);
    void DoServerSetTimeAssisting(float Time);
    void DoServerSetThrowing(bool IsThrowing);
    void DoServerSetTeenSpectralChar(class ATeenSpectralChar* pTeenSpectralChar);
    void DoServerSetSubduedTimeRemaining(float screamReactionTime);
    void DoServerSetSubduedTime(float screamReactionTime);
    void DoServerSetSubdued(float subduedTime);
    void DoServerSetStationBeingUsed(class AStationBase* pStation);
    void DoServerSetSpeedBoostByEvilTimeRemaining(float NewValue);
    void DoServerSetSpeedBoostByEvilTimeBase(float NewValue);
    void DoServerSetSpeedBoostByEvilSpeedMultiplier(float NewValue);
    void DoServerSetSpeedBoostByEvil(float Time, float Multiplier);
    void DoServerSetSpectralEssenceRestoreSpeedBoostTime(float NewValue);
    void DoServerSetSpectralEssenceRestoreHealthLossPreventionTime(float NewValue);
    void DoServerSetSpectatorTarget(class AGameplayPS* pSpectatorTarget);
    void DoServerSetSlowedDuringElectrocution(bool bSet);
    void DoServerSetShouldDropPool(bool bSet);
    void DoServerSetSearchPuzzlesCompleted(int32 puzzlesComplete);
    void DoServerSetRevealedByDollTrapTimeRemaining(float NewValue);
    void DoServerSetReintegrating(bool reintegrating);
    void DoServerSetProne(bool prone);
    void DoServerSetPossessedFlameMineChar(class AFlameMineChar* pChar);
    void DoServerSetPickupHeightType(EPickupHeightType Val);
    void DoServerSetNoisemakerDeploymentTimeRemaining(float NewValue);
    void DoServerSetMotivatedTier(int32 Tier);
    void DoServerSetMolotovSpeedBoostTimeRemaining(float TimeRemaining);
    void DoServerSetMolotovSpeedBoostTime(float Time);
    void DoServerSetMinigamePenaltyTimeRemaining(float Time);
    void DoServerSetMinigamePenaltyTime(float Time);
    void DoServerSetMinigameBoostTimeRemaining(float Time);
    void DoServerSetMinigameBoostTime(float Time);
    void DoServerSetMimicClone(bool bMimicClone);
    void DoServerSetMaxLife(float maxLife);
    void DoServerSetMarredTimeRemaining(float NewValue);
    void DoServerSetMarred(float marredTime, bool bPermanent);
    void DoServerSetLifeRemaining(float lifeRemaining);
    void DoServerSetLastSafePickupLocation(FVector lastSafePickupLocation);
    void DoServerSetLastPropUsed(class AActor* pActor);
    void DoServerSetKilled(bool IsKilled);
    void DoServerSetJustWoundedEvil(bool bValue);
    void DoServerSetJustTransformed(bool bJustTransformed);
    void DoServerSetIsUndead(bool bIsUndead);
    void DoServerSetIsTricked(bool bIsTricked);
    void DoServerSetIsRevealedByElectrocution(bool bSet);
    void DoServerSetIsPlayingResurrectOutro(bool bIsPlayingResurrectOutro);
    void DoServerSetIsPlacingPickup(bool bSet);
    void DoServerSetIsMimicTeenChar(class AFPChar* pAnomChar);
    void DoServerSetIsDeployingNoisemaker(bool bNewValue);
    void DoServerSetInShootingWeaponSequence(bool bInWeaponShootingSequence);
    void DoServerSetInProneAnimSequence(bool bInProneAnimSequence);
    void DoServerSetInPickupInteractingSequence(bool inPickupInteractingSequence);
    void DoServerSetInKilledAnimSequence(bool bInKilledAnimSequence);
    void DoServerSetInjured(bool IsInjured);
    void DoServerSetInhibitedTimeRemaining(float NewValue);
    void DoServerSetInhibited(float inhibitedTime);
    void DoServerSetInFallingAnimSequence(bool bInFallingAnimSequence);
    void DoServerSetIndividualPlayerRevealTime(class ATPChar* pTPChar, float NewValue);
    void DoServerSetIncubating(bool IsIncubating);
    void DoServerSetHitsByEvil(int32 Value);
    void DoServerSetHeldPickupInfoStruct(FPickupInfoStruct newStruct);
    void DoServerSetHeldPickupCharge(float newCharge);
    void DoServerSetHeldPickup(class APickupBase* pHeldPickup);
    void DoServerSetHearingTensionTrack(float tensionTrackIntensity);
    void DoServerSetHealSenseExposeTimeRemaining(float TimeRemaining);
    void DoServerSetHealSenseActivationTimeRemaining(float TimeRemaining);
    void DoServerSetHasAgonyDebuff(bool Val);
    void DoServerSetHasActivePing(bool bNewValue);
    void DoServerSetGrabbingPickupType(EPickupType pickupType);
    void DoServerSetGrabbingPickup(class APickupBase* pPickupBase);
    void DoServerSetGameplayTimeAtLastDeath(float Time);
    void DoServerSetFrozen(bool bSet);
    void DoServerSetFrostbit(bool bFrostbit);
    void DoServerSetForceDropHeldPickup(bool bSet);
    void DoServerSetFlamethrowerShowOwnerTime(float Time);
    void DoServerSetFedTimeRemaining(float TimeRemaining);
    void DoServerSetFedTime(float Time);
    void DoServerSetFedLifeRestored(float lifeRestored);
    void DoServerSetFedLifeRequested(float lifeRequested);
    void DoServerSetFeastedOn(bool bSet);
    void DoServerSetFallingVaultType(EVaultType vaultType);
    void DoServerSetFailedSkilltestCrafting(bool Val);
    void DoServerSetEvilWheelTransformType(ECharacterType TransformType);
    void DoServerSetEvilWheelSelectingRandomTransformType(bool bNewValue);
    void DoServerSetEvilProneRevealTimeRemaining(float TimeRemaining);
    void DoServerSetEvilPickupUseRevealTimeRemaining(float NewValue);
    void DoServerSetEvilPickupUseRevealTime(float NewValue);
    void DoServerSetEvilCrowdRevealTime(float NewValue);
    void DoServerSetEradicatorTargetedSurgeStunTimeRemaining(float NewValue);
    void DoServerSetEradicatorScannedRevealTimeRemaining(float NewValue);
    void DoServerSetEradicatorOverchargeTime(float NewValue);
    void DoServerSetEquippedWeapon(class AWeaponBase* weapon);
    void DoServerSetEnergizedMoveSpeedBoostTime(float NewValue);
    void DoServerSetEmoting(bool bVal);
    void DoServerSetEmoteLockInPlaceTimerRemaining(float Val);
    void DoServerSetEffigyOfAgonyModifier(float Val);
    void DoServerSetDollTrapTriggered();
    void DoServerSetDollMasterRevealedTimeRemaining(float Amount);
    void DoServerSetDispersedInvisible(bool bVal);
    void DoServerSetDisintegrating(bool disintegrating);
    void DoServerSetDemonSwordSpeedBoostTimeRemaining(float NewValue);
    void DoServerSetDemonSwordSelfRevealTimeRemaining(float DeltaSeconds);
    void DoServerSetDeafenTimeRemaining(float NewValue);
    void DoServerSetDeafenTime(float NewValue);
    void DoServerSetDeafenRecoveryTimeRemaining(float NewValue);
    void DoServerSetDeafen(float deafenTime);
    void DoServerSetDead(bool IsDead);
    void DoServerSetCurrentWeaponOptions(EDamageType DamageType);
    void DoServerSetCurrentUntraceableTime(float NewValue);
    void DoServerSetCurrentStaggerTime(float NewValue);
    void DoServerSetCurrentShroudedTime(float NewValue);
    void DoServerSetCurrentAnimSpawnableType(EWeaponTypeEnum weaponType);
    void DoServerSetCrouchToggleDisableTimer(float Val);
    void DoServerSetCrouchTimer(float Val);
    void DoServerSetCrossDamageBlockTimeRemaining(float TimeRemaining);
    void DoServerSetCraftingComplete(bool Val);
    void DoServerSetCoweringTimeRemaining(float TimeRemaining);
    void DoServerSetCoweringTime(float Time);
    void DoServerSetCowering(float cowerTime);
    void DoServerSetChaseEndedWeaponTypeStruck(EWeaponTypeEnum weaponType);
    void DoServerSetChaseEndedType(EChaseEndedType chaseEndedType);
    void DoServerSetChaseDuration(float Time);
    void DoServerSetBonusLifeTimeRemaining(float TimeRemaining);
    void DoServerSetBonusLifeTime(float Time);
    void DoServerSetBlindTime(float NewValue);
    void DoServerSetBlind(float NewValue, bool bPreventUpdateOneFrame);
    void DoServerSetBleedTime(float bleedTime);
    void DoServerSetBledOut(bool IsBledOut);
    void DoServerSetBeganHidingDuringTensionTrack(bool bServerBeganHidingDuringTensionTrack);
    void DoServerSetBaseUntraceableTime(float NewValue);
    void DoServerSetBaseStaggerTime(float NewValue);
    void DoServerSetBaseShroudedTime(float NewValue);
    void DoServerSetBaseMarredTime(float NewValue);
    void DoServerSetBaseInhibitedTime(float NewValue);
    void DoServerSetBaseBlindTime(float NewValue);
    void DoServerSetAlarmed(bool bAlarmed);
    void DoServerSetAdrenalineTimeRemaining(float TimeRemaining);
    void DoServerSetAdrenalineTime(float Time, bool bFromPickup);
    void DoServerSetAdrenalineRampTime(float Time);
    void DoServerSetActiveVaultPoint(class AVaultPoint* pVaultPoint);
    void DoServerSetActiveSeasonalEventCenterpiecePoint(class ASeasonalEventCenterpiecePoint* pSearchablePoint);
    void DoServerSetActiveSearchablePoint(class ASearchablePoint* pSearchablePoint);
    void DoServerSetActivePickup(EPickupType pickupType);
    void DoServerSetActiveMedKitPoint(class AMedKitPoint* pMedKitPoint);
    void DoServerSetActiveHidePoint(class AHidePoint* pHidePoint);
    void DoServerSetActiveEnergyPoint(class AEnergyPoint* pEnergyPoint);
    void DoServerSetActiveEmote(int32 emoteIndex);
    void DoServerSetActiveDollMasterTrap(class ADollMasterTrap* pDollMasterTrap);
    void DoServerSetActiveCraftingPoint(class ACraftPoint* pCraftPoint);
    void DoServerSetActiveAction(EActiveActionType activeAction);
    void DoServerResurrected(class ATPChar* pTPChar, bool bResurrectHealthy, float resurrectLife);
    void DoServerRequestTradePickup(class ATPChar* pTPChar);
    void DoServerRequestStopRevive();
    void DoServerRequestStopResurrect(bool bInterrupted);
    void DoServerRequestStopHeal();
    void DoServerRequestBeginDiscardWeapon();
    void DoServerRequestAbortTradePickup();
    void DoServerRequestAbortSecondaryFire();
    void DoServerRequestAbortProjectileWeapon();
    void DoServerRequestAbortPrimaryFire();
    void DoServerRequestAbortGrabbingPickup();
    void DoServerRequestAbortFixedActions();
    void DoServerRequestAbortDroppingPickup();
    void DoServerRequestAbortDiscardWeapon();
    void DoServerRequestAbortAllActions();
    void DoServerRequestAbortActionsDueToFalling();
    void DoServerRequestAbortAction3();
    void DoServerRequestAbortAction1();
    void DoServerRemoveVaultPoint(class AVaultPoint* pVaultPoint);
    void DoServerRemoveSeasonalEventCenterpiecePoint(class ASeasonalEventCenterpiecePoint* pSearchablePoint);
    void DoServerRemoveSearchablePoint(class ASearchablePoint* pSearchablePoint);
    void DoServerRemoveMedKitPoint(class AMedKitPoint* pMedKitPoint);
    void DoServerRemoveInjury();
    void DoServerRemoveHidePoint(class AHidePoint* pHidePoint);
    void DoServerRemoveEnergyPoint(class AEnergyPoint* pEnergyPoint);
    void DoServerRemoveCraftingPoint(class ACraftPoint* pCraftPoint);
    void DoServerReintegrate();
    void DoServerRefreshChaseTeen(ECharacterType activeEvilCharacterType);
    void DoServerRefreshChaseEvil(bool bArmed);
    void DoServerRecordWeaponAnalytics(uint8 equipState, uint8 winfo);
    void DoServerRecordPickupAnalytics(class APickupBase* pPickup, uint8 Usage);
    void DoServerRecordEndChaseAnalytics(EChaseEndedType reason, bool evilEnraged, EWeaponTypeEnum teenHasWeapon);
    void DoServerReactToEcholocation(float triggerDelay);
    void DoServerProneToLocomotion();
    void DoServerPlaceHeldPickup(bool bReplacing);
    void DoServerPerformTakePickup();
    void DoServerPerformGivePickup();
    void DoServerPerfectMinigame();
    void DoServerPassMinigame();
    void DoServerOnWeaponDestroyed();
    void DoServerOnWeaponDepleted(bool bPlayLoseWeaponAnimation);
    void DoServerOnRotatorSuccess();
    void DoServerOnRotatorFail();
    void DoServerOnMinigameFailed();
    void DoServerOnHitByEradicatorScan();
    void DoServerOnDeadOrDisconnected(class ATPChar* pDeadTPChar);
    void DoServerKnockdown();
    bool DoServerIsZoningEvil();
    void DoServerInspectHidepoint(class AHidePoint* pHidePoint);
    void DoServerIncrementWeaponCraft(EWeaponTypeEnum Type);
    void DoServerIncrementStats(FCharStatType Type, int32 Amount);
    void DoServerIncrementReviveStats();
    void DoServerIncrementNumPlayersRevealedToByMagicSphere(int32 Value);
    void DoServerIncrementNumPlayersRevealedToByFlameMine(int32 Value);
    void DoServerIncrementHealStats();
    void DoServerIncreaseHitsByEvil(int32 Delta);
    void DoServerGrantBonusLife(float bonusLife, float Duration);
    float DoServerGetTimeConsistentlyHearingTensionTrackWhileHiding();
    class AFlameMineChar* DoServerGetPossessedFlameMineChar();
    float DoServerGetPointMultiplierForType(EScoringCategory Category);
    FVector DoServerGetLastSafePickupLocation();
    float DoServerGetFedLifeRestored();
    float DoServerGetFedLifeRequested();
    float DoServerGetFedExponent();
    float DoServerGetEcholocationDistance();
    EWeaponTypeEnum DoServerGetChaseEndedWeaponTypeStruck();
    EChaseEndedType DoServerGetChaseEndedType();
    float DoServerGetChaseDuration();
    TArray<float> DoServerGetCapsulePositionTimeStampList();
    TArray<FVector> DoServerGetCapsulePositionList();
    float DoServerGetBleedTime();
    void DoServerFinishSearchableAnimation();
    void DoServerFinishedSkillTestMinigameAnalytics(int32 eResultType);
    void DoServerFailMinigame();
    void DoServerExpireRaygunProjectiles();
    void DoServerExpireDemonSwordProjectiles();
    void DoServerEquipWeapon(EWeaponTypeEnum weaponType);
    void DoServerEnforceStatusComponentExists(TSubclassOf<class UBaseStatusComponent> statusClass, class ATPChar* pEnforcer);
    void DoServerDropPickupAtSafeLocation();
    void DoServerDropPickup();
    void DoServerDropHeldPickup();
    void DoServerDropBloodDecal();
    void DoServerDisintegrate();
    void DoServerDebugDisintegrate();
    void DoServerCycleSpectatorTarget(bool bCycleBackwards);
    void DoServerCycleEvilTypeRight();
    void DoServerCycleEvilTypeLeft();
    void DoServerCreateHeldPickup(FPickupInfoStruct infoStruct);
    TArray<class ATPChar*> DoServerCountNumberOfTeensNearby(float minDistance);
    void DoServerConsumeHeldPickup();
    void DoServerCollectPickup();
    void DoServerClearThrowing();
    void DoServerClearSubdued();
    void DoServerClearStaggered();
    void DoServerClearProne();
    void DoServerClearNullRaygunProjectiles();
    void DoServerClearMarred();
    void DoServerClearInhibited();
    void DoServerClearFed();
    void DoServerClearEmote();
    void DoServerClearElectrocution();
    void DoServerClearDeafen();
    void DoServerClearCowering();
    void DoServerClearBonusLife();
    void DoServerClearBlinded();
    void DoServerClearAdrenaline();
    void DoServerCleanupChildren();
    void DoServerClaimHidepoint(class AHidePoint* pHidePoint);
    void DoServerCancelChase();
    void DoServerCalculateAudioDistanceToActiveEvil();
    void DoServerBleedOut();
    void DoServerBeginDeployingNoisemaker();
    bool DoServerBeganHidingDuringTensionTrack();
    void DoServerBecomeDead();
    void DoServerBecomeAlive(float life, bool bSetUndead);
    void DoServerAwardWeaponHit(EWeaponTypeEnum weaponType, EDamageType DamageType, EWeaponHitType hitType);
    void DoServerAttemptSetEradicatorOverchargeTime(float overchargeTime);
    void DoServerAttemptInhibitDueToSurge(float inhibitTime);
    void DoServerAttemptEradicatorTargetedSurgeStun(bool bUseMultiple, bool bHasRevealEffect);
    void DoServerApplyInjury(bool bReduceLife, bool bApplyArendaline);
    void DoServerApplyAdrenaline(float adrenalineTime, float rampTime, bool bFromPickup);
    void DoServerAddWeaponXP(EWeaponTypeEnum Type, float Amount);
    void DoServerAddVaultPoint(class AVaultPoint* pVaultPoint);
    void DoServerAddTimeBeingRevived(float Amount);
    void DoServerAddSeasonalEventCenterpiecePoint(class ASeasonalEventCenterpiecePoint* pSearchablePoint);
    void DoServerAddSearchablePoint(class ASearchablePoint* pSearchablePoint);
    void DoServerAddScore(EScoringCategory Category, float Amount, FText Title);
    void DoServerAddMedKitPoint(class AMedKitPoint* pMedKitPoint);
    void DoServerAddLifeLost(float lifeLost);
    void DoServerAddHidePoint(class AHidePoint* pHidePoint);
    void DoServerAddEnergyPoint(class AEnergyPoint* pEnergyPoint);
    void DoServerAddCraftingPoint(class ACraftPoint* pCraftPoint);
    void DoServerActivateHidePoint(class AHidePoint* pHidePoint);
    void DoServerAbsorbLifeEssence(float lifeEssenceSize);
    void DoClientUpdateAnomalyCharacterSwitchIgnoreFallingFrames();
    void DoClientSetAnomalyCharacterSwitchIgnoreFallingFrames(int32 NewValue);
    void ConfigureTPSettings();
    void ClientStopAllCameraShakes();
    void ClientSnapCameraToTarget();
    bool ClientShouldUpdateCollisionProfile();
    void ClientSetUpdateCollisionProfile(bool bNewValue);
    void ClientExpireRaygunProjectiles();
    void ClearFrontEndEmote();
    void ClearAttachedAnimProps();
    void ClearAllEmoteFX();
    bool CanSpawnRemoteCharInFront();
    bool CanEnterProneState();
    bool CanEnterKilledState();
    bool CanAcceptMoveInput();
    float CalculateGroundFriction();
    float CalculateAcceleration();
    bool AverageDistanceTravelledAboveSprintVaultThreshold();
    void AttachPickupToPlayerHand(class APickupBase* pNewPickup);
    bool AnomalyFallingOverrideActive();
    bool AllowRightHandAnimAdditive();
    bool AllowMousePitch();
    bool AllowLeftHandAnimAdditive();
    bool AllowHeldPickupVisible();
    bool AllowEquippedWeaponVisible();
    bool AllowedToVault();
    bool AllowedToUseWeapons();
    bool AllowedToUseSecondWind();
    bool AllowedToUseResolve();
    bool AllowedToUsePickup();
    bool AllowedToUseMedKitPoint();
    bool AllowedToUseEvilWheel();
    bool AllowedToUseEnergyPoint();
    bool AllowedToUseAugments();
    bool AllowedToStartEmoting();
    bool AllowedToSpectate();
    bool AllowedToSpawnTeenSpectral();
    bool AllowedToSearch();
    bool AllowedToRevive();
    bool AllowedToResurrect();
    bool AllowedToReceivePickup();
    bool AllowedToPlayUnequipAnimation();
    bool AllowedToPlacePickup();
    bool AllowedToLeaveSeasonalEventCenterpiecePoint();
    bool AllowedToLeaveSearchable();
    bool AllowedToHide();
    bool AllowedToHeal();
    bool AllowedToGrabPickup(class APickupBase* pPickupBase);
    bool AllowedToGivePickup();
    bool AllowedToGetLifeEssence();
    bool AllowedToExaminePickups();
    bool AllowedToEmote();
    bool AllowedToDropHeldPickup();
    bool AllowedToDiscardWeapon();
    bool AllowedToDisarmDollMasterTrap();
    bool AllowedToCycleSpectator();
    bool AllowedToCrouch();
    bool AllowedToCraft();
    bool AllowedToCancelAim();
    bool AllowedToBeRevived();
    bool AllowedToBeRevealed();
    bool AllowedToBeResurrected();
    bool AllowedToBeHealed(bool bUsingHolyStaff);
    bool AllowedToActivateDarkShard();
    void AdjustPositionForInteraction();
}; // Size: 0x12C0

class ATVIntroEffect : public AActor
{
    class UMaterialInstance* mpTVScreenMaterialInstance;                              // 0x0228 (size: 0x8)
    class UMaterialInstance* mpTVIntroMaterialInstance;                               // 0x0230 (size: 0x8)
    class UMaterialInstance* mpVHSWorldMaterialInstance;                              // 0x0238 (size: 0x8)
    class UPostProcessComponent* mpTVIntroPostProcessComponent;                       // 0x0240 (size: 0x8)
    class UMaterial* mpTVScreenCapturePostProcess;                                    // 0x0248 (size: 0x8)
    class USceneComponent* mpCaptureContainer;                                        // 0x0250 (size: 0x8)
    class USceneCaptureComponent2D* mpSceneCaptureComponent;                          // 0x0258 (size: 0x8)
    class USceneCaptureComponent2D* mpTVScreenCaptureComponent;                       // 0x0260 (size: 0x8)
    TArray<class AActor*> mScreens;                                                   // 0x0268 (size: 0x10)
    TArray<class AActor*> mOverlays;                                                  // 0x0278 (size: 0x10)
    float mTVViewPostProcessWeight;                                                   // 0x0288 (size: 0x4)

    void SetPostProcessWeightForAllTPChars(float Weight);
    void SetCinematicMode(bool bSet);
    void SetCaptureEnabled(bool bSet);
    class UMaterialInstance* GetVHSWorldMaterialInstance();
    class UMaterialInstance* GetTVIntroMaterialInstance();
}; // Size: 0x290

class ATalismanWeapon : public AWeaponBase
{
    class UParticleSystemComponent* mpMainBeamLineParticleSystemComponent;            // 0x0378 (size: 0x8)
    class UParticleSystemComponent* mpWeakBeamLineParticleSystemComponent;            // 0x0380 (size: 0x8)
    class UParticleSystemComponent* mpBeamHitParticleSystemComponent;                 // 0x0388 (size: 0x8)
    class UPointLightComponent* mpPointLightComponent;                                // 0x0390 (size: 0x8)
    class UParticleSystemComponent* mpAbsorbParticleSystemComponent;                  // 0x0398 (size: 0x8)
    class USphereComponent* mpCollisionComponent;                                     // 0x03A0 (size: 0x8)
    bool mbAbsorbing;                                                                 // 0x03A8 (size: 0x1)
    bool mbLockedOn;                                                                  // 0x03A9 (size: 0x1)
    float mAbsorbMultiplier;                                                          // 0x03AC (size: 0x4)
    bool mbFiring;                                                                    // 0x03B0 (size: 0x1)
    bool mbIsHittingEvil;                                                             // 0x03B1 (size: 0x1)
    float mBeamLerpAmount;                                                            // 0x03B4 (size: 0x4)
    float mBeamMaxTangentStrength;                                                    // 0x03B8 (size: 0x4)
    float mBeamTangentMultiplier;                                                     // 0x03BC (size: 0x4)
    FVector mLastTargetBeamLocation;                                                  // 0x03C0 (size: 0xC)
    FVector mTargetBeamLocation;                                                      // 0x03CC (size: 0xC)
    bool mbBeamHitWorld;                                                              // 0x03D8 (size: 0x1)
    TArray<int32> mHitBones;                                                          // 0x03E0 (size: 0x10)
    class UPrimitiveComponent* mpBeamTargetComponent;                                 // 0x03F0 (size: 0x8)
    class UCurveFloat* mpAbsorbMultiplierCurve;                                       // 0x03F8 (size: 0x8)
    class UCurveFloat* mpLockOnMultiplierCurve;                                       // 0x0400 (size: 0x8)
    class UStaticMeshComponent* mpTargetCone;                                         // 0x0450 (size: 0x8)
    float mCurrentAbsorb;                                                             // 0x0458 (size: 0x4)
    float mMaxAbsorb;                                                                 // 0x045C (size: 0x4)
    bool mbDrainingHealth;                                                            // 0x0460 (size: 0x1)
    bool mbPowered;                                                                   // 0x0461 (size: 0x1)
    float mTimeUntilPowered;                                                          // 0x0464 (size: 0x4)

    void UpdateWwiseParameters();
    void UpdateWwiseAbsorbFactor();
    void UpdateTargetCone();
    void StopTalismanAbsorbActiveAkEvent();
    void StopBeamActiveAkEvent();
    void PlayBeamStartupAkEvent();
    void PlayBeamShutdownAkEvent();
    void PlayBeamActiveAkEvent();
    void MulticastAllStopTalismanAbsorbActive();
    void MulticastAllStopBeamActive();
    void MulticastAllPlayTalismanBeamStartup();
    void MulticastAllPlayTalismanBeamShutdown();
    void MulticastAllPlayTalismanAbsorbStartup();
    void MulticastAllPlayTalismanAbsorbShutdown();
    void MulticastAllPlayTalismanAbsorbActive();
    void MulticastAllPlayBeamActive();
    bool IsLockedOn();
    bool IsHittingEvil();
    bool IsFiring();
    bool IsAbsorbing();
    float GetMaxAbsorb();
    float GetCurrentAbsorb();
    class USphereComponent* GetCollisionComponent();
    float GetBaseMaxCharge();
    float GetAbsorbMultiplier();
    void DoServerSetMaxAbsorb(float maxAbsorb);
    void DoServerSetLockedOn(bool bSet);
    void DoServerSetFiring(bool bSet);
    void DoServerSetCurrentAbsorb(float currentAbsorb);
    void DoServerSetAbsorbMultiplier(float absorbMultiplier);
    void DoServerSetAbsorbing(bool bSet);
    void DoServerDebugTogglePower();
    bool BeamHitWorld();
}; // Size: 0x468

class ATeenSpectralChar : public ARemoteCharBase
{
    float mSpiritWorldEffectStrength;                                                 // 0x07B8 (size: 0x4)
    class UMaterialInstance* mpSpiritWorldMaterialInstance;                           // 0x07C0 (size: 0x8)
    class UTeenSpectralDataAsset* mpSpectralDataAsset;                                // 0x07C8 (size: 0x8)
    bool mbIsInSpawningAnimation;                                                     // 0x07D0 (size: 0x1)
    bool mbReceivedFirstInput;                                                        // 0x07D1 (size: 0x1)

    void UpdateVisibility();
    void UpdateSpiritWorldEffect(float DeltaSeconds);
    void UpdatePulseEffects(float DeltaSeconds);
    void SetIsInSpawningAnimation(bool bVal);
    bool IsInSpawningAnimation();
    float GetShutdownTime();
}; // Size: 0x7E0

class AThumbnailLightRig : public AActor
{
}; // Size: 0x220

class AThumbnailRender : public AActor
{
    TArray<TSoftObjectPtr<UClothingItemDataAsset>> CaptureAssets;                     // 0x0220 (size: 0x10)
    TEnumAsByte<EThumbnailCapturePreset> mCapturePreset;                              // 0x0230 (size: 0x1)
    TMap<TEnumAsByte<EThumbnailCapturePreset>, AThumbnailLightRig*> PresetLightRigs;  // 0x0238 (size: 0x50)
    bool EditMode;                                                                    // 0x0288 (size: 0x1)
    TEnumAsByte<EThumbnailCapturePreset> EditCapturePreset;                           // 0x0289 (size: 0x1)
    FThumbnailCaptureSettings EditCapturePresetSettings;                              // 0x0290 (size: 0xA0)
    class UCameraComponent* mCamera;                                                  // 0x0330 (size: 0x8)
    class USceneCaptureComponent2D* SceneCapture;                                     // 0x0338 (size: 0x8)
    TArray<class UAnimSequence*> MannequinPosesMale;                                  // 0x0340 (size: 0x10)
    TArray<class UAnimSequence*> MannequinPosesFemale;                                // 0x0350 (size: 0x10)
    FString mCaptureFileName;                                                         // 0x0360 (size: 0x10)
    FString mCaptureFileLocation;                                                     // 0x0370 (size: 0x10)
    class UClothingItemDataAsset* mpFemaleMannequinDataAsset;                         // 0x0380 (size: 0x8)
    class UClothingItemDataAsset* mpMaleMannequinDataAsset;                           // 0x0388 (size: 0x8)
    class UClothingItemDataAsset* mpCurrentMannequinDataAsset;                        // 0x0390 (size: 0x8)
    class USceneComponent* mpSceneRoot;                                               // 0x0398 (size: 0x8)
    class UTeenClothingComponent* mpCustomSkeletonComponent;                          // 0x03A0 (size: 0x8)
    class USkeletalMeshComponent* mpMannequin;                                        // 0x03A8 (size: 0x8)
    class UClothingItemDataAsset* mpCurrentCaptureAsset;                              // 0x03B0 (size: 0x8)
    FThumbnailCaptureSettings mCapturePresetSettings;                                 // 0x03C0 (size: 0xA0)
    TMap<TEnumAsByte<EThumbnailCapturePreset>, FThumbnailCaptureSettings> mSavedCapturePresets; // 0x0460 (size: 0x50)
    TMap<UClothingItemDataAsset*, TEnumAsByte<EThumbnailCapturePreset>> mSavedCaptureData; // 0x04B0 (size: 0x50)
    TMap<class EMeshSlot, class FRecordedMeshSlotVisibility> mRecordedMeshSlotVisibility; // 0x0500 (size: 0x50)
    class UTexture2D* mpEmptyMask;                                                    // 0x0558 (size: 0x8)

    void UpdatetLightRig();
    void UpdateMannequin(FThumbnailCaptureSettings presetSettings);
    void UpdateCurrentCaptureAsset();
    void UpdateCaptureSettings();
    void Update();
    void SetCurrentCaptureAsset(class UClothingItemDataAsset* Asset);
    void SetCaptureSettings(FThumbnailCaptureSettings presetSettings);
    void SetCapturePresetByAssetName(FName assetFName);
    void SetCapturePreset(TEnumAsByte<EThumbnailCapturePreset> Preset);
    void SetCaptureNaming(class UClothingItemDataAsset* ClothingAsset);
    void SetCaptureMesh(class UClothingItemDataAsset* ClothingAsset);
    void SetCameraLocationFromViewport();
    void SaveDataToJson();
    void SaveCapturePresetSettings();
    void RecaptureAllAssets();
    void PopulateMannequinPoseList(bool bIsMale);
    void LoadMannequins();
    void LoadDataFromJson();
    TMap<TEnumAsByte<EThumbnailCapturePreset>, FThumbnailCaptureSettings> GetSavedCapturePresets();
    TMap<UClothingItemDataAsset*, TEnumAsByte<EThumbnailCapturePreset>> GetSavedCaptureData();
    FThumbnailCaptureSettings GetCurrentCapturePresetSettings();
    FThumbnailCaptureSettings GetCapturePresetSettings(TEnumAsByte<EThumbnailCapturePreset> Preset);
    TEnumAsByte<EThumbnailCapturePreset> GetCapturePreset();
    void ExportRenderTargetToPNG(FString Filename);
    void DoCaptureCurrentAsset();
    FTransform CreateMannequinTransform(FThumbnailCaptureSettings captureSettings);
    FString CreateExportFilePath();
    void CaptureCurrentAssets();
    void AddItemToSavedCapturePreset();
}; // Size: 0x560

class AToadChar : public AFPChar
{
    float mTimeAcidArmorRemaining;                                                    // 0x1778 (size: 0x4)
    float mAcidArmorCooldown;                                                         // 0x177C (size: 0x4)
    bool mAcidArmorDamagedEffect;                                                     // 0x1780 (size: 0x1)
    float mTimeBeforeResonanceEcho;                                                   // 0x1784 (size: 0x4)
    bool mbEcholocating;                                                              // 0x1788 (size: 0x1)
    float mEcholocationCooldown;                                                      // 0x178C (size: 0x4)
    bool mbServerWasWeaponAppliedDuringLeap;                                          // 0x1790 (size: 0x1)
    class UMaterialInstance* mpToadArmorPPMaterial;                                   // 0x1798 (size: 0x8)
    class USphereComponent* mpEcholocationCollision;                                  // 0x17A0 (size: 0x8)
    TSubclassOf<class UMatineeCameraShake> mArmorBreakShake;                          // 0x17A8 (size: 0x8)
    TSubclassOf<class AToadLeapShockwaveEffect> mLeapShockwaveEffectClass;            // 0x17B0 (size: 0x8)
    float mServerTimeSinceLastEcholocation;                                           // 0x17B8 (size: 0x4)
    class UToadArmourEffectComponent* mpArmourEffectComponent;                        // 0x17C0 (size: 0x8)
    class UCurveFloat* mpLeapCameraCurve;                                             // 0x17C8 (size: 0x8)
    float mClientCameraLeapTimer;                                                     // 0x17D0 (size: 0x4)
    FSoftObjectPath mEvilViewNiagaraSystemPath;                                       // 0x17F0 (size: 0x18)

    void SetClientCameraLeapTimer(float NewValue);
    void OnRep_IsEcholocating();
    void MulticastAllStopToadLeapChargeSound();
    void MulticastAllStopToadEcholocationChargeSound();
    void MulticastAllStopToadAcidArmorChargeSound();
    void MulticastAllPlayToadLeapStartSound();
    void MulticastAllPlayToadLeapEndSound();
    void MulticastAllPlayToadLeapChargeSound();
    void MulticastAllPlayToadEcholocationSound();
    void MulticastAllPlayToadEcholocationResonanceSound();
    void MulticastAllPlayToadEcholocationChargeSound();
    void MulticastAllPlayToadAcidArmorOnFinishedSound();
    void MulticastAllPlayToadAcidArmorOff(bool bExpired);
    void MulticastAllPlayToadAcidArmorChargeSound();
    void MulticastAllPlayAcidArmorSizzle(class ATPChar* pVictimChar);
    void MulticastAllEcholocationEffect();
    void MulticastAllCreateLeapShockwave(bool bWasWeaponApplied);
    bool IsEcholocating();
    bool IsAcidArmorOn();
    float GetTimeBeforeResonanceEcho();
    class UCurveFloat* GetLeapCameraCurve();
    float GetEcholocationRange();
    float GetClientCameraLeapTimer();
    float GetBaseEcholocationRange();
    float GetBaseAcidArmorTime();
    float GetAcidArmorTimeRemaining();
    bool DoServerWasWeaponAppliedDuringLeap();
    void DoServerUpdateTimeSinceLastEcholocation(float DeltaSeconds);
    void DoServerUpdateResonanceTimeRemaining(float DeltaSeconds);
    void DoServerUpdateAcidArmor(float detlaSeconds);
    void DoServerSetWasWeaponAppliedDuringLeap(bool bSet);
    void DoServerSetTimeSinceLastEcholocation(float Time);
    void DoServerSetTimeBeforeResonanceEcho(float newLeapTime);
    void DoServerSetTimeAcidArmorRemaining(float TimeRemaining);
    void DoServerSetEcholocating(bool bSet);
    bool DoServerPerformEcholocation();
    float DoServerGetTimeSinceLastEcholocation();
    void DoServerClearAcidArmor(bool bBroken);
    bool DoServerApplyAcidArmor();
    bool CanEcholocate();
    bool CanAcidArmor();
}; // Size: 0x1810

class AToadEcholocationEffect : public AActor
{
    class UPostProcessComponent* mpResonancePostProcessComponent;                     // 0x0220 (size: 0x8)
    class UMaterialInstance* mpResonanceMaterial;                                     // 0x0228 (size: 0x8)
    class UMaterialInstanceDynamic* mpResonanceMaterialDynamic;                       // 0x0230 (size: 0x8)
    class AToadChar* mpOwner;                                                         // 0x0238 (size: 0x8)
    TArray<class ATPChar*> mHitTPChars;                                               // 0x0240 (size: 0x10)
    float mCurrentRadius;                                                             // 0x0250 (size: 0x4)
    float mExpansionRate;                                                             // 0x0254 (size: 0x4)
    float mTimeAlive;                                                                 // 0x0258 (size: 0x4)
    float mMaxRange;                                                                  // 0x025C (size: 0x4)
    bool mbServerAwardedClose;                                                        // 0x0260 (size: 0x1)

    void SetOwningToadChar(class AToadChar* pOwner);
    class AToadChar* GetOwningToadChar();
    void DoServerUpdatePlayerCollision(float DeltaTime);
}; // Size: 0x268

class AToadLeapShockwaveEffect : public AEvilShockwaveEffect
{
    float mSphereMeshBaseSize;                                                        // 0x0250 (size: 0x4)
    class UMaterialInstance* mpShockwaveMaterial;                                     // 0x0258 (size: 0x8)
    bool mbToadWasWeaponApplied;                                                      // 0x0260 (size: 0x1)
    class UStaticMeshComponent* mpMeshComponent;                                      // 0x0268 (size: 0x8)
    class UParticleSystemComponent* mpLeapParticlesComponent;                         // 0x0270 (size: 0x8)

    bool ToadWasWeaponApplied();
    void SetToadWasWeaponApplied(bool bSet);
    float GetBaseStaggerTime();
}; // Size: 0x278

class ATrainingCharPicker : public AActor
{
    class UTextRenderComponent* mpTextRenderComponent;                                // 0x0228 (size: 0x8)
    class UStaticMeshComponent* mpInteractionStation;                                 // 0x0230 (size: 0x8)
    class UCapsuleComponent* mpCapsuleComponent;                                      // 0x0238 (size: 0x8)
    TSubclassOf<class UInteractableTrainingObjectWidget> mWidgetClass;                // 0x0240 (size: 0x8)
    TSoftObjectPtr<UTexture> mpBlackBackground;                                       // 0x0248 (size: 0x28)
    bool mbCanUseStation;                                                             // 0x0270 (size: 0x1)
    bool mbEvil;                                                                      // 0x0271 (size: 0x1)
    class UMaterialInstanceDynamic* mpDMI;                                            // 0x0278 (size: 0x8)
    class ATPChar* mpCapturedTPChar;                                                  // 0x0280 (size: 0x8)
    TMap<class ECharacterType, class TSoftObjectPtr<UTexture2D>> mCharacterPortraits; // 0x0288 (size: 0x50)
    class UGameScriptingManager* mpGameScriptingMan;                                  // 0x02D8 (size: 0x8)
    int32 mCharIndex;                                                                 // 0x02E0 (size: 0x4)
    ECharacterType mCurrCharacterType;                                                // 0x02E4 (size: 0x1)
    class UInteractableTrainingObjectWidget* mpCreatedWidget;                         // 0x02E8 (size: 0x8)

    void UpdateMaterial(float noise, class UTexture* Texture);
    void UpdateDisplayTextOnLeaving();
    void UpdateCharacterIndex(class ATPChar* playerChar, bool& bFoundValidType);
    void TutorialButtonPressed_Select(bool bPressed);
    void TutorialButtonPressed_Right(bool bPressed);
    void TutorialButtonPressed_OnTutorialScroll(float AxisValue);
    void TutorialButtonPressed_Left(bool bPressed);
    void OnCapsuleEndOverlap(class UPrimitiveComponent* pOverlappedComp, class AActor* pOtherActor, class UPrimitiveComponent* pOtherComp, int32 OtherBodyIndex);
    void OnCapsuleBeginOverlap(class UPrimitiveComponent* pOverlappedComponent, class AActor* pOtherActor, class UPrimitiveComponent* pOtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);
    void CycleCharacter(bool bRight);
    void Confirm();
}; // Size: 0x2F0

class ATrainingMonsterPicker : public ATrainingCharPicker
{
}; // Size: 0x2F0

class ATrainingTeenAIControllerV2 : public AAIController
{
    class UBehaviorTree* mpDefaultBehaviorTree;                                       // 0x0328 (size: 0x8)
    class UPathPredictionComponent* mpEvilPathPredictionComponent;                    // 0x0330 (size: 0x8)
    FPerceivedActors mPerceivedActors;                                                // 0x0340 (size: 0x10)

    void OnTeenHit(class ATPChar* pSource);
    void OnTargetPerceptionInfoUpdated(const FActorPerceptionUpdateInfo& UpdateInfo);
    class ATPChar* GetPossessedTPChar();
    class ATPChar* GetPerceivedActor(bool bClosest);
    void AIUseCraftPoint(class ACraftPoint* pCraftPoint);
    void AISecondaryAttack(bool bAttackPressed);
    void AIRequestHeal(class ATPChar* pTPChar);
    void AIPrimaryAttack(bool bAttackPressed);
}; // Size: 0x350

class ATrainingTeenPicker : public ATrainingCharPicker
{
}; // Size: 0x2F0

class ATransformLocator : public AActor
{
}; // Size: 0x220

class ATriggerableEffect : public AActor
{
    class UParticleSystemComponent* mpParticleSystemComponent;                        // 0x0220 (size: 0x8)
    class UExtAkComponent* mpExtAkComponent;                                          // 0x0228 (size: 0x8)
    bool mUseParticleSystemComponent;                                                 // 0x0230 (size: 0x1)
    bool mUseAudioSystemComponent;                                                    // 0x0231 (size: 0x1)
    bool mbZForward;                                                                  // 0x0232 (size: 0x1)

    void OnEffectTriggered();
    void OnEffectStopped();
}; // Size: 0x238

class ATutorialCharAIController : public AAIController
{
    class UAIPerceptionComponent* mpAIPerceptionComp;                                 // 0x0328 (size: 0x8)
    class UBehaviorTreeComponent* BehaviorComp;                                       // 0x0330 (size: 0x8)
    FName TargetLocationKeyName;                                                      // 0x0338 (size: 0x8)
    FName TargetCharacterKeyName;                                                     // 0x0340 (size: 0x8)
    TArray<FBehaviourTreeData> mBehaviourTreeData;                                    // 0x0348 (size: 0x10)

    void OnUpdateTargetPerception(class AActor* pActor, FAIStimulus Stimulus);
    void OnUpdatePerception(const TArray<class AActor*>& actorList);
    void OnReleasedAttack();
    void OnPressedAttack();
    void NavigateToWaypoint(FVector wayPointLocation, EMovementSpeedType movementSpeedType, bool bOverrideSpeed);
}; // Size: 0x360

class AUsedPickup : public AActor
{
    FRotator mThrowRotation;                                                          // 0x0234 (size: 0xC)
    float mVelocityInfluenceMultiplier;                                               // 0x0240 (size: 0x4)
    float mTorqueMultiplier;                                                          // 0x0244 (size: 0x4)
    class UStaticMeshComponent* mpMesh;                                               // 0x0248 (size: 0x8)
    class UBoxComponent* mpBoxCollision;                                              // 0x0250 (size: 0x8)
    class UPickupSkinDataAsset* mpPickupSkinDataAsset;                                // 0x0258 (size: 0x8)

    void MulticastAllSetSkin(class UItemDataAsset* pSkin);
    class UStaticMeshComponent* GetMesh();
    UClass* GetClassFromPickupType(EPickupType pickupType);
    class UBoxComponent* GetBoxCollision();
}; // Size: 0x260

class AUtilityEvilController : public AAIController
{
    class UAISenseConfig_Sight* mpAISense_Sight;                                      // 0x0328 (size: 0x8)
    class UAISenseConfig_Hearing* mpAISense_Hearing;                                  // 0x0330 (size: 0x8)
    class ABaseChar* mpCurrentChaseTarget;                                            // 0x0338 (size: 0x8)
    float mTimeChasingCurrentTarget;                                                  // 0x0340 (size: 0x4)
    TMap<int32, FAIAudioInfo> mCachedAudioInfoByID;                                   // 0x0348 (size: 0x50)
    TMap<int32, FAIAudioInfo> mCurrentAudioInfoByID;                                  // 0x0398 (size: 0x50)
    EAIDifficultyLevel mDifficultyLevel;                                              // 0x03E8 (size: 0x1)
    TMap<AActor*, float> mTimeAtPatrolByPatrollableActor;                             // 0x03F0 (size: 0x50)

    void UpdatePerception();
    void UpdateMovementSpeed();
    void UpdateChasingTarget(float DeltaSeconds);
    bool ShouldAIUpdateTritonDistanceTo(FAIAudioInfo audibleActorInfo);
    void SetTimeAtPatrol(class AActor* pPatrollableActor, float timeAtPatrol);
    void SetDifficultyLevel(EAIDifficultyLevel difficultyLevel);
    void OnTeenHit(class AFPChar* pEvil, class ATPChar* pHitTeen, ELastHitType lastHitType);
    void OnTargetPerceptionInfoUpdated(const FActorPerceptionUpdateInfo& UpdateInfo);
    void OnPerceivedNoise(const FActorPerceptionUpdateInfo& UpdateInfo);
    bool IsTeenActivelyDangerous(class ATPChar* pTeen);
    bool IsDifficultyKillSwitchEnabled();
    float GetTimeAtPatrol(class AActor* pPatrollableActor);
    float GetHearingAccuracy();
    EAIDifficultyLevel GetDifficultyLevel();
    void ForgetSense(TSubclassOf<class UAISense> senseToForget);
}; // Size: 0x440

class AUtilityTeenController : public AAIController
{
    class UBehaviorTree* mpDefaultBehaviourTree;                                      // 0x0328 (size: 0x8)
    class UAISenseConfig_Sight* mpAISense_Sight;                                      // 0x0330 (size: 0x8)
    class UAISenseConfig_Hearing* mpAISense_Hearing;                                  // 0x0338 (size: 0x8)
    EAIDifficultyLevel mDifficultyLevel;                                              // 0x0340 (size: 0x1)

    void UpdateSelfReference();
    void UpdateRunningMode();
    void UpdateMovementSpeed();
    void SetDifficultyLevel(EAIDifficultyLevel difficultyLevel);
    void OnTargetPerceptionInfoUpdated(const FActorPerceptionUpdateInfo& UpdateInfo);
    bool IsDifficultyKillSwitchEnabled();
    EAIDifficultyLevel GetDifficultyLevel();
}; // Size: 0x348

class AVaultPoint : public APointBase
{
    EVaultHeightType mSelectedVaultHeightType;                                        // 0x02B0 (size: 0x1)
    class UCapsuleComponent* mpEvilCapsuleComponent;                                  // 0x02B8 (size: 0x8)
    EVaultType mSelectedVaultType;                                                    // 0x02C0 (size: 0x1)
    class AVaultPoint* mpSibling;                                                     // 0x02C8 (size: 0x8)
    float mCurrentCharLerpSpeed;                                                      // 0x02D0 (size: 0x4)
    float mVaultStripSize;                                                            // 0x02D4 (size: 0x4)
    class UStaticMeshComponent* mHeightTargetIndicator;                               // 0x02D8 (size: 0x8)
    class UStaticMeshComponent* mpEdgeIndicator;                                      // 0x02E0 (size: 0x8)
    class UStaticMeshComponent* mpTeenVaultingStripIndicator;                         // 0x02E8 (size: 0x8)
    class UStaticMeshComponent* mpEvilVaultingStripIndicator;                         // 0x02F0 (size: 0x8)
    class UNavLinkCustomComponent* mpSmartNavLinkComponent;                           // 0x02F8 (size: 0x8)

    void UpdateNavLinkProxy();
    void SetNavLinkEnabled(bool bEnable);
    void LocateSibling();
    bool IsReadyToActivate();
    class AVaultPoint* GetSibling();
    EVaultType GetSelectedVaultType();
    EVaultHeightType GetSelectedVaultHeightType();
    FName GetSectionName();
    void DoServerActivate(class ATPChar* pOwningTPChar);
    bool BlockedBySibling();
    void AdjustSplineIndicator();
}; // Size: 0x300

class AViewportTickableActorBase : public AActor
{
    EViewportTickableFlags ViewportTickType;                                          // 0x0220 (size: 0x1)

    bool ShouldRerunConstructionScripts();
    void InitializeFromAsset(class UObject* pObject);
    void EditorTick(float DeltaSeconds);
    void EditorDestroyed();
}; // Size: 0x228

class AWalkiePickup : public APickupBase
{
    float mServerChargeRemainingOnActivation;                                         // 0x02F8 (size: 0x4)
    float mRandomNoiseTimer;                                                          // 0x02FC (size: 0x4)
    float mRandomNoise;                                                               // 0x0300 (size: 0x4)

}; // Size: 0x320

class AWallClock : public AActor
{
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0220 (size: 0x8)
    class UStaticMeshComponent* mpStaticMeshClock;                                    // 0x0228 (size: 0x8)
    class UStaticMeshComponent* mpStaticMeshHourHand;                                 // 0x0230 (size: 0x8)
    class UStaticMeshComponent* mpStaticMeshMinuteHand;                               // 0x0238 (size: 0x8)
    class UStaticMeshComponent* mpStaticMeshHourHandOtherSide;                        // 0x0240 (size: 0x8)
    class UStaticMeshComponent* mpStaticMeshMinuteHandOtherSide;                      // 0x0248 (size: 0x8)

}; // Size: 0x258

class AWallClockRear : public AActor
{
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0220 (size: 0x8)
    class UStaticMeshComponent* mpStaticMeshClock;                                    // 0x0228 (size: 0x8)

}; // Size: 0x230

class AWeaponBase : public AActor
{
    FWeaponBaseOnServerUsingWeaponChange onServerUsingWeaponChange;                   // 0x0240 (size: 0x10)
    void OnUsingWeaponChange(bool isUsing);
    float mUsedUpTimeRemaining;                                                       // 0x0250 (size: 0x4)
    bool mbIsUsedUp;                                                                  // 0x0254 (size: 0x1)
    float mChargeRemaining;                                                           // 0x0258 (size: 0x4)
    float mMaxCharge;                                                                 // 0x025C (size: 0x4)
    bool mbUsingWeapon;                                                               // 0x0260 (size: 0x1)
    class ATPChar* mpOwningTPChar;                                                    // 0x0268 (size: 0x8)
    class USkeletalMeshComponent* mpMesh;                                             // 0x0270 (size: 0x8)
    EWeaponTypeEnum mWeaponType;                                                      // 0x0278 (size: 0x1)
    class UParticleSystemComponent* mpIndicatorParticleSystemComponent;               // 0x0280 (size: 0x8)
    TSoftObjectPtr<UNiagaraSystem> mDiscardNiagaraSystem;                             // 0x0288 (size: 0x28)
    class USphereComponent* mpPropInteractionOverlapComponent;                        // 0x02B0 (size: 0x8)
    FHitResult mAimTargetHitResult;                                                   // 0x02B8 (size: 0x88)
    bool mbIsWeaponAimable;                                                           // 0x0340 (size: 0x1)
    FRotator mFrontEndRotation;                                                       // 0x0344 (size: 0xC)
    class UTeenWeaponSkinDataAsset* mpWeaponSkinDataAsset;                            // 0x0350 (size: 0x8)
    bool mbIsWarmedUp;                                                                // 0x0358 (size: 0x1)
    float mWarmupTime;                                                                // 0x035C (size: 0x4)
    bool mbBufferShot;                                                                // 0x0360 (size: 0x1)
    bool mbIsZoningEvil;                                                              // 0x0361 (size: 0x1)
    bool mbStopUsingCommandBuffered;                                                  // 0x0362 (size: 0x1)
    bool mbAlternateMode;                                                             // 0x0363 (size: 0x1)
    bool mbIsWeaponVisible;                                                           // 0x0364 (size: 0x1)
    class AActor* mpOverrideAimTarget;                                                // 0x0368 (size: 0x8)

    bool UsingAlternateMode();
    void UpdateWeaponVisibility();
    void UpdateRenderCustomDepth();
    void UpdateIndicatorParticles();
    void UpdateDiscardParticles();
    void SetWeaponVisibility(bool bVisibility);
    void SetWeaponOwnerNoSee(bool bOwnerNoSee);
    void ServerSetActive(bool bActive, bool bAlternateMode);
    void OnRep_UsedUp();
    bool NeedsWarmingUp();
    void MulticastAllStopWeaponAuraSoundEffect();
    void MulticastAllSpawnLostWeaponParticleEffect();
    void MulticastAllPlayWeaponAuraSoundEffect();
    bool IsWeaponVisible();
    bool IsWeaponAimable();
    bool IsWarmedUp();
    bool IsUsingWeapon();
    bool IsUsedUp();
    bool IsPassivelyCharging();
    bool IsInFrontEnd();
    bool IsDrainingHealth();
    bool HasShotBuffered();
    class UTeenWeaponSkinDataAsset* GetWeaponSkinDataAsset();
    float GetWarmupTime();
    float GetUsedUpTimeRemaining();
    float GetStartingCharge();
    FVector GetReticleWorldPosition();
    class ATPChar* GetOwningTPChar();
    class AActor* GetOverrideAimTarget();
    float GetMaxPropInteractionRange();
    float GetMaxCharge();
    class AGameplayGS* GetGameplayGS();
    FRotator GetFrontEndRotation();
    FVector GetDirectionToAimTarget(FVector startPoint);
    float GetCurrentRange();
    float GetChargeRemaining();
    float GetChargePercentRemaining();
    float GetBaseWarmupTime();
    float GetBaseRange();
    FHitResult GetAimTargetHitResult();
    void DoServerWeaponUsageTick(float DeltaSeconds, class ATPChar* pOwningTPChar);
    void DoServerUpdateZoningEvil(float DeltaSeconds);
    void DoServerUpdateUsedUpState(float DeltaTime);
    void DoServerSpawnLostWeaponParticleEffect();
    void DoServerSetZoningEvil(bool bSet);
    void DoServerSetWeaponType(EWeaponTypeEnum weaponType);
    void DoServerSetWarmupTime(float NewValue);
    void DoServerSetUsingWeapon(bool bUsingWeapon);
    void DoServerSetUsedUpTimeRemaining(float usedUpTimeRemaining);
    void DoServerSetStopUsingCommandBuffered(bool bNewValue);
    void DoServerSetShotBuffered(bool bNewValue);
    void DoServerSetOwningTPChar(class ATPChar* pOwningTPChar);
    void DoServerSetOverrideAimTarget(class AActor* pOverrideAimTarget);
    void DoServerSetMaxCharge(float maxCharge);
    void DoServerSetIsWarmedUp(bool bNewValue);
    void DoServerSetIsUsedUp(bool bNewValue);
    void DoServerSetChargeRemaining(float newChargeRemaining);
    void DoServerSetAlternateMode(bool bSet);
    void DoServerSetActive(bool bActive, bool bAlternateMode);
    void DoServerRequestStopUsing();
    void DoServerRequestBeginUsing(bool bAlternateMode);
    void DoServerReportActiveNoiseEvents();
    void DoServerOnWarmedUp();
    void DoServerOnStoppedUsing();
    void DoServerOnStartedUsing();
    void DoServerOnOwningTPCharSet();
    bool DoServerIsZoningEvil();
    void DoServerInitAugments();
    void DoServerIncrementConsumedStat();
    bool DoServerGetStopUsingCommandBuffered();
    void DoServerFireWeapon();
    void DoServerDestroyWeapon();
    void DoServerConsumeCharge(float DeltaTime, bool& outStillHasChargeAfterUse);
    bool DoServerAllowedToUse(bool bAlternateMode);
    bool CheckValidProjectileSpawnLocation();
    bool AllowedToBufferShot();
}; // Size: 0x370

class AWerewolfChar : public AFPChar
{
    float mTimeBerserkRemaining;                                                      // 0x1770 (size: 0x4)
    float mTimeSenseRemaining;                                                        // 0x1774 (size: 0x4)
    bool mbHowling;                                                                   // 0x1778 (size: 0x1)
    bool mbIsSensing;                                                                 // 0x1779 (size: 0x1)
    FVector mTrackingDirection;                                                       // 0x177C (size: 0xC)
    float mTargetTrackingEffectMultiplier;                                            // 0x1788 (size: 0x4)
    float mCurrentTrackingEffectMultiplier;                                           // 0x178C (size: 0x4)
    float mHowlCooldown;                                                              // 0x17A8 (size: 0x4)
    float mBerserkCooldown;                                                           // 0x17AC (size: 0x4)
    float mSenseCooldown;                                                             // 0x17B0 (size: 0x4)
    float mReactiveHowlThreshold;                                                     // 0x17B4 (size: 0x4)
    class UMaterialInstance* mpTrackingMaterialInstance;                              // 0x17B8 (size: 0x8)
    class USphereComponent* mpHowlCollision;                                          // 0x17C0 (size: 0x8)
    float mTrackingFactor;                                                            // 0x17C8 (size: 0x4)
    class UParticleSystem* mpBerserkParticleSystem;                                   // 0x17D0 (size: 0x8)
    class UParticleSystemComponent* mpHuntParticleSystemComponent;                    // 0x17D8 (size: 0x8)

    void SetTrackingFactor(float NewValue);
    void OnRep_IsSensing();
    void MulticastAllStopWerewolfTrackingSound();
    void MulticastAllStopChargeSound();
    void MulticastAllPlayWerewolfTrackingSound();
    void MulticastAllPlayWerewolfSenseSound();
    void MulticastAllPlayWerewolfHowlSound(const TArray<class ABaseChar*>& screamVictims);
    void MulticastAllPlayWerewolfBerserkSound();
    void MulticastAllPlaySenseChargeSound();
    void MulticastAllPlayHowlChargeSound();
    void MulticastAllPlayBerserkChargeSound();
    bool IsUsingSense();
    bool IsHowling();
    bool IsBerserk();
    float GetTrackingFactor();
    float GetTotalBerserkTime();
    float GetSenseTimeRemaining();
    float GetSenseMinRange();
    float GetSenseMaxRange();
    float GetReactiveHowlThreshold();
    float GetHowlRange();
    float GetHowlCowerTime();
    class USphereComponent* GetHowlCollision();
    float GetBerserkTimeRemaining();
    float GetBerserkSpeedBonus();
    class UParticleSystem* GetBerserkParticleSystem();
    float GetBerserkAttackRecoveringSpeedBonus();
    float GetBaseSenseTime();
    float GetBaseHowlRange();
    void DoServerUpdateReactiveHowlThreshold(float DeltaTime);
    void DoServerSetTimeSenseRemaining(float TimeRemaining);
    void DoServerSetTimeBerserkRemaining(float TimeRemaining);
    void DoServerSetReactiveHowlThreshold(float NewValue);
    void DoServerSetHowling(bool bSet);
    void DoServerRequestBeginAbilityCharge(int32 abilityIndex);
    void DoServerRequestAbortAbilityCharge(bool bCompleted);
    bool DoServerPerformHowl();
    void DoServerHowlAttack();
    void DoServerClearSense();
    void DoServerClearBerserk();
    bool DoServerApplySense();
    bool DoServerApplyBerserk();
    bool CanSense();
    bool CanHowl();
    bool CanBerserk();
}; // Size: 0x17E0

class AWorldEffectsTrigger : public AActor
{
    class UBoxComponent* mpBoxComponent;                                              // 0x0220 (size: 0x8)
    TArray<class ATriggerableEffect*> mpTriggerableEffectArray;                       // 0x0228 (size: 0x10)
    class UExtAkComponent* mpPrimaryAkEmitter;                                        // 0x0238 (size: 0x8)
    float mReadyTime;                                                                 // 0x0240 (size: 0x4)
    float mReadyTimeRandomMin;                                                        // 0x0244 (size: 0x4)
    float mReadyTimeRandomMax;                                                        // 0x0248 (size: 0x4)
    bool mbTriggeredByGoodCharacter;                                                  // 0x024C (size: 0x1)
    bool mbTriggerWithWeapon;                                                         // 0x024D (size: 0x1)
    TArray<EWeaponTypeEnum> mWeaponTriggerArray;                                      // 0x0250 (size: 0x10)
    bool mbTriggeredByEvilCharacter;                                                  // 0x0260 (size: 0x1)
    bool mbTriggeredByIncorporealEvil;                                                // 0x0261 (size: 0x1)
    bool mbTriggeredByRemoteCharacter;                                                // 0x0262 (size: 0x1)
    bool mbTriggeredByRCCopter;                                                       // 0x0263 (size: 0x1)
    bool mbTriggeredByTeenSpectral;                                                   // 0x0264 (size: 0x1)
    bool mbTriggeredByMagicSphere;                                                    // 0x0265 (size: 0x1)
    bool mbTriggerSoundEvent;                                                         // 0x0266 (size: 0x1)
    bool mbRandomlyTriggeredEffects;                                                  // 0x0267 (size: 0x1)

    void UpdateTriggersRandom(float DeltaTime);
    void StopEffects();
    void StopBPEffects();
    void StartEffects();
    void StartBPEffects();
    void SetRandomSeed(int32 InSeed);
    void OnActorBeginOverlap(class UPrimitiveComponent* pOverlappedComponent, class AActor* pOtherActor, class UPrimitiveComponent* pOtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);
    class UExtAkComponent* GetPrimaryAkEmitter();
}; // Size: 0x280

class IAIAudibleInterface : public IInterface
{

    bool ShouldUpdateTriton(FAIAudioInfo audibleActorInfo);
    class UExtAkComponent* GetAIAudibleAkComponent();
    void DoServerReportActiveNoiseEvents();
}; // Size: 0x28

class IAICharacterLink : public IInterface
{
}; // Size: 0x28

class IAssetLoadInterface : public IInterface
{
}; // Size: 0x28

class IAuraIndicatorInterface : public IInterface
{
}; // Size: 0x28

class IChargeableWeaponInterface : public IInterface
{

    bool NeedsCharging();
    bool IsPoweringUp();
    bool IsPowered();
    bool IsChargingUp();
    float GetTimeUntilPowered();
    float GetBaseTimeUntilPowered();
    void DoServerUpdateTimeUntilPowered(float DeltaSeconds);
    void DoServerUpdateCharge(float DeltaSeconds);
    void DoServerSetTimeUntilPowered(float timeUntilPowered);
    void DoServerSetPowered(bool bPowered);
}; // Size: 0x28

class IDamageSourceInterface : public IInterface
{

    EWeaponTypeEnum GetDamageSourceWeaponType();
}; // Size: 0x28

class IDamageSourceOwnerInterface : public IInterface
{
}; // Size: 0x28

class IEvilAttackableObject : public IInterface
{
}; // Size: 0x28

class IEvilSpectralTargetInterface : public IInterface
{
}; // Size: 0x28

class IFrontEndEventsInterface : public IInterface
{

    void SetGoToSKUPurchaseSequenceOnBeginPlay();
    void OnSKUPurchased();
    void OnFrontEndMoviePreviewSpawned();
    void OnFrontEndCharacterSpawned(ECharacterType CharacterType);
    void OnDeactivateStoreDiorama();
    void OnCustomizeDuckLights(bool bDuck, float Duration);
    void OnCustomizeCharacterSpawned(bool bLightingChange);
    void OnActivateStoreDiorama();
}; // Size: 0x28

class IInGameEventsInterface : public IInterface
{

    void OnTVIntroStageBegun();
    void OnTeenResurrected(class ATPChar* pResurrectedTPChar);
    void OnTeenKnockdown(class ATPChar* pTPChar);
    void OnTeenDeath(class ATPChar* pDeadTPChar);
    void OnStartupStageBegun();
    void OnHuntStageBegun();
    void OnEvilWounded(class AFPChar* pEvilFPChar, EDamageType DamageType);
    void OnEvilDamaged(class AFPChar* pEvilFPChar, EDamageType DamageType);
    void OnEvilBecomeStunned(class AFPChar* pEvilFPChar, EDamageType DamageType);
    void OnEvilBecomeIncorporeal(class AFPChar* pEvilFPChar);
    void OnEvilBecomeCorporeal(class AFPChar* pEvilFPChar);
    void OnEndGameStageBegun();
}; // Size: 0x28

class INavWidgetInterface : public IInterface
{
}; // Size: 0x28

class IPatrollableObjectInterface : public IInterface
{
}; // Size: 0x28

class IPrerequisiteChecker : public IInterface
{

    void OnPrerequisiteCheckCompleted();
    bool MaybeAddPrerequisiteToCheck(FGrantable grantableId);
    bool HasUnsatisfiedPrerequisites();
}; // Size: 0x28

class IResonanceNiagaraProvider : public IInterface
{

    class UNiagaraSystem* GetResonanceNiagaraSys();
}; // Size: 0x28

class ISkinnableActorInterface : public IInterface
{

    void SetSkin(class UItemDataAsset* pSkin);
    class UItemDataAsset* GetSkin();
    void ApplySkin();
}; // Size: 0x28

class IStateWidgetInterface : public IInterface
{
}; // Size: 0x28

class UAITask_EvilUseAbility : public UAITask
{
    FAITask_EvilUseAbilityOnAbilityFinished OnAbilityFinished;                        // 0x0090 (size: 0x10)
    void GenericGameplayTaskDelegate();
    FAITask_EvilUseAbilityOnAbilityFailed OnAbilityFailed;                            // 0x00A0 (size: 0x10)
    void GenericGameplayTaskDelegate();

    class UAITask_EvilUseAbility* EvilUseAbility(class AAIController* pController, class AFPChar* pEvil, uint8 abilityIndex, float postCastingDuration);
}; // Size: 0xB0

class UAITask_HolyStaffHeal : public UAITask
{
    class ATPChar* mpTPCharOwner;                                                     // 0x0078 (size: 0x8)
    class AHolyStaffWeapon* mpHolyStaff;                                              // 0x0080 (size: 0x8)
    class ATPChar* mpBestInjuredCandidate;                                            // 0x0088 (size: 0x8)
    FAITask_HolyStaffHealOnTaskSucceeded OnTaskSucceeded;                             // 0x0090 (size: 0x10)
    void HolyStaffHealingTaskDelegate();
    FAITask_HolyStaffHealOnTaskFailed OnTaskFailed;                                   // 0x00A0 (size: 0x10)
    void HolyStaffHealingTaskDelegate();

    class UAITask_HolyStaffHeal* HolyStaffHealTarget(class AAIController* pController, class ATPChar* pTPChar, class AHolyStaffWeapon* pHolyStaffWeapon, class ATPChar* pTargetChar);
    class UAITask_HolyStaffHeal* HolyStaffHealSelf(class AAIController* pController, class ATPChar* pTPChar, class AHolyStaffWeapon* pHolyStaffWeapon);
    void HolyStaffHealingTaskDelegate__DelegateSignature();
}; // Size: 0xB0

class UAITask_MoveToSimulateInput : public UAITask
{
    class ABaseChar* mpControlledBaseChar;                                            // 0x0080 (size: 0x8)
    FAITask_MoveToSimulateInputOnRequestFailed OnRequestFailed;                       // 0x00A0 (size: 0x10)
    void GenericGameplayTaskDelegate();
    FAITask_MoveToSimulateInputOnMoveFinished OnMoveFinished;                         // 0x00B0 (size: 0x10)
    void GenericGameplayTaskDelegate();

    class UAITask_MoveToSimulateInput* AIMoveToSimulateInput(class AAIController* Controller, const FVector& inGoalLocation, float acceptableRadius, bool bReachTestIncludesGoalRadius, bool bDrawDirectionDebug);
}; // Size: 0xC0

class UAITask_RCCopterAttack : public UAITask
{
    class ATPChar* mpTargetCharacter;                                                 // 0x0078 (size: 0x8)
    class ARCCopter* mpControlledCopter;                                              // 0x0080 (size: 0x8)
    class ATPChar* mControlledChar;                                                   // 0x0088 (size: 0x8)
    FAITask_RCCopterAttackOnCopterAttackCompleted onCopterAttackCompleted;            // 0x0090 (size: 0x10)
    void OnCopterAttackCompleted(ETeenWeaponAttackFinishedState teenWeaponAttackFinishedState);

    class UAITask_RCCopterAttack* RCCopterAttack(class AAIController* Controller, class ATPChar* targetCharacter, float attackCancelDelay);
}; // Size: 0xA0

class UAITask_TeenUseEnergyPoint : public UAITask
{
    TWeakObjectPtr<class APointBase> mpPointBase;                                     // 0x0070 (size: 0x8)
    TWeakObjectPtr<class ATPChar> mpTPChar;                                           // 0x0078 (size: 0x8)
    FAITask_TeenUseEnergyPointOnTaskSucceeded OnTaskSucceeded;                        // 0x0090 (size: 0x10)
    void GenericGameplayTaskDelegate();
    FAITask_TeenUseEnergyPointOnTaskFailed OnTaskFailed;                              // 0x00A0 (size: 0x10)
    void GenericGameplayTaskDelegate();

    class UAITask_TeenUseEnergyPoint* TeenUseEnergyPoint(class AAIController* pController, class ATPChar* pControlledTPChar, class APointBase* pTargetPointBase);
}; // Size: 0xB0

class UAITask_TeenWeaponAttack : public UAITask
{
    class ATPChar* mTargetCharacter;                                                  // 0x0088 (size: 0x8)
    class ATPChar* mControlledTPChar;                                                 // 0x0090 (size: 0x8)
    class AAIController* AIController;                                                // 0x0098 (size: 0x8)
    class AWeaponBase* mEquippedWeapon;                                               // 0x00A0 (size: 0x8)
    FAITask_TeenWeaponAttackTeenWeaponAttackCompleted teenWeaponAttackCompleted;      // 0x00B0 (size: 0x10)
    void TeenWeaponAttackCompleted(ETeenWeaponAttackFinishedState teenWeaponAttackFinishedState);

    class UAITask_TeenWeaponAttack* TeenWeaponAttack(class AAIController* pController, class ATPChar* pTargetCharacter, float attackCancelDelay, float turningRate, bool bAutoEnergizeWeapon);
    void OnWeaponStateChange(bool isUsing);
    void AISecondaryAttack(bool bVal);
    void AIPrimaryAttack(bool bVal);
}; // Size: 0xC0

class UAITask_UseVaultPoint : public UAITask
{
    TWeakObjectPtr<class AVaultPoint> mpVaultPoint;                                   // 0x0070 (size: 0x8)
    TWeakObjectPtr<class ATPChar> mpTPChar;                                           // 0x0078 (size: 0x8)
    FAITask_UseVaultPointOnTaskSucceeded OnTaskSucceeded;                             // 0x0090 (size: 0x10)
    void GenericGameplayTaskDelegate();
    FAITask_UseVaultPointOnTaskFailed OnTaskFailed;                                   // 0x00A0 (size: 0x10)
    void GenericGameplayTaskDelegate();

    class UAITask_UseVaultPoint* UseVaultPoint(class AAIController* Controller, class ATPChar* pControlledTPChar, class AVaultPoint* pTargetVaultPoint);
}; // Size: 0xB0

class UAccountPortraitWidget : public UMetaWidget
{
    bool ShouldCollapseWhenEmpty;                                                     // 0x0378 (size: 0x1)
    class UButton* mpAccountButton;                                                   // 0x0390 (size: 0x8)
    class UWidgetSwitcher* mpWidgetSwitcher;                                          // 0x0398 (size: 0x8)
    class UCanvasPanel* mpPortraitPanel;                                              // 0x03A0 (size: 0x8)
    class UGridPanel* mpAddPlayerPanel;                                               // 0x03A8 (size: 0x8)
    class UImage* mpAvatarIcon;                                                       // 0x03B0 (size: 0x8)
    class UImage* mpLeaderIcon;                                                       // 0x03B8 (size: 0x8)
    class UBorder* mpPartyMemberBorder;                                               // 0x03C0 (size: 0x8)
    class UImage* mpBorderImage;                                                      // 0x03C8 (size: 0x8)
    class UImage* mpReadyIcon;                                                        // 0x03D0 (size: 0x8)
    class UImage* mpOfflineIcon;                                                      // 0x03D8 (size: 0x8)

    void OnAvatarIconLoaded(class UTexture2D* pTex);
}; // Size: 0x3E0

class UAccountRewardsOverlayWidget : public UUserWidget
{
    class UPlayerAccountPlayerInfoWidget* mpPlayerAccountPlayerInfo;                  // 0x0260 (size: 0x8)
    class UBaseRewardWidget* mpRewardWidget;                                          // 0x0268 (size: 0x8)
    TArray<FDbItemId> mMasteryLevelUpRewards;                                         // 0x0270 (size: 0x10)
    class UWidgetAnimation* mpPlayerInfoPanelIn;                                      // 0x0280 (size: 0x8)
    class UWidgetAnimation* mpPlayerInfoPanelOut;                                     // 0x0288 (size: 0x8)
    class UWidgetAnimation* mpRewardPanelIn;                                          // 0x0290 (size: 0x8)
    class UWidgetAnimation* mpRewardPanelOut;                                         // 0x0298 (size: 0x8)
    class UWidgetAnimation* mpTitlesPanelIn;                                          // 0x02A0 (size: 0x8)
    class UWidgetAnimation* mpTitlesPanelOut;                                         // 0x02A8 (size: 0x8)

}; // Size: 0x2C0

class UAccountWidget : public UUserWidget
{
    class UImage* mpProfileImage;                                                     // 0x0260 (size: 0x8)
    class UTextBlock* mpProfileName;                                                  // 0x0268 (size: 0x8)
    class UTextBlock* mpFanPointsText;                                                // 0x0270 (size: 0x8)

}; // Size: 0x278

class UActionButton : public UUserWidget
{
    EGameActionType ButtonActionType;                                                 // 0x0260 (size: 0x1)
    bool UseSecondaryColorTheme;                                                      // 0x0261 (size: 0x1)
    bool UseOverrideColorTheme;                                                       // 0x0262 (size: 0x1)
    FLinearColor OverrideNormalColor;                                                 // 0x0264 (size: 0x10)
    FLinearColor OverrideHoverColor;                                                  // 0x0274 (size: 0x10)
    FLinearColor OverridePressedColor;                                                // 0x0284 (size: 0x10)
    FLinearColor OverrideDisabledColor;                                               // 0x0294 (size: 0x10)
    class UButton* mpActionButton;                                                    // 0x02D0 (size: 0x8)
    class UPlatformImage* mpActionIcon;                                               // 0x02D8 (size: 0x8)
    class UTextBlock* mpActionText;                                                   // 0x02E0 (size: 0x8)

    void OnButtonPressed();
}; // Size: 0x2E8

class UAnalyticsManager : public UObject
{
    class UHttpService* mpHttpService;                                                // 0x0030 (size: 0x8)
    FString mMatchId;                                                                 // 0x0070 (size: 0x10)
    class UEventInfo* mpBatchedEvents;                                                // 0x0080 (size: 0x8)

}; // Size: 0x98

class UAnimNotifyState_AddMovementInput : public UAnimNotifyState
{
    float mSpeedMultiplier;                                                           // 0x0030 (size: 0x4)

}; // Size: 0x38

class UAnimNotifyState_AnimProp : public UAnimNotifyState
{
    TArray<class USkeletalMesh*> PropSkeletalMeshList;                                // 0x0030 (size: 0x10)
    class UAnimationAsset* PropAnimSequence;                                          // 0x0040 (size: 0x8)
    FName PropSocket;                                                                 // 0x0048 (size: 0x8)
    FName SocketToAttach;                                                             // 0x0050 (size: 0x8)
    bool bAddForceOnDetach;                                                           // 0x0058 (size: 0x1)
    float ForceToAdd;                                                                 // 0x005C (size: 0x4)
    FVector ForceVector;                                                              // 0x0060 (size: 0xC)
    TSubclassOf<class AInteractablePropBase> mpInteractablePropBaseClass;             // 0x0070 (size: 0x8)
    class USkeletalMesh* mpSkeletalMeshToSpawn;                                       // 0x0078 (size: 0x8)

    void SpawnInteractablePropAndAddForce(class USkeletalMeshComponent* MeshComp);
    void SpawnAnimProp(class USkeletalMeshComponent* MeshComp);
    class USkeletalMesh* GetRandomSkeletalMesh();
    void CleanAttachedAnimProps(class USkeletalMeshComponent* MeshComp);
}; // Size: 0x80

class UAnimNotifyState_ExtTimedNiagaraEffect : public UAnimNotifyState_TimedNiagaraEffect
{
    FEffectVisibility mEffectVisibility;                                              // 0x0060 (size: 0xB)

}; // Size: 0x70

class UAnimNotifyState_ExtTimedNiagaraEffectAdvanced : public UAnimNotifyState_TimedNiagaraEffectAdvanced
{
    FEffectVisibility mEffectVisibility;                                              // 0x00B0 (size: 0xB)

}; // Size: 0xC0

class UAnimNotifyState_ExtTimedParticleEffect : public UAnimNotifyState_TimedParticleEffect
{
    bool mbHiddenWhenIncorporeal;                                                     // 0x0060 (size: 0x1)
    bool mbIsSpiritWorldOnly;                                                         // 0x0061 (size: 0x1)

}; // Size: 0x68

class UAnimNotifyState_HitWindowNotifyState : public UAnimNotifyState
{
}; // Size: 0x30

class UAnimNotify_CharPrimary_ExtAkEvent : public UAnimNotify
{
    EAkEmitterType mAkEmitterType;                                                    // 0x0038 (size: 0x1)
    class UAkAudioEvent* pAudioEvent;                                                 // 0x0040 (size: 0x8)
    FString mAudioEventName;                                                          // 0x0048 (size: 0x10)
    int32 mCallbackMask;                                                              // 0x0058 (size: 0x4)

}; // Size: 0x60

class UAnimNotify_ExtPlayEffigyEffect : public UAnimNotify_ExtPlayNiagaraEffect
{
}; // Size: 0xA0

class UAnimNotify_ExtPlayNiagaraEffect : public UAnimNotify_PlayNiagaraEffect
{
    bool mbStaticVisibility;                                                          // 0x0090 (size: 0x1)
    FEffectVisibility mEffectVisibility;                                              // 0x0091 (size: 0xB)

}; // Size: 0xA0

class UAnimNotify_ExtPlayParticleEffect : public UAnimNotify_PlayParticleEffect
{
    FEffectVisibility mEffectVisibility;                                              // 0x0090 (size: 0xB)

}; // Size: 0xB0

class UAnimatedSnapNavScrollBox : public UUserWidget
{
    class UNavScrollBox* mpNavScrollBox;                                              // 0x0260 (size: 0x8)
    FVector2D mChildWidgetSize;                                                       // 0x0268 (size: 0x8)
    TArray<class UNavButton*> mNavWidgetList;                                         // 0x0270 (size: 0x10)
    TArray<class USizeBox*> mSizeBoxList;                                             // 0x0280 (size: 0x10)
    float mSpacerSize;                                                                // 0x0290 (size: 0x4)
    int32 mCurrentlySelectedIndex;                                                    // 0x0294 (size: 0x4)
    float mPreviousScrollValue;                                                       // 0x0298 (size: 0x4)
    class USpacer* mpLeftSpacer;                                                      // 0x02A0 (size: 0x8)
    float mSelectedSizeMultiplier;                                                    // 0x02A8 (size: 0x4)
    bool mbForceFreezeTick;                                                           // 0x02AC (size: 0x1)
    bool mbRequiresFirstFrameUpdate;                                                  // 0x02AD (size: 0x1)

    void SetForceFreezeTick(bool bNewValue);
    void ScrollIndexToCenter(int32 Index, bool bAnimated);
    void OnUserScrolled(float Value);
    void OnScrollNavUpPressed();
    void OnScrollNavDownPressed();
    void OnInputAction_ScrollUp(bool bPressed);
    void OnInputAction_ScrollDown(bool bPressed);
    bool IsTickForceFrozen();
    bool HasAnyNavChildren();
    int32 GetMaxIndex();
    class UNavButton* GetDefaultButton();
    int32 GetCurrentlySelectedIndex();
    void ForceFullySelectedIndex(int32 Index);
    void ClearChildren();
    void AddScrollBoxChild(class UWidget* pWidget);
    void AddNavButtonForChild(class UNavButton* pNavButton);
    void AddEndSpacer();
}; // Size: 0x2B0

class UAnimationConfig : public UCustomizationConfigBase
{
    TArray<class UAnimationAsset*> mAnimationAssets;                                  // 0x0090 (size: 0x10)

}; // Size: 0xA0

class UAnnouncementButton : public UUserWidget
{
    FButtonStyle UnselectedStyle;                                                     // 0x0260 (size: 0x278)
    FButtonStyle SelectedStyle;                                                       // 0x04D8 (size: 0x278)
    class UButton* mpButton;                                                          // 0x0750 (size: 0x8)

    void OnButtonPressed();
}; // Size: 0x770

class UAnnouncementOverlayWidget : public UBaseOverlay
{
    TMap<class FString, class TSubclassOf<UAnnouncementWidget>> AnnouncementWidgetsByMetaData; // 0x0280 (size: 0x50)
    TSubclassOf<class UAnnouncementButton> ButtonClass;                               // 0x02D0 (size: 0x8)
    FButtonStyle UnselectedButtonStyle;                                               // 0x02D8 (size: 0x278)
    class UHorizontalBox* mpButtonBox;                                                // 0x0550 (size: 0x8)
    class UWidgetSwitcher* mpWidgetSwitcher;                                          // 0x0558 (size: 0x8)
    class UButton* mpProgressButton;                                                  // 0x0560 (size: 0x8)
    class UButton* mpEscapeButton;                                                    // 0x0568 (size: 0x8)

    void OnProgressPressed();
    void OnEscapePressed();
    void OnButtonPressed(int32 Index);
    void OnActionPressed();
}; // Size: 0x580

class UAnnouncementWidget : public UUserWidget
{
    FString AnnouncementMetaId;                                                       // 0x0260 (size: 0x10)
    ESeasonalEventType seasonalEventType;                                             // 0x0270 (size: 0x1)

}; // Size: 0x278

class UAssetFeatureScreen : public UBaseScreen
{
    class UImage* mpItemIcon;                                                         // 0x02D0 (size: 0x8)
    class UTextBlock* mpItemNameText;                                                 // 0x02D8 (size: 0x8)
    class UTextBlock* mpItemDescriptionText;                                          // 0x02E0 (size: 0x8)
    class UCanvasPanel* mpCostPanel;                                                  // 0x02E8 (size: 0x8)
    class UTextBlock* mpPPCost;                                                       // 0x02F0 (size: 0x8)
    class UTextBlock* mpFPCost;                                                       // 0x02F8 (size: 0x8)
    class UNavButton* mpPurchaseButton;                                               // 0x0300 (size: 0x8)
    EMenuScreen mReturnScreen;                                                        // 0x0308 (size: 0x1)
    class UBaseOverlay* mpReturnOverlay;                                              // 0x0310 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
    void OnPurchasePressed();
}; // Size: 0x318

class UAssetLoadStep : public UPlayerLoadStep
{
}; // Size: 0x40

class UAsyncAssetManager : public UAssetManager
{

    void OnTextureAssetLoaded();
    void OnStaticMeshAssetLoaded();
    void OnSkeletalMeshAssetLoaded();
    class UAsyncAssetManager* GetInstance(class UWorld* pWorld);
}; // Size: 0x4A8

class UAttractScreen : public UBaseScreen
{
    FLinearColor HoverColor;                                                          // 0x02C0 (size: 0x10)
    FLinearColor UnhoverColor;                                                        // 0x02D0 (size: 0x10)
    float FlashTimerOn;                                                               // 0x02E0 (size: 0x4)
    float FlashTimerOff;                                                              // 0x02E4 (size: 0x4)
    class UNavButton* mpPlayButton;                                                   // 0x02F0 (size: 0x8)
    class UNavButton* mpExitButton;                                                   // 0x02F8 (size: 0x8)
    class UImage* mpVideoTexture;                                                     // 0x0300 (size: 0x8)
    class UCanvasPanel* mpInfoPanel;                                                  // 0x0308 (size: 0x8)
    class UTextBlock* mpInfoText;                                                     // 0x0310 (size: 0x8)
    class UTextBlock* mpErrorCodeText;                                                // 0x0318 (size: 0x8)
    class UImage* mpPlayIcon;                                                         // 0x0320 (size: 0x8)
    class UTextBlock* mpPlayText;                                                     // 0x0328 (size: 0x8)
    class UButtonPromptWidget* mpPlayPrompt;                                          // 0x0330 (size: 0x8)
    class UTextBlock* mpExitText;                                                     // 0x0338 (size: 0x8)
    class UCanvasPanel* mpConnectionInfoPanel;                                        // 0x0340 (size: 0x8)
    class URichTextBlock* mpConnectionInfoText;                                       // 0x0348 (size: 0x8)
    class UMediaPlayer* mpMediaPlayer;                                                // 0x0350 (size: 0x8)
    class UMediaTexture* mpMediaTexture;                                              // 0x0358 (size: 0x8)
    class UFileMediaSource* mpVideoSource;                                            // 0x0360 (size: 0x8)

    void ShowPlayButton(bool bShow);
    void ShowExitPrompt();
    void SetInfoText(FText Text);
    void SetErrorCode(FText Text);
    void SetAttemptAutoLogin(bool bSet);
    void PopulateConnectionInfo();
    void OnRetryLoginConfirm();
    void OnPlayPressed();
    void OnExitPressed();
    void InitialPlatformSetup();
    void HandlePlayerMediaEventOpenFailed(FString URL);
    void HandlePlayerMediaEventOpened(FString URL);
    void HandleOnMediaPlaybackResumed();
    void DoExitGame();
    void BeginAsyncLogin();
    void AttemptRelog();
}; // Size: 0x378

class UAudioTab : public UBaseTab
{
    class UNavScrollBox* mpNavScrollBox;                                              // 0x0290 (size: 0x8)
    class UOptionSliderUserButton* mpMasterVolume;                                    // 0x0298 (size: 0x8)
    class UOptionSliderUserButton* mpMenuMusicVolume;                                 // 0x02A0 (size: 0x8)
    class UOptionSliderUserButton* mpGameplayVolume;                                  // 0x02A8 (size: 0x8)
    class UOptionSliderUserButton* mpPingVolume;                                      // 0x02B0 (size: 0x8)
    class UOptionToggleUserButton* mpMuteGameIfUnfocused;                             // 0x02B8 (size: 0x8)
    class UOptionSelectorUserButton* mpAudioOutputDevice;                             // 0x02C0 (size: 0x8)
    class UOptionToggleUserButton* mp3DHeadphones;                                    // 0x02C8 (size: 0x8)
    class UOptionToggleUserButton* mpVoiceChatToggle;                                 // 0x02D0 (size: 0x8)
    class UOptionSelectorUserButton* mpVoiceChatMode;                                 // 0x02D8 (size: 0x8)
    class UOptionSelectorUserButton* mpVoiceChatChannel;                              // 0x02E0 (size: 0x8)
    class UOptionSliderUserButton* mpVoiceChatVolume;                                 // 0x02E8 (size: 0x8)
    class UOptionSliderUserButton* mpVoiceChatMicVolume;                              // 0x02F0 (size: 0x8)
    class UOptionToggleUserButton* mpMuteVoiceChatIfUnfocused;                        // 0x02F8 (size: 0x8)
    class UOptionSelectorUserButton* mpVoiceChatInputDevice;                          // 0x0300 (size: 0x8)
    class UOptionSelectorUserButton* mpVoiceChatOutputDevice;                         // 0x0308 (size: 0x8)
    class UOptionSingleUserButton* mpRestoreDefaultsButton;                           // 0x0310 (size: 0x8)
    FString mDefaultAudioOutputDevice;                                                // 0x0318 (size: 0x10)
    int32 mDefaultAudioOutputDeviceIndex;                                             // 0x0328 (size: 0x4)
    FString mDefaultVoiceChatInputDevice;                                             // 0x0330 (size: 0x10)
    int32 mDefaultVoiceChatInputDeviceIndex;                                          // 0x0340 (size: 0x4)
    FString mDefaultVoiceChatOutputDevice;                                            // 0x0348 (size: 0x10)
    int32 mDefaultVoiceChatOutputDeviceIndex;                                         // 0x0358 (size: 0x4)

    void OnResetDefaultsPressed();
    void OnResetDefaultsConfirmed();
}; // Size: 0x360

class UAugmentManager : public USceneComponent
{
    TArray<FAugmentSlot> mSlots;                                                      // 0x01F8 (size: 0x10)
    TArray<FDbItemId> mEquippedAugmentItemIDs;                                        // 0x0208 (size: 0x10)
    bool mbAllowInvalidPerkLoadouts;                                                  // 0x0218 (size: 0x1)

    void Update(float DeltaTime);
    void ServerDebugAssignAugment(int32 augmentIndex, EAugmentType augmentType, int32 Tier);
    TArray<FDbItemId> PopulateEquippedAugmentsForGoodCharacter(class ULobbyManager* pLobbyManager, class UCharacterLoadout* pCharacterLoadout, ECharacterType CharType);
    TArray<FDbItemId> PopulateEquippedAugmentsForEvilCharacter(class ULobbyManager* pLobbyManager, class UCharacterLoadout* pCharacterLoadout, ECharacterType CharType);
    TArray<FDbItemId> PopulateEquippedAugmentsForCharacterFromLoadout(ECharacterType CharType);
    bool IsAugmentOnCooldown(int32 augmentIndex);
    bool IsAugmentFullyCharged(int32 augmentIndex);
    bool IsAugmentActive(int32 augmentIndex);
    bool HasAugment(EAugmentType augmentType, int32 minTier, bool bReqActive);
    class ATPChar* GetOwningTPChar();
    int32 GetNumberOfPerkTypeOfTierEquipped(class UWorld* pWorld, bool bIsGoodCharacter, const TArray<FDbItemId>& augmentDbItems, EPerkAffinityType affinityType, int32 Tier);
    FMatchEvent GetMutationMatchEventForEvilAbilityType(EEvilAbilityType abilityType);
    FMatchEvent GetMatchEventForAugmentType(class UWorld* pWorld, EAugmentType augmentType, int32 augmentTier);
    TArray<FDbItemId> GetEquippedAugmentItemIDs();
    void GetClientAugmentDbItems(class UWorld* pWorld, ECharacterType CharType, TArray<FDbItemId>& outAugmentDbItems);
    FText GetAugmentTypeFriendlyName(EAugmentType augmentType);
    EAugmentType GetAugmentType(int32 augmentIndex);
    int32 GetAugmentTokens(int32 augmentIndex);
    int32 GetAugmentTier(int32 augmentIndex);
    FAugmentSlot GetAugmentSlot(int32 augmentIndex);
    int32 GetAugmentIndex(EAugmentType augmentType);
    float GetAugmentCurrentChargeTime(int32 augmentIndex);
    int32 GetAugmentCount();
    float GetAugmentCooldownRemaining(int32 augmentIndex);
    float GetAugmentCooldownFactor(int32 augmentIndex);
    float GetAugmentCooldown(int32 augmentIndex);
    float GetAugmentChargeTimeFactor(int32 augmentIndex);
    float GetAugmentChargeTime(int32 augmentIndex);
    void GetAllMatchEventsForAugmentDbItems(class UWorld* pWorld, ECharacterType CharType, const TArray<FDbItemId>& augmentDbItems, TArray<FMatchEvent>& outMatchEventsArray);
    void DoServerUpdateCooldowns(float DeltaTime);
    void DoServerUpdateChargeTime(float DeltaTime);
    void DoServerUpdateActive(float DeltaTime);
    void DoServerSetAugmentTokens(int32 augmentIndex, int32 tokens);
    void DoServerSetAugmentTier(int32 augmentIndex, int32 Tier);
    void DoServerSetAugmentCurrentChargeTime(int32 augmentIndex, float currentChargeTime);
    void DoServerSetAugmentCooldownRemaining(int32 augmentIndex, float cooldownRemaining);
    void DoServerSetAugmentCooldown(int32 augmentIndex, float cooldown);
    void DoServerSetAugmentChargeTime(int32 augmentIndex, float chargeTime);
    void DoServerSetAugmentActive(int32 augmentIndex, bool bActive);
    void DoServerResetCooldown(int32 augmentIndex);
    void DoServerOnAugmentSet(int32 augmentIndex, EAugmentType augmentType, int32 Tier);
    void DoServerInitFromLoadout();
    bool DoServerCheckAugmentAllowed(EAugmentType augmentType);
    void DoServerAssignAugment(int32 augmentIndex, EAugmentType augmentType, int32 Tier);
    void DoServerAddEquippedAugmentID(FDbItemId ItemId);
    void DoServerActivateCooldown(int32 augmentIndex);
    bool DoesAllowInvalidPerkLoadouts();
}; // Size: 0x220

class UAuraManager : public UWorldSubsystem
{
    float mTime;                                                                      // 0x0058 (size: 0x4)
    class UTexture2D* mpStencilPropertyTexture;                                       // 0x0060 (size: 0x8)
    bool mbStencilIDsChanged;                                                         // 0x0068 (size: 0x1)
    int32 mMaxID;                                                                     // 0x006C (size: 0x4)
    TMap<FName, int32> mStencilIDNames;                                               // 0x00C0 (size: 0x50)
    TArray<FStencilProperties> mStencilIDProperties;                                  // 0x0110 (size: 0x10)
    TArray<FStencilProperties> mStencilIDFadeToProperties;                            // 0x0120 (size: 0x10)
    TArray<FStencilProperties> mDebugStencilIDProperties;                             // 0x0130 (size: 0x10)
    TArray<bool> mDebugStencilIndices;                                                // 0x0140 (size: 0x10)
    TMap<class FName, class FAuraInstanceObject> mAllAuraInstanceObjects;             // 0x0150 (size: 0x50)

    void UpdateStencilPropertyTexture(float DeltaTime);
    bool UpdateStencilEnabled(const FName& Name, bool bEnabled);
    bool UpdateStencilEffectAlpha(const FName& Name, float Alpha);
    bool UpdateStencilEBoost(const FName& Name, const FColor& boost);
    bool UpdateStencilColour(const FName& Name, const FColor& Color);
    void UpdateComponentStencilIDs();
    void UpdateAurasForCharacter(class ABaseChar* pChar);
    bool ShouldShowForView(int32 targetMask, int32 viewMask, const FAuraInstanceObject& Properties);
    void SetStencilProperties(const FName& Name, const FStencilProperties& Properties, bool bFadeIn, float Seconds, bool bOverrideHighlight, const FStencilProperties& highlightOverrideProperties);
    void SetRenderCustomDepth(const FName& Name, bool bEnabled);
    void SetDebugStencilIndex(int32 Index, bool bValue);
    void ResetStencilGroups();
    void RemoveStencilGroup(const FName& Name);
    void RemoveComponentFromStencilGroup(class UPrimitiveComponent* pPrimitive, const FName& Name);
    bool IsDebuggingStencilIndex(int32 Index);
    void InitializeDynamicTexture();
    EAuraViewFlags GetViewMaskFromTargetBaseChar(class ATPChar* pAskingTPChar);
    EAuraViewFlags GetViewMaskFromLocallyViewedBaseChar();
    EAuraViewFlags GetViewMaskForBaseChar(class ABaseChar* pAskingTPChar);
    bool GetStencilProperties(const FName& Name, FStencilProperties& outProperties);
    int32 GetStencilId(const FName& Name);
    class UTexture2D* GetPropertiesTexture();
    bool CreateStencilGroupWithComponent(class UPrimitiveComponent* pPrimitive, const FName& Name);
    bool CreateStencilGroup(const FName& Name);
    bool AddComponentToStencilGroup(class UPrimitiveComponent* pPrimitive, const FName& Name);
    void AddAuraInstanceObject(FName auraName, FAuraInstanceObject Obj);
}; // Size: 0x1D0

class UAvatarIconItemTileWidget : public UBaseItemTile
{
}; // Size: 0x3D0

class UBPFL_AI : public UBlueprintFunctionLibrary
{

    EWeaponThreatLevel GetWeaponThreatLevel(class AWeaponBase* pWeapon);
    class AActor* GetWeaponDamageDealer(class AWeaponBase* pWeapon);
    bool GetLocationOnNavPath(FVector& TargetLocation, const class UNavigationPath* pNavigationPath, float Alpha);
    void GetBestPatrollableObject(class AActor* pRequestActor, const TArray<class AActor*>& inPatrollableActors, TArray<class AActor*>& outSortedPatrollableActors, float scoreBias, bool bDebug);
}; // Size: 0x28

class UBPFL_Props : public UBlueprintFunctionLibrary
{

    bool WeaponNeedsEnergizing(class AWeaponBase* pWeapon);
    bool ReconstructSimpleCollisionComponent(class AActor* pOuter, const FName& shapeComponentPropertyName, const FCustomizeSimpleCollisionShape& initShapeSpecs);
    bool IsNavigable(class UWorld* pWorld, const class AController* pController, const FVector Location);
    TArray<class AStationBase*> GetStationsByDamageType(class UObject* WorldContextObj, EDamageType DamageType);
    TArray<class AStationBase*> GetStations(class UObject* WorldContextObj);
    TArray<class AHidePoint*> GetHidePoints(class UObject* WorldContextObj);
    TArray<class AEnergyPoint*> GetEnergyPoints(class UObject* WorldContextObj);
    TArray<class AActor*> GetClosestActors(TArray<class AActor*> Actors, class AActor* pToActor, int32 bestN, bool bClosest);
    int32 GetBiggestFloatInArray(const TArray<float>& inFloats, bool bFindSmallest);
    TArray<EDamageType> GetAvailableDamageType(class UObject* WorldContextObj);
    class AActor* FindClosestActorToViewportCentre(const TArray<class AActor*>& towardsActors, const class AActor* pFromActor, float maxAngle);
    bool DoesCollisionHaveSameSpecs(const FCustomizeSimpleCollisionShape& inShapeConstructionSpecs, const class UShapeComponent* pShapeComponent);
    bool CollisionHasSameShape(const FCustomizeSimpleCollisionShape& inShapeConstructionSpecs, const class UShapeComponent* pShapeComponent);
}; // Size: 0x28

class UBTComposite_UnStoppableSequence : public UBTCompositeNode
{
}; // Size: 0x90

class UBTDecorator_ActorsDistanceCheck : public UBTDecorator
{
    bool bCheckRootComponent;                                                         // 0x0068 (size: 0x1)
    float mMaxDistance;                                                               // 0x006C (size: 0x4)
    FBlackboardKeySelector ActorAKey;                                                 // 0x0070 (size: 0x28)
    FBlackboardKeySelector ActorBKey;                                                 // 0x0098 (size: 0x28)
    float mTickInterval;                                                              // 0x00C0 (size: 0x4)

}; // Size: 0xC8

class UBTDecorator_AnyWeaponTypes : public UBTDecorator_TeenCharacterBase
{
    TArray<EWeaponTypeEnum> mWeaponTypeEnums;                                         // 0x0090 (size: 0x10)

}; // Size: 0xA0

class UBTDecorator_CanChargeHolyStaff : public UBTDecorator_TeenCharacterBase
{
}; // Size: 0x90

class UBTDecorator_CanChargeStaticShield : public UBTDecorator_TeenCharacterBase
{
}; // Size: 0x90

class UBTDecorator_CanTeenAttack : public UBTDecorator
{
    bool mbCheckPerFrame;                                                             // 0x0068 (size: 0x1)
    bool mbWeaponRequired;                                                            // 0x0069 (size: 0x1)
    FBlackboardKeySelector mTeenKeySelector;                                          // 0x0070 (size: 0x28)

}; // Size: 0x98

class UBTDecorator_CanTeenUseEnergyPoint : public UBTDecorator_TeenCharacterBase
{
    float mbCheckInterval;                                                            // 0x0090 (size: 0x4)

}; // Size: 0x98

class UBTDecorator_EvilCanUseAbility : public UBTDecorator
{
    FBlackboardKeySelector mEvilSelf;                                                 // 0x0068 (size: 0x28)
    uint8 mAbilityKeyIndex;                                                           // 0x0090 (size: 0x1)

}; // Size: 0x98

class UBTDecorator_IsEvilDamageable : public UBTDecorator
{
    FBlackboardKeySelector mEvilCharSelector;                                         // 0x0068 (size: 0x28)

}; // Size: 0x90

class UBTDecorator_IsTargetInjured : public UBTDecorator
{
    FBlackboardKeySelector mTargetActor;                                              // 0x0068 (size: 0x28)

}; // Size: 0x90

class UBTDecorator_IsWeaponReadyToUse : public UBTDecorator_TeenCharacterBase
{
}; // Size: 0x90

class UBTDecorator_TeenCharacterBase : public UBTDecorator
{
    FBlackboardKeySelector mTeenCharSelector;                                         // 0x0068 (size: 0x28)

}; // Size: 0x90

class UBTDecorator_ValidWeaponType : public UBTDecorator_TeenCharacterBase
{
    EWeaponTypeEnum mWeaponTypeEnum;                                                  // 0x0090 (size: 0x1)

}; // Size: 0x98

class UBTService_AddRecentVisitTagOnCeaseRelevant : public UBTService
{
    FBlackboardKeySelector mTargetActorKey;                                           // 0x0070 (size: 0x28)

}; // Size: 0x98

class UBTService_AnyPerceivedTargets : public UBTService
{
    uint8 mbExcludeProne;                                                             // 0x0070 (size: 0x1)
    uint8 mbExcludeDeath;                                                             // 0x0070 (size: 0x1)
    EFaction mFactionToPerceieve;                                                     // 0x0071 (size: 0x1)
    FBlackboardKeySelector mCanSeeTargetKey;                                          // 0x0078 (size: 0x28)
    TArray<class TSubclassOf<UAISense>> mSensesToUse;                                 // 0x00A0 (size: 0x10)

}; // Size: 0xB0

class UBTService_CheckAllowedToHeal : public UBTService
{
    FBlackboardKeySelector mAllowedToHealKey;                                         // 0x0070 (size: 0x28)

}; // Size: 0x98

class UBTService_CheckHumanPlayersArmed : public UBTService
{
    FBlackboardKeySelector mOutHumanPlayersArmed;                                     // 0x0070 (size: 0x28)

}; // Size: 0x98

class UBTService_DetermineBestTarget : public UBTService
{
    uint8 mbExcludeProne;                                                             // 0x0070 (size: 0x1)
    uint8 mbExcludeDeath;                                                             // 0x0070 (size: 0x1)
    EFaction mFactionToTarget;                                                        // 0x0071 (size: 0x1)
    TArray<class TSubclassOf<UAISense>> mSensesToUse;                                 // 0x0078 (size: 0x10)
    FBlackboardKeySelector mBestTargetKey;                                            // 0x0088 (size: 0x28)
    FBlackboardKeySelector mOutBestTargetLocation;                                    // 0x00B0 (size: 0x28)
    FBlackboardKeySelector mOutDistanceToTarget;                                      // 0x00D8 (size: 0x28)

}; // Size: 0x100

class UBTService_FindVulnerableTarget : public UBTService
{
    FBlackboardKeySelector mIsArmored;                                                // 0x0070 (size: 0x28)
    FBlackboardKeySelector mInOutVulnerableTarget;                                    // 0x0098 (size: 0x28)
    EAIDifficultyLevel mEngageAnyoneMaxDifficultyLevel;                               // 0x00C0 (size: 0x1)

    int32 GetTargetScore(class AUtilityEvilController* pEvilController, class ATPChar* pTeen, bool bAlreadyTargetingTeen);
    class AActor* GetBestVulnerableTarget(class AUtilityEvilController* pEvilController, class AActor* pCurrentTarget, TArray<class AActor*>& potentialTargets);
}; // Size: 0xC8

class UBTService_ForgetSenses : public UBTService
{
}; // Size: 0x70

class UBTService_GetChasedTarget : public UBTService
{
    FBlackboardKeySelector mChasedTargetKey;                                          // 0x0070 (size: 0x28)

}; // Size: 0x98

class UBTService_GetCurrentShard : public UBTService
{
    FBlackboardKeySelector mShardReference;                                           // 0x0070 (size: 0x28)

}; // Size: 0x98

class UBTService_GetTargetState : public UBTService
{
    FBlackboardKeySelector mTargetKey;                                                // 0x0070 (size: 0x28)
    FTPMovementData mMovementData;                                                    // 0x0098 (size: 0x94)
    FTPCharStateData mCharStateData;                                                  // 0x0130 (size: 0x68)
    FTPWeaponStateData mWeaponStateData;                                              // 0x0198 (size: 0x28)

}; // Size: 0x1C0

class UBTService_IsCharInWeaponRange : public UBTService
{
    FBlackboardKeySelector mOutIsWeaponInRange;                                       // 0x0070 (size: 0x28)
    FBlackboardKeySelector mCharWithWeapon;                                           // 0x0098 (size: 0x28)
    FBlackboardKeySelector mTargetChar;                                               // 0x00C0 (size: 0x28)

}; // Size: 0xE8

class UBTService_ReleaseRemoteWeaponOnCeaseRelevant : public UBTService
{
    bool bForceDestroy;                                                               // 0x0070 (size: 0x1)
    FBlackboardKeySelector mSelfCharKey;                                              // 0x0078 (size: 0x28)

}; // Size: 0xA0

class UBTService_ShouldDiscardWeapon : public UBTService
{
    FBlackboardKeySelector mSelfChar;                                                 // 0x0070 (size: 0x28)
    FBlackboardKeySelector mShouldDiscardWeapon;                                      // 0x0098 (size: 0x28)

}; // Size: 0xC0

class UBTService_SyncTeenFocus : public UBTService
{
    FBlackboardKeySelector mTargetActorKeySelector;                                   // 0x0070 (size: 0x28)
    FBlackboardKeySelector mOwnerTPChar;                                              // 0x0098 (size: 0x28)

}; // Size: 0xD8

class UBTService_TagMultiplier : public UBTService
{
    FGameplayTag mValueTag;                                                           // 0x0070 (size: 0x8)
    FValueMultiplier mValueMultiplier;                                                // 0x0078 (size: 0xC)

    class ATPChar* GetTPCharOwner(class UBehaviorTreeComponent* OwnerComp);
    float CalculateScore(class UUtilityBTComponent* OwnerComp, float DeltaSeconds);
}; // Size: 0x88

class UBTService_TeenCrouch : public UBTService
{
    FBlackboardKeySelector mTeenKey;                                                  // 0x0070 (size: 0x28)

}; // Size: 0x98

class UBTService_TeenOwnerBase : public UBTService
{
    FBlackboardKeySelector mOwnerTPChar;                                              // 0x0070 (size: 0x28)

}; // Size: 0x98

class UBTService_UpdateAIDiffOptions : public UBTService
{
    FBlackboardKeySelector mDifficultyLevel;                                          // 0x0070 (size: 0x28)
    FBlackboardKeySelector mDifficultyKillSwitchEnabled;                              // 0x0098 (size: 0x28)
    FBlackboardKeySelector mBeginnerMatch;                                            // 0x00C0 (size: 0x28)

}; // Size: 0xE8

class UBTService_UpdateAlerted : public UBTService
{
    FBlackboardKeySelector mOutAlerted;                                               // 0x0070 (size: 0x28)
    FBlackboardKeySelector mShouldHowl;                                               // 0x0098 (size: 0x28)
    FBlackboardKeySelector mBeingDamaged;                                             // 0x00C0 (size: 0x28)
    FBlackboardKeySelector mNumSeenGoodCharacters;                                    // 0x00E8 (size: 0x28)
    FBlackboardKeySelector mNumHeardGoodCharacters;                                   // 0x0110 (size: 0x28)

}; // Size: 0x138

class UBTService_UpdateChaseState : public UBTService
{
    FBlackboardKeySelector mSelfKey;                                                  // 0x0070 (size: 0x28)
    FBlackboardKeySelector mChaseKey;                                                 // 0x0098 (size: 0x28)
    FBlackboardKeySelector mUnArmedChaseDurationKey;                                  // 0x00C0 (size: 0x28)
    FBlackboardKeySelector mArmedChaseDurationKey;                                    // 0x00E8 (size: 0x28)

}; // Size: 0x110

class UBTService_UpdateClosestCraftPoint : public UBTService
{
    FBlackboardKeySelector mTPCharKey;                                                // 0x0070 (size: 0x28)
    FBlackboardKeySelector mDesiredWeaponTypeKey;                                     // 0x0098 (size: 0x28)
    FBlackboardKeySelector mAvailableCraftTableKey;                                   // 0x00C0 (size: 0x28)
    FBlackboardKeySelector mAvailableCraftPointKey;                                   // 0x00E8 (size: 0x28)

}; // Size: 0x110

class UBTService_UpdateClosestEnergyPoint : public UBTService
{
    FBlackboardKeySelector mEnergyPointKey;                                           // 0x0070 (size: 0x28)

}; // Size: 0x98

class UBTService_UpdateClosestHidePoint : public UBTService
{
    FBlackboardKeySelector mHidePointKey;                                             // 0x0070 (size: 0x28)

}; // Size: 0x98

class UBTService_UpdateClosestNearbyTarget : public UBTService
{
    FBlackboardKeySelector mOutClosestNearbyTarget;                                   // 0x0070 (size: 0x28)
    float mMaxNearbyDistance;                                                         // 0x0098 (size: 0x4)

}; // Size: 0xA0

class UBTService_UpdateDistanceToTargets : public UBTService
{
    FBlackboardKeySelector mSourceLocationOrActor;                                    // 0x0070 (size: 0x28)
    FBlackboardKeySelector mTargetActor;                                              // 0x0098 (size: 0x28)
    FBlackboardKeySelector mOutActorDistance;                                         // 0x00C0 (size: 0x28)
    FBlackboardKeySelector mTargetLocation;                                           // 0x00E8 (size: 0x28)
    FBlackboardKeySelector mOutLocationDistance;                                      // 0x0110 (size: 0x28)

}; // Size: 0x138

class UBTService_UpdateDollActions : public UBTService
{
    FBlackboardKeySelector mOutLookLocation;                                          // 0x0070 (size: 0x28)
    FBlackboardKeySelector mOutShouldPlaceDoll;                                       // 0x0098 (size: 0x28)
    FBlackboardKeySelector mOutShouldPossessDoll;                                     // 0x00C0 (size: 0x28)
    FBlackboardKeySelector mOutShouldTeleport;                                        // 0x00E8 (size: 0x28)
    FBlackboardKeySelector mOutShouldDismissDoll;                                     // 0x0110 (size: 0x28)
    FBlackboardKeySelector mOutIsAlerted;                                             // 0x0138 (size: 0x28)
    FBlackboardKeySelector mOutShouldOverrideLookLocation;                            // 0x0160 (size: 0x28)
    float mMinDistanceBetweenDollTraps;                                               // 0x0188 (size: 0x4)
    int32 mNumActiveDamageSourcesBeforeTeleport;                                      // 0x018C (size: 0x4)
    float mDistanceToInvulnerableDamageSourceBeforeTeleport;                          // 0x0190 (size: 0x4)

}; // Size: 0x198

class UBTService_UpdateEradicatorMode : public UBTService
{
    FBlackboardKeySelector mTargetActor;                                              // 0x0070 (size: 0x28)
    FBlackboardKeySelector mTargetActorDistance;                                      // 0x0098 (size: 0x28)
    FBlackboardKeySelector mTargetLocationDistance;                                   // 0x00C0 (size: 0x28)
    FBlackboardKeySelector mNumInvulnerableDamageSources;                             // 0x00E8 (size: 0x28)
    FBlackboardKeySelector mShouldShock;                                              // 0x0110 (size: 0x28)
    float mMinDistanceBeforeVehicle;                                                  // 0x0138 (size: 0x4)
    FBlackboardKeySelector mOutShouldChangeMode;                                      // 0x0140 (size: 0x28)

}; // Size: 0x168

class UBTService_UpdateEvilInfo : public UBTService
{
    FBlackboardKeySelector mOutIsArmored;                                             // 0x0070 (size: 0x28)

}; // Size: 0x98

class UBTService_UpdateEvilSenses : public UBTService
{
    FBlackboardKeySelector mInOutCurrentTargetActor;                                  // 0x0070 (size: 0x28)
    FBlackboardKeySelector mOutClosestNoiseLocation;                                  // 0x0098 (size: 0x28)
    FBlackboardKeySelector mOutIsCurrentlyHearingNoise;                               // 0x00C0 (size: 0x28)
    FBlackboardKeySelector mOutIsSensingDanger;                                       // 0x00E8 (size: 0x28)
    FBlackboardKeySelector mOutNumInvulnerableDamageSources;                          // 0x0110 (size: 0x28)
    FBlackboardKeySelector mOutNumVulnerableTargets;                                  // 0x0138 (size: 0x28)
    FBlackboardKeySelector mOutIsBeingDamaged;                                        // 0x0160 (size: 0x28)
    FBlackboardKeySelector mOutNumSeenGoodCharacters;                                 // 0x0188 (size: 0x28)
    FBlackboardKeySelector mOutNumHeardGoodCharacters;                                // 0x01B0 (size: 0x28)
    FBlackboardKeySelector mOutNumDamageSources;                                      // 0x01D8 (size: 0x28)
    FBlackboardKeySelector mOutTargetHideState;                                       // 0x0200 (size: 0x28)

    class AActor* GetClosestHeardActor(class AUtilityEvilController* pEvilController, TSet<AActor*>& heardActors);
}; // Size: 0x228

class UBTService_UpdateInDanger : public UBTService
{
    FBlackboardKeySelector mInDangerKey;                                              // 0x0070 (size: 0x28)
    FBlackboardKeySelector mTargetKey;                                                // 0x0098 (size: 0x28)
    float SafeDistToTargetForHit;                                                     // 0x00C0 (size: 0x4)

}; // Size: 0xC8

class UBTService_UpdateLookTarget : public UBTService
{
    FBlackboardKeySelector mCurrentTargetActor;                                       // 0x0070 (size: 0x28)
    FBlackboardKeySelector mCurrentTargetLocation;                                    // 0x0098 (size: 0x28)
    FBlackboardKeySelector mOverrideLookLocation;                                     // 0x00C0 (size: 0x28)
    FBlackboardKeySelector mShouldOverrideLookLocation;                               // 0x00E8 (size: 0x28)
    FBlackboardKeySelector mOutIsLookingAtOverrideLocation;                           // 0x0110 (size: 0x28)

}; // Size: 0x138

class UBTService_UpdatePerceivedEvilThreatNum : public UBTService
{
    FBlackboardKeySelector mLinearWeaponNumKey;                                       // 0x0070 (size: 0x28)
    FBlackboardKeySelector mLethalWeaponNumKey;                                       // 0x0098 (size: 0x28)

}; // Size: 0xC0

class UBTService_UpdateShouldArmor : public UBTService
{
    FBlackboardKeySelector mOutShouldArmor;                                           // 0x0070 (size: 0x28)

}; // Size: 0x98

class UBTService_UpdateShouldHowl : public UBTService
{
    FBlackboardKeySelector mOutShouldHowl;                                            // 0x0070 (size: 0x28)
    float mRangeBeforeHowlDecayPerDifficultyLevel;                                    // 0x0098 (size: 0x4)

}; // Size: 0xA0

class UBTService_UpdateShouldShock : public UBTService
{
    FBlackboardKeySelector mTargetActor;                                              // 0x0070 (size: 0x28)
    FBlackboardKeySelector mOutShouldShock;                                           // 0x0098 (size: 0x28)
    float mRangeBeforeShockDecayPerDifficultyLevel;                                   // 0x00C0 (size: 0x4)
    float mMinTimeBetweenShocks;                                                      // 0x00C4 (size: 0x4)

}; // Size: 0xC8

class UBTService_UpdateTargetWeaponInfo : public UBTService
{
    FBlackboardKeySelector mTargetKey;                                                // 0x0070 (size: 0x28)
    FBlackboardKeySelector mWeaponRangeMinKey;                                        // 0x0098 (size: 0x28)
    FBlackboardKeySelector mWeaponRangeMaxKey;                                        // 0x00C0 (size: 0x28)
    FBlackboardKeySelector mWeaponTypeKey;                                            // 0x00E8 (size: 0x28)
    float mMaxDistClamp;                                                              // 0x0110 (size: 0x4)
    float mMaxDifference;                                                             // 0x0114 (size: 0x4)
    float mMinBuffer;                                                                 // 0x0118 (size: 0x4)

}; // Size: 0x120

class UBTService_UpdateVaultPoint : public UBTService
{
    FBlackboardKeySelector mTPCharKey;                                                // 0x0070 (size: 0x28)
    float mSearchingRadius;                                                           // 0x0098 (size: 0x4)
    FBlackboardKeySelector mTargetVaultPointKey;                                      // 0x00A0 (size: 0x28)
    FBlackboardKeySelector mTargetVaultPointLocationKey;                              // 0x00C8 (size: 0x28)
    FBlackboardKeySelector mWantToUseVaultPointKey;                                   // 0x00F0 (size: 0x28)

}; // Size: 0x118

class UBTTask_CheckHidepoint : public UBTTaskNode
{
    FBlackboardKeySelector mTargetKey;                                                // 0x0070 (size: 0x28)

}; // Size: 0x98

class UBTTask_CraftAtStation : public UBTTaskNode
{
    FBlackboardKeySelector mTargetKey;                                                // 0x0070 (size: 0x28)
    FBlackboardKeySelector mInCraftingPoint;                                          // 0x0098 (size: 0x28)

}; // Size: 0xD0

class UBTTask_DiscardWeapon : public UBTTaskNode
{
    FBlackboardKeySelector mSelfChar;                                                 // 0x0070 (size: 0x28)

}; // Size: 0x98

class UBTTask_DismissDoll : public UBTTaskNode
{
}; // Size: 0x70

class UBTTask_EquipWeapon : public UBTTaskNode
{
    float mDelayDuration;                                                             // 0x0070 (size: 0x4)
    EWeaponTypeEnum mWeaponType;                                                      // 0x0074 (size: 0x1)
    FBlackboardKeySelector mTargetCharacterSelector;                                  // 0x0078 (size: 0x28)

}; // Size: 0xA8

class UBTTask_EvilAttack : public UBTTaskNode
{
}; // Size: 0x70

class UBTTask_FindBestPatrollableObject : public UBTTaskNode
{
    bool mbSearchCraftStations;                                                       // 0x0070 (size: 0x1)
    bool mbSearchMedKits;                                                             // 0x0071 (size: 0x1)
    EAIDifficultyLevel mKillWeaponsOnlyMinDifficultyLevel;                            // 0x0072 (size: 0x1)
    FBlackboardKeySelector mOutTargetLocation;                                        // 0x0078 (size: 0x28)
    float mMinTimeBetweenRepatrols;                                                   // 0x00A0 (size: 0x4)
    float mChooseFromTopPercentage;                                                   // 0x00A4 (size: 0x4)

    void SortPatrollableObjects(class AUtilityEvilController* pEvilController, TArray<class AActor*>& inOutPatrollableActors);
}; // Size: 0xA8

class UBTTask_FindClosestNearbyTarget : public UBTTaskNode
{
    FBlackboardKeySelector mOutClosestNearbyTarget;                                   // 0x0070 (size: 0x28)
    float mMaxNearbyDistance;                                                         // 0x0098 (size: 0x4)

}; // Size: 0xA0

class UBTTask_GetActorToLocation : public UBTTaskNode
{
    FBlackboardKeySelector mActorKey;                                                 // 0x0070 (size: 0x28)
    FBlackboardKeySelector mLocationKey;                                              // 0x0098 (size: 0x28)

}; // Size: 0xC0

class UBTTask_GetRandomCraftingPoint : public UBTTaskNode
{
    bool mbKillWeaponsOnly;                                                           // 0x0070 (size: 0x1)
    bool mbExcludeCurrentStation;                                                     // 0x0071 (size: 0x1)
    bool mbChooseClosest;                                                             // 0x0072 (size: 0x1)
    FBlackboardKeySelector mOutCraftingPoint;                                         // 0x0078 (size: 0x28)
    FBlackboardKeySelector mStationLocation;                                          // 0x00A0 (size: 0x28)
    float mRadius;                                                                    // 0x00C8 (size: 0x4)
    bool mbSelectCurrentStation;                                                      // 0x00CC (size: 0x1)
    bool mbFarAwayFromGoodHumans;                                                     // 0x00CD (size: 0x1)

}; // Size: 0xD0

class UBTTask_GetRandomLocationInRadius : public UBTTaskNode
{
    FBlackboardKeySelector mOrigin;                                                   // 0x0070 (size: 0x28)
    float mRadius;                                                                    // 0x0098 (size: 0x4)
    FBlackboardKeySelector mOutLocation;                                              // 0x00A0 (size: 0x28)

}; // Size: 0xC8

class UBTTask_GetRandomMedkitPoint : public UBTTaskNode
{
    bool mbExcludeCurrentStation;                                                     // 0x0070 (size: 0x1)
    bool mbChooseClosest;                                                             // 0x0071 (size: 0x1)
    FBlackboardKeySelector mOutMedkitActor;                                           // 0x0078 (size: 0x28)

}; // Size: 0xA0

class UBTTask_GetRandomReviveTarget : public UBTTaskNode
{
    bool mbChooseClosest;                                                             // 0x0070 (size: 0x1)
    FBlackboardKeySelector mOutReviveTarget;                                          // 0x0078 (size: 0x28)

}; // Size: 0xA0

class UBTTask_HealAtMedKit : public UBTTask_BlueprintBase
{
    FBlackboardKeySelector mTargetKey;                                                // 0x00A8 (size: 0x28)
    FBlackboardKeySelector mInMedKitStation;                                          // 0x00D0 (size: 0x28)
    class AMedKitPoint* mpMedKitPoint;                                                // 0x00F8 (size: 0x8)

}; // Size: 0x100

class UBTTask_ReviveTarget : public UBTTaskNode
{
    FBlackboardKeySelector mTargetKey;                                                // 0x0070 (size: 0x28)
    FBlackboardKeySelector mReviveTargetKey;                                          // 0x0098 (size: 0x28)
    class ATPChar* mpSelfTPChar;                                                      // 0x00C0 (size: 0x8)
    class ATPChar* mpReviveTarget;                                                    // 0x00C8 (size: 0x8)

}; // Size: 0xD0

class UBTTask_SetBoolKey : public UBTTaskNode
{
    FBlackboardKeySelector mKey;                                                      // 0x0070 (size: 0x28)
    bool mbValue;                                                                     // 0x0098 (size: 0x1)

}; // Size: 0xA0

class UBTTask_TryThrowWeapon : public UBTTaskNode
{
    FBlackboardKeySelector mpTPOwner;                                                 // 0x0070 (size: 0x28)

}; // Size: 0x98

class UBTTask_UseAbility : public UBTTaskNode
{
    int32 mAbilityIndex;                                                              // 0x0070 (size: 0x4)

}; // Size: 0x78

class UBTTask_UseCraftTable : public UBTTaskNode
{
    FBlackboardKeySelector mDesiredWeaponTypeKey;                                     // 0x0070 (size: 0x28)
    FBlackboardKeySelector mSelectedCraftStationKey;                                  // 0x0098 (size: 0x28)
    FBlackboardKeySelector mSelectedCraftPointKey;                                    // 0x00C0 (size: 0x28)
    FBlackboardKeySelector mTPCharKey;                                                // 0x00E8 (size: 0x28)

}; // Size: 0x110

class UBTTask_UseHidePoint_DynamicDuration : public UBTTaskNode
{
    FBlackboardKeySelector mReadyToExitKey;                                           // 0x0070 (size: 0x28)
    float mExitDelay;                                                                 // 0x0098 (size: 0x4)
    FBlackboardKeySelector mOwnerTPCharKey;                                           // 0x00A0 (size: 0x28)
    FBlackboardKeySelector mTargetHidePointKey;                                       // 0x00C8 (size: 0x28)

}; // Size: 0xF0

class UBTTask_UseWeapon : public UBTTaskNode
{
    FBlackboardKeySelector mSelfChar;                                                 // 0x0070 (size: 0x28)
    FBlackboardKeySelector mTargetChar;                                               // 0x0098 (size: 0x28)

}; // Size: 0xC0

class UBackendClientJob_ProcessMatchEvents : public UBackendJobBase
{
}; // Size: 0x68

class UBackendClientPostBase : public UBackendPostBase
{
}; // Size: 0x80

class UBackendClientPost_AbandonProceduralMovie : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_AcceptEula : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_ActivateMovie : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_BeginSteamMicroTxn : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_ClaimChests : public UBackendClientPostBase
{
}; // Size: 0x90

class UBackendClientPost_CompleteClientTask : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_Discover : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_EpicRedeemEntitlement : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_FinishSteamMicroTxn : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_GenerateVoiceLoginToken : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_GetAllStoreItems : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_GetPatchNotes : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_GetSeasonalData : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_GetServerNotifications : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_GetSesState : public UBackendClientPostBase
{
}; // Size: 0xA0

class UBackendClientPost_InformMatchFound : public UBackendClientPostBase
{
}; // Size: 0x90

class UBackendClientPost_InformMatchmakingCanceled : public UBackendClientPostBase
{
}; // Size: 0x90

class UBackendClientPost_JourneyPurchaseNode : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_LoadPlayerSettings : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_ProcessMatchEvents : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_PurchaseItem : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_PurchaseSeasonPass : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_RedeemProductCode : public UBackendClientPostBase
{
}; // Size: 0x88

class UBackendClientPost_ReplaceExistingSessionToken : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_ReportP2PClientLeave : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_ReportPlayer : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_RetrieveP2PMatchCode : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_SendP2PMatchCode : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_SetLoadout : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_SetPlayerSlots : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_SetWeaponLoadout : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_SteamSyncDLC : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_UploadPlayerSettings : public UBackendClientPostBase
{
}; // Size: 0x80

class UBackendClientPost_UseCustomLobby : public UBackendClientPostBase
{
}; // Size: 0x88

class UBackendDsJob_ProcessMatchEvents : public UBackendJobBase
{
}; // Size: 0x68

class UBackendDsJob_Rediscover : public UBackendJobBase
{
}; // Size: 0x68

class UBackendDsJob_ReportLobbyCompleted : public UBackendJobBase
{
}; // Size: 0x68

class UBackendDsJob_ReportLobbyJoined : public UBackendJobBase
{
}; // Size: 0x68

class UBackendDsJob_ReportPlayerDisconnect : public UBackendJobBase
{
}; // Size: 0x68

class UBackendDsPostBase : public UBackendPostBase
{
}; // Size: 0x80

class UBackendDsPost_Authenticate : public UBackendDsPostBase
{
}; // Size: 0x80

class UBackendDsPost_ConsumePrizes : public UBackendDsPostBase
{
}; // Size: 0x80

class UBackendDsPost_GenerateVoiceJoinToken : public UBackendDsPostBase
{
}; // Size: 0x80

class UBackendDsPost_KickVoiceClient : public UBackendDsPostBase
{
}; // Size: 0x80

class UBackendDsPost_ProcessMatchEvents : public UBackendDsPostBase
{
}; // Size: 0x80

class UBackendDsPost_ReportLobbyCompleted : public UBackendDsPostBase
{
}; // Size: 0x80

class UBackendDsPost_ReportLobbyJoined : public UBackendDsPostBase
{
}; // Size: 0x80

class UBackendDsPost_ReportPlayerDisconnect : public UBackendDsPostBase
{
}; // Size: 0x80

class UBackendDsPost_SetLoadouts : public UBackendDsPostBase
{
}; // Size: 0x80

class UBackendJobBase : public UObject
{
    TArray<class UBackendPostBase*> mPostRequests;                                    // 0x0028 (size: 0x10)
    class UBackendManager* mpOwningBackendManager;                                    // 0x0038 (size: 0x8)
    EBackendJobType mJobType;                                                         // 0x0040 (size: 0x1)
    EBackendErrorCode mErrorCode;                                                     // 0x0041 (size: 0x1)
    int32 mCloudscriptErrorCode;                                                      // 0x0044 (size: 0x4)

}; // Size: 0x68

class UBackendJob_AbandonProceduralMovie : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_AcceptEula : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_ActivateMovie : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_Authenticate : public UBackendJobBase
{
    class UBackendClientPost_Discover* mpDiscoverPost;                                // 0x0078 (size: 0x8)

}; // Size: 0x80

class UBackendJob_BeginSteamMicroTxn : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_ClaimChests : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_CompleteClientTask : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_ConsumePrizes : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_CreateAccount : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_DeAuthenticate : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_Discover : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_EpicRedeemEntitlement : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_FinishSteamMicroTxn : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_GenerateVoiceJoinToken : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_GenerateVoiceLoginToken : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_GetAllStoreItems : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_GetPatchNotes : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_GetSceneEnactmentSystemState : public UBackendJobBase
{
}; // Size: 0x88

class UBackendJob_GetSeasonalData : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_GetServerNotifications : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_InformMatchFound : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_InformMatchmakingCanceled : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_JourneyPurchaseNode : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_KickVoiceClient : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_LoadPlayerSettings : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_Login : public UBackendJobBase
{
}; // Size: 0x88

class UBackendJob_PurchaseItem : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_PurchaseSeasonPass : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_RedeemProductCode : public UBackendJobBase
{
}; // Size: 0x88

class UBackendJob_ReplaceExistingSessionToken : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_ReportP2PClientLeave : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_ReportPlayer : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_RetrieveP2PMatchCode : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_SendP2PMatchCode : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_SetLoadout : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_SetLoadouts : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_SetPlayerSlots : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_SetWeaponLoadout : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_SteamSyncDLC : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_UploadPlayerSettings : public UBackendJobBase
{
}; // Size: 0x68

class UBackendJob_UseCustomLobby : public UBackendJobBase
{
}; // Size: 0x70

class UBackendManager : public UObject
{
    TWeakObjectPtr<class UClientStateManager> mOwningClientStateManager;              // 0x0038 (size: 0x8)
    EBackendExecutionState mExecutionState;                                           // 0x0040 (size: 0x1)
    class UBackendJobBase* mpJob;                                                     // 0x0048 (size: 0x8)
    class UBackendJobBase* mpLastFailedJob;                                           // 0x0050 (size: 0x8)
    EBackendLoginState mLoginState;                                                   // 0x0069 (size: 0x1)
    FString mPlayerCreateAccountId;                                                   // 0x00D0 (size: 0x10)
    FString mStoreUrl;                                                                // 0x00E0 (size: 0x10)
    bool mbShowEula;                                                                  // 0x00F0 (size: 0x1)
    bool mbCommunicationWarning;                                                      // 0x00F1 (size: 0x1)
    FString mBackendTitleId;                                                          // 0x00F8 (size: 0x10)
    EBackendSimpleOperationState mSesGetStateSocialSystemState;                       // 0x0118 (size: 0x1)
    EBackendSimpleOperationState mSESActivateMovieSocialSystemState;                  // 0x0119 (size: 0x1)
    EBackendSimpleOperationState mProcessMatchEventsState;                            // 0x011A (size: 0x1)
    EBackendSimpleOperationState mSetLoadoutState;                                    // 0x011B (size: 0x1)
    EBackendSimpleOperationState mSetLoadoutsState;                                   // 0x011C (size: 0x1)
    EBackendSimpleOperationState mSetPlayerSlotsSystemState;                          // 0x011D (size: 0x1)
    EBackendSimpleOperationState mSetWeaponLoadoutSystemState;                        // 0x011E (size: 0x1)
    EBackendSimpleOperationState mJourneyPurchaseNodeState;                           // 0x011F (size: 0x1)
    EBackendSimpleOperationState mAbandonProceduralMovieState;                        // 0x0120 (size: 0x1)
    EBackendSimpleOperationState mReportPlayerState;                                  // 0x0121 (size: 0x1)
    EBackendSimpleOperationState mDiscoverState;                                      // 0x0122 (size: 0x1)
    EBackendSimpleOperationState mRediscoverState;                                    // 0x0123 (size: 0x1)
    EBackendSimpleOperationState mClaimChestsState;                                   // 0x0124 (size: 0x1)
    EBackendSimpleOperationState mGeneratePrizesState;                                // 0x0125 (size: 0x1)
    EBackendSimpleOperationState mConsumePrizesState;                                 // 0x0126 (size: 0x1)
    EBackendSimpleOperationState mServerReportPlayerDisconnectState;                  // 0x0127 (size: 0x1)
    EBackendSimpleOperationState mServerReportLobbyJoinedState;                       // 0x0128 (size: 0x1)
    EBackendSimpleOperationState mServerReportLobbyCompletedState;                    // 0x0129 (size: 0x1)
    EBackendSimpleOperationState mPurchaseItemState;                                  // 0x012A (size: 0x1)
    EBackendSimpleOperationState mPurchaseHardCurrencyState;                          // 0x012B (size: 0x1)
    EBackendSimpleOperationState mGetStoreItemsForDateState;                          // 0x012C (size: 0x1)
    EBackendSimpleOperationState mBeginSteamMicroTxnState;                            // 0x012D (size: 0x1)
    EBackendSimpleOperationState mFinishSteamMicroTxnState;                           // 0x012E (size: 0x1)
    EBackendSimpleOperationState mSteamSyncDLCState;                                  // 0x012F (size: 0x1)
    EBackendSimpleOperationState mEpicRedeemEntitlementState;                         // 0x0130 (size: 0x1)
    EBackendSimpleOperationState mCompleteClientTaskState;                            // 0x0131 (size: 0x1)
    EBackendSimpleOperationState mAcceptEulaState;                                    // 0x0132 (size: 0x1)
    EBackendSimpleOperationState mPurchaseSeasonPassState;                            // 0x0133 (size: 0x1)
    EBackendSimpleOperationState mRedeemProductCodeState;                             // 0x0134 (size: 0x1)
    EBackendSimpleOperationState mLoadingPlayerSettingsState;                         // 0x0135 (size: 0x1)
    EBackendSimpleOperationState mUploadPlayerSettingsState;                          // 0x0136 (size: 0x1)
    EBackendSimpleOperationState mSendP2PMatchCodeState;                              // 0x013C (size: 0x1)
    EBackendSimpleOperationState mRetrieveP2PMatchCodeState;                          // 0x013D (size: 0x1)
    EBackendSimpleOperationState mReportP2PClientLeaveState;                          // 0x013E (size: 0x1)
    EBackendSimpleOperationState mInformMatchFoundState;                              // 0x013F (size: 0x1)
    EBackendSimpleOperationState mInformMatchmakingCanceledState;                     // 0x0140 (size: 0x1)

    void OnErrorConfirm();
}; // Size: 0x148

class UBackendPostBase : public UObject
{
    class UBackendJobBase* mpOwningJob;                                               // 0x0028 (size: 0x8)

}; // Size: 0x80

class UBackendPost_CreateAccount : public UBackendPostBase
{
}; // Size: 0x90

class UBackendPost_Login : public UBackendPostBase
{
}; // Size: 0x98

class UBackendQueueManager : public UObject
{
}; // Size: 0x228

class UBarTimingMinigame : public USkillTestMinigameBase
{
    float mTargetValue;                                                               // 0x00E0 (size: 0x4)
    float mSpeed;                                                                     // 0x00E4 (size: 0x4)
    bool mbLeftDirection;                                                             // 0x00E8 (size: 0x1)
    float mCurrentValue;                                                              // 0x00EC (size: 0x4)
    float mClientTimer;                                                               // 0x00F0 (size: 0x4)
    bool mbSubmissionLockout;                                                         // 0x00F4 (size: 0x1)

    bool ShouldShowPostSubmittedValue();
    void SetSubmissionLockout(bool bNewValue);
    bool IsValueInPassRange(float Value);
    bool IsValueInBullseyeRange(float Value);
    bool IsSubmissionLockedOut();
    float GetTargetValue();
    float GetCurrentValue();
    FLinearColor GetAwardedColor();
    FLinearColor GetArrowColor();
}; // Size: 0xF8

class UBaseAccountFilterWidget : public UMetaWidget
{
    class UNavDropDownMenu* mpDropDownMenu;                                           // 0x0380 (size: 0x8)
    class UImage* mpDropDownMenuIcon;                                                 // 0x0388 (size: 0x8)
    class UWidget* mpTargetWidget;                                                    // 0x0390 (size: 0x8)
    TArray<FAccountFilterInfoStruct> mAccountFilterList;                              // 0x0398 (size: 0x10)
    int32 mCurrentlySelectedFilterIndex;                                              // 0x03A8 (size: 0x4)

    void SetDropdownMenuOpen(bool bNewValue);
    void OnToggleDropdownMenu();
    void OnFilterIndexSelected(int32 Index);
    void OnDropDownSelectionChanged(int32 newIndex);
    void OnDeviceTypeChanged();
    FAccountFilterInfoStruct GetCurrentFilter();
}; // Size: 0x3B0

class UBaseAccountStatPageWidget : public UMetaWidget
{
    class UCategorySwitcher* mpCategorySwitcherWidget;                                // 0x0378 (size: 0x8)
    class UWidgetSwitcher* mpFilterSwitcher;                                          // 0x0380 (size: 0x8)
    class UPlayerAccountCharacterFilterWidget* mpTeenFilterWidget;                    // 0x0388 (size: 0x8)
    class UPlayerAccountCharacterFilterWidget* mpEvilFilterWidget;                    // 0x0390 (size: 0x8)
    class UPlayerAccountWeaponFilterWidget* mpWeaponFilterWidget;                     // 0x0398 (size: 0x8)
    class UPlayerAccountLevelFilterWidget* mpLevelFilterWidget;                       // 0x03A0 (size: 0x8)
    class UNonSelectableScrollBox* mpNonSelectableScrollBox;                          // 0x03A8 (size: 0x8)
    class UPlayerAccountCharacterProgressWidget* mpCharacterProgressWidget;           // 0x03B0 (size: 0x8)
    int32 mFilterIndexLastFrame;                                                      // 0x03B8 (size: 0x4)

    void OnToggleFilterDropdown();
    void OnRightCategory();
    void OnLeftCategory();
    void OnCategorySwitcherChangedIndex(int32 Index);
}; // Size: 0x3C0

class UBaseAccountTileWidget : public UMetaWidget
{
    class UTextBlock* mpTitleText;                                                    // 0x0378 (size: 0x8)
    class UTextBlock* mpSubText;                                                      // 0x0380 (size: 0x8)
    EPlayerAccountStatType mStatType;                                                 // 0x0388 (size: 0x1)
    EPlayerAccountStatType mTotalStatType;                                            // 0x0389 (size: 0x1)
    EFaction mOwningFactionType;                                                      // 0x038A (size: 0x1)
    ECharacterType mOwningCharacterType;                                              // 0x038B (size: 0x1)
    EWeaponTypeEnum mOwningWeaponType;                                                // 0x038C (size: 0x1)
    ELevelType mOwningLevelType;                                                      // 0x038D (size: 0x1)
    ECharacterType mTargetCharacterType;                                              // 0x038E (size: 0x1)
    EWeaponTypeEnum mTargetWeaponType;                                                // 0x038F (size: 0x1)
    ELevelType mTargetLevelType;                                                      // 0x0390 (size: 0x1)
    EStatWidgetCombinationType mCombinationType;                                      // 0x0391 (size: 0x1)

    uint32 GetValueForStat(EPlayerAccountStatType StatType);
    void GetTallyForStat(uint32& Current, uint32& Total);
    ECharacterType GetCharacterForStat();
}; // Size: 0x398

class UBaseActionProgressBar : public UUserWidget
{
    class UCustomProgressBar* mpCustomProgressBar;                                    // 0x0268 (size: 0x8)

    void UpdateProgress(class ATPChar* pTrackedChar);
    bool ShouldShowProgress(class ATPChar* pTrackedChar);
    float GetProgress(class ATPChar* pTrackedChar);
}; // Size: 0x270

class UBaseCharAnimInstance : public UAnimInstance
{

    void AnimNotify_SetDispersedInvisible(const class UAnimNotify* Notify);
    void AnimNotify_MainMenuUnlockRotation(const class UAnimNotify* Notify);
    void AnimNotify_MainMenuLockRotation(const class UAnimNotify* Notify);
    void AnimNotify_ClearDispersedInvisible(const class UAnimNotify* Notify);
}; // Size: 0x2C0

class UBaseCharMovementComponent : public UCharacterMovementComponent
{
}; // Size: 0xAF0

class UBaseCharacterPortraitWidget : public UUserWidget
{
    class UImage* mpFaceImage;                                                        // 0x0260 (size: 0x8)
    class UImage* mpBorderImage;                                                      // 0x0268 (size: 0x8)

}; // Size: 0x270

class UBaseCustomizationComponent : public UActorComponent
{
    ECharacterType mOverrideCharacterType;                                            // 0x00BA (size: 0x1)
    bool mbIsFrontEndCharacter;                                                       // 0x00BB (size: 0x1)
    bool mbForceSyncLoad;                                                             // 0x00BC (size: 0x1)
    FCharacterStatusSpecialParameters mCharacterStatusSpecialParameters;              // 0x0120 (size: 0xC)
    TArray<FCharacterStatusToMaterialParameter> mCharacterStatusMappings;             // 0x0190 (size: 0x10)

    void SetOverrideCharacterType(ECharacterType CharacterType);
    void SetHasValidLoadout(bool bSet);
    void ServerDebugEquipItems(const TArray<FLoadoutItem>& assets);
    void MulticastDebugEquipItems(const TArray<FLoadoutItem>& assets);
    bool IsEquipInProgress();
    bool HasValidLoadout();
    ECharacterType GetCharacterType();
}; // Size: 0x1A8

class UBaseEvilAbilityComponent : public UActorComponent
{
    class AFPChar* mpOwningFPChar;                                                    // 0x00B0 (size: 0x8)
    float mCurrentCooldownRemaining;                                                  // 0x00B8 (size: 0x4)
    bool mbCurrentlyCharging;                                                         // 0x00BC (size: 0x1)
    float mCurrentChargeTime;                                                         // 0x00C0 (size: 0x4)
    int32 mCurrentNumCharges;                                                         // 0x00C4 (size: 0x4)
    float mServerTimeSinceLastActivated;                                              // 0x00C8 (size: 0x4)
    float mServerTimeSinceLastDeactivated;                                            // 0x00CC (size: 0x4)

    void TickAbilityComponent(float DeltaTime);
    bool IsCurrentlyCharging();
    TArray<class TSubclassOf<UBaseStatusComponent>> GetRequiredStatusComponentClasses();
    TArray<FSoftObjectPath> GetRequiredAssets();
    class AFPChar* GetOwningFPChar();
    int32 GetMaxNumCharges();
    int32 GetCurrentNumCharges();
    float GetCurrentHearingPercent();
    float GetCurrentChargeTime();
    float GetBaseChargeTime();
    float GetBaseAbilityCooldown();
    float GetAbilityCooldownRemaining();
    float GetAbilityChargeRunSpeedMultiplier();
    void DoServerSetOwningFPChar(class AFPChar* pChar);
    void DoServerSetCurrentNumCharges(int32 NewValue);
    void DoServerSetCurrentCooldownRemaining(float NewValue);
    void DoServerSetCurrentChargeTime(float NewValue);
    void DoServerOnAddedToFPChar();
    void DoServerOnAbilityFinishedCharging();
    void DoServerOnAbilityDeactivated();
    void DoServerOnAbilityCancelCharging();
    void DoServerOnAbilityBeginCharging();
    bool DoServerOnAbilityActivated();
    float DoServerGetTimeSinceAbilityDeactivated();
    float DoServerGetTimeSinceAbilityActivated();
    void DoServerActivateCooldown();
    bool CanUseAbility();
    bool AllowIsBeingDamagedFlag();
}; // Size: 0xD0

class UBaseIssueWidget : public UMetaWidget
{
    FIntPoint GridSize;                                                               // 0x0378 (size: 0x8)
    class UBaseUserButton* mpUserButton;                                              // 0x0380 (size: 0x8)

}; // Size: 0x388

class UBaseItemList : public UUserWidget
{
    TSubclassOf<class UBaseItemTile> ItemTileClass;                                   // 0x0260 (size: 0x8)
    TMap<class EUISlot, class TSubclassOf<UBaseItemTile>> OverrideItemTileClass;      // 0x0268 (size: 0x50)
    EListSortType DefaultSortType;                                                    // 0x02B8 (size: 0x1)
    int32 MaxGridColumns;                                                             // 0x02BC (size: 0x4)
    bool ForceSingleRow;                                                              // 0x02C0 (size: 0x1)
    int32 MaxGridColumnOverride;                                                      // 0x02C4 (size: 0x4)
    FMargin TilePadding;                                                              // 0x02C8 (size: 0x10)
    bool ShowUnequip;                                                                 // 0x02D8 (size: 0x1)
    bool ShowHeaders;                                                                 // 0x02D9 (size: 0x1)
    bool ShowTitles;                                                                  // 0x02DA (size: 0x1)
    bool ShowOwned;                                                                   // 0x02DB (size: 0x1)
    bool ShowUnowned;                                                                 // 0x02DC (size: 0x1)
    bool ShowUnownedSameLine;                                                         // 0x02DD (size: 0x1)
    bool ShowLocked;                                                                  // 0x02DE (size: 0x1)
    bool ShowRimBorder;                                                               // 0x02DF (size: 0x1)
    bool SelectOnHover;                                                               // 0x02E0 (size: 0x1)
    bool ShowNew;                                                                     // 0x02E1 (size: 0x1)
    bool ShowQuantity;                                                                // 0x02E2 (size: 0x1)
    bool ShowEquipped;                                                                // 0x02E3 (size: 0x1)
    bool ShowPrice;                                                                   // 0x02E4 (size: 0x1)
    bool ShowPerkCost;                                                                // 0x02E5 (size: 0x1)
    bool ShowPerkRank;                                                                // 0x02E6 (size: 0x1)
    bool SelectDefaultButton;                                                         // 0x02E7 (size: 0x1)
    bool DisableAutomaticScrolling;                                                   // 0x02E8 (size: 0x1)
    bool FillEmptyColumnsAfterBuilding;                                               // 0x02E9 (size: 0x1)
    bool SkipUnownedItemsNotAvailableInStore;                                         // 0x02EA (size: 0x1)
    bool BlockEdgeNavigationUp;                                                       // 0x02EB (size: 0x1)
    bool BlockEdgeNavigationRight;                                                    // 0x02EC (size: 0x1)
    bool BlockEdgeNavigationDown;                                                     // 0x02ED (size: 0x1)
    bool BlockEdgeNavigationLeft;                                                     // 0x02EE (size: 0x1)
    class UNavScrollBox* mpNavScrollBox;                                              // 0x0350 (size: 0x8)
    class UGridPanel* mpGridPanel;                                                    // 0x0358 (size: 0x8)

}; // Size: 0x428

class UBaseItemTile : public UMetaWidget
{
    class UItemTileUserButton* mpUserButton;                                          // 0x0388 (size: 0x8)
    class UStateSwitcher* mpStateSwitcher;                                            // 0x0390 (size: 0x8)
    class UImage* mpNewIcon;                                                          // 0x0398 (size: 0x8)
    class UImage* mpRarityIcon;                                                       // 0x03A0 (size: 0x8)
    class UBorder* mpRimBackgroundColor;                                              // 0x03A8 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
}; // Size: 0x3D0

class UBaseJourneyMapNode : public UMetaWidget
{
    FLinearColor PurchasedColor;                                                      // 0x0378 (size: 0x10)
    FLinearColor UnlockedColor;                                                       // 0x0388 (size: 0x10)
    FLinearColor LockedColor;                                                         // 0x0398 (size: 0x10)
    class UImage* mpImageIcon;                                                        // 0x03C8 (size: 0x8)
    class UImage* mpStatusImage;                                                      // 0x03D0 (size: 0x8)
    class UCanvasPanel* mpSelectPanel;                                                // 0x03D8 (size: 0x8)
    class UJourneyUserButton* mpUserButton;                                           // 0x03E0 (size: 0x8)
    class UStateSwitcher* mpStateSwitcher;                                            // 0x03E8 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
    void OnNodeSelected();
}; // Size: 0x400

class UBaseLoadoutScreen : public UBaseScreen
{
    class UBusyModalWidget* mpBusyModal;                                              // 0x02C8 (size: 0x8)
    TArray<class UNavButton*> mCategoryButtons;                                       // 0x0328 (size: 0x10)

    void SetCategoryButtonVisibility(ESlateVisibility vis);
    void RecordAnalytics();
    void OnChangesComplete();
    void OnCategoryPressed(class UNavButton* pButton);
}; // Size: 0x338

class UBaseLoadoutWidget : public UUserWidget
{
    int32 MaxGridColumns;                                                             // 0x0260 (size: 0x4)
    class UBaseItemList* mpListWidget;                                                // 0x0268 (size: 0x8)

}; // Size: 0x2A8

class UBaseModal : public UUserWidget
{
    class UWidgetAnimation* mpInAnimation;                                            // 0x0260 (size: 0x8)
    class UWidgetAnimation* mpOutAnimation;                                           // 0x0268 (size: 0x8)
    bool mbIsInViewport;                                                              // 0x02A0 (size: 0x1)
    EWise_UI_Sounds OnActivateSound;                                                  // 0x02A1 (size: 0x1)

    void Show(bool bImmediate);
    void SetActivateSound(EWise_UI_Sounds Sound);
    void RemoveFromGameViewport();
    void OnEscaped();
    void Hide(bool bImmediate);
    void ExecuteDenyDelegate();
    void ExecuteDelegate();
    void Close();
    void AnimateOut();
    void AnimateIn();
    void AddToGameViewport();
}; // Size: 0x2A8

class UBaseOverlay : public UUserWidget
{
    TArray<EButtonBarType> ButtonBar;                                                 // 0x0260 (size: 0x10)
    bool UsesContextualButtonBar;                                                     // 0x0270 (size: 0x1)
    EWise_UI_Sounds OnTransitionOutSound;                                             // 0x0271 (size: 0x1)
    EWise_UI_Sounds OnTransitionInSound;                                              // 0x0272 (size: 0x1)
    class UWidget* mpPreviousWidget;                                                  // 0x0278 (size: 0x8)

}; // Size: 0x280

class UBaseRewardGroupWidget : public UMetaWidget
{
    TSubclassOf<class UBaseRewardWidget> mRewardWidgetClass;                          // 0x0378 (size: 0x8)
    int32 MaxPanelColums;                                                             // 0x0380 (size: 0x4)
    class UHorizontalBox* mpRewardBox;                                                // 0x0388 (size: 0x8)
    class UUniformGridPanel* mpRewardPanel;                                           // 0x0390 (size: 0x8)

}; // Size: 0x398

class UBaseRewardWidget : public UMetaWidget
{
    bool CollapseText;                                                                // 0x0378 (size: 0x1)
    class UImage* mpRewardIcon;                                                       // 0x0390 (size: 0x8)
    class UTextBlock* mpPointValueText;                                               // 0x0398 (size: 0x8)
    class UTextBlock* mpItemNameText;                                                 // 0x03A0 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
    void LoadPrizePackText(FString numPrizesString);
    void LoadPrizePackIcon(FString factionString);
    void LoadPointTypeIcon();
    void LoadPointText();
    void LoadPermissionTokenIcon();
    void LoadPermissionText();
    void LoadItemNameText();
    void LoadDbItemText();
    void LoadDbItemIcon();
    void HideReset();
}; // Size: 0x3C0

class UBaseScreen : public UUserWidget
{
    bool mbForceDefaultButton;                                                        // 0x0260 (size: 0x1)
    bool mbRememberLastButton;                                                        // 0x0261 (size: 0x1)
    bool ShowScreenNavigation;                                                        // 0x0262 (size: 0x1)
    bool ShowScreenTitle;                                                             // 0x0263 (size: 0x1)
    bool ShowCharacterInfo;                                                           // 0x0264 (size: 0x1)
    bool AllowCharacterSelect;                                                        // 0x0265 (size: 0x1)
    bool ShowCurrencyInfo;                                                            // 0x0266 (size: 0x1)
    FText NavigationTitle;                                                            // 0x0268 (size: 0x18)
    bool ContextualNavigationText;                                                    // 0x0280 (size: 0x1)
    class UTexture2D* NavigationTexture;                                              // 0x0288 (size: 0x8)
    TArray<EButtonBarType> ButtonBar;                                                 // 0x0290 (size: 0x10)
    bool UsesContextualButtonBar;                                                     // 0x02A0 (size: 0x1)
    EWise_UI_Sounds OnActivateSound;                                                  // 0x02A1 (size: 0x1)
    EWise_UI_Sounds OnDeactivateSound;                                                // 0x02A2 (size: 0x1)
    EWise_UI_Sounds OnTransitionInSound;                                              // 0x02A3 (size: 0x1)
    EWise_UI_Sounds OnTransitionOutSound;                                             // 0x02A4 (size: 0x1)
    class UWidget* mpPreviousWidget;                                                  // 0x02A8 (size: 0x8)
    class UWidgetAnimation* mpTransitionInAnim;                                       // 0x02B0 (size: 0x8)
    class UWidgetAnimation* mpTransitionOutAnim;                                      // 0x02B8 (size: 0x8)

    void OnTransitionOutComplete();
    void OnTransitionInComplete();
    class ABaseHUD* GetHUD();
}; // Size: 0x2C0

class UBaseSocialButton : public UBaseUserButton
{
    TSubclassOf<class USocialTooltipWidget> mSocialTooltipClass;                      // 0x0478 (size: 0x8)

}; // Size: 0x480

class UBaseSocialContentWidget : public UMetaWidget
{
    class UWidgetSwitcher* mpMainSwitcher;                                            // 0x0378 (size: 0x8)
    class UCanvasPanel* mpContentPanel;                                               // 0x0380 (size: 0x8)
    class UCanvasPanel* mpEmptyPanel;                                                 // 0x0388 (size: 0x8)
    class UNavScrollBox* mpNavScrollBox;                                              // 0x0390 (size: 0x8)
    class UVerticalBox* mpContentList;                                                // 0x0398 (size: 0x8)

    void OnItemSelected(FString ItemId);
    void OnItemPressed(FString ItemId);
}; // Size: 0x3B0

class UBaseStatusComponent : public UActorComponent
{
    class ATPChar* mpOwningTPChar;                                                    // 0x00B0 (size: 0x8)
    class ATPChar* mpTPCharCreatedBy;                                                 // 0x00B8 (size: 0x8)
    float mCurrentDuration;                                                           // 0x00C0 (size: 0x4)
    float mBaseDuration;                                                              // 0x00C4 (size: 0x4)
    float mServerTimeSinceLastActivated;                                              // 0x00C8 (size: 0x4)
    float mServerTimeSinceLastDeactivated;                                            // 0x00CC (size: 0x4)
    TArray<class UMaterialInstanceDynamic*> mCurrentPostProcessMaterials;             // 0x00D0 (size: 0x10)

    void TickStatusComponent(float DeltaSeconds);
    bool ShowSubduedEffects();
    bool ShouldPlayStaggerAnimation();
    bool ShouldPlayActionFailedEffects();
    void SetUpPostProcessMaterials();
    void RegisterAuras();
    void OnRep_TPCharCreatedBy();
    void OnRep_OwningTPChar();
    void OnOwningTPCharManifested(bool bManifested);
    bool IsStatusActive();
    class ATPChar* GetTPCharCreatedBy();
    float GetSpeedPenalty();
    TArray<class UMaterialInstance*> GetRequiredPostProcessMaterials();
    float GetPercentageComplete();
    class ATPChar* GetOwningTPChar();
    void GetCustomDepthStencilProperties(bool bSightBlocked, FStencilProperties& outProperties, bool& outHasAura);
    float GetCurrentDuration();
    float GetBaseDuration();
    void DoServerSetOwningTPCharCreatedBy(class ATPChar* pTPChar);
    void DoServerSetOwningTPChar(class ATPChar* pTPChar);
    void DoServerSetCurrentDuration(float NewValue);
    void DoServerSetBaseDuration(float NewValue);
    void DoServerOnOwningTPCharSubdued();
    void DoServerOnOwningTPCharKnockedDown();
    void DoServerOnOwningTPCharDeath();
    void DoServerOnDeactivated();
    void DoServerOnAttachedToTPChar();
    void DoServerOnActivated();
    float DoServerGetTimeSinceLastDeactivated();
    float DoServerGetTimeSinceLastActivated();
    void DoServerDebugToggle();
    void DoServerClearDuration();
    void DoServerActivateStatus();
    bool DoesRevealOwningTPChar();
    void DestroySelf();
    bool AllowedToUseWeapons();
    bool AllowedToRun();
    bool AllowedToRevive();
    bool AllowedToResurrect();
    bool AllowedToInteractWithPickups();
    bool AllowedToInteractWithNav();
    bool AllowedToHeal();
    bool AllowedToEmote();
    bool AllowedToBeHealed();
}; // Size: 0xE0

class UBaseTab : public UUserWidget
{
    class UBaseScreen* mpOwningScreen;                                                // 0x0260 (size: 0x8)
    class UVerticalBox* mpVerticalBox;                                                // 0x0268 (size: 0x8)

    void ShowInputBindingModal(EGameActionType ActionType, EInputBindingCategory cat, bool bIsKeyboard);
}; // Size: 0x280

class UBaseToast : public UUserWidget
{
    class UTextBlock* mpTitleText;                                                    // 0x0260 (size: 0x8)
    class UTextBlock* mpMessageText;                                                  // 0x0268 (size: 0x8)
    class USizeBox* mpSocialPortraitBox;                                              // 0x0270 (size: 0x8)
    class USocialPortraitWidget* mpSocialPortraitWidget;                              // 0x0278 (size: 0x8)
    class UButton* mpCloseButton;                                                     // 0x0280 (size: 0x8)
    class UWidgetAnimation* AnimIn;                                                   // 0x02A8 (size: 0x8)
    class UWidgetAnimation* AnimOut;                                                  // 0x02B0 (size: 0x8)
    class UWidgetAnimation* SlideIn;                                                  // 0x02B8 (size: 0x8)
    class UWidgetAnimation* SlideOut;                                                 // 0x02C0 (size: 0x8)

    void SetText(const FText& Title, const FText& Message);
    void OnSlideOutFinished();
    void OnSlideInFinished();
    void OnClosePressed();
    void OnAnimOutFinished();
    void OnAnimInFinished();
}; // Size: 0x2C8

class UBaseUserButton : public UMetaWidget
{
    float AnimDuration;                                                               // 0x0378 (size: 0x4)
    FMargin HighlightPadding;                                                         // 0x037C (size: 0x10)
    FMargin BoxMargin;                                                                // 0x038C (size: 0x10)
    bool PreviewHighlight;                                                            // 0x039C (size: 0x1)
    bool SelectOnHover;                                                               // 0x039D (size: 0x1)
    bool HighlightFactionColor;                                                       // 0x039E (size: 0x1)
    class UMaterialInstance* HighlightMatInst;                                        // 0x03A0 (size: 0x8)
    class UTexture2D* HighlightTexture;                                               // 0x03A8 (size: 0x8)
    float HoverOpacity;                                                               // 0x03B0 (size: 0x4)
    float SelectedOpacity;                                                            // 0x03B4 (size: 0x4)
    bool AnimatesOut;                                                                 // 0x03B8 (size: 0x1)
    float AnimOutSpeedMultiplier;                                                     // 0x03BC (size: 0x4)
    bool HandlesSimulatePress;                                                        // 0x03C0 (size: 0x1)
    bool HandlesSimulateRelease;                                                      // 0x03C1 (size: 0x1)
    TMap<class ESelectionNavigation, class UUserWidget*> NavDirectionOverrides;       // 0x03C8 (size: 0x50)
    class UNavButton* mpNavButton;                                                    // 0x0418 (size: 0x8)
    class UImage* mpHighlightImage;                                                   // 0x0420 (size: 0x8)
    class UCanvasPanel* mpHighlightCanvasPanel;                                       // 0x0428 (size: 0x8)
    class UWidgetAnimation* mpSelectAnim;                                             // 0x0430 (size: 0x8)

    void OnSelectFinished();
    void OnSeasonalEventTypeChanged();
}; // Size: 0x478

class UBaseWeaponAnimInstance : public UAnimInstance
{
    FWeaponAnimInstanceData mWeaponInstanceData;                                      // 0x02B8 (size: 0x1C)
    class ATPChar* mpOwnerTPChar;                                                     // 0x02D8 (size: 0x8)
    class AWeaponBase* mpOwnerWeaponBase;                                             // 0x02E0 (size: 0x8)
    class UAnimSequence* mpFrontEndOverrideAnimation;                                 // 0x02E8 (size: 0x8)

    FWeaponAnimInstanceData UpdateAnimData(float DeltaTime);
    class UAnimSequence* GetFrontEndOverrideAnimation();
    float GetCurrentWeaponIntroTimePlayRate();
    FWeaponAnimInstanceData GetAnimData();
}; // Size: 0x2F0

class UBasicRewardWidget : public UBaseRewardWidget
{
}; // Size: 0x3C0

class UBillboardEffectsComponent : public USceneComponent
{
    class UStaticMeshComponent* mpBillboardMesh;                                      // 0x01F8 (size: 0x8)
    class UStaticMeshComponent* mpBillboardPlane;                                     // 0x0200 (size: 0x8)
    class UMaterialInstance* mpEffectMaterial;                                        // 0x0208 (size: 0x8)
    float mBillboardRadius;                                                           // 0x0210 (size: 0x4)
    bool mbIsEnabled;                                                                 // 0x0214 (size: 0x1)

    void UpdateMaterialProperties(float DeltaTime);
    void UpdateBillboarding(float DeltaTime);
    void SetEnabled(bool bEnabled);
    void OverrideEffectMaterial(class UMaterialInstance* pNewMaterial);
    class UMaterialInstanceDynamic* GetDynamicMaterial();
}; // Size: 0x220

class UBlackboardKeyType_GameplayTag : public UBlackboardKeyType
{
    FGameplayTag TagValue;                                                            // 0x0030 (size: 0x8)

}; // Size: 0x38

class UBotSettingsOverlayWidget : public UBaseOverlay
{
    class UCharacterSelectWidget* mpBotCharacterSelect;                               // 0x0280 (size: 0x8)
    class UOptionSelectorUserButton* mpFactionSelector;                               // 0x0288 (size: 0x8)
    class UOptionSelectorUserButton* mpDifficulty;                                    // 0x0290 (size: 0x8)
    class UTextBlock* mpBotNameText;                                                  // 0x0298 (size: 0x8)
    int32 mBotIndex;                                                                  // 0x02A0 (size: 0x4)

    void OnFactionChanged();
    void OnDiffChanged();
}; // Size: 0x2A8

class UBoxCostUserButton : public UBoxUserButton
{
    class UHorizontalBox* mpCostBox;                                                  // 0x04C8 (size: 0x8)
    class UHorizontalBox* mpCostIconBox;                                              // 0x04D0 (size: 0x8)
    class UImage* mpCurrencyIcon;                                                     // 0x04D8 (size: 0x8)
    class UTextBlock* mpCostText;                                                     // 0x04E0 (size: 0x8)
    bool mbForceHideCostBox;                                                          // 0x04E8 (size: 0x1)

}; // Size: 0x4F0

class UBoxNavButton : public UNavButton
{
}; // Size: 0x618

class UBoxNewsUserButton : public UBoxUserButton
{
    FLinearColor RegularColor;                                                        // 0x04C8 (size: 0x10)
    class UTexture2D* ImageTex;                                                       // 0x04D8 (size: 0x8)
    class UImage* mpIcon;                                                             // 0x04E0 (size: 0x8)
    class UImage* mpRegularBorder;                                                    // 0x04E8 (size: 0x8)

}; // Size: 0x4F0

class UBoxPromptUserButton : public UBoxUserButton
{
    EGameActionType GameActionType;                                                   // 0x04C8 (size: 0x1)
    class UButtonPromptWidget* mpButtonPromptWidget;                                  // 0x04D0 (size: 0x8)

}; // Size: 0x4D8

class UBoxUserButton : public UBaseUserButton
{
    FText Text;                                                                       // 0x0480 (size: 0x18)
    class UTexture2D* NormalTexture;                                                  // 0x0498 (size: 0x8)
    float WidthOverride;                                                              // 0x04A0 (size: 0x4)
    uint8 bOverride_WidthOverride;                                                    // 0x04A4 (size: 0x1)
    float HeightOverride;                                                             // 0x04A8 (size: 0x4)
    uint8 bOverride_HeightOverride;                                                   // 0x04AC (size: 0x1)
    TEnumAsByte<ETextJustify::Type> Justification;                                    // 0x04AD (size: 0x1)
    class USizeBox* mpSizeBox;                                                        // 0x04B0 (size: 0x8)
    class UImage* mpNormalImage;                                                      // 0x04B8 (size: 0x8)
    class UTextBlock* mpTextBlock;                                                    // 0x04C0 (size: 0x8)

}; // Size: 0x4C8

class UBuildLocTablesCommandlet : public UCommandlet
{
}; // Size: 0x80

class UBusyModalWidget : public UBaseModal
{
    class UTextBlock* mpMessageText;                                                  // 0x02A8 (size: 0x8)
    class UImage* mpSpinnerImage;                                                     // 0x02B0 (size: 0x8)
    class UProgressBar* mpProgressBar;                                                // 0x02B8 (size: 0x8)

}; // Size: 0x2C0

class UButtonBarWidget : public UUserWidget
{
    TArray<FButtonBarWidgetButton> mButtons;                                          // 0x0268 (size: 0x10)
    bool mbBackThisFrame;                                                             // 0x0278 (size: 0x1)
    TArray<EButtonBarType> mActiveButtonTypes;                                        // 0x0280 (size: 0x10)
    TMap<class EButtonBarType, class FButtonBarData> ButtonTemplates;                 // 0x0290 (size: 0x50)
    EWise_UI_Sounds OnPressSound;                                                     // 0x02E0 (size: 0x1)
    EWise_UI_Sounds OnReleaseSound;                                                   // 0x02E1 (size: 0x1)
    EWise_UI_Sounds OnHoverSound;                                                     // 0x02E2 (size: 0x1)
    EWise_UI_Sounds OnUnhoverSound;                                                   // 0x02E3 (size: 0x1)

    void UpdateButtonBar();
    bool SimulateButtonAction(const FButtonBarWidgetButton& Button, bool bPressed);
    void SetupButtons(TArray<EButtonBarType> buttons);
    void SetButtonTypeEnabled(EButtonBarType buttonType, bool bEnabled);
    void SetButtonTypeCollapsed(EButtonBarType buttonType, bool bCollapsed);
    void SetButtonText(EButtonBarType buttonType, FText Text);
    void Refresh();
    void OnDeviceTypeChanged();
    void OnButton6Released();
    void OnButton6Pressed();
    void OnButton5Released();
    void OnButton5Pressed();
    void OnButton4Released();
    void OnButton4Pressed();
    void OnButton3Released();
    void OnButton3Pressed();
    void OnButton2Released();
    void OnButton2Pressed();
    void OnButton1Released();
    void OnButton1Pressed();
    bool IsButtonTypeEnabled(EButtonBarType buttonType);
    bool IsBackPressedThisFrame();
    bool HandleMenuActionPress(EMenuAction menuAction);
    void GetMenuActions(EGameActionType KeyAction, EMenuAction& pressAction, EMenuAction& releaseAction);
    void ForceUpdate();
    void ExecuteButton(FButtonBarWidgetButton Button, bool bPress);
    void ClearNavigationButtons();
}; // Size: 0x2E8

class UButtonPromptWidget : public UUserWidget
{
    class UImage* mpKeyBackground;                                                    // 0x0260 (size: 0x8)
    class UTextBlock* mpKeyText;                                                      // 0x0268 (size: 0x8)
    class UScaleBox* mpKeyScaleBox;                                                   // 0x0270 (size: 0x8)
    class UScaleBox* mpGamepadScaleBox;                                               // 0x0278 (size: 0x8)
    class UScaleBox* mpMouseButtonScaleBox;                                           // 0x0280 (size: 0x8)
    class UImage* mpGamepadIcon;                                                      // 0x0288 (size: 0x8)
    class UImage* mpMouseButtonIcon;                                                  // 0x0290 (size: 0x8)
    class USizeBox* mpMasterSizeBox;                                                  // 0x0298 (size: 0x8)
    class UTextBlock* mpMouseButtonNumber;                                            // 0x02A0 (size: 0x8)
    class UOverlay* mpKeyOverlayBox;                                                  // 0x02A8 (size: 0x8)
    float mStandardSize;                                                              // 0x02B0 (size: 0x4)
    float mExpandedSize;                                                              // 0x02B4 (size: 0x4)
    bool mbIsExpanded;                                                                // 0x02B8 (size: 0x1)
    float mGamepadPromptScale;                                                        // 0x02BC (size: 0x4)
    ESlateVisibility ControllerVisibility;                                            // 0x02C0 (size: 0x1)
    ESlateVisibility KeyboardVisibility;                                              // 0x02C1 (size: 0x1)
    EGameActionType mGameAction;                                                      // 0x02C2 (size: 0x1)

    void SetKeyboardVisibility(ESlateVisibility newVis);
    void SetKey(FKey Key);
    void SetGameAction(EGameActionType gameAction);
    void SetControllerVisibility(ESlateVisibility newVis);
    void OnInputBindingChanged();
    void OnDeviceTypeChanged();
    bool IsExpanded();
    void ForceRefresh();
}; // Size: 0x2C8

class UCategoryBreadcrumbWidget : public UUserWidget
{
    FText Title;                                                                      // 0x0260 (size: 0x18)
    class UTextBlock* mpTitleText;                                                    // 0x0278 (size: 0x8)
    class UButton* mpHomeButton;                                                      // 0x0280 (size: 0x8)
    class UImage* mpHomeButtonIcon;                                                   // 0x0288 (size: 0x8)

    void OnHomePressed();
    void OnDeviceTypeChanged();
}; // Size: 0x290

class UCategoryButtonWidget : public UUserWidget
{
    FVector2D TargetScale;                                                            // 0x0260 (size: 0x8)
    float ScaleDuration;                                                              // 0x0268 (size: 0x4)
    bool UseWidgetSwitcher;                                                           // 0x026C (size: 0x1)
    FLinearColor DefaultSelectionTint;                                                // 0x0270 (size: 0x10)
    class UButton* mpCategoryButton;                                                  // 0x0280 (size: 0x8)
    class UImage* mpSelectionImage;                                                   // 0x0288 (size: 0x8)
    class UTextBlock* mpCategoryText;                                                 // 0x0290 (size: 0x8)
    class USizeBox* mpContentSizeBox;                                                 // 0x0298 (size: 0x8)
    class UWidgetSwitcher* mpWidgetSwitcher;                                          // 0x02A0 (size: 0x8)
    class UTextBlock* mpCategoryText_UnSelected;                                      // 0x02A8 (size: 0x8)
    class UTextBlock* mpCategoryText_Selected;                                        // 0x02B0 (size: 0x8)
    class UTextBlock* mpCategoryText_Highlighted;                                     // 0x02B8 (size: 0x8)
    class UWidget* mpSwitcherUnSelectedWidget;                                        // 0x02C0 (size: 0x8)
    class UWidget* mpSwitcherSelectedWidget;                                          // 0x02C8 (size: 0x8)
    class UWidget* mpSwitcherHighlightedWidget;                                       // 0x02D0 (size: 0x8)
    class USizeBox* mpPromoSizeBox;                                                   // 0x02D8 (size: 0x8)
    class UTextBlock* mpPromoText;                                                    // 0x02E0 (size: 0x8)
    FVector2D mScaleMultiplier;                                                       // 0x02E8 (size: 0x8)

    void SetPromoText(FText Text);
    void SetIconVisibility(bool bShow);
    void SetIconTexture(class UTexture2D* pTex);
    void SetFont(FSlateFontInfo newFont);
    void OnSeasonalEventTypeChanged();
    void OnButtonPressed();
    FVector2D GetScaleMultiplier();
    void FindTextBlockWidgets();
}; // Size: 0x308

class UCategorySwitcher : public UUserWidget
{
    TSubclassOf<class UCategoryButtonWidget> DefaultCategoryButtonClass;              // 0x0260 (size: 0x8)
    TArray<FCategorySwitcherData> CategoryData;                                       // 0x0268 (size: 0x10)
    int32 FontSize;                                                                   // 0x0278 (size: 0x4)
    FMargin TextPadding;                                                              // 0x027C (size: 0x10)
    bool UseCustomFont;                                                               // 0x028C (size: 0x1)
    FSlateFontInfo Font;                                                              // 0x0290 (size: 0x58)
    EGameActionType LeftAction;                                                       // 0x02E8 (size: 0x1)
    EGameActionType RightAction;                                                      // 0x02E9 (size: 0x1)
    ESlateVisibility OverrideKeyboardButtonVisibility;                                // 0x02EA (size: 0x1)
    ESlateVisibility OverrideControllerButtonVisibility;                              // 0x02EB (size: 0x1)
    FVector2D CategoryButtonSize;                                                     // 0x02EC (size: 0x8)
    FMargin CategoryButtonPadding;                                                    // 0x02F4 (size: 0x10)
    class UButtonPromptWidget* mpLeftCategoryButtonPrompt;                            // 0x0318 (size: 0x8)
    class UButton* mpLeftCategoryButton;                                              // 0x0320 (size: 0x8)
    class UButtonPromptWidget* mpRightCategoryButtonPrompt;                           // 0x0328 (size: 0x8)
    class UButton* mpRightCategoryButton;                                             // 0x0330 (size: 0x8)
    class UHorizontalBox* mpButtonBox;                                                // 0x0338 (size: 0x8)
    TArray<class UCategoryButtonWidget*> mCategoryButtonWidgets;                      // 0x0340 (size: 0x10)
    class UWidgetSwitcher* mpTargetWidgetSwitcher;                                    // 0x0350 (size: 0x8)
    int32 mSelectedCategoryIndex;                                                     // 0x0358 (size: 0x4)

    void UpdateCategoryIcons();
    void TransitionActiveWidgetTab(uint32 tabIndex);
    void SetTargetWidgetSwitcher(class UWidgetSwitcher* pTarget);
    void SetCategoryEnabled(int32 Index, bool bSet);
    void SetCategoryClass(FText Category, TSubclassOf<class UCategoryButtonWidget> ButtonClass);
    void SelectCategory(int32 Index);
    void ResetCategoryClassesToDefault();
    void OnRightCategoryPressed();
    void OnLeftCategoryPressed();
    bool IsCategoryEnabled(int32 Index);
    class UWidgetSwitcher* FindSiblingWidgetSwitcher();
    void ClearCategories();
    void AddNewCategory(FText Title);
    void AddCategoryPromoText(FText Category, FText PromoText);
}; // Size: 0x370

class UCategorySwitcherBackgroundImage : public UUserWidget
{
    class UCanvasPanelSlot* mpCanvasSlot;                                             // 0x0260 (size: 0x8)

}; // Size: 0x280

class UCharVisualization : public USceneComponent
{
    class ABaseChar* mpOwningChar;                                                    // 0x01F8 (size: 0x8)
    class UMaterial* mpOutlineMaterial;                                               // 0x0200 (size: 0x8)
    class UFont* mpFont;                                                              // 0x0208 (size: 0x8)
    class UArrowComponent* mpLookingRotationArrow;                                    // 0x0210 (size: 0x8)
    class UArrowComponent* mpTargetRotationArrow;                                     // 0x0218 (size: 0x8)
    class UArrowComponent* mpCharacterRotationArrow;                                  // 0x0220 (size: 0x8)
    class UArrowComponent* mpMovementInputArrow;                                      // 0x0228 (size: 0x8)
    class UArrowComponent* mpLastMovementInputRotationArrow;                          // 0x0230 (size: 0x8)
    class UArrowComponent* mpVelocityArrow;                                           // 0x0238 (size: 0x8)
    class UArrowComponent* mpLastVelocityRotationArrow;                               // 0x0240 (size: 0x8)
    class UTextRenderComponent* mpDebugTextOne;                                       // 0x0248 (size: 0x8)
    class UTextRenderComponent* mpGaitText;                                           // 0x0250 (size: 0x8)
    class UTextRenderComponent* mpDebugTextTwo;                                       // 0x0258 (size: 0x8)
    bool mbActive;                                                                    // 0x0260 (size: 0x1)
    bool mbHaveVisualizationComponentsSpawned;                                        // 0x0261 (size: 0x1)

}; // Size: 0x270

class UCharacterInfoHeaderWidget : public UMetaWidget
{
    bool ShowCharacterSelectButton;                                                   // 0x0378 (size: 0x1)
    FLinearColor FilledStarColor;                                                     // 0x037C (size: 0x10)
    FLinearColor EmptyStarColor;                                                      // 0x038C (size: 0x10)
    FVector2D TeenLevelOffset;                                                        // 0x039C (size: 0x8)
    FVector2D EvilLevelOffset;                                                        // 0x03A4 (size: 0x8)
    class UMaterialInstance* mpProgressMaterialInstance;                              // 0x03B0 (size: 0x8)
    class UMaterialInstanceDynamic* mpDynProgressMaterialInstance;                    // 0x03B8 (size: 0x8)
    class UImage* mpLevelProgressImage;                                               // 0x03C0 (size: 0x8)
    class UHorizontalBox* mpCharacterSelectBox;                                       // 0x03C8 (size: 0x8)
    class UThemeButton* mpCharacterSelectButton;                                      // 0x03D0 (size: 0x8)
    class UCanvasPanel* mpLevelPanel;                                                 // 0x03D8 (size: 0x8)
    class UTextBlock* mpLevelText;                                                    // 0x03E0 (size: 0x8)
    class UTextBlock* mpNameText;                                                     // 0x03E8 (size: 0x8)
    class UWidgetSwitcher* mpFactionSwitcher;                                         // 0x03F0 (size: 0x8)
    class UCanvasPanel* mpTeenPanel;                                                  // 0x03F8 (size: 0x8)
    class UCanvasPanel* mpEvilPanel;                                                  // 0x0400 (size: 0x8)
    class UImage* mpTeenFaceIcon;                                                     // 0x0408 (size: 0x8)
    class UImage* mpEvilFaceIcon;                                                     // 0x0410 (size: 0x8)
    class UNewFlagWidget* mpNewFlagWidget;                                            // 0x0418 (size: 0x8)

    void OnCharacterSelectPressed();
}; // Size: 0x428

class UCharacterLoadout : public ULoadoutBase
{
    TMap<class EWeaponTypeEnum, class UWeaponLoadout*> mWeaponLoadoutByWeaponType;    // 0x0188 (size: 0x50)
    TMap<class EEvilAbilityType, class UWeaponLoadout*> mAbilityLoadoutByEvilAbilityType; // 0x01D8 (size: 0x50)

}; // Size: 0x228

class UCharacterManager : public UObject
{
    TWeakObjectPtr<class UClientStateManager> mOwningClientStateManager;              // 0x0030 (size: 0x8)

}; // Size: 0x1D40

class UCharacterSelectAffinityWidget : public UMetaWidget
{
    class UImage* mpAffinityIcon;                                                     // 0x0378 (size: 0x8)
    class UTextBlock* mpAffinityText;                                                 // 0x0380 (size: 0x8)

}; // Size: 0x388

class UCharacterSelectBioAffinityWidget : public UMetaWidget
{
    class UNavButton* mpNavButton;                                                    // 0x0378 (size: 0x8)
    class UImage* mpAffinityIcon;                                                     // 0x0380 (size: 0x8)

}; // Size: 0x388

class UCharacterSelectBioMovieWidget : public UMetaWidget
{
    class UNavButton* mpNavButton;                                                    // 0x0388 (size: 0x8)
    class UImage* mpMovieIcon;                                                        // 0x0390 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
}; // Size: 0x398

class UCharacterSelectBioPerkWidget : public UMetaWidget
{
    class UNavButton* mpNavButton;                                                    // 0x0388 (size: 0x8)
    class UImage* mpPerkIcon;                                                         // 0x0390 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
}; // Size: 0x398

class UCharacterSelectBioPowerWidget : public UMetaWidget
{
    class UNavButton* mpNavButton;                                                    // 0x0378 (size: 0x8)
    class UImage* mpPowerIcon;                                                        // 0x0380 (size: 0x8)

}; // Size: 0x388

class UCharacterSelectBioScreen : public UBaseScreen
{
    class UTextBlock* mpNameText;                                                     // 0x02E8 (size: 0x8)
    class UWidgetSwitcher* mpBioSwitcher;                                             // 0x02F0 (size: 0x8)
    class UGridPanel* mpTeenBioPanel;                                                 // 0x02F8 (size: 0x8)
    class UGridPanel* mpEvilBioPanel;                                                 // 0x0300 (size: 0x8)
    class UHorizontalBox* mpAffinityBox;                                              // 0x0308 (size: 0x8)
    class UTextBlock* mpQuoteText;                                                    // 0x0310 (size: 0x8)
    class UTextBlock* mpDifficultyText;                                               // 0x0318 (size: 0x8)
    class UTextBlock* mpFlavorText;                                                   // 0x0320 (size: 0x8)
    class UTextBlock* mpAboutMeTitle;                                                 // 0x0328 (size: 0x8)
    class UTextBlock* mpAboutMeText;                                                  // 0x0330 (size: 0x8)
    class UWidgetSwitcher* mpPowersSwitcher;                                          // 0x0338 (size: 0x8)
    class UVerticalBox* mpTeenAffinityBox;                                            // 0x0340 (size: 0x8)
    class UHorizontalBox* mpAffinityListBox;                                          // 0x0348 (size: 0x8)
    class UVerticalBox* mpEvilPowersBox;                                              // 0x0350 (size: 0x8)
    class UHorizontalBox* mpPowersListBox;                                            // 0x0358 (size: 0x8)
    class UHorizontalBox* mpPerksListBox;                                             // 0x0360 (size: 0x8)
    class UHorizontalBox* mpMoviesBox;                                                // 0x0368 (size: 0x8)
    class UTextBlock* mpMovieNameText;                                                // 0x0370 (size: 0x8)
    class UTextBlock* mpDetailsTitle;                                                 // 0x0378 (size: 0x8)
    class UTextBlock* mpDetailsText;                                                  // 0x0380 (size: 0x8)
    ECharacterType mCharacterType;                                                    // 0x0388 (size: 0x1)

    void SetFaction(EFaction faction);
    void SetCharacterType(ECharacterType CharType);
    void PopulateTeenAffinityList();
    void PopulatePerkList(bool bIsTeen);
    void PopulateMovieList();
    void PopulateEvilMutationList();
    void PopulateDetails();
    void OnPowerSelected(FString str);
    void OnPerkSelected(FDbItemId ItemId, FGrantable Grantable);
    void OnMovieSelected(FString str);
    void OnAffinitySelected(FString str);
}; // Size: 0x390

class UCharacterSelectButtonWidget : public UMetaWidget
{
    class UCharacterSelectUserButton* mpCharacterSelectButton;                        // 0x0398 (size: 0x8)
    class UImage* mpEquippedIcon;                                                     // 0x03A0 (size: 0x8)
    class UBorder* mpQuickplayBorder;                                                 // 0x03A8 (size: 0x8)
    class UTextBlock* mpCharacterNameText;                                            // 0x03B0 (size: 0x8)
    class UCanvasPanel* mpLevelPanel;                                                 // 0x03B8 (size: 0x8)
    class UTextBlock* mpLevelText;                                                    // 0x03C0 (size: 0x8)
    class UCanvasPanel* mpBountyPanel;                                                // 0x03C8 (size: 0x8)
    class UTextBlock* mpBountyText;                                                   // 0x03D0 (size: 0x8)
    class UCanvasPanel* mpPreviewPanel;                                               // 0x03D8 (size: 0x8)
    class UNewFlagWidget* mpNewFlagWidget;                                            // 0x03E0 (size: 0x8)
    class UStateSwitcher* mpStateSwitcher;                                            // 0x03E8 (size: 0x8)

    void OnCharacterSelected();
    void OnCharacterDoubleClick();
}; // Size: 0x3F8

class UCharacterSelectMutationWidget : public UMetaWidget
{
    class UImage* mpMutationIcon;                                                     // 0x0388 (size: 0x8)
    class UTextBlock* mpMutationNameText;                                             // 0x0390 (size: 0x8)
    class UTextBlock* mpMutationDescText;                                             // 0x0398 (size: 0x8)
    ECharacterType mCharacterType;                                                    // 0x03A0 (size: 0x1)

    void OnTextureLoaded(class UTexture2D* pTex);
}; // Size: 0x3A8

class UCharacterSelectOverlayWidget : public UBaseOverlay
{
    class UCharacterSelectWidget* mpCharacterSelectWidget;                            // 0x0280 (size: 0x8)

}; // Size: 0x288

class UCharacterSelectPerkWidget : public UMetaWidget
{
    class UStateSwitcher* mpStateSwitcher;                                            // 0x0388 (size: 0x8)
    class UImage* mpItemIcon;                                                         // 0x0390 (size: 0x8)
    class UTextBlock* mpItemNameText;                                                 // 0x0398 (size: 0x8)
    class UTextBlock* mpItemDescText;                                                 // 0x03A0 (size: 0x8)
    ECharacterType mCharacterType;                                                    // 0x03A8 (size: 0x1)

    void OnTextureLoaded(class UTexture2D* pTex);
}; // Size: 0x3B0

class UCharacterSelectPortraitWidget : public UMetaWidget
{
    class UButton* mpButton;                                                          // 0x0378 (size: 0x8)
    class UImage* mpPortraitIcon;                                                     // 0x0380 (size: 0x8)
    class UImage* mpBorder;                                                           // 0x0388 (size: 0x8)
    class UImage* mpSelectionBorder;                                                  // 0x0390 (size: 0x8)

    void OnButtonPressed();
}; // Size: 0x3A0

class UCharacterSelectScreen : public UBaseScreen
{
    class UCharacterSelectWidget* mpCharacterSelectWidget;                            // 0x02C0 (size: 0x8)
    class UCustomizeCharacterWidget* mpCustomizeCharacterWidget;                      // 0x02C8 (size: 0x8)

}; // Size: 0x2D0

class UCharacterSelectTooltipWidget : public UMetaWidget
{
    float HorizontalOffset;                                                           // 0x0378 (size: 0x4)
    float VerticalAlignment;                                                          // 0x037C (size: 0x4)
    class UWidgetSwitcher* mpFactionSwitcher;                                         // 0x0380 (size: 0x8)
    class UCanvasPanel* mpTeenCanvas;                                                 // 0x0388 (size: 0x8)
    class UCanvasPanel* mpEvilCanvas;                                                 // 0x0390 (size: 0x8)
    class UTextBlock* mpTeenNameText;                                                 // 0x0398 (size: 0x8)
    class UImage* mpTeenAffinityIcon;                                                 // 0x03A0 (size: 0x8)
    class UTextBlock* mpTeenQuoteText;                                                // 0x03A8 (size: 0x8)
    class URichTextBlock* mpTeenAboutMeText;                                          // 0x03B0 (size: 0x8)
    class UTextBlock* mpEvilNameText;                                                 // 0x03B8 (size: 0x8)
    class UTextBlock* mpEvilQuoteText;                                                // 0x03C0 (size: 0x8)
    class UTextBlock* mpEvilDifficultyText;                                           // 0x03C8 (size: 0x8)
    class UHorizontalBox* mpEvilMutationsBox;                                         // 0x03D0 (size: 0x8)
    TArray<class UCharacterSelectPerkWidget*> mPerkWidgets;                           // 0x03D8 (size: 0x10)
    TArray<class UCharacterSelectMutationWidget*> mMutationWidgets;                   // 0x03E8 (size: 0x10)

    void PopulateGoodDetails();
    void PopulateEvilDetails();
}; // Size: 0x400

class UCharacterSelectUserButton : public UBaseUserButton
{
    class UImage* mpCharacterImage;                                                   // 0x0478 (size: 0x8)
    class UImage* mpEquippedImage;                                                    // 0x0480 (size: 0x8)

}; // Size: 0x488

class UCharacterSelectWidget : public UUserWidget
{
    bool AllowCustomize;                                                              // 0x0260 (size: 0x1)
    bool ShowBio;                                                                     // 0x0261 (size: 0x1)
    bool CloseOnSelected;                                                             // 0x0262 (size: 0x1)
    bool OverrideFECharacterOnSelect;                                                 // 0x0263 (size: 0x1)
    FMargin ButtonPadding;                                                            // 0x0264 (size: 0x10)
    class UHorizontalBox* mpTeenBox;                                                  // 0x0288 (size: 0x8)
    class UHorizontalBox* mpEvilBox;                                                  // 0x0290 (size: 0x8)
    class UCanvasPanel* mpTeenPanel;                                                  // 0x0298 (size: 0x8)
    class UCanvasPanel* mpEvilPanel;                                                  // 0x02A0 (size: 0x8)
    class UWidget* mpCharacterInfoBox;                                                // 0x02A8 (size: 0x8)
    class UHorizontalBox* mpAffinityBox;                                              // 0x02B0 (size: 0x8)
    class URichTextBlock* mpDifficultyText;                                           // 0x02B8 (size: 0x8)
    class UTextBlock* mpCharacterNameText;                                            // 0x02C0 (size: 0x8)
    class UTextBlock* mpCharacterQuoteText;                                           // 0x02C8 (size: 0x8)
    class UActionButton* mpActionButton;                                              // 0x02D0 (size: 0x8)
    class UActionButton* mpBioButton;                                                 // 0x02D8 (size: 0x8)
    class UCanvasPanel* mpBountyPanel;                                                // 0x02E0 (size: 0x8)
    class UImage* mpQuickplayIcon;                                                    // 0x02E8 (size: 0x8)
    class URichTextBlock* mpBountyText;                                               // 0x02F0 (size: 0x8)

    void SelectCharacter(ECharacterType CharType);
    void OnBioPressed();
    void OnAltAction2();
    void OnAltAction1();
    void OnActionPressed();
    void DoubleClickCharacter(ECharacterType CharType);
}; // Size: 0x310

class UCharacterStatusOverride : public UDataAsset
{
    FTPMovementData mTPMovementData;                                                  // 0x0030 (size: 0x94)
    FTPCharStateData mTPCharStateData;                                                // 0x00C8 (size: 0x68)
    FTPWeaponStateData mTPWeaponStateData;                                            // 0x0130 (size: 0x28)
    FFPCharAnimInstanceData mFPCharAnimInstanceData;                                  // 0x0158 (size: 0x88)
    TMap<FName, float> mVolumeAttributes;                                             // 0x01E0 (size: 0x50)

}; // Size: 0x230

class UCharacterTemplateManager : public UObject
{

    FCharacterBodyShapePreset LoadCharacterBodyShapePreset(FString PresetName);
}; // Size: 0x78

class UChunkLabel : public UDeveloperSettings
{
    TArray<FLabelledChunk> mLabelledChunks;                                           // 0x0038 (size: 0x10)

}; // Size: 0x48

class UCinematicCameraControlPanel : public UUserWidget
{
    class UNavCheckbox* mpDisableCraftingIconsCheckBox;                               // 0x0260 (size: 0x8)
    class UNavCheckbox* mpDisableItemGlintCheckBox;                                   // 0x0268 (size: 0x8)
    class UNavCheckbox* mpDisablePlayerCardsCheckBox;                                 // 0x0270 (size: 0x8)
    class UNavCheckbox* mpDisableDamagePanelCheckBox;                                 // 0x0278 (size: 0x8)
    class UNavCheckbox* mpDisablePickupPanelCheckBox;                                 // 0x0280 (size: 0x8)
    class UNavCheckbox* mpDisableStatusBarCheckBox;                                   // 0x0288 (size: 0x8)
    class UNavCheckbox* mpDisablePingsCheckBox;                                       // 0x0290 (size: 0x8)
    class UNavCheckbox* mpDisableActionBarCheckBox;                                   // 0x0298 (size: 0x8)
    class UNavCheckbox* mpDisableAbilitiesCheckBox;                                   // 0x02A0 (size: 0x8)
    class UTextBlock* mpFlySpeedText;                                                 // 0x02A8 (size: 0x8)
    class UTextBlock* mpFlyAccelerationText;                                          // 0x02B0 (size: 0x8)
    class UTextBlock* mpRotateSpeedText;                                              // 0x02B8 (size: 0x8)
    class UTextBlock* mpCraneSpeedText;                                               // 0x02C0 (size: 0x8)
    class UTextBlock* mpRollSpeedText;                                                // 0x02C8 (size: 0x8)
    class UTextBlock* mpFOVSpeedText;                                                 // 0x02D0 (size: 0x8)
    class USlider* mpFlySpeedSlider;                                                  // 0x02D8 (size: 0x8)
    class USlider* mpFlyAccelerationSlider;                                           // 0x02E0 (size: 0x8)
    class USlider* mpRotateSpeedSlider;                                               // 0x02E8 (size: 0x8)
    class USlider* mpCraneSpeedSlider;                                                // 0x02F0 (size: 0x8)
    class USlider* mpRollSpeedSlider;                                                 // 0x02F8 (size: 0x8)
    class USlider* mpFOVSpeedSlider;                                                  // 0x0300 (size: 0x8)
    float mFlySpeedDefault;                                                           // 0x0308 (size: 0x4)
    float mFlyAccelerationDefault;                                                    // 0x030C (size: 0x4)
    float mRotateSpeedDefault;                                                        // 0x0310 (size: 0x4)
    float mCraneSpeedDefault;                                                         // 0x0314 (size: 0x4)
    float mRollSpeedDefault;                                                          // 0x0318 (size: 0x4)
    float mFOVSpeedDefault;                                                           // 0x031C (size: 0x4)
    float mFocusPlaneDefault;                                                         // 0x0320 (size: 0x4)
    float mDOFIntensityDefault;                                                       // 0x0324 (size: 0x4)
    float mFOVDefault;                                                                // 0x0328 (size: 0x4)
    float mTimeScaleDefault;                                                          // 0x032C (size: 0x4)
    float mTimeSinceLastCursorMove;                                                   // 0x0330 (size: 0x4)
    class UNavCheckbox* mpEnableDOFCheckBox;                                          // 0x0338 (size: 0x8)
    class USlider* mpDOFFocusPlaneSlider;                                             // 0x0340 (size: 0x8)
    class USlider* mpDOFIntensitySlider;                                              // 0x0348 (size: 0x8)
    class UTextBlock* mpDOFFocusPlaneText;                                            // 0x0350 (size: 0x8)
    class UTextBlock* mpDOFIntensityText;                                             // 0x0358 (size: 0x8)
    class USlider* mpFOVSlider;                                                       // 0x0360 (size: 0x8)
    class USlider* mpTimescaleSlider;                                                 // 0x0368 (size: 0x8)
    class UNavCheckbox* mpPauseEngineCheckBox;                                        // 0x0370 (size: 0x8)
    class UButton* mpRestoreDefaultsButton;                                           // 0x0378 (size: 0x8)
    class UButton* mpResetRollButton;                                                 // 0x0380 (size: 0x8)
    class UButton* mpResetFOVButton;                                                  // 0x0388 (size: 0x8)
    class UTextBlock* mpFOVText;                                                      // 0x0390 (size: 0x8)
    class UTextBlock* mpTimescaleText;                                                // 0x0398 (size: 0x8)
    class UTextBlock* mpCurrentModeText;                                              // 0x03A0 (size: 0x8)
    class AGameplayHUD* mpGameplayHUD;                                                // 0x03A8 (size: 0x8)
    class AObserverChar* mpLocalObserverChar;                                         // 0x03B0 (size: 0x8)
    class UImage* mpCursorImage;                                                      // 0x03B8 (size: 0x8)
    TArray<class UWidget*> mAllNavigatableWidgets;                                    // 0x03C0 (size: 0x10)
    TArray<class UImage*> mCursorImageList;                                           // 0x03D0 (size: 0x10)
    int32 mCurrentWidgetIndex;                                                        // 0x03E0 (size: 0x4)

    void UpdateCurrentModeText();
    void Update();
    void SetMultiplierText(float NewValue, class UTextBlock* pTextBlock);
    void SetLocalObserverChar(class AObserverChar* NewValue);
    void SetFloatText(float NewValue, class UTextBlock* pTextBlock, bool bIsDistance, bool bRoundToOneDec);
    void SetCurrentWidgetIndex(int32 Index);
    void OnTimeScaleChanged(float NewValue);
    void OnRotateSpeedChanged(float NewValue);
    void OnRollSpeedChanged(float NewValue);
    void OnRestoreDefaults();
    void OnResetRoll();
    void OnResetFOV();
    void OnPauseEngineChanged(bool bEnabled);
    void OnFOVSpeedChanged(float NewValue);
    void OnFOVChanged(float NewValue);
    void OnFlySpeedChanged(float NewValue);
    void OnFlyAccelerationChanged(float NewValue);
    void OnEnableDOFChanged(bool bEnabled);
    void OnDOFIntensityChanged(float NewValue);
    void OnDOFFocusPlaneChanged(float NewValue);
    void OnDisableStatusBarChanged(bool bEnabled);
    void OnDisablePlayerCards(bool bEnabled);
    void OnDisablePingsChanged(bool bEnabled);
    void OnDisablePickupPanelChanged(bool bEnabled);
    void OnDisableItemGlintChanged(bool bEnabled);
    void OnDisableDamagePanelChanged(bool bEnabled);
    void OnDisableCraftingIconsChanged(bool bEnabled);
    void OnDisableActionBarChanged(bool bEnabled);
    void OnDisableAbilitiesChanged(bool bEnabled);
    void OnDeactivate();
    void OnCraneSpeedChanged(float NewValue);
    void OnActivate();
    void LookForOwner();
    class AObserverChar* GetLocalObserverChar();
    int32 GetCurrentWidgetIndex();
}; // Size: 0x3E8

class UClientStateManager : public UObject
{
    class UBackendManager* mpBackendManager;                                          // 0x0028 (size: 0x8)
    class UCharacterManager* mpCharacterManager;                                      // 0x0030 (size: 0x8)
    class UPlayerAccountManager* mpPlayerAccountManager;                              // 0x0038 (size: 0x8)
    class UWeaponManager* mpWeaponManager;                                            // 0x0040 (size: 0x8)
    class UMatchEventQueue* mpMatchEventQueue;                                        // 0x0048 (size: 0x8)
    class ULobbyLoadoutController* mpLobbyLoadoutController;                          // 0x0050 (size: 0x8)
    class UPrerequisiteValidator* mpPrerequisiteValidator;                            // 0x0058 (size: 0x8)

}; // Size: 0xE0

class UClientUpdaterProgressWidget : public UUserWidget
{
    class UProgressBar* mpProgressBar;                                                // 0x0260 (size: 0x8)
    class UTextBlock* mpStatusText;                                                   // 0x0268 (size: 0x8)

}; // Size: 0x270

class UClothingItemDataAsset : public UItemDataAsset
{
    int32 mSavedClothingItemDataAssetVersion;                                         // 0x0058 (size: 0x4)
    FString mBodyShapePresetName;                                                     // 0x0060 (size: 0x10)
    TMap<class EMeshSlotVisibility, class FTeenClothingMeshData> mMeshData;           // 0x0070 (size: 0x50)
    TMap<class FName, class UMaterialInterface*> mMaterialOverrides;                  // 0x00C0 (size: 0x50)
    TArray<FName> mClothPhysicsAssetsToReceive;                                       // 0x0110 (size: 0x10)
    TArray<FTeenClothingMeshData> mClothingMeshData;                                  // 0x0120 (size: 0x10)
    TArray<FCharacterStatusToMaterialParameter> mCharacterStatusToMaterialScalarParameter; // 0x0130 (size: 0x10)
    TArray<FSkinFXSystemList> mPersistentFXSystems;                                   // 0x0140 (size: 0x10)
    TArray<FMaterialTransferByValue> mMaterialParameterTransferByValue;               // 0x0150 (size: 0x10)
    TMap<class ESockType, class FTeenClothingMeshData> mSockMeshData;                 // 0x0160 (size: 0x50)
    TMap<class EMeshSlot, class EMeshSlotVisibility> mHideLayers;                     // 0x01B0 (size: 0x50)
    TMap<class EMeshSlotVisibility, class FHideLayers> mAdditionalHideLayersByVisibility; // 0x0200 (size: 0x50)
    EMeshSlot mMeshSlot;                                                              // 0x0250 (size: 0x1)
    EMeshSlot mDefaultItemMeshSlot;                                                   // 0x0251 (size: 0x1)
    TArray<FName> mAdditionalNamedAssetsToEquip;                                      // 0x0258 (size: 0x10)
    bool mbSecondarySlotItem;                                                         // 0x0268 (size: 0x1)
    bool mbIsFrontEndUnsafe;                                                          // 0x0269 (size: 0x1)
    bool mbIsFrontEndBulky;                                                           // 0x026A (size: 0x1)
    bool bContributePhysicsAssetsToClothSim;                                          // 0x026B (size: 0x1)
    TArray<FClothingPhysicsAsset> mClothPhysicsAssetsToContribute;                    // 0x0270 (size: 0x10)
    FFeetClothingSettings mLeftFootSettings;                                          // 0x0280 (size: 0xC)
    FFeetClothingSettings mRightFootSettings;                                         // 0x028C (size: 0xC)
    TMap<int32, ETuckPointBehaviour> mLeftTuckPointBehaviours;                        // 0x0298 (size: 0x50)
    TMap<int32, ETuckPointBehaviour> mRightTuckPointBehaviours;                       // 0x02E8 (size: 0x50)
    FName mGroupName;                                                                 // 0x0338 (size: 0x8)
    FColorSwatchDetails mColorSwatchDetails;                                          // 0x0340 (size: 0x24)
    float mBoundsScale;                                                               // 0x0364 (size: 0x4)
    bool mbUseRootHairParameters;                                                     // 0x0368 (size: 0x1)
    FHairProperties mRootHairParameters;                                              // 0x0370 (size: 0xA0)
    class UClothingItemDataAsset* mpRootDataAssetOverride;                            // 0x0410 (size: 0x8)
    bool mbUseRootDefaultHeadWithCostume;                                             // 0x0418 (size: 0x1)
    class UClothingItemDataAsset* mpRootDefaultHeadAsset;                             // 0x0420 (size: 0x8)
    TArray<class UClothingItemDataAsset*> mRootDefaultAssets;                         // 0x0428 (size: 0x10)
    TMap<class FName, class UClothingItemDataAsset*> mNamedAssets;                    // 0x0438 (size: 0x50)
    TMap<class FName, class USkeletalMesh*> mNamedMeshes;                             // 0x0488 (size: 0x50)

}; // Size: 0x4D8

class UClothingItemTileWidget : public UBaseItemTile
{
    class UTexture2D* RadialTexture;                                                  // 0x03D0 (size: 0x8)
    class UImage* mpGroupIcon;                                                        // 0x03D8 (size: 0x8)
    class UImage* StatusEquippedIcon;                                                 // 0x03E0 (size: 0x8)
    FName mGroupName;                                                                 // 0x03E8 (size: 0x8)

}; // Size: 0x418

class UClothingLoadoutWidget : public UBaseLoadoutWidget
{
    class ULoadoutRadialMenuWidget* mpWheelPreviewWidget;                             // 0x02F0 (size: 0x8)
    class UImage* mpStickerImage;                                                     // 0x02F8 (size: 0x8)
    class UCanvasPanel* mpInfoPanel;                                                  // 0x0300 (size: 0x8)
    class UTextBlock* mpNameText;                                                     // 0x0308 (size: 0x8)
    class UBorder* mpRarityBorder;                                                    // 0x0310 (size: 0x8)
    class UTextBlock* mpRarityText;                                                   // 0x0318 (size: 0x8)
    class UOverlay* mpGroupOverlay;                                                   // 0x0320 (size: 0x8)
    class UHorizontalBox* mpGroupBox;                                                 // 0x0328 (size: 0x8)
    class UTextBlock* mpDescriptionText;                                              // 0x0330 (size: 0x8)
    class UActionButton* mpActionButton;                                              // 0x0338 (size: 0x8)
    class UNonSelectableScrollBox* mpNonSelectableScrollBox;                          // 0x0340 (size: 0x8)
    class UBorder* mpDescriptionBorder;                                               // 0x0348 (size: 0x8)

    void OnStickerTextureLoaded(class UTexture2D* pTex);
    void OnListItemSelected(FDbItemId ItemId, FGrantable Grantable);
    void OnListItemPressed(FDbItemId ItemId, FGrantable Grantable);
    void OnActionPressed();
}; // Size: 0x378

class UConfirmationModalWidget : public UBaseModal
{
    class UTextBlock* mpMessageText;                                                  // 0x02A8 (size: 0x8)
    class UBoxUserButton* mpConfirmButton;                                            // 0x02B0 (size: 0x8)
    class UTextBlock* mpBECCodeText;                                                  // 0x02B8 (size: 0x8)
    class UTextBlock* mpErrorCodeText;                                                // 0x02C0 (size: 0x8)

    void SetMessageText(const FText& Text);
    void SetConfirmButtonText(const FText& Text);
    void SetCloudscriptErrorCode(int32 ErrorCode);
    void SetBECCodeText(const FText& Text);
    void OnConfirmPressed();
}; // Size: 0x2C8

class UContextMenuButtonWidget : public UUserWidget
{
    class UNavButton* mpNavButton;                                                    // 0x0260 (size: 0x8)
    class UTextBlock* mpButtonText;                                                   // 0x0268 (size: 0x8)

    void SetButtonEnabled(bool bSet);
    void OnButtonPressed();
}; // Size: 0x280

class UContextMenuWidget : public UUserWidget
{
    class UNavButton* mpPreviousNavWidget;                                            // 0x0260 (size: 0x8)
    class UVerticalBox* mpButtonBox;                                                  // 0x0268 (size: 0x8)
    class UCanvasPanel* mpPositionCanvas;                                             // 0x0270 (size: 0x8)
    bool mbIsMouseDown;                                                               // 0x0290 (size: 0x1)
    bool mbSpawnedThisFrame;                                                          // 0x0291 (size: 0x1)
    bool mbSpawnedLastFrame;                                                          // 0x0292 (size: 0x1)

}; // Size: 0x298

class UControlRemapBindOverlayWidget : public UBaseOverlay
{
    class URichTextBlock* mpBindText;                                                 // 0x02A0 (size: 0x8)
    class URichTextBlock* mpWarningText;                                              // 0x02A8 (size: 0x8)
    EGameActionType mGameActionType;                                                  // 0x02B0 (size: 0x1)
    FKey mKeyToRebind;                                                                // 0x02B8 (size: 0x18)
    EGameActionType mGameActionToRebind;                                              // 0x02D0 (size: 0x1)

    void SetBindingOverlayText(EGameActionType GameActionType);
    void SetBindingModeActive(bool bVal);
    void OnRebindAction();
    void OnKeyPressed(const FKey& Key, bool bIsPressedDown);
    void OnDenyRebindAction();
}; // Size: 0x2D8

class UControlRemapItemWidget : public UUserWidget
{
    class UTextBlock* mpKeycodeNameText;                                              // 0x0260 (size: 0x8)
    class UNavButton* mpPrimaryBindingButton;                                         // 0x0268 (size: 0x8)
    class UTextBlock* mpKeyNameText;                                                  // 0x0270 (size: 0x8)
    class UButton* mpControllerBindingButton;                                         // 0x0278 (size: 0x8)
    class UImage* mpControllerBindingImage;                                           // 0x0280 (size: 0x8)
    EGameActionType mGameActionType;                                                  // 0x0288 (size: 0x1)
    class UControlRemapPanelWidget* mpControlRemapPanelWidget;                        // 0x0290 (size: 0x8)

    void UpdateKeyNameText();
    void UpdateKeyCodeNameText();
    void SetControlRemapPanelWidget(class UControlRemapPanelWidget* pControlRemapPanelWidget);
    void OnPrimaryBindingClicked();
    class UNavButton* GetNavButton();
}; // Size: 0x298

class UControlRemapPanelWidget : public UUserWidget
{
    TArray<class UControlRemapItemWidget*> mControlRemapItemWidgetList;               // 0x0260 (size: 0x10)
    class UNavScrollBox* mpNavScrollBox;                                              // 0x0270 (size: 0x8)
    class UMouseTab* mpMouseTab;                                                      // 0x0278 (size: 0x8)

}; // Size: 0x280

class UControlTab : public UBaseTab
{
    class UOptionToggleUserButton* mpInvertY;                                         // 0x0290 (size: 0x8)
    class UOptionUserButton* mpMouseSensitivity;                                      // 0x0298 (size: 0x8)
    class UOptionUserButton* mpBindingTest;                                           // 0x02A0 (size: 0x8)
    class UOptionUserButton* mpRestoreDefaults;                                       // 0x02A8 (size: 0x8)
    class USlider* mpMouseSensitivitySlider;                                          // 0x02B0 (size: 0x8)
    class UTextBlock* mpMouseSensitivityText;                                         // 0x02B8 (size: 0x8)
    class USlider* mpControllerSensitivityXSlider;                                    // 0x02C0 (size: 0x8)
    class UTextBlock* mpControllerSensitivityXText;                                   // 0x02C8 (size: 0x8)
    class USlider* mpControllerSensitivityYSlider;                                    // 0x02D0 (size: 0x8)
    class UTextBlock* mpControllerSensitivityYText;                                   // 0x02D8 (size: 0x8)
    class UTextBlock* mpWeaponSensitivityXText;                                       // 0x02E0 (size: 0x8)
    class USlider* mpWeaponSensitivityXSlider;                                        // 0x02E8 (size: 0x8)
    class UTextBlock* mpWeaponSensitivityYText;                                       // 0x02F0 (size: 0x8)
    class USlider* mpWeaponSensitivityYSlider;                                        // 0x02F8 (size: 0x8)
    class UControlRemapBindOverlayWidget* mpControlRemapBindOverlayWidget;            // 0x0300 (size: 0x8)
    class UControlRemapPanelWidget* mpControlRemapPanelWidget;                        // 0x0308 (size: 0x8)
    class UNavButton* mpRestoreDefaultsButton;                                        // 0x0310 (size: 0x8)
    class UNavCheckbox* mpToggleCrouchCheckbox;                                       // 0x0318 (size: 0x8)
    class UNavCheckbox* mpToggleSprintCheckbox;                                       // 0x0320 (size: 0x8)

    void SetMouseSensitivity(float Val);
    void SetInvertY(bool bSet);
    void SetControllerWeaponSensitivityY(float Val);
    void SetControllerWeaponSensitivityX(float Val);
    void SetControllerWeaponSensitivity(FVector2D sens);
    void SetControllerSensitivityY(float Val);
    void SetControllerSensitivityX(float Val);
    void SetControllerSensitivity(FVector2D sens);
    void OnToggleSprintChanged(bool bIsChecked);
    void OnToggleCrouchChanged(bool bIsChecked);
    void OnRestoreDefaultControlsConfirm();
    void OnRestoreDefaultControls();
    void OnMouseSensitivityChanged(float Value);
    void OnInvertYChanged(bool bIsChecked);
    void OnControllerWeaponSensitivityYChanged(float Value);
    void OnControllerWeaponSensitivityXChanged(float Value);
    void OnControllerSensitivityYChanged(float Value);
    void OnControllerSensitivityXChanged(float Value);
}; // Size: 0x340

class UControllerTab : public UBaseTab
{
    class UOptionSingleUserButton* mpEditLayout;                                      // 0x0290 (size: 0x8)
    class UOptionSliderUserButton* mpTeenHorizontalSensitivity;                       // 0x0298 (size: 0x8)
    class UOptionSliderUserButton* mpTeenVerticalSensitivity;                         // 0x02A0 (size: 0x8)
    class UOptionSliderUserButton* mpEvilHorizontalSensitivity;                       // 0x02A8 (size: 0x8)
    class UOptionSliderUserButton* mpEvilVerticalSensitivity;                         // 0x02B0 (size: 0x8)
    class UOptionSliderUserButton* mpFiringSensitivity;                               // 0x02B8 (size: 0x8)
    class UOptionToggleUserButton* mpInvertY;                                         // 0x02C0 (size: 0x8)
    class UOptionToggleUserButton* mpVibration;                                       // 0x02C8 (size: 0x8)
    class UOptionToggleUserButton* mpSprintToggle;                                    // 0x02D0 (size: 0x8)
    class UOptionToggleUserButton* mpCrouchToggle;                                    // 0x02D8 (size: 0x8)
    class UOptionSingleUserButton* mpResetDefaultsButton;                             // 0x02E0 (size: 0x8)

    void OnResetDefaultsPressed();
    void OnResetDefaultsConfirmed();
}; // Size: 0x2E8

class UConversionEnumFunctions : public UBlueprintFunctionLibrary
{

    EMeshSlot Conv_StringToMeshSlot(FString enumString);
    EDbItemType Conv_StringToDbItemType(FString enumString);
    ECharacterType Conv_StringToCharacterType(FString enumString);
    FString Conv_PlayerSlotToLoadoutType(const EPlayerSlot Slot);
    FString Conv_MeshSlotToString(const EMeshSlot enumValue);
    FString Conv_CharacterTypeToString(const ECharacterType enumValue);
}; // Size: 0x28

class UCopyPoseAnimInstance : public UAnimInstance
{
}; // Size: 0x2C0

class UCorsairPeripheralComponent : public USceneComponent
{
}; // Size: 0x220

class UCraftStationManagerComponent : public UActorComponent
{
    TArray<FCraftingStruct> mCraftingStructs;                                         // 0x00B0 (size: 0x10)

}; // Size: 0xC0

class UCraftingProgressBar : public UBaseActionProgressBar
{
    float mCancelPercent;                                                             // 0x0270 (size: 0x4)
    bool mbWasCancellingLastFrame;                                                    // 0x0274 (size: 0x1)
    class UTexture2D* mpNonLethalWeaponProgress;                                      // 0x0278 (size: 0x8)
    class UTexture2D* mpLethalWeaponProgress;                                         // 0x0280 (size: 0x8)
    bool mbLethalWeapon;                                                              // 0x0288 (size: 0x1)
    class ATPChar* mpCurrentlyTrackedChar;                                            // 0x0290 (size: 0x8)

    FText GetWeaponTextFromCraftingStation(class AStationBase* pStationBase, bool bGetPreviousWeapon);
}; // Size: 0x298

class UCrossPlatformFriend : public UObject
{

    bool IsOnline();
    bool IsInGame();
    FString GetUserIdString();
    FUniqueNetIdRepl GetUserId();
    FString GetRealName();
    FString GetDisplayName();
    FString GetAuthenticatedPlatformName();
}; // Size: 0x38

class UCrossPlatformOnlineUser : public UObject
{

    FString GetUserIdString();
    FUniqueNetIdRepl GetUserId();
    FString GetRealName();
    FString GetDisplayName();
}; // Size: 0x38

class UCrossPlatformPartyMember : public UObject
{

    FString GetUserIdString();
    FUniqueNetIdRepl GetUserId();
    FString GetDisplayName();
}; // Size: 0x38

class UCrossSkinDataAsset : public UTeenWeaponSkinDataAsset
{
    FSkinParticleSystem mCrossParticleSystem;                                         // 0x01E8 (size: 0xD8)
    FSkinLight mCrossLight;                                                           // 0x02C0 (size: 0x18)
    EWise_WEP_Cross mWiseCrossSwitch;                                                 // 0x02D8 (size: 0x1)

}; // Size: 0x2E0

class UCurrencyInfoHeaderWidget : public UUserWidget
{
    class UTextBlock* mpAccountHCText;                                                // 0x0260 (size: 0x8)
    class UTextBlock* mpAccountSCText;                                                // 0x0268 (size: 0x8)

}; // Size: 0x270

class UCustomCodeUserWidget : public UUserWidget
{
    class UBaseUserButton* mpCopyButton;                                              // 0x0260 (size: 0x8)
    class UBaseUserButton* mpHideShowButton;                                          // 0x0268 (size: 0x8)
    class UOverlay* mpCopyOverlay;                                                    // 0x0270 (size: 0x8)
    class UTextBlock* mpCodeText;                                                     // 0x0278 (size: 0x8)
    bool mbHidden;                                                                    // 0x0280 (size: 0x1)

    void OnHideShowPressed();
    void OnCopyPressed();
}; // Size: 0x288

class UCustomFactionUserButton : public UBaseUserButton
{
    EFaction FactionType;                                                             // 0x0478 (size: 0x1)
    class UImage* mpCharIcon;                                                         // 0x0480 (size: 0x8)
    class UImage* mpSpectatorIcon;                                                    // 0x0488 (size: 0x8)
    class UImage* mpSelectionImage;                                                   // 0x0490 (size: 0x8)
    class UTextBlock* mpFactionText;                                                  // 0x0498 (size: 0x8)

}; // Size: 0x4A0

class UCustomFactionWidget : public UMetaWidget
{
    class UCustomFactionUserButton* mpTeenUserButton;                                 // 0x0378 (size: 0x8)
    class UCustomFactionUserButton* mpEvilUserButton;                                 // 0x0380 (size: 0x8)
    class UCustomFactionUserButton* mpSpectatorUserButton;                            // 0x0388 (size: 0x8)
    class UImage* mpBgImage;                                                          // 0x0390 (size: 0x8)
    class UImage* mpBlurImage;                                                        // 0x0398 (size: 0x8)

    void OnTeenSelected();
    void OnTeenDoubleClick();
    void OnSpectatorSelected();
    void OnEvilSelected();
    void OnEvilDoubleClick();
}; // Size: 0x3A0

class UCustomGameMapSelectUserButton : public UBaseUserButton
{
    class UTextBlock* mpMapNameText;                                                  // 0x0478 (size: 0x8)
    class UImage* mpMapThumbnail;                                                     // 0x0480 (size: 0x8)
    class UButton* mpLeftButton;                                                      // 0x0488 (size: 0x8)
    class UButton* mpRightButton;                                                     // 0x0490 (size: 0x8)

    void OnNavDirection(ESelectionNavigation dir);
    void OnMapRight();
    void OnMapLeft();
}; // Size: 0x498

class UCustomGamesModalWidget : public UBaseModal
{
    class UBoxUserButton* mpCancelButton;                                             // 0x02A8 (size: 0x8)
    class UBoxUserButton* mpHostButton;                                               // 0x02B0 (size: 0x8)
    class UBoxUserButton* mpJoinButton;                                               // 0x02B8 (size: 0x8)
    class UBoxUserButton* mpSubmitLobbyCodeButton;                                    // 0x02C0 (size: 0x8)
    class UBoxUserButton* mpJoinCancelButton;                                         // 0x02C8 (size: 0x8)
    class UWidgetSwitcher* mpWidgetSwitcher;                                          // 0x02D0 (size: 0x8)
    class UEditableTextBox* mpLobbyCodeTextBox;                                       // 0x02D8 (size: 0x8)

    void OnSubmitLobbyCode();
    void OnJoinPressed();
    void OnJoinCancelPressed();
    void OnHostPressed();
    void OnCancelPressed();
}; // Size: 0x2E0

class UCustomMeshPieceAnimInstance : public UAnimInstance
{
    class USkeletalMeshComponent* mpMeshToCopyFrom;                                   // 0x02B8 (size: 0x8)
    class UAnimSequence* mpCorrectiveAnimationSequence;                               // 0x02C0 (size: 0x8)

    void SetMeshToCopyFrom(class USkeletalMeshComponent* pSkeletalMeshToCopyFrom);
    void SetCorrectiveAnimationSequence(class UAnimSequence* pCorrectiveAnimationSequence);
    class USkeletalMeshComponent* GetMeshToCopyFrom();
    class UAnimSequence* GetCorrectiveSequence();
}; // Size: 0x2D0

class UCustomProgressBar : public UUserWidget
{
    class UProgressBar* mpProgressBar;                                                // 0x0260 (size: 0x8)
    float PercentValue;                                                               // 0x0268 (size: 0x4)
    class UTexture* mpFillTexture;                                                    // 0x0270 (size: 0x8)
    FLinearColor mFillColor;                                                          // 0x0278 (size: 0x10)
    FLinearColor mBackgroundColor;                                                    // 0x0288 (size: 0x10)
    class UMaterialInterface* mpProgressBarMaterialInterface;                         // 0x0298 (size: 0x8)
    class UTexture* mpMaskTexture;                                                    // 0x02A0 (size: 0x8)
    class UMaterialInstanceDynamic* mpFillDynamicMaterialInstance;                    // 0x02A8 (size: 0x8)
    class UMaterialInstanceDynamic* mpBackgroundDynamicMaterialInstance;              // 0x02B0 (size: 0x8)

    void SetPercent(float Val);
    void SetMaskTexture(class UTexture* pTexture);
    void SetFillTexture(class UTexture* Texture);
    void SetFillColor(FLinearColor TintColor);
    void SetDynamicMaterials();
    void SetBackgroundFillTexture(class UTexture2D* Texture);
    void SetBackgroundFillColor(FLinearColor TintColor);
    float GetPercent();
    class UTexture* GetFillTexture();
    void BlendToFillTexture(class UTexture* pTexture, float timeToBlend);
}; // Size: 0x2C8

class UCustomizableEffectsComponent : public UBaseCustomizationComponent
{
    class UEvilTransformationDataAsset* mpTransformationEffect;                       // 0x01A8 (size: 0x8)
    class UEvilScreamDataAsset* mpScreamEffect;                                       // 0x01B0 (size: 0x8)
    class UEvilRageDataAsset* mpRageEffect;                                           // 0x01B8 (size: 0x8)
    class UEvilFeastDataAsset* mpFeastEffect;                                         // 0x01C0 (size: 0x8)

}; // Size: 0x1C8

class UCustomizableImage : public UImage
{
    TArray<class UMaterialTransferConfig*> mpMaterialParameterTransferConfigs;        // 0x0210 (size: 0x10)
    class UTexture2D* mpTexture;                                                      // 0x0220 (size: 0x8)
    class UMaterialInterface* mpMaterial;                                             // 0x0228 (size: 0x8)
    TMap<FMaterialParameterInfoExt, float> mScalarParameters;                         // 0x0230 (size: 0x50)
    TMap<class FMaterialParameterInfoExt, class FLinearColor> mVectorParameters;      // 0x0280 (size: 0x50)
    TMap<class FMaterialParameterInfoExt, class UTexture*> mTextureParameters;        // 0x02D0 (size: 0x50)

}; // Size: 0x320

class UCustomizableText : public UTextBlock
{
    TArray<class UMaterialTransferConfig*> mpMaterialParameterTransferConfigs;        // 0x02A8 (size: 0x10)
    FLinearColor mTextTintColor;                                                      // 0x02B8 (size: 0x10)
    FLinearColor mOutlineTintColor;                                                   // 0x02C8 (size: 0x10)
    TMap<FMaterialParameterInfoExt, float> mScalarParameters;                         // 0x02D8 (size: 0x50)
    TMap<class FMaterialParameterInfoExt, class FLinearColor> mVectorParameters;      // 0x0328 (size: 0x50)
    TMap<class FMaterialParameterInfoExt, class UTexture*> mTextureParameters;        // 0x0378 (size: 0x50)

}; // Size: 0x3C8

class UCustomizableUserWidget : public UUserWidget
{
    TArray<FMaterialTransferByValue> mMaterialParameterTransferByValue;               // 0x0260 (size: 0x10)

}; // Size: 0x270

class UCustomizationConfigBase : public UDataAsset
{
    FGameplayTagContainer mTags;                                                      // 0x0030 (size: 0x20)
    FGameplayTagRequirements mRequirements;                                           // 0x0050 (size: 0x40)

}; // Size: 0x90

class UCustomizationOverrideSettings : public UDataAsset
{
    TMap<class ECharacterType, class FLoadoutItemOverrideList> mCharacterOverrides;   // 0x0030 (size: 0x50)

}; // Size: 0x80

class UCustomizationSkeletalMesh : public UCustomizationConfigBase
{
    FSkinSkeletalMesh mSkinSkeletalMesh;                                              // 0x0090 (size: 0x168)

}; // Size: 0x1F8

class UCustomizeCharacterWidget : public UUserWidget
{
    bool HandlesCustomizeCharacterRotation;                                           // 0x0260 (size: 0x1)
    bool HandlesMainMenuCharacterRotation;                                            // 0x0261 (size: 0x1)
    bool HandlesMoviePreviewRotation;                                                 // 0x0262 (size: 0x1)
    float TargetLerpForward;                                                          // 0x0264 (size: 0x4)
    float LerpForwardSpeed;                                                           // 0x0268 (size: 0x4)
    bool mbIsMouseDown;                                                               // 0x026C (size: 0x1)
    FVector2D mClickedPosition;                                                       // 0x0270 (size: 0x8)
    FVector2D mCurrentPosition;                                                       // 0x0278 (size: 0x8)
    float mCursorDelta;                                                               // 0x0280 (size: 0x4)
    float mCurrentSpinVelocity;                                                       // 0x0284 (size: 0x4)
    float mCurrentWheelDelta;                                                         // 0x0288 (size: 0x4)
    float mCurrentAddedRotation;                                                      // 0x028C (size: 0x4)
    float mTargetAddedRotation;                                                       // 0x0290 (size: 0x4)
    bool mbLerpingForward;                                                            // 0x0294 (size: 0x1)

}; // Size: 0x298

class UDEBUG_EORScreen : public UBaseScreen
{
    class UWidgetSwitcher* mpWidgetSwitcher;                                          // 0x02C0 (size: 0x8)
    class UEndOfRoundMovieSummaryWidget* mpMovieSummaryWidget;                        // 0x02C8 (size: 0x8)
    class UEndOfRoundLevelUpWidget* mpLevelUpWidget;                                  // 0x02D0 (size: 0x8)
    class UEndOfRoundWeaponRewardsWidget* mpWeaponRewardsWidget;                      // 0x02D8 (size: 0x8)
    class UEndOfRoundAccountMasteryWidget* mpAccountMasteryWidget;                    // 0x02E0 (size: 0x8)
    class UEndOfRoundMatchSummaryWidget* mpMatchSummaryWidget;                        // 0x02E8 (size: 0x8)
    class UEndOfRoundPlayerDetailsWidget* mpPlayerDetailsWidget;                      // 0x02F0 (size: 0x8)
    EEndOfRoundState mScreenState;                                                    // 0x02F8 (size: 0x1)
    FMatchSummaryInfoData mFakeMatchSummaryInfoData;                                  // 0x0300 (size: 0x80)

    void OnActivate();
    void OnAction();
    FDbItemId GetDBItemIDFromText(class UObject* pWorldContextObject, FString itemIdString);
}; // Size: 0x380

class UDamageIndicatorManager : public UActorComponent
{
    TSubclassOf<class UUserWidget> mHUDDamageClass;                                   // 0x00B0 (size: 0x8)

}; // Size: 0xC8

class UDangerSenseTab : public UBaseTab
{
    class UNavScrollBox* mpNavScrollBox;                                              // 0x0280 (size: 0x8)
    class UOptionSelectorUserButton* mpDangerSenseTypeSelector;                       // 0x0288 (size: 0x8)
    class UOptionSliderUserButton* mpDangerSenseSizeSlider;                           // 0x0290 (size: 0x8)
    class UOptionSelectorUserButton* mpDangerSenseColorSelector;                      // 0x0298 (size: 0x8)
    class UImage* mpReticlePreviewImage;                                              // 0x02A0 (size: 0x8)
    class UWidgetSwitcher* mpBackgroundPreviewWidgetSwitcher;                         // 0x02A8 (size: 0x8)

    void SetDangerSenseType(int32 Type);
    void SetDangerSenseSize(float Size);
    void SetDangerSenseColor(int32 Color);
    void OnDiscardChanges();
    void OnDangerSenseTypeChanged();
    void OnDangerSenseSizeChanged(float NewValue);
    void OnDangerSenseColorChanged();
    void OnBackgroundToggle();
    bool HasChanges();
    int32 GetDangerSenseType();
    float GetDangerSenseSize();
    int32 GetDangerSenseColor();
}; // Size: 0x2B0

class UDarkShardManager : public UActorComponent
{
    bool mbDarkShardsEnabled;                                                         // 0x00B0 (size: 0x1)
    bool mbEvilEnergySpawningEnabled;                                                 // 0x00B1 (size: 0x1)
    float mTimeToSpawnShard;                                                          // 0x00B4 (size: 0x4)
    int32 mActiveEvilEnergyNum;                                                       // 0x00B8 (size: 0x4)
    float mTimeToSpawnEvilEnergy;                                                     // 0x00BC (size: 0x4)
    class ADarkShard* mpCurrentDarkShard;                                             // 0x00C0 (size: 0x8)
    class ADarkShard* mpDarkShard;                                                    // 0x00C8 (size: 0x8)
    float mShardGoodEffectTimeRemaining;                                              // 0x00D0 (size: 0x4)
    float mShardEvilEffectTimeRemaining;                                              // 0x00D4 (size: 0x4)
    float mShardGoodEffectTime;                                                       // 0x00D8 (size: 0x4)
    float mShardEvilEffectTime;                                                       // 0x00DC (size: 0x4)
    TArray<class ADarkShardSpawner*> mDarkShardSpawners;                              // 0x00E0 (size: 0x10)
    class ADarkShardSpawner* mpLastChosenShardSpawner;                                // 0x00F0 (size: 0x8)
    class AEvilScreamEffect* mpServerCurrentDarkShardScreamEffect;                    // 0x00F8 (size: 0x8)
    bool mbServerDebugDarkShardEnabled;                                               // 0x0100 (size: 0x1)
    bool mbServerDebugEvilEnergyEnabled;                                              // 0x0101 (size: 0x1)
    FDarkShardManagerOnDarkShardSpawned mOnDarkShardSpawned;                          // 0x0108 (size: 0x10)
    void OnDarkShardSpawned();
    FDarkShardManagerOnDarkShardDestroyed mOnDarkShardDestroyed;                      // 0x0118 (size: 0x10)
    void OnDarkShardDestroyed();
    float mServerShardRampTime;                                                       // 0x0128 (size: 0x4)
    bool mbNextShardEligibleForEmpowered;                                             // 0x012C (size: 0x1)

    void OnRep_CurrentDarkShard();
    FOnDarkShardSpawnedReturnValue OnDarkShardSpawned();
    FOnDarkShardDestroyedReturnValue OnDarkShardDestroyed();
    void MulticastAllOnDarkShardSpawned();
    void MulticastAllOnDarkShardDestroyed();
    bool IsShardGoodEffectActive();
    bool IsShardEvilEffectActive();
    bool IsEvilEnergySpawningEnabled();
    float GetTimeToSpawnShard();
    float GetShardGoodEffectTimeRemaining();
    float GetShardGoodEffectTime();
    float GetShardEvilEffectTimeRemaining();
    float GetShardEvilEffectTime();
    class AGameplayGS* GetOwnerGameplayGS();
    class UDarkShardManager* GetInstance(class UWorld* pWorld);
    int32 GetEvilEnergyNum();
    float GetDarkShardMaxLifetime();
    float GetDarkShardInterval();
    float GetDarkShardEvilEffectTimeMultiplier();
    float GetDarkShardDelayMultiplier();
    class ADarkShard* GetCurrentDarkShard();
    void DoServerUpdateEvilEnergySpawns(float DeltaSeconds);
    void DoServerUpdateDarkShardSpawns(float DeltaSeconds);
    void DoServerUpdateDarkShards(float DeltaSeconds);
    void DoServerToggleDebugDarkShard();
    void DoServerSpawnNewShard();
    void DoServerSpawnEvilEnergy();
    void DoServerSetTimeToSpawnShard(float Time);
    void DoServerSetShardRampTime(float Time);
    void DoServerSetShardGoodEffectTimeRemaining(float Time);
    void DoServerSetShardGoodEffectTime(float Time);
    void DoServerSetShardEvilEffectTimeRemaining(float Time);
    void DoServerSetShardEvilEffectTime(float Time);
    void DoServerSetNextShardEligibleForEmpowered(bool bSet);
    void DoServerSetEvilEnergySpawningEnabled(bool bSet);
    void DoServerSetDebugEvilEnergy(bool bEnabled, bool bDestroySpawnedOrbs);
    void DoServerSetDarkShardsEnabled(bool bSet);
    void DoServerSetDarkShardScreamInert();
    void DoServerSetCurrentDarkShardScreamEffect(class AEvilScreamEffect* pEffect);
    void DoServerSetCurrentDarkShard(class ADarkShard* pDarkShard);
    void DoServerSetActiveEvilEnergyNum(int32 Num);
    void DoServerResetShardSpawn();
    void DoServerResetEvilEnergySpawning();
    void DoServerOnShardActivated();
    void DoServerOnEvilEnergyDestroyed();
    bool DoServerIsNextShardEligibleForEmpowered();
    bool DoServerIsDebugDarkShardEnabled();
    float DoServerGetShardRampTime();
    void DoServerDelayShardSpawn();
    bool AreDarkShardsEnabled();
}; // Size: 0x130

class UDarkShardProgressBar : public UBaseActionProgressBar
{
    class UCanvasPanel* mpCaptureProgressPanel;                                       // 0x0270 (size: 0x8)
    class UImage* mpCaptureProgressImage;                                             // 0x0278 (size: 0x8)
    class UMaterialInstance* mpCircularProgressMaterialInstance;                      // 0x0280 (size: 0x8)

}; // Size: 0x288

class UDbItemDatabase : public UObject
{
    TMap<class FDbItemId, class UDbItemTemplate*> mItemsByDbItemId;                   // 0x0028 (size: 0x50)

}; // Size: 0x78

class UDbItemTemplate : public UObject
{
}; // Size: 0x140

class UDebugScreen : public UBaseScreen
{
    class UNavButton* mpLeftCategoryButton;                                           // 0x02C0 (size: 0x8)
    class UNavButton* mpRightCategoryButton;                                          // 0x02C8 (size: 0x8)
    class UTextBlock* mpCategoryText;                                                 // 0x02D0 (size: 0x8)
    class UTextBlock* mpWeaponBoxText;                                                // 0x02D8 (size: 0x8)
    class UVerticalBox* mpTeenBox;                                                    // 0x02E0 (size: 0x8)
    class UVerticalBox* mpWeaponBox;                                                  // 0x02E8 (size: 0x8)
    class UVerticalBox* mpEvilBox;                                                    // 0x02F0 (size: 0x8)
    class UVerticalBox* mpClothingBox;                                                // 0x02F8 (size: 0x8)
    class UVerticalBox* mpEvilSkinBox;                                                // 0x0300 (size: 0x8)
    class UVerticalBox* mpEvilEffectBox;                                              // 0x0308 (size: 0x8)
    class UVerticalBox* mpWeaponSkinBox;                                              // 0x0310 (size: 0x8)
    class UVerticalBox* mpEmoteBox;                                                   // 0x0318 (size: 0x8)
    class UVerticalBox* mpStickerBox;                                                 // 0x0320 (size: 0x8)
    class UVerticalBox* mpSpectralBox;                                                // 0x0328 (size: 0x8)
    class UVerticalBox* mpMiscBox;                                                    // 0x0330 (size: 0x8)
    class UVerticalBox* mpAIBox;                                                      // 0x0338 (size: 0x8)
    TArray<class UNavButton*> mpTeenButtons;                                          // 0x0340 (size: 0x10)
    TArray<class UNavButton*> mpEvilButtons;                                          // 0x0350 (size: 0x10)
    TArray<class UNavButton*> mpWeaponButtons;                                        // 0x0360 (size: 0x10)
    TMap<class EMeshSlot, class UComboBoxString*> mpMeshSlotComboBoxes;               // 0x0370 (size: 0x50)
    TMap<class EWeaponTypeEnum, class UComboBoxString*> mWeaponTypeComboBoxes;        // 0x03C0 (size: 0x50)
    TMap<uint32, UComboBoxString*> mEvilEffectComboBoxes;                             // 0x0410 (size: 0x50)
    TArray<class UComboBoxString*> mEmoteComboBoxes;                                  // 0x0460 (size: 0x10)
    TArray<class UComboBoxString*> mStickerComboBoxes;                                // 0x0470 (size: 0x10)
    class UComboBoxString* mpEvilSpectralComboBox;                                    // 0x0480 (size: 0x8)
    class UComboBoxString* mpTeenSpectralComboBox;                                    // 0x0488 (size: 0x8)
    class UComboBoxString* mpEvilSkinComboBox;                                        // 0x0490 (size: 0x8)
    class UComboBoxString* mpAICharacterTypeComboBox;                                 // 0x0498 (size: 0x8)
    class UComboBoxString* mpSelectableAIComboBox;                                    // 0x04A0 (size: 0x8)
    class UNavButton* mpPossessAIButton;                                              // 0x04A8 (size: 0x8)
    class UNavButton* mpSummonAIButton;                                               // 0x04B0 (size: 0x8)
    class UNavButton* mpKillAIButton;                                                 // 0x04B8 (size: 0x8)
    class UNavButton* mpSpawnAIButton;                                                // 0x04C0 (size: 0x8)
    class USpinBox* mpAIActionRepeatDelaySpinBox;                                     // 0x04C8 (size: 0x8)
    class UCheckBox* mpAIActionRepeatCheckBox;                                        // 0x04D0 (size: 0x8)
    TMap<class EAccessorySlot, class UComboBoxString*> mEvilAccessoryComboBoxes;      // 0x04D8 (size: 0x50)
    TMap<class FName, class FSoftObjectPath> mStoredPaths;                            // 0x0528 (size: 0x50)
    class UNavButton* mpApplyClothingButton;                                          // 0x0578 (size: 0x8)
    class UNavButton* mpRandomClothingButton;                                         // 0x0580 (size: 0x8)
    class UCheckBox* mpRandomClothingCycleCheckBox;                                   // 0x0588 (size: 0x8)
    class UNavButton* mpApplyEvilSkinButton;                                          // 0x0590 (size: 0x8)
    class UNavButton* mpApplyEvilEffectsButton;                                       // 0x0598 (size: 0x8)
    class UNavButton* mpApplyWeaponSkinButton;                                        // 0x05A0 (size: 0x8)
    class UNavButton* mpApplyEmotesButton;                                            // 0x05A8 (size: 0x8)
    class UNavButton* mpApplyStickersButton;                                          // 0x05B0 (size: 0x8)
    class UNavButton* mpApplySpectralsButton;                                         // 0x05B8 (size: 0x8)
    class UNavButton* mpInjuryButton;                                                 // 0x05C0 (size: 0x8)
    class UNavButton* mpProneButton;                                                  // 0x05C8 (size: 0x8)
    class UNavButton* mpCoweringButton;                                               // 0x05D0 (size: 0x8)
    class UNavButton* mpDeathButton;                                                  // 0x05D8 (size: 0x8)
    class UNavButton* mpEvilDeathButton;                                              // 0x05E0 (size: 0x8)
    class UNavButton* mpIncorporealButton;                                            // 0x05E8 (size: 0x8)
    class UNavButton* mpScreamButton;                                                 // 0x05F0 (size: 0x8)
    class UNavButton* mpStunButton;                                                   // 0x05F8 (size: 0x8)
    class UNavButton* mpFlinchButton;                                                 // 0x0600 (size: 0x8)
    class UNavButton* mpResetCooldownsButton;                                         // 0x0608 (size: 0x8)
    class UNavButton* mpForceCooldownsButton;                                         // 0x0610 (size: 0x8)
    class UNavButton* mpEvilCameraButton;                                             // 0x0618 (size: 0x8)
    class UNavButton* mpToggleFPS;                                                    // 0x0620 (size: 0x8)
    class UNavButton* mpToggleCharVis;                                                // 0x0628 (size: 0x8)
    class UNavButton* mpToggleFrozen;                                                 // 0x0630 (size: 0x8)
    class UNavButton* mpDisintegrate;                                                 // 0x0638 (size: 0x8)
    class UNavButton* mpDebugDarkShard;                                               // 0x0640 (size: 0x8)
    class UNavButton* mpTritonDebug;                                                  // 0x0648 (size: 0x8)
    class UNavButton* mpMotionSentinelDebug;                                          // 0x0650 (size: 0x8)
    class UNavButton* mpAddRage;                                                      // 0x0658 (size: 0x8)
    class UNavButton* mpRemoveRage;                                                   // 0x0660 (size: 0x8)
    class UNavButton* mpElectrocute;                                                  // 0x0668 (size: 0x8)
    class UNavButton* mpSubdued;                                                      // 0x0670 (size: 0x8)
    class UNavButton* mpStaggered;                                                    // 0x0678 (size: 0x8)
    class UNavButton* mpPlayTVIntro;                                                  // 0x0680 (size: 0x8)
    class UButton* mpButtonMarred;                                                    // 0x0688 (size: 0x8)
    class UButton* mpButtonInhibited;                                                 // 0x0690 (size: 0x8)
    class UButton* mpButtonAddTeenOnHitNum;                                           // 0x0698 (size: 0x8)
    class UButton* mpButtonInvincible;                                                // 0x06A0 (size: 0x8)
    TArray<class ATPChar*> mSpawnedAIs;                                               // 0x06B8 (size: 0x10)

    void UpdateCategory();
    void OnRandomizeClothing();
    void OnPressedWeapon(class UNavButton* pPressedButton);
    void OnPressedTritonDebug();
    void OnPressedToggleSubdued();
    void OnPressedToggleStaggered();
    void OnPressedToggleInvincible();
    void OnPressedToggleFrozen();
    void OnPressedToggleFPS();
    void OnPressedToggleCharVis();
    void OnPressedTeen(class UNavButton* pPressedButton);
    void OnPressedSummonAI();
    void OnPressedStun();
    void OnPressedSpawnAI();
    void OnPressedScream();
    void OnPressedResetCooldowns();
    void OnPressedRemoveRage();
    void OnPressedProne();
    void OnPressedPossessAI();
    void OnPressedPlayTVIntro();
    void OnPressedMarred();
    void OnPressedKillAI();
    void OnPressedInjury();
    void OnPressedInhibited();
    void OnPressedIncorporeal();
    void OnPressedForceCooldowns();
    void OnPressedFlinch();
    void OnPressedEvilCamera();
    void OnPressedEvil(class UNavButton* pPressedButton);
    void OnPressedElectrocute();
    void OnPressedDisintegrate();
    void OnPressedDebugDarkShard();
    void OnPressedDeath();
    void OnPressedCowering();
    void OnPressedAddTeenOnHitNum();
    void OnPressedAddRage();
    void OnMotionSentinelDebug();
    void OnCategoryRight();
    void OnCategoryLeft();
    void OnApplyWeaponSkin();
    void OnApplyStickers();
    void OnApplySpectrals();
    void OnApplyEvilSkin();
    void OnApplyEvilEffects();
    void OnApplyEmotes();
    void OnApplyClothing();
}; // Size: 0x6D0

class UDebugSocialPartyInvite : public UUserWidget
{
    class UEditableTextBox* mpPlayerPUID;                                             // 0x0260 (size: 0x8)
    class UEditableTextBox* mpPlayerToInviteETextBox;                                 // 0x0268 (size: 0x8)
    class UButton* mpSendInviteButton;                                                // 0x0270 (size: 0x8)

    void OnInvitePressed();
}; // Size: 0x280

class UDebugVoiceChatChannelItem : public UDebugVoiceChatItemBase
{
    class UTextUserButton* mpButton;                                                  // 0x0270 (size: 0x8)

    void OnSelected();
}; // Size: 0x278

class UDebugVoiceChatItemBase : public UUserWidget
{
    class UTextBlock* mpTextBlock;                                                    // 0x0260 (size: 0x8)

    void SetText(FText Text);
    void SetOwningScreen(class UDebugVoiceChatWidget* pOwningScreen);
    FText GetText();
    class UDebugVoiceChatWidget* GetOwningScreen();
}; // Size: 0x270

class UDebugVoiceChatWidget : public UUserWidget
{
    UClass* mpVoiceChannelClass;                                                      // 0x0260 (size: 0x8)
    UClass* mpVoiceChannelParticipantClass;                                           // 0x0268 (size: 0x8)
    UClass* mpPartyParticipantClass;                                                  // 0x0270 (size: 0x8)
    UClass* mpLobbyParticipantClass;                                                  // 0x0278 (size: 0x8)
    class UVerticalBox* mpVoiceChannels;                                              // 0x0280 (size: 0x8)
    class UVerticalBox* mpVCParticipants;                                             // 0x0288 (size: 0x8)
    class UVerticalBox* mpPartyParticipants;                                          // 0x0290 (size: 0x8)
    class UVerticalBox* mpLobbyParticipants;                                          // 0x0298 (size: 0x8)
    class UTextBlock* mpTransmitChannelID;                                            // 0x02A0 (size: 0x8)
    class UTextBlock* mpPartyVoiceChatID;                                             // 0x02A8 (size: 0x8)
    class UTextBlock* mpLobbyVoiceChatID;                                             // 0x02B0 (size: 0x8)
    class UButton* mpRefreshButton;                                                   // 0x02B8 (size: 0x8)
    class UTextBlock* mpPlayerName;                                                   // 0x02C0 (size: 0x8)

    void UpdateSelected();
    void Toggle();
    void SetSelectedChannel(FString selectedChannelName);
    void RefreshWidget();
    void PopulateVoiceChatParticipants();
    void PopulateVoiceChannels();
    void PopulatePlayerInfo();
    void PopulatePartyParticipants();
    void PopulateLobbyParticipants();
    void PopulateChannelIDs();
    void ClearAll();
}; // Size: 0x2E0

class UDecalManager : public USceneComponent
{
    TArray<class ADecalActor*> mDecalInfoArray;                                       // 0x01F8 (size: 0x10)
    class USurfaceInteractionData* mpPreviousSurfaceInteractionData;                  // 0x0208 (size: 0x8)
    class USurfaceInteractionData* mpCurrentSurfaceInteractionData;                   // 0x0210 (size: 0x8)
    float mTimeSinceLeavingLastSurface;                                               // 0x0218 (size: 0x4)
    TArray<class UMaterialInstance*> mFeetTrailDecalMaterials;                        // 0x0220 (size: 0x10)
    TArray<class UMaterialInstance*> mHandTrailDecalMaterials;                        // 0x0230 (size: 0x10)
    class UMaterialInstance* mpPoolDecalMaterial;                                     // 0x0240 (size: 0x8)

    void MulticastAllCreateBloodDecal(float LifeTime, float DecalSize);
    class ADecalActor* CreateSurfaceDecal(ECharacterDecalType decalType);
}; // Size: 0x250

class UDelegateInfo : public UObject
{
}; // Size: 0x48

class UDemonSwordSkinDataAsset : public UTeenWeaponSkinDataAsset
{
    FSkinParticleSystem mSwipeParticles;                                              // 0x01E8 (size: 0xD8)
    FSkinParticleSystem mTrailParticles;                                              // 0x02C0 (size: 0xD8)
    FSkinParticleSystem mExplosionParticles;                                          // 0x0398 (size: 0xD8)
    FSkinDecal mTrailDecal;                                                           // 0x0470 (size: 0x58)
    FSkinStaticMesh mTrailMesh;                                                       // 0x04C8 (size: 0xA8)
    EWise_WEP_DemonSword mWiseDemonSwordSwitch;                                       // 0x0570 (size: 0x1)

}; // Size: 0x578

class UDeployNoisemakerProgressBar : public UBaseActionProgressBar
{
}; // Size: 0x270

class UDesignableUserWidget : public UUserWidget
{

    void OnSynchronizeProperties();
}; // Size: 0x260

class UDev_SocialOnlinePlayersWidget : public UMetaWidget
{
    class UVerticalBox* mpOnlinePlayersBox;                                           // 0x0388 (size: 0x8)

}; // Size: 0x390

class UDev_SocialPlayerWidget : public UMetaWidget
{
    class UButton* mpButton;                                                          // 0x03A8 (size: 0x8)
    class USocialPortraitWidget* mpPortraitWidget;                                    // 0x03B0 (size: 0x8)
    class UTextBlock* mpPlayerNameText;                                               // 0x03B8 (size: 0x8)
    class USocialStatusWidget* mpStatusWidget;                                        // 0x03C0 (size: 0x8)

    void OnSpectatePressed();
    void OnReportPressed();
    void OnPartyPressed();
    void OnButtonPressed();
}; // Size: 0x3C8

class UDisarmDollTrapProgressBar : public UBaseActionProgressBar
{
}; // Size: 0x270

class UDiscardWeaponProgressBar : public UBaseActionProgressBar
{
}; // Size: 0x270

class UDiscordManager : public UObject
{
}; // Size: 0x28

class UDollMasterAccessoryDataAsset : public UEvilAccessoryDataAsset
{
    FSkinSkeletalMesh mDollMinionThirdPersonMesh;                                     // 0x03D0 (size: 0x168)
    FSkinSkeletalMesh mDollMinionFirstPersonMesh;                                     // 0x0538 (size: 0x168)

}; // Size: 0x6A0

class UDollMasterEmoteDataAsset : public UEmoteDataAsset
{
    FEmoteData mDollEmoteData;                                                        // 0x0078 (size: 0x20)

}; // Size: 0x98

class UDollMasterSkinDataAsset : public UEvilSkinDataAsset
{
    FSkinSkeletalMesh mDollMinionThirdPersonMesh;                                     // 0x0378 (size: 0x168)
    FSkinSkeletalMesh mDollMinionFirstPersonMesh;                                     // 0x04E0 (size: 0x168)
    FSkinParticleSystem mChannelingParticleSystem;                                    // 0x0648 (size: 0xD8)

}; // Size: 0x720

class UDollMinionAnimInstance : public UEvilCharAnimInstance
{
    FDollAnimInstanceData mDollAnimInstanceData;                                      // 0x0378 (size: 0x1)

}; // Size: 0x380

class UDollmasterAnimInstance : public UEvilCharAnimInstance
{
    FDlmrAnimInstanceData mDlmrAnimInstanceData;                                      // 0x0378 (size: 0x2)

    void AnimNotify_PlaceTrap(const class UAnimNotify* Notify);
    void AnimNotify_ChannelingStart(const class UAnimNotify* Notify);
    void AnimNotify_ChannelingEnd(const class UAnimNotify* Notify);
}; // Size: 0x380

class UDropdownUserButton : public UBaseUserButton
{
    FText Text;                                                                       // 0x0480 (size: 0x18)
    TEnumAsByte<ETextJustify::Type> Justification;                                    // 0x0498 (size: 0x1)
    class UTextBlock* mpTextBlock;                                                    // 0x04A0 (size: 0x8)

}; // Size: 0x4A8

class UEORCharacterSwitcherPlayerWidget : public UUserWidget
{
    class UImage* mpCharacterImage;                                                   // 0x0260 (size: 0x8)
    class UStateSwitcher* mpStateSwitcher;                                            // 0x0268 (size: 0x8)
    class UWidgetSwitcher* mpFactionSwitcher;                                         // 0x0270 (size: 0x8)
    class UWidgetSwitcher* mpFactionBorderSwitcher;                                   // 0x0278 (size: 0x8)

}; // Size: 0x288

class UEORCharacterSwitcherWidget : public UUserWidget
{
    TArray<class UEORCharacterSwitcherPlayerWidget*> mCharacterPlayerWidgets;         // 0x0260 (size: 0x10)
    class UButton* mpLeftCategoryButton;                                              // 0x0480 (size: 0x8)
    class UButton* mpRightCategoryButton;                                             // 0x0488 (size: 0x8)

    void OnInputAction_ChangeCharacterRight(bool bPressed);
    void OnInputAction_ChangeCharacterLeft(bool bPressed);
    void ChangeCharacterRight();
    void ChangeCharacterLeft();
}; // Size: 0x498

class UEORMovieRewardCard : public UBaseRewardWidget
{
    class UImage* mpRewardImage;                                                      // 0x03C0 (size: 0x8)

}; // Size: 0x3C8

class UEORMutationPowerWidget : public UUserWidget
{
    class UTextBlock* mpMutationName;                                                 // 0x0270 (size: 0x8)
    class UTextBlock* mpAbilityName;                                                  // 0x0278 (size: 0x8)
    class UImage* mpMutationIcon;                                                     // 0x0280 (size: 0x8)
    class UStateSwitcher* mpStateSwitcher;                                            // 0x0288 (size: 0x8)
    class UImage* mpDefaultMutationIcon;                                              // 0x0290 (size: 0x8)

    void SetEquipped();
    void SetEmpty();
    void OnTextureLoaded(class UTexture2D* pTex);
    void NativeTick(const FGeometry& MyGeometry, float InDeltaTime);
    void NativeConstruct();
}; // Size: 0x2B0

class UEORPerkLoadoutWidget : public UUserWidget
{
    class UTextBlock* mpPerkName;                                                     // 0x0270 (size: 0x8)
    class UTextBlock* mpPerkAffinityType;                                             // 0x0278 (size: 0x8)
    class UImage* mpPerkIcon;                                                         // 0x0280 (size: 0x8)
    class UStateSwitcher* mpStateSwitcher;                                            // 0x0288 (size: 0x8)
    class UPerkTierWidget* mpTierWidget;                                              // 0x0290 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
}; // Size: 0x2B0

class UEORPrizeLoadoutWidget : public UUserWidget
{
    class UTextBlock* mpPrizeName;                                                    // 0x0270 (size: 0x8)
    class UTextBlock* mpPrizeRarity;                                                  // 0x0278 (size: 0x8)
    class UImage* mpPrizeIcon;                                                        // 0x0280 (size: 0x8)
    class UStateSwitcher* mpStateSwitcher;                                            // 0x0288 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
}; // Size: 0x2A8

class UEORRewardProgressWidget : public UUserWidget
{
    class UCustomProgressBar* mpCustomProgressBar;                                    // 0x0260 (size: 0x8)

}; // Size: 0x268

class UEORSceneTitleWidget : public UUserWidget
{
    class UWidgetAnimation* mpFadeIn;                                                 // 0x0260 (size: 0x8)
    class UWidgetAnimation* mpFadeOut;                                                // 0x0268 (size: 0x8)
    class UWidgetAnimation* mpFadeOutAndDestroy;                                      // 0x0270 (size: 0x8)
    class UTextBlock* mpSceneTitle;                                                   // 0x0278 (size: 0x8)
    class UImage* mpSceneCompletedImage;                                              // 0x0280 (size: 0x8)
    class UHorizontalBox* mpContainerBox;                                             // 0x0288 (size: 0x8)
    class UMovieRewardsOverlayWidget* mpOwnerOverlayWidget;                           // 0x0290 (size: 0x8)

    void SetSceneData(const FSceneState& SceneState);
    void SetOwnerOverlayWidget(class UMovieRewardsOverlayWidget* Val);
    void SetLastMovieScene(bool Val);
    void PushSceneTitleWidgetDown();
    void OnSceneTitleOutFinishedAndDestroy();
    void OnSceneTitleOutFinished();
    void OnSceneTitleInFinished();
    bool IsLastMovieScene();
    class UMovieRewardsOverlayWidget* GetOwnerOverlayWidget();
    void AnimateSceneIn();
    void AnimateSceneAway();
    void AnimateAwayAndDestroy();
}; // Size: 0x2A0

class UEORScoreCategoryWidget : public UUserWidget
{
    class UTextBlock* mpCategoryText;                                                 // 0x0260 (size: 0x8)
    class UTextBlock* mpCategoryScore;                                                // 0x0268 (size: 0x8)
    class UTextBlock* mpCategoryBonusScore;                                           // 0x0270 (size: 0x8)
    class UStateSwitcher* mpStateSwitcher;                                            // 0x0278 (size: 0x8)

}; // Size: 0x288

class UEORWeaponPowerWidget : public UUserWidget
{
    class UTextBlock* mpWeaponPowerName;                                              // 0x0270 (size: 0x8)
    class UTextBlock* mpWeaponName;                                                   // 0x0278 (size: 0x8)
    class UTextBlock* mpEmptyWeaponName;                                              // 0x0280 (size: 0x8)
    class UImage* mpWeaponPowerImage;                                                 // 0x0288 (size: 0x8)
    class UStateSwitcher* mpStateSwitcher;                                            // 0x0290 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
}; // Size: 0x2B0

class UEQG_CirclePathingGrid : public UEnvQueryGenerator_PathingGrid
{
}; // Size: 0x170

class UEffigyAnimInstance : public UAnimInstance
{
    class UAnimSequence* mpEffigyAnimation;                                           // 0x02B8 (size: 0x8)
    class UAnimSequence* mpEffigyCreatedAnimation;                                    // 0x02C0 (size: 0x8)

    bool IsBeingUsed();
    bool IsBeingCreated();
    class UAnimSequence* GetEffigyCreatedAnimFromOwner();
    class UAnimSequence* GetEffigyAnimFromOwner();
}; // Size: 0x2D0

class UEffigySkinDataAsset : public UItemDataAsset
{
    FSkinSkeletalMesh mSkeletalMesh;                                                  // 0x0058 (size: 0x168)
    class UTexture2D* mpHUDIconTexture;                                               // 0x01C0 (size: 0x8)

}; // Size: 0x1C8

class UEmoteComponent : public UBaseCustomizationComponent
{
    TMap<uint32, UEmoteDataAsset*> mEmotes;                                           // 0x01A8 (size: 0x50)

}; // Size: 0x1F8

class UEmoteDataAsset : public UItemDataAsset
{
    FEmoteData mEmoteData;                                                            // 0x0058 (size: 0x20)

    bool IsEvilEmote();
}; // Size: 0x78

class UEndOfRoundAccountMasteryWidget : public UEndOfRoundBaseWidget
{
    class UAccountRewardsOverlayWidget* mpRewardsOverlayWidget;                       // 0x02F8 (size: 0x8)

    void OnActivate(FPlayerMatchInfoData playerInfoData);
}; // Size: 0x300

class UEndOfRoundBaseWidget : public UUserWidget
{
    class UEndOfRoundProgressSliderWidget* mpProgressSliderWidget;                    // 0x0260 (size: 0x8)
    FMatchSummaryInfoData mMatchSummaryInfoData;                                      // 0x0268 (size: 0x80)

    void UpdateAutoSkip(float DeltaTime);
    void Skip();
    void SetMatchSummaryInfoData(FMatchSummaryInfoData Val);
    void SetLoaded(bool Val);
    void NativeTick(const FGeometry& MyGeometry, float InDeltaTime);
    void NativeConstruct();
    bool IsLoaded();
    bool IsFinished();
    void InitializeScreen();
    FMatchSummaryInfoData GetMatchSummaryInfoData();
    float GetAutoSkipTime();
    void FinishScreen();
}; // Size: 0x2F8

class UEndOfRoundDailyRetentionWidget : public UEndOfRoundBaseWidget
{
}; // Size: 0x2F8

class UEndOfRoundIssueStarWidget : public UUserWidget
{
    class UFlipbookAnimator* mpFlipbook;                                              // 0x0260 (size: 0x8)

}; // Size: 0x268

class UEndOfRoundIssueSummaryWidget : public UEndOfRoundBaseWidget
{
    class UTextBlock* mpIssueIdentifierText;                                          // 0x0310 (size: 0x8)
    class UTextBlock* mpTierNumText;                                                  // 0x0318 (size: 0x8)
    class UHorizontalBox* mpStarsBox;                                                 // 0x0320 (size: 0x8)
    class UTextBlock* mpXpUntilText;                                                  // 0x0328 (size: 0x8)
    class UTextBlock* mpRewardText;                                                   // 0x0330 (size: 0x8)
    class UHorizontalBox* mpRewardsBox;                                               // 0x0338 (size: 0x8)
    class UWidgetAnimation* RankUpAnim;                                               // 0x0340 (size: 0x8)

    void OnStarAnimFinished();
    void OnActivate(FPlayerMatchInfoData PlayerMatchInfoData);
}; // Size: 0x378

class UEndOfRoundLevelUpWidget : public UEndOfRoundBaseWidget
{
    class UTextBlock* mpLevelNumText;                                                 // 0x02F8 (size: 0x8)
    class UProgressBar* mpLevelProgressBar;                                           // 0x0300 (size: 0x8)
    class UTextBlock* mpXPAmountText;                                                 // 0x0308 (size: 0x8)
    class UTextBlock* mpXPText;                                                       // 0x0310 (size: 0x8)
    class UTextBlock* mpPrizeBonusXpText;                                             // 0x0318 (size: 0x8)
    class UTextBlock* mpBountyBonusXpText;                                            // 0x0320 (size: 0x8)
    class UTextBlock* mpCurrentXPText;                                                // 0x0328 (size: 0x8)
    class UTextBlock* mpMaxXPText;                                                    // 0x0330 (size: 0x8)
    class UTextBlock* mpGainedAuraText;                                               // 0x0338 (size: 0x8)
    class UImage* mpCharacterPortrait;                                                // 0x0340 (size: 0x8)
    class UWidgetSwitcher* mpFactionBorderSwitcher;                                   // 0x0348 (size: 0x8)
    class UTextBlock* mpCurrentLevelText;                                             // 0x0350 (size: 0x8)
    class UTextBlock* mpNextLevelText;                                                // 0x0358 (size: 0x8)
    class UTextBlock* mpUnlockedPrizeNum;                                             // 0x0360 (size: 0x8)
    class UTextBlock* mpNextPrizePackUnlockLimit;                                     // 0x0368 (size: 0x8)
    class UImage* mpPrizeIcon;                                                        // 0x0370 (size: 0x8)
    class UCanvasPanel* mpPrizeUnlockedPanel;                                         // 0x0378 (size: 0x8)
    class UCanvasPanel* mpXPPanel;                                                    // 0x0380 (size: 0x8)
    class UCanvasPanel* mpMaxLevelReachedBox;                                         // 0x0388 (size: 0x8)
    class UTextBlock* mpFluxAmountBigText;                                            // 0x0390 (size: 0x8)
    class UTextBlock* mpTotalFluxEarnedText;                                          // 0x0398 (size: 0x8)
    class UTextBlock* mpBountyFluxText;                                               // 0x03A0 (size: 0x8)
    class UHorizontalBox* mpBountyFluxBox;                                            // 0x03A8 (size: 0x8)
    class UWidgetAnimation* mpXPGainIntroAnim;                                        // 0x03B0 (size: 0x8)
    class UWidgetAnimation* mpLevelUpAnim;                                            // 0x03B8 (size: 0x8)
    class UWidgetAnimation* mpPrizeUnlockedAnim;                                      // 0x03C0 (size: 0x8)
    class UWidgetAnimation* mpAuraGainedAnim;                                         // 0x03C8 (size: 0x8)
    class UWidgetAnimation* mpFirstPrizeUnlockedAnim;                                 // 0x03D0 (size: 0x8)
    class UWidgetAnimation* mpFirstLevelUpAnim;                                       // 0x03D8 (size: 0x8)
    class UWidgetAnimation* mpShowTotalFluxEarned;                                    // 0x03E0 (size: 0x8)
    class UWidgetAnimation* mpShowBonusTotalAnim;                                     // 0x03E8 (size: 0x8)
    class UWidgetAnimation* mpShowBountyTotalAnim;                                    // 0x03F0 (size: 0x8)
    class UWidgetAnimation* mpMaxLevelReachedAnim;                                    // 0x03F8 (size: 0x8)
    float mTimeToFinishProgression;                                                   // 0x0400 (size: 0x4)
    float mTimeToShowBonusXP;                                                         // 0x0404 (size: 0x4)
    float mPauseTimeBetweenXPAnimations;                                              // 0x0408 (size: 0x4)

    void UpdateLevelText(int32 levelNumber);
    void SetLevelupData(FPlayerMatchInfoData PlayerMatchInfoData);
    void OnXPGainIntroAnimFinished();
    void OnMaxLevelReachedAnimFinished();
    void OnLevelupAnimFinished();
    void OnBountyXPAnimFinished();
    void OnBonusXPAnimFinished();
    void OnActivate(FPlayerMatchInfoData PlayerMatchInfoData);
}; // Size: 0x458

class UEndOfRoundMatchSummaryWidget : public UEndOfRoundBaseWidget
{
    class UButton* mpFinishButtonWidget;                                              // 0x02F8 (size: 0x8)
    class UMatchStateSummaryWidget* mpMatchStateSummaryWidget;                        // 0x0300 (size: 0x8)
    class UMatchIdTextBox* mpMatchIdTextBox;                                          // 0x0308 (size: 0x8)

    void OnClickedFinish();
    bool IsMatchSummaryInfoValid();
}; // Size: 0x310

class UEndOfRoundMovieSummaryWidget : public UEndOfRoundBaseWidget
{
    class UMovieRewardsOverlayWidget* mpMovieRewardsWidget;                           // 0x02F8 (size: 0x8)

    void SetNewlyCompletedScenesList(const TArray<FSceneState> newlyCompletedScenesList);
    void PopulateMovieRewardsData(const TArray<FString>& completedScenesKeysData);
    void OnActivate();
}; // Size: 0x310

class UEndOfRoundPlayerDetailsWidget : public UUserWidget
{
    class UEndOfRoundPlayerInfoWidget* mpPlayerInfoWidget;                            // 0x0260 (size: 0x8)
    class UEORCharacterSwitcherWidget* mpCharacterSwitcherWidget;                     // 0x0268 (size: 0x8)
    TArray<class UEORPerkLoadoutWidget*> mpPerkLoadoutWidgets;                        // 0x0270 (size: 0x10)
    TArray<class UEORWeaponPowerWidget*> mpWeaponPowerWidgets;                        // 0x0280 (size: 0x10)
    TArray<class UEORScoreCategoryWidget*> mpScoreCategoryWidgets;                    // 0x0290 (size: 0x10)
    TArray<class UEORMutationPowerWidget*> mpMutationPowerWidgets;                    // 0x02A0 (size: 0x10)
    class UEORPrizeLoadoutWidget* mpPrizeLoadoutWidget;                               // 0x02B0 (size: 0x8)
    class UWidgetSwitcher* mpEquippedItemsSwitcher;                                   // 0x02B8 (size: 0x8)

    void UpdateScoreCategories(const FPlayerMatchInfoData& playerDataToShow);
    void UpdateCurrentPlayerDetailsToShow();
    void UpdateCharacterSwitcherWidgetVisibility();
    void RefreshPlayerData(const FMatchSummaryInfoData& matchSummaryInfo, const FPlayerMatchInfoData& playerDataToShow);
    void PopulateWidgetsWithPlayerDetails(FPlayerMatchInfoData playerDataToShow);
    void PopulateInGamePlayerDetails(class ATPChar* pTrackedChar);
    void NativeTick(const FGeometry& MyGeometry, float InDeltaTime);
    void NativeConstruct();
    void InitializeScreen(FMatchSummaryInfoData MatchSummaryInfoData, FPlayerMatchInfoData playerDataToShow);
    int32 GetWidgetIndexFromWeaponType(EWeaponTypeEnum weaponType);
}; // Size: 0x450

class UEndOfRoundPlayerInfoWidget : public UUserWidget
{
    FLinearColor mEvilTextColor;                                                      // 0x0260 (size: 0x10)
    FLinearColor mTeenTextColor;                                                      // 0x0270 (size: 0x10)
    class UTexture2D* DefaultAccountIcon;                                             // 0x0280 (size: 0x8)
    class UImage* mpCharPortraitImage;                                                // 0x0288 (size: 0x8)
    class UImage* mpShockIcon;                                                        // 0x0290 (size: 0x8)
    class UImage* mpHolyIcon;                                                         // 0x0298 (size: 0x8)
    class UImage* mpBurnIcon;                                                         // 0x02A0 (size: 0x8)
    class UImage* mpOccultIcon;                                                       // 0x02A8 (size: 0x8)
    class UTextBlock* mpCharacterType;                                                // 0x02B0 (size: 0x8)
    class UTextBlock* mpPlayerName;                                                   // 0x02B8 (size: 0x8)
    class UTextBlock* mpPlayerLevel;                                                  // 0x02C0 (size: 0x8)
    class UTextBlock* mpFinalScore;                                                   // 0x02C8 (size: 0x8)
    class UTextBlock* mpFinalBonusScore;                                              // 0x02D0 (size: 0x8)
    class UTextBlock* mpPlayerStatus;                                                 // 0x02D8 (size: 0x8)
    class UCustomProgressBar* mpPlayerHealthBar;                                      // 0x02E0 (size: 0x8)
    class UHorizontalBox* mpStigmaHitsBox;                                            // 0x02E8 (size: 0x8)
    class UTextBlock* mpTotalEvilHits;                                                // 0x02F0 (size: 0x8)
    class UTextBlock* mpHitsPerTeen;                                                  // 0x02F8 (size: 0x8)
    class USizeBox* mpPingSizeBox;                                                    // 0x0300 (size: 0x8)
    class UTextBlock* mpPingText;                                                     // 0x0308 (size: 0x8)
    class UVerticalBox* mpCharacterStateBox;                                          // 0x0310 (size: 0x8)
    class UWidgetSwitcher* mpBorderImageSwitcher;                                     // 0x0318 (size: 0x8)
    class USizeBox* mpHealthBarSizeBox;                                               // 0x0320 (size: 0x8)
    class UCanvasPanel* mpPortraitPanel;                                              // 0x0328 (size: 0x8)
    class UImage* mpPortraitIcon;                                                     // 0x0330 (size: 0x8)
    class UImage* mpMasteryBorder;                                                    // 0x0338 (size: 0x8)

    void UpdateStigmaIcons(TArray<EDamageType> mDamageTypesHit);
    void UpdatePortraitAndLevelVisibility();
    void UpdateCharacterTypeProperties(const FPlayerMatchInfoData& PlayerMatchInfoData, ECharacterType CharType);
    void OnPortraitTextureLoaded(class UTexture2D* pTex);
    void NativeTick(const FGeometry& MyGeometry, float InDeltaTime);
    void NativeConstruct();
    bool IsInGameScreen();
    void InitializeScreen(const FPlayerMatchInfoData& MatchSummaryInfoData);
}; // Size: 0x340

class UEndOfRoundPrizeRewardsWidget : public UEndOfRoundBaseWidget
{
    class UPrizeSummaryWidget* mpPrizeSummaryWidget;                                  // 0x02F8 (size: 0x8)

}; // Size: 0x300

class UEndOfRoundProgressSliderWidget : public UUserWidget
{
    class UProgressBar* mpProgressBar;                                                // 0x0260 (size: 0x8)

    void SetProgress(float progressAlpha);
    void NativeConstruct();
}; // Size: 0x268

class UEndOfRoundRewardPaginationWidget : public UUserWidget
{
    class UImage* mpCircleImage;                                                      // 0x0260 (size: 0x8)

}; // Size: 0x268

class UEndOfRoundRewardsWidget : public UUserWidget
{
    class UImage* mpItemImage;                                                        // 0x0270 (size: 0x8)
    class UTextBlock* mpItemNameText;                                                 // 0x0278 (size: 0x8)
    class UHorizontalBox* mpPaginationBox;                                            // 0x0280 (size: 0x8)

    void PresentReward(int32 Index);
}; // Size: 0x2B0

class UEndOfRoundSceneSummaryWidget : public UUserWidget
{
    class UImage* mpSceneImage;                                                       // 0x0278 (size: 0x8)
    class UTextBlock* mpSceneTitleText;                                               // 0x0280 (size: 0x8)
    class UVerticalBox* mpTaskListBox;                                                // 0x0298 (size: 0x8)

}; // Size: 0x308

class UEndOfRoundScreen : public UBaseScreen
{
    class UWidgetSwitcher* mpWidgetSwitcher;                                          // 0x02C0 (size: 0x8)
    class UEndOfRoundMovieSummaryWidget* mpMovieSummaryWidget;                        // 0x02C8 (size: 0x8)
    class UEndOfRoundLevelUpWidget* mpLevelUpWidget;                                  // 0x02D0 (size: 0x8)
    class UEndOfRoundIssueSummaryWidget* mpIssueSummaryWidget;                        // 0x02D8 (size: 0x8)
    class UEndOfRoundWeaponRewardsWidget* mpWeaponRewardsWidget;                      // 0x02E0 (size: 0x8)
    class UEndOfRoundAccountMasteryWidget* mpAccountMasteryWidget;                    // 0x02E8 (size: 0x8)
    class UEndOfRoundMatchSummaryWidget* mpMatchSummaryWidget;                        // 0x02F0 (size: 0x8)
    class UEndOfRoundPlayerDetailsWidget* mpPlayerDetailsWidget;                      // 0x02F8 (size: 0x8)
    class UEndOfRoundSurvivalSummaryWidget* mpSurvivalSummaryWidget;                  // 0x0300 (size: 0x8)
    class UBusyModalWidget* mpBusyModal;                                              // 0x0328 (size: 0x8)
    FMatchSummaryInfoData mMatchSummaryInfoData;                                      // 0x03A0 (size: 0x80)
    bool bDebugModeEnabled;                                                           // 0x0420 (size: 0x1)

}; // Size: 0x428

class UEndOfRoundSurvivalPlayerCard : public UUserWidget
{
    class UTextBlock* mpPlayerName;                                                   // 0x0260 (size: 0x8)
    class UTextBlock* mpTotalScore;                                                   // 0x0268 (size: 0x8)
    class UTextBlock* mpHealthText;                                                   // 0x0270 (size: 0x8)
    class UTextBlock* mpPlayerHits;                                                   // 0x0278 (size: 0x8)
    class UTextBlock* mpPlayerState;                                                  // 0x0280 (size: 0x8)
    class UImage* mpProfileIcon;                                                      // 0x0288 (size: 0x8)
    class UImage* mpPlayerIcon;                                                       // 0x0290 (size: 0x8)

    void PopulatePlayerCard(const FPlayerMatchInfoData& playerInfoData);
    void OnPortraitTextureLoaded(class UTexture2D* pTex);
}; // Size: 0x298

class UEndOfRoundSurvivalSummaryWidget : public UEndOfRoundBaseWidget
{
    TSubclassOf<class UEndOfRoundSurvivalPlayerCard> mPlayerCardClass;                // 0x02F8 (size: 0x8)
    class UHorizontalBox* mpPlayerBox;                                                // 0x0300 (size: 0x8)
    class UTextBlock* mpDifficultyText;                                               // 0x0308 (size: 0x8)
    class UTextBlock* mpRoundNumberText;                                              // 0x0310 (size: 0x8)
    class UTextBlock* mpMatchTimeText;                                                // 0x0318 (size: 0x8)
    class UTextBlock* mpMapName;                                                      // 0x0320 (size: 0x8)

}; // Size: 0x328

class UEndOfRoundWeaponRewardsWidget : public UEndOfRoundBaseWidget
{
    class UWeaponRewardsOverlayWidget* mpWeaponRewardsOverlayWidget;                  // 0x02F8 (size: 0x8)

    void OnActivate(const FPlayerMatchInfoData& PlayerMatchInfoData);
}; // Size: 0x300

class UEndPointManager : public UObject
{
}; // Size: 0x28

class UEndSocket : public UObject
{
}; // Size: 0xE0

class UEndofRoundRankAdjustmentWidget : public UEndOfRoundBaseWidget
{

    void SetRank(int32 rank);
}; // Size: 0x310

class UEnvQueryContext_ActiveDamageSources : public UEnvQueryContext
{
}; // Size: 0x28

class UEnvQueryContext_DollMasterTraps : public UEnvQueryContext
{
}; // Size: 0x28

class UEnvQueryContext_EvilLethalWeaponThreats : public UEnvQueryContext
{
}; // Size: 0x28

class UEnvQueryContext_EvilLinearWeaponThreats : public UEnvQueryContext
{
}; // Size: 0x28

class UEnvQueryContext_EvilPath : public UEnvQueryContext
{
}; // Size: 0x28

class UEnvQueryContext_HumanPlayers : public UEnvQueryContext
{
}; // Size: 0x28

class UEnvQueryContext_VulnerableTeens : public UEnvQueryContext
{
}; // Size: 0x28

class UEnvQueryInstance_GridPath : public UEnvQueryInstanceBlueprintWrapper
{
    TArray<FNavPathScore> mPaths;                                                     // 0x00F0 (size: 0x10)

    void PrintClusters(class AAIController* pAIController);
    bool GetEQItemLocation(int32 Index, FVector& resultLocation);
    int32 EvaluatePathTowardsClusters();
}; // Size: 0x100

class UEnvQueryTest_DistanceToDamageSources : public UEnvQueryTest
{
    TEnumAsByte<EEnvTestDistance::Type> TestMode;                                     // 0x01F8 (size: 0x1)
    TSubclassOf<class UEnvQueryContext> DistanceTo;                                   // 0x0200 (size: 0x8)

}; // Size: 0x208

class UEnvQueryTest_DotAndDistance : public UEnvQueryTest
{
    float mMaxDistance;                                                               // 0x01F8 (size: 0x4)
    bool mbInverseDistanceChecking;                                                   // 0x01FC (size: 0x1)
    float mDistanceScoreMulti;                                                        // 0x0200 (size: 0x4)
    FEnvDirection mDirectionLine;                                                     // 0x0208 (size: 0x20)
    TSubclassOf<class UEnvQueryContext> LineToContext;                                // 0x0228 (size: 0x8)
    EEnvTestDot TestMode;                                                             // 0x0230 (size: 0x1)
    bool bAbsoluteValue;                                                              // 0x0231 (size: 0x1)

}; // Size: 0x238

class UEnvQueryTest_KNN_Regression : public UEnvQueryTest
{
    float mHalfBound;                                                                 // 0x01F8 (size: 0x4)

}; // Size: 0x200

class UEradicatorAnimInstance : public UEvilCharAnimInstance
{
    FEradAnimInstanceData mEradAnimInstanceData;                                      // 0x0378 (size: 0x2)

    void AnimNotify_EradSurgeComplete(const class UAnimNotify* Notify);
}; // Size: 0x380

class UErrorDialogWidget : public UUserWidget
{
    FString mMessage;                                                                 // 0x0260 (size: 0x10)
    class UButton* mpOKButton;                                                        // 0x0270 (size: 0x8)

    void SetMessage(FString aMessage);
    FString GetMessage();
    void EnableFocus();
}; // Size: 0x278

class UEventInfo : public UObject
{
}; // Size: 0x80

class UEventInfoTab : public UMetaWidget
{
    class URichTextBlock* mpParticipatingCountText;                                   // 0x0378 (size: 0x8)
    class UOverlay* mpNonParticipatingOverlay;                                        // 0x0380 (size: 0x8)
    class UTextBlock* mpGoalDescriptionText;                                          // 0x0388 (size: 0x8)
    class UTextBlock* mpTierObjectiveText;                                            // 0x0390 (size: 0x8)
    class UEventRewardGroupWidget* mpEventRewardWidget;                               // 0x0398 (size: 0x8)
    class UEventTrackerWidget* mpEventTrackerWidget;                                  // 0x03A0 (size: 0x8)

}; // Size: 0x3A8

class UEventRewardGroupWidget : public UBaseRewardGroupWidget
{
}; // Size: 0x398

class UEventRewardsTab : public UMetaWidget
{
    TSubclassOf<class UEventTierStatusWidget> statusClass;                            // 0x0378 (size: 0x8)
    class UNonSelectableScrollBox* mpScrollBox;                                       // 0x0380 (size: 0x8)
    class UHorizontalBox* mpTiersBox;                                                 // 0x0388 (size: 0x8)

}; // Size: 0x390

class UEventScreen : public UBaseScreen
{
    class UCategorySwitcher* mpCategorySwitcher;                                      // 0x02C0 (size: 0x8)
    class UWidgetSwitcher* mpWidgetSwitcher;                                          // 0x02C8 (size: 0x8)
    class UEventInfoTab* mpEventInfoTab;                                              // 0x02D0 (size: 0x8)
    class UEventRewardsTab* mpEventRewardsTab;                                        // 0x02D8 (size: 0x8)
    class UTextBlock* mpEventTitleText;                                               // 0x02E0 (size: 0x8)
    class UTextBlock* mpChallengeDescriptionText;                                     // 0x02E8 (size: 0x8)

}; // Size: 0x2F0

class UEventTierStatusWidget : public UMetaWidget
{
    class UTextBlock* mpTierText;                                                     // 0x0378 (size: 0x8)
    class URichTextBlock* mpDescriptionText;                                          // 0x0380 (size: 0x8)
    class UTextBlock* mpStatusText;                                                   // 0x0388 (size: 0x8)
    class UEventRewardGroupWidget* mpEventRewardGroup;                                // 0x0390 (size: 0x8)
    class UBoxUserButton* mpViewUserButton;                                           // 0x0398 (size: 0x8)
    class UBoxUserButton* mpClaimUserButton;                                          // 0x03A0 (size: 0x8)

    void OnViewPressed();
    void OnClaimPressed();
}; // Size: 0x3B0

class UEventTrackerTierWidget : public UMetaWidget
{
    class UTextBlock* mpTierText;                                                     // 0x0378 (size: 0x8)
    class UTextBlock* mpCountText;                                                    // 0x0380 (size: 0x8)

}; // Size: 0x388

class UEventTrackerUserButton : public UBaseUserButton
{
    class UTextBlock* mpEventTitleText;                                               // 0x0478 (size: 0x8)
    class UTextBlock* mpEventDescriptionText;                                         // 0x0480 (size: 0x8)
    class UProgressBar* mpProgressBar;                                                // 0x0488 (size: 0x8)
    class UTextBlock* mpTierProgressText;                                             // 0x0490 (size: 0x8)
    class UTextBlock* mpTierNumText;                                                  // 0x0498 (size: 0x8)

}; // Size: 0x4A0

class UEventTrackerWidget : public UMetaWidget
{
    TSubclassOf<class UEventTrackerTierWidget> TierClass;                             // 0x0378 (size: 0x8)
    class UOverlay* mpTierIdentifierOverlay;                                          // 0x0380 (size: 0x8)
    class UOverlay* mpCurrentCountOverlay;                                            // 0x0388 (size: 0x8)
    class UProgressBar* mpProgressBar;                                                // 0x0390 (size: 0x8)
    class USizeBox* mpSizeBox;                                                        // 0x0398 (size: 0x8)
    class USizeBox* mpSizeBox2;                                                       // 0x03A0 (size: 0x8)
    class UTextBlock* mpCurrentNumberText;                                            // 0x03A8 (size: 0x8)

}; // Size: 0x3B0

class UEvent_Holiday_DataAsset : public UDataAsset
{
    TArray<class UClass*> mOrnamentPickups;                                           // 0x0030 (size: 0x10)
    TArray<class UClass*> mEvilOrnaments;                                             // 0x0040 (size: 0x10)

}; // Size: 0x50

class UEvilAbilityProgressBar : public UBaseActionProgressBar
{
    class UImage* mpAbilityIcon;                                                      // 0x0270 (size: 0x8)

}; // Size: 0x278

class UEvilAccessoryDataAsset : public UEvilSkinBaseDataAsset
{
    ECharacterType mCharacterType;                                                    // 0x0068 (size: 0x1)
    EAccessorySlot mAccessorySlot;                                                    // 0x0069 (size: 0x1)
    FSkinSkeletalMesh mTPAccessoryMesh;                                               // 0x0070 (size: 0x168)
    FSkinSkeletalMesh mFPAccessoryMesh;                                               // 0x01D8 (size: 0x168)
    TArray<FSkinFXSystemList> mPersistentFXSystems;                                   // 0x0340 (size: 0x10)
    TMap<class FName, class UTexture2D*> mSkinMasks;                                  // 0x0350 (size: 0x50)
    TArray<FMaterialTransferByValue> mMaterialTransferByValue;                        // 0x03A0 (size: 0x10)
    FVector2D mHeelHeight;                                                            // 0x03B0 (size: 0x8)
    FVector2D mHeelAngle;                                                             // 0x03B8 (size: 0x8)
    FString mSwitchState;                                                             // 0x03C0 (size: 0x10)

    class UEvilSkinDataAsset* GetCompatibleEvilSkin();
}; // Size: 0x3D0

class UEvilCharAnimInstance : public UBaseCharAnimInstance
{
    TSubclassOf<class AInteractablePropBase> mpSpawnableBasketballClass;              // 0x02B8 (size: 0x8)
    FName mRightHandBone;                                                             // 0x02C0 (size: 0x8)
    class UAnimSequence* mpFocusAbility1AnimSequence;                                 // 0x02C8 (size: 0x8)
    class UAnimSequence* mpFocusAbility2AnimSequence;                                 // 0x02D0 (size: 0x8)
    class UAnimSequence* mpFocusAbility3AnimSequence;                                 // 0x02D8 (size: 0x8)
    class AFPChar* mpOwnerFPChar;                                                     // 0x02E0 (size: 0x8)
    FFPCharAnimInstanceData mFPCharAnimInstanceData;                                  // 0x02E8 (size: 0x88)

    float UpdateRotateInPlace();
    void UpdateMainMenuAnimations();
    FFPCharAnimInstanceData UpdateAnimData(float DeltaTime);
    bool ShouldRotateInPlace();
    void SetLastFootPlacedRight(bool bRightFootPlaced);
    bool IsPlayingInEditor();
    float GetStunIntroOutroLength();
    bool GetLastFootPlacedRight();
    FEmoteData GetCurrentEmoteData();
    float GetCurrentAbilityChargePlayRate();
    FFPCharAnimInstanceData GetCharData();
    float CalculateAimPitch(class AFPChar* pOwnerChar);
    void AnimNotify_UseEffigy(const class UAnimNotify* Notify);
    void AnimNotify_RightFootstep(const class UAnimNotify* Notify);
    void AnimNotify_LeftTransformOut(const class UAnimNotify* Notify);
    void AnimNotify_LeftStunOutro(const class UAnimNotify* Notify);
    void AnimNotify_LeftStunIdle(const class UAnimNotify* Notify);
    void AnimNotify_LeftFootstep(const class UAnimNotify* Notify);
    void AnimNotify_LeftCoreMotion(const class UAnimNotify* Notify);
    void AnimNotify_LeftCelebration(const class UAnimNotify* Notify);
    void AnimNotify_HideEffigy(const class UAnimNotify* Notify);
    void AnimNotify_FeastingLoopStart(const class UAnimNotify* Notify);
    void AnimNotify_FeastingLoopEnd(const class UAnimNotify* Notify);
    void AnimNotify_FallingSequenceStart(const class UAnimNotify* Notify);
    void AnimNotify_FallingSequenceEnd(const class UAnimNotify* Notify);
    void AnimNotify_EnterTransformOut(const class UAnimNotify* Notify);
    void AnimNotify_EnterStunOutro(const class UAnimNotify* Notify);
    void AnimNotify_EnterStunIntro(const class UAnimNotify* Notify);
    void AnimNotify_EnterStunIdle(const class UAnimNotify* Notify);
    void AnimNotify_EmoteComplete(const class UAnimNotify* Notify);
    void AnimNotify_CreateEffigy(const class UAnimNotify* Notify);
    void AnimNotify_ClearEmote(const class UAnimNotify* Notify);
    void AnimNotify_ClearCreatingEffigy(const class UAnimNotify* Notify);
    bool AllowedToPlayAbilityOutro();
}; // Size: 0x380

class UEvilDamageParticlesComponent : public UActorComponent
{
    class AFPChar* mpOwningFPChar;                                                    // 0x00B8 (size: 0x8)
    TMap<class EDamageType, class FDamageParticleData> mDamageParticleData;           // 0x00C0 (size: 0x50)
    class UParticleSystemComponent* mpToadArmorParticleSystem;                        // 0x0110 (size: 0x8)
    FSoftObjectPath mDamageSystemPath;                                                // 0x0118 (size: 0x18)
    class UMaterialInstance* mpDamageShellMaterial;                                   // 0x0130 (size: 0x8)
    class UMaterialInstance* mpFPDamageShellMaterial;                                 // 0x0138 (size: 0x8)
    class UNiagaraComponent* mpDamageNiagaraComponent;                                // 0x0140 (size: 0x8)

    void UpdateParticles(float DeltaTime);
}; // Size: 0x148

class UEvilFeastDataAsset : public UItemDataAsset
{
    FSkinNiagaraSystem mFeastParticles;                                               // 0x0058 (size: 0x30)
    FSkinNiagaraSystem mFeastFPParticles;                                             // 0x0088 (size: 0x30)
    FSkinNiagaraSystem mFeastEvilSpectralParticles;                                   // 0x00B8 (size: 0x30)

}; // Size: 0xE8

class UEvilOnlineSession : public UOnlineSession
{
}; // Size: 0x28

class UEvilRageDataAsset : public UItemDataAsset
{
    FSkinNiagaraSystem mRageParticles;                                                // 0x0058 (size: 0x30)
    FSkinNiagaraSystem mRageFPParticles;                                              // 0x0088 (size: 0x30)

}; // Size: 0xB8

class UEvilScreamDataAsset : public UItemDataAsset
{
    FSkinNiagaraSystem mScreamParticles;                                              // 0x0058 (size: 0x30)
    class UMaterialInstance* mpShockwaveSphereMaterial;                               // 0x0088 (size: 0x8)
    class UMaterialInstance* mpInvertedShockwaveSphereMaterial;                       // 0x0090 (size: 0x8)
    class UMaterialInstance* mpShockwaveSurfaceMaterial;                              // 0x0098 (size: 0x8)
    FSkinDecal mScreamDecal;                                                          // 0x00A0 (size: 0x58)
    FVector mScreamDecalSize;                                                         // 0x00F8 (size: 0xC)

}; // Size: 0x108

class UEvilSeasonalEventComponent : public UActorComponent
{
    TArray<class UClass*> mHeldOrnamentClasses;                                       // 0x00B0 (size: 0x10)

    TArray<class UClass*> GetHeldOrnamentClasses();
    void DoServerEmptyHeldOrnamentClasses();
    void DoServerAddHeldHolidayOrnamentClass(UClass* pClass);
}; // Size: 0xC0

class UEvilSkinBaseDataAsset : public UItemDataAsset
{
    TArray<FCharacterStatusToMaterialParameter> mCharacterStatusToMaterialScalarParameter; // 0x0058 (size: 0x10)

}; // Size: 0x68

class UEvilSkinComponent : public UBaseCustomizationComponent
{
    TArray<class UEvilAccessoryDataAsset*> mAccessories;                              // 0x01A8 (size: 0x10)
    class UEvilSkinDataAsset* mpEvilSkin;                                             // 0x01B8 (size: 0x8)
    FEvilCustomizationMesh mpTPMeshComponent;                                         // 0x01C0 (size: 0xA0)
    class USkeletalMeshComponent* mpTPMeshShellComponent;                             // 0x0260 (size: 0x8)
    class USkeletalMeshComponent* mpFPMeshShellComponent;                             // 0x0268 (size: 0x8)
    class UMaterialInterface* mpShellMaterial;                                        // 0x0270 (size: 0x8)
    class UMaterialInterface* mpFPShellMaterial;                                      // 0x0278 (size: 0x8)
    bool mbIsShellEnabled;                                                            // 0x0280 (size: 0x1)
    FEvilCustomizationMesh mpFPMeshComponent;                                         // 0x0288 (size: 0xA0)
    TArray<FEvilCustomizationMesh> mTPAccessoryMeshComponents;                        // 0x0328 (size: 0x10)
    TArray<FEvilCustomizationMesh> mFPAccessoryMeshComponents;                        // 0x0338 (size: 0x10)
    TArray<FStatusMappingTarget> mSpawnedFXComponents;                                // 0x0348 (size: 0x10)
    bool mbUseSkinAnimInstances;                                                      // 0x0370 (size: 0x1)
    TArray<FMaterialTransferByValue> mSharedParameters;                               // 0x0378 (size: 0x10)
    FString mSwitchState;                                                             // 0x0388 (size: 0x10)

    bool ShouldUseSkinAnimInstances();
    void SetUseSkinAnimInstances(bool bSet);
    void SetTPMeshComponent(class USkeletalMeshComponent* pTPComponent);
    void SetShellMaterial(class UMaterialInterface* pTPShellMaterial, class UMaterialInterface* pFPShellMaterial);
    void SetShellEnabled(bool bEnabled);
    void SetOwnerNoSee(bool bSetTP, bool bSetFP);
    void SetMeshVisibility(bool bTPVisibility, bool bFPVisibility);
    void SetMaterialPropertyForAllMeshes(FName ParameterName, float Value, bool bThirdPerson, bool bFirstPerson);
    void SetFPMeshComponent(class USkeletalMeshComponent* pFPComponent);
    void SetCastHiddenShadow(bool bSetTP, bool bSetFP);
    class USkeletalMeshComponent* GetTPMeshShellComponent();
    class USkeletalMeshComponent* GetTPMeshComponent();
    FString GetSwitchState();
    class UMaterialInterface* GetShellMaterial();
    TArray<class USkeletalMeshComponent*> GetMeshComponents(bool bThirdPerson, bool bFirstPerson);
    FVector2D GetHeelHeight();
    FVector2D GetHeelAngle();
    class USkeletalMeshComponent* GetFPMeshComponent();
    class UEvilSkinDataAsset* GetEquippedSkin();
    TArray<class UEvilAccessoryDataAsset*> GetEquippedAccessories();
    void EquipEvilSkin(class UEvilSkinDataAsset* pEvilSkin, const TArray<class UEvilAccessoryDataAsset*>& accessories);
}; // Size: 0x398

class UEvilSkinDataAsset : public UEvilSkinBaseDataAsset
{
    ECharacterType mCharacterType;                                                    // 0x0068 (size: 0x1)
    FSkinSkeletalMesh mThirdPersonMesh;                                               // 0x0070 (size: 0x168)
    FSkinSkeletalMesh mFirstPersonMesh;                                               // 0x01D8 (size: 0x168)
    float mFootstepDecalSize;                                                         // 0x0340 (size: 0x4)
    bool mbEnableAccessories;                                                         // 0x0344 (size: 0x1)
    TArray<EAccessorySlot> mEnabledAccessorySlots;                                    // 0x0348 (size: 0x10)
    TArray<class UEvilAccessoryDataAsset*> mAccessorySlotDefaults;                    // 0x0358 (size: 0x10)
    FVector2D mHeelHeight;                                                            // 0x0368 (size: 0x8)
    FVector2D mHeelAngle;                                                             // 0x0370 (size: 0x8)

    TArray<FName> GetFeastAttachBones();
    bool AreAccessoriesEnabled();
}; // Size: 0x378

class UEvilSpectralAnimInstance : public UAnimInstance
{

    FEvilSpectralAnimInstanceData UpdateAnimData(float DeltaTime);
    FEvilSpectralAnimInstanceData GetCharData();
}; // Size: 0x2C0

class UEvilSpectralDataAsset : public USpectralDataAsset
{
}; // Size: 0x1C0

class UEvilTransformationDataAsset : public UItemDataAsset
{
    FSkinParticleSystem mTeenTransformSystem;                                         // 0x0058 (size: 0xD8)
    FSkinNiagaraSystem mEvilTransformSystem;                                          // 0x0130 (size: 0x30)

}; // Size: 0x160

class UExtAkComponent : public UAkComponent
{
    FAcousticsDesignParams InitialDesignParams;                                       // 0x03D8 (size: 0x1C)
    bool ApplyAcousticsVolumes;                                                       // 0x03F4 (size: 0x1)
    bool PlayOnStart;                                                                 // 0x03F5 (size: 0x1)
    bool ShowAcousticParameters;                                                      // 0x03F6 (size: 0x1)
    bool bCheckActiveEventsOnUpdate;                                                  // 0x03F7 (size: 0x1)
    bool bEnableUpdateRateOptimizations;                                              // 0x03F8 (size: 0x1)
    FAcousticsDesignParams CurrentDesignParams;                                       // 0x03FC (size: 0x1C)
    bool mbUsesTriton;                                                                // 0x0418 (size: 0x1)
    bool mbAddRandomPitch;                                                            // 0x0419 (size: 0x1)
    bool mbIgnoreDistanceCulling;                                                     // 0x0560 (size: 0x1)
    float mLastOutdoornessValue;                                                      // 0x0564 (size: 0x4)

    void UpdateTritonAcoustics();
    void SetUsesTriton(bool bSet);
    void SetIgnoreDistanceCulling(bool bSet);
    bool IsUsingTriton();
    bool IgnoreDistanceCulling();
}; // Size: 0x5B0

class UExtButton : public UButton
{

    void SimulateRelease();
    void SimulatePress();
}; // Size: 0x428

class UExtGameUserSettings : public UGameUserSettings
{
    uint8 DLSSMode;                                                                   // 0x0120 (size: 0x1)
    uint8 ColorBlindMode;                                                             // 0x0121 (size: 0x1)
    float ColorBlindIntensity;                                                        // 0x0124 (size: 0x4)
    uint8 FrameRateSetting;                                                           // 0x0128 (size: 0x1)
    float MenuFrameRateLimit;                                                         // 0x012C (size: 0x4)
    uint8 MenuFrameRateSetting;                                                       // 0x0130 (size: 0x1)
    float MasterVolume;                                                               // 0x0134 (size: 0x4)
    float MenuMusicVolume;                                                            // 0x0138 (size: 0x4)
    float GameplayVolume;                                                             // 0x013C (size: 0x4)
    float PingVolume;                                                                 // 0x0140 (size: 0x4)
    bool Enable3DHeadphones;                                                          // 0x0144 (size: 0x1)
    FString AudioOutputDevice;                                                        // 0x0148 (size: 0x10)
    float VoiceChatSpeakerVolume;                                                     // 0x0158 (size: 0x4)
    float VoiceChatMicVolume;                                                         // 0x015C (size: 0x4)
    FString VoiceChatInputDevice;                                                     // 0x0160 (size: 0x10)
    FString VoiceChatOutputDevice;                                                    // 0x0170 (size: 0x10)
    float TeenMouseSensitivity;                                                       // 0x0180 (size: 0x4)
    float EvilMouseSensitivity;                                                       // 0x0184 (size: 0x4)
    float MouseFiringSensitivity;                                                     // 0x0188 (size: 0x4)
    float TeenControllerSensitivityX;                                                 // 0x018C (size: 0x4)
    float TeenControllerSensitivityY;                                                 // 0x0190 (size: 0x4)
    float EvilControllerSensitivityX;                                                 // 0x0194 (size: 0x4)
    float EvilControllerSensitivityY;                                                 // 0x0198 (size: 0x4)
    float ControllerFiringSensitivity;                                                // 0x019C (size: 0x4)
    bool ControllerVibration;                                                         // 0x01A0 (size: 0x1)
    float DisplayGamma;                                                               // 0x01A4 (size: 0x4)

    void SetVoiceChatSpeakerVolume(float Val);
    void SetVoiceChatOutputDevice(FString Val);
    void SetVoiceChatMicVolume(float Val);
    void SetVoiceChatInputDevice(FString Val);
    void SetTeenMouseSensitivity(float Val);
    void SetTeenControllerSensitivity(FVector2D vec);
    void SetPingVolume(float Val);
    void SetMouseFiringSensitivity(float Val);
    void SetMenuMusicVolume(float Val);
    void SetMenuFrameRateSetting(uint8 Val);
    void SetMenuFrameRateLimit(float NewLimit);
    void SetMasterVolume(float Val);
    void SetGameplayVolume(float Val);
    void SetFrameRateSetting(uint8 Val);
    void SetEvilMouseSensitivity(float Val);
    void SetEvilControllerSensitivity(FVector2D vec);
    void SetDLSSMode(uint8 Mode);
    void SetDisplayGamma(float newGamma);
    void SetControllerVibration(bool bSet);
    void SetControllerFiringSensitivity(float Val);
    void SetColorBlindMode(uint8 Mode);
    void SetColorBlindIntensity(float Val);
    void SetAudioOutputDevice(FString Val);
    void Set3DHeadphonesEnabled(bool bSet);
    float GetVoiceChatSpeakerVolume();
    FString GetVoiceChatOutputDevice();
    float GetVoiceChatMicVolume();
    FString GetVoiceChatInputDevice();
    float GetTeenMouseSensitivity();
    FVector2D GetTeenControllerSensitivity();
    float GetPingVolume();
    float GetMouseFiringSensitivity();
    float GetMenuMusicVolume();
    uint8 GetMenuFrameRateSetting();
    float GetMenuFrameRateLimit();
    float GetMasterVolume();
    float GetGameplayVolume();
    uint8 GetFrameRateSetting();
    float GetEvilMouseSensitivity();
    FVector2D GetEvilControllerSensitivity();
    uint8 GetDLSSMode();
    float GetDisplayGamma();
    bool GetControllerVibration();
    float GetControllerFiringSensitivity();
    uint8 GetColorBlindMode();
    float GetColorBlindIntensity();
    FString GetAudioOutputDevice();
    bool Get3DHeadphonesEnabled();
}; // Size: 0x1B0

class UExtLocalPlayer : public ULocalPlayer
{
    class UClientStateManager* mMyClientState;                                        // 0x0258 (size: 0x8)
    FNetPlayerInfoStruct mPlayerInfo;                                                 // 0x0260 (size: 0x178)

}; // Size: 0x3D8

class UExtParticleModuleCollision : public UParticleModuleHBCustomBase
{
    uint8 mbUseSphericalCollision;                                                    // 0x0030 (size: 0x1)
    FRawDistributionFloat mSphereCollisionRadius;                                     // 0x0038 (size: 0x30)
    FRawDistributionVector DampingFactor;                                             // 0x0068 (size: 0x48)
    FRawDistributionVector DampingFactorRotation;                                     // 0x00B0 (size: 0x48)
    FRawDistributionFloat MaxCollisions;                                              // 0x00F8 (size: 0x30)
    TEnumAsByte<EParticleCollisionComplete> CollisionCompletionOption;                // 0x0128 (size: 0x1)
    TArray<TEnumAsByte<EObjectTypeQuery>> CollisionTypes;                             // 0x0130 (size: 0x10)
    bool mbUseCollisionChannel;                                                       // 0x0148 (size: 0x1)
    TEnumAsByte<ECollisionChannel> mCollisionChannel;                                 // 0x0149 (size: 0x1)
    uint8 bApplyPhysics;                                                              // 0x014C (size: 0x1)
    uint8 bIgnoreTriggerVolumes;                                                      // 0x014C (size: 0x1)
    FRawDistributionFloat ParticleMass;                                               // 0x0150 (size: 0x30)
    float DirScalar;                                                                  // 0x0180 (size: 0x4)
    uint8 bPawnsDoNotDecrementCount;                                                  // 0x0184 (size: 0x1)
    uint8 bOnlyVerticalNormalsDecrementCount;                                         // 0x0184 (size: 0x1)
    float VerticalFudgeFactor;                                                        // 0x0188 (size: 0x4)
    FRawDistributionFloat DelayAmount;                                                // 0x0190 (size: 0x30)
    uint8 bDropDetail;                                                                // 0x01C0 (size: 0x1)
    uint8 bCollideOnlyIfVisible;                                                      // 0x01C0 (size: 0x1)
    uint8 bIgnoreSourceActor;                                                         // 0x01C0 (size: 0x1)
    float MaxCollisionDistance;                                                       // 0x01C4 (size: 0x4)

}; // Size: 0x1C8

class UExtWindDirectionalSourceComponent : public UWindDirectionalSourceComponent
{
    class UVectorFieldStatic* mpVectorField;                                          // 0x0218 (size: 0x8)
    bool mbUseVectorFieldDirection;                                                   // 0x0220 (size: 0x1)
    bool mbUseVectorFieldStrength;                                                    // 0x0221 (size: 0x1)
    FVector mWindSampleOffset;                                                        // 0x0224 (size: 0xC)
    FVector2D mVectorFieldRange;                                                      // 0x0230 (size: 0x8)
    FVector2D mWindSpeedRange;                                                        // 0x0238 (size: 0x8)

}; // Size: 0x240

class UExtendedGameViewportClient : public UGameViewportClient
{
}; // Size: 0x360

class UExtendedPrimaryAssetLabel : public UPrimaryAssetLabel
{
    FName mChunkName;                                                                 // 0x0068 (size: 0x8)
    bool mbOverridePriority;                                                          // 0x0070 (size: 0x1)
    bool mbIsReleasable;                                                              // 0x0071 (size: 0x1)

    void RefreshChunkID();
}; // Size: 0x78

class UFEDebugWidget : public UUserWidget
{
    class UWidgetSwitcher* mpWidgetSwitcher;                                          // 0x0260 (size: 0x8)
    class UTextUserButton* mpCloseButton;                                             // 0x0268 (size: 0x8)
    class UEditableTextBox* mpServerNameTextBox;                                      // 0x0270 (size: 0x8)
    class UEditableTextBox* mpNewFlagTextBox;                                         // 0x0278 (size: 0x8)
    class UEditableTextBox* mpReportPlayerName;                                       // 0x0280 (size: 0x8)
    class UEditableTextBox* mpReportPlayerAccountId;                                  // 0x0288 (size: 0x8)
    class UEditableTextBox* mpAnnouncementTypesTextBox;                               // 0x0290 (size: 0x8)
    class UEditableTextBox* mpFakeEquipClothingSlot;                                  // 0x0298 (size: 0x8)
    class UEditableTextBox* mpFakeEquipClothingGrantable;                             // 0x02A0 (size: 0x8)
    class UBusyModalWidget* mpReplayBusyModal;                                        // 0x02A8 (size: 0x8)
    class UButton* mpEnableTestButton;                                                // 0x02B0 (size: 0x8)
    class UButton* mpDisableTestButton;                                               // 0x02B8 (size: 0x8)
    class UImage* mpImageTest;                                                        // 0x02C0 (size: 0x8)
    class UProgressBar* mpProgressBarTest;                                            // 0x02C8 (size: 0x8)
    class UCheckBox* mpCheckboxTest;                                                  // 0x02D0 (size: 0x8)
    class UNavButton* mpTestLockdownButton1;                                          // 0x02D8 (size: 0x8)
    class UNavButton* mpTestLockdownButton2;                                          // 0x02E0 (size: 0x8)
    UClass* mpDebugRewardsScreenClass;                                                // 0x02E8 (size: 0x8)
    UClass* mpDebugMovieRewardsScreenClass;                                           // 0x02F0 (size: 0x8)
    UClass* mpDebugIssueSummaryScreenClass;                                           // 0x02F8 (size: 0x8)
    class UEditableTextBox* mpIssueDeltaExpTextBox;                                   // 0x0300 (size: 0x8)
    class UEditableTextBox* mpSetPersonalCountTextBox;                                // 0x0308 (size: 0x8)
    class UEditableTextBox* mpSetPeronsalTierTextBox;                                 // 0x0310 (size: 0x8)
    class UEditableTextBox* mpSetProgressCountTextBox;                                // 0x0318 (size: 0x8)
    class UEditableTextBox* mpJoinBackendGameSessionIDTextbox;                        // 0x0320 (size: 0x8)
    FEORRewardsData previousRewardsData;                                              // 0x0328 (size: 0x40)
    FEORRewardsData currentRewardsData;                                               // 0x0368 (size: 0x40)
    TArray<FString> mCompletedScenesKeysData;                                         // 0x03A8 (size: 0x10)
    class UFlipbookAnimator* mpFlipbookAnimator;                                      // 0x03B8 (size: 0x8)
    class UEditableTextBox* mpFlipbookFramerateTextBox;                               // 0x03C0 (size: 0x8)
    class UEditableTextBox* mpFlipbookAnimTextBox;                                    // 0x03C8 (size: 0x8)
    class UCheckBox* mpFlipbookLoopCheckbox;                                          // 0x03D0 (size: 0x8)
    class UCheckBox* mpFlipbookReverseCheckbox;                                       // 0x03D8 (size: 0x8)

    void ShowEORMovieProgress();
    void ShowEORIssueProgress();
    void SelectMenu(class UNavButton* pButton);
    void OnYesNoToastDeclined(FString ID);
    void OnYesNoToastConfirmed(FString ID);
    void OnUnfakeMatchmakingButton();
    void OnToggleSeasonPassPremium();
    void OnShowServerBrowser();
    void OnShowSeasonPassPreview();
    void OnShowSeasonPass();
    void OnShowRewardClaimScreen();
    void OnShowReportModalPressed();
    void OnShowNewsPressed();
    void OnShowLoadingScreenPrizes();
    void OnShowLoadingScreen();
    void OnShowEORS();
    void OnShowEORRewardsS();
    void OnSetSeasonalEventValentinesPressed();
    void OnSetSeasonalEventHolidaysPressed();
    void OnSetSeasonalEventHalloweenPressed();
    void OnSetSeasonalEventEasterPressed();
    void OnSetSeasonalEvent2xBonusPressed();
    void OnSetProgressCountPressed();
    void OnSetPersonalTierCountPressed();
    void OnSetAnnouncementsPressed();
    void OnReportHostDisconnected();
    void OnPopulateEventChallengePressed();
    void OnPlayTestReplay();
    void OnOldToastPressed();
    void OnJoinBackendGameSessionPressed();
    void OnHostP2PMatchmadeGame();
    void OnHostBackendGameSessionPressed();
    void OnHideLoadingScreen();
    void OnGetServerNotifications();
    void OnForceDisconnectLobby();
    void OnForceDeviceTypeMouseKbd();
    void OnForceDeviceTypeController();
    void OnFlipbookAnimPlayPressed();
    void OnFakeMatchmakingButton();
    void OnFakeEquipClothing();
    void OnExtImageEnabled();
    void OnExtImageDisabled();
    void OnEngageLockdownPressed();
    void OnEnableSeasonPass();
    void OnDisableLockdownPressed();
    void OnDeviceTypeChanged();
    void OnClosePressed();
    void OnClearSeasonalEventPressed();
    void OnClearForceDeviceType();
    void OnClearAllToastsPressed();
    void OnClearAllNewFlags();
    void OnAddWarningToastPressed();
    void OnAddRandomNewFlags();
    void OnAddNormalToastPressed();
    void OnAddNewFlag();
    void OnAddCriticalPersistentToastPressed();
}; // Size: 0x3E0

class UFeastEffectComponent : public UActorComponent
{
    TArray<FName> mAttachBones;                                                       // 0x00B0 (size: 0x10)
    TArray<FName> mFPAttachBones;                                                     // 0x00C0 (size: 0x10)
    TArray<class UNiagaraComponent*> mFeastTPNiagaraComponents;                       // 0x00D0 (size: 0x10)
    TArray<class UNiagaraComponent*> mFeastFPNiagaraComponents;                       // 0x00E0 (size: 0x10)
    class UNiagaraComponent* mpFeastSpectralNiagaraComponent;                         // 0x00F0 (size: 0x8)
    TArray<class AInteractablePropBase*> mFeastingSpectrals;                          // 0x00F8 (size: 0x10)

}; // Size: 0x108

class UFinishJourneyMapNode : public UPurchasableJourneyMapNode
{
    class UTexture2D* ProgressTexture;                                                // 0x0408 (size: 0x8)
    FLinearColor UncompletedColor;                                                    // 0x0410 (size: 0x10)
    FLinearColor CompletedColor;                                                      // 0x0420 (size: 0x10)
    class UImage* mpBackgroundImage;                                                  // 0x0430 (size: 0x8)
    class UImage* mpProgressImage;                                                    // 0x0438 (size: 0x8)
    class UMaterialInstance* mpProgressMaterialInstance;                              // 0x0440 (size: 0x8)
    class UMaterialInstanceDynamic* mpDynProgressMaterialInstance;                    // 0x0448 (size: 0x8)

}; // Size: 0x450

class UFlameMineSkinDataAsset : public UTeenWeaponSkinDataAsset
{
    FSkinParticleSystem mSummoningParticleSystem;                                     // 0x01E8 (size: 0xD8)
    EWise_WEP_FlameMine mWiseFlameMineSwitch;                                         // 0x02C0 (size: 0x1)
    FSkinSkeletalMesh mFlameMineMesh;                                                 // 0x02C8 (size: 0x168)
    FSkinParticleSystem mEmissionParticleSystem;                                      // 0x0430 (size: 0xD8)
    FSkinParticleSystem mFloatingParticleSystem;                                      // 0x0508 (size: 0xD8)
    FSkinNiagaraSystem mDiscNiagaraSystem;                                            // 0x05E0 (size: 0x30)
    FSkinLight mDiscLight;                                                            // 0x0610 (size: 0x18)
    FSkinDecal mFloorDecal;                                                           // 0x0628 (size: 0x58)
    FSkinStaticMesh mSplineMesh;                                                      // 0x0680 (size: 0xA8)

}; // Size: 0x728

class UFlamethrowerParticleModule : public UParticleModuleHBCustomBase
{
    FRawDistributionFloat mTangentSpeed;                                              // 0x0030 (size: 0x30)
    FRawDistributionFloat mProjectileLifetime;                                        // 0x0060 (size: 0x30)
    int32 mMinProjectileIdx;                                                          // 0x0090 (size: 0x4)
    int32 mMaxProjectileIdx;                                                          // 0x0094 (size: 0x4)

}; // Size: 0x98

class UFlamethrowerSkinDataAsset : public UTeenWeaponSkinDataAsset
{
    FSkinParticleSystem mIdleFlameSkin;                                               // 0x01E8 (size: 0xD8)
    FSkinParticleSystem mStreamSkin;                                                  // 0x02C0 (size: 0xD8)
    EWise_WEP_Flamethrower mWiseFlamethrowerSwitch;                                   // 0x0398 (size: 0x1)

}; // Size: 0x3A0

class UFlipbookAnimator : public UImage
{
    TMap<class FString, class UPaperFlipbook*> AnimSheets;                            // 0x0210 (size: 0x50)
    int32 FrameRate;                                                                  // 0x0260 (size: 0x4)
    int32 mCustomizedFrameRate;                                                       // 0x0264 (size: 0x4)
    bool mbUseCustomizedFrameRate;                                                    // 0x0268 (size: 0x1)
    bool AlwaysLoops;                                                                 // 0x0269 (size: 0x1)
    int32 Loops;                                                                      // 0x026C (size: 0x4)
    bool bSkipAnimDirtyFlag;                                                          // 0x0290 (size: 0x1)

    void PlayNext();
    void PlayAnim(FString animName, int32 StartFrame, bool bLoop, bool bReverse);
    void EnqueueAnimFlipBook(FString animName, int32 StartFrame, bool bLoop, bool bReverse, bool bEndCurrentAnim, bool bUseDuration, float Duration);
    void ClearAnimQueue();
}; // Size: 0x2C0

class UFootstepManager : public USceneComponent
{
    class AActor* mpOwningActor;                                                      // 0x0248 (size: 0x8)

    void OnFootstep(bool bLeftFoot);
    FString GetCurrentFootstepSoundEvent();
}; // Size: 0x250

class UGameConstants : public UBaseConstants
{
    bool AllowDebugKeys;                                                              // 0x0040 (size: 0x1)
    TEnumAsByte<EDrawDebugTrace::Type> HIT_DETECTION_DEBUG;                           // 0x0041 (size: 0x1)
    float HIT_DETECTION_SPHERE_RADIUS;                                                // 0x0044 (size: 0x4)
    int32 MAX_LOBBY_PLAYERS;                                                          // 0x0048 (size: 0x4)
    int32 MAX_PARTY_SIZE;                                                             // 0x004C (size: 0x4)
    int32 MAX_PLAYABLE_PLAYERS;                                                       // 0x0050 (size: 0x4)
    int32 MAX_PLAYABLE_TEENS;                                                         // 0x0054 (size: 0x4)
    int32 DEFAULT_MAX_SPECTATORS;                                                     // 0x0058 (size: 0x4)
    int32 MAX_PLAYER_NAME_LENGTH;                                                     // 0x005C (size: 0x4)
    int32 INVALID_PLAYER_ID;                                                          // 0x0060 (size: 0x4)
    float LOBBY_POSE_MIN_TIMER;                                                       // 0x0064 (size: 0x4)
    float LOBBY_POSE_MAX_TIMER;                                                       // 0x0068 (size: 0x4)
    float LOBBY_FLAVOR_MIN_TIMER;                                                     // 0x006C (size: 0x4)
    float LOBBY_FLAVOR_MAX_TIMER;                                                     // 0x0070 (size: 0x4)
    FString LOCSTRINGTABLE_MISSING_ENTRY;                                             // 0x0078 (size: 0x10)
    FString ARCADE_SECRET_CODE;                                                       // 0x0088 (size: 0x10)
    float ENDOFROUND_AUTOSKIP_TIME;                                                   // 0x0098 (size: 0x4)
    float GAMESTAGE_WAITING_TIME;                                                     // 0x009C (size: 0x4)
    float GAMESTAGE_STARTUP_TIME;                                                     // 0x00A0 (size: 0x4)
    float GAMESTAGE_TVINTRO_TIME;                                                     // 0x00A4 (size: 0x4)
    float GAMESTAGE_INCUBATING_TIME;                                                  // 0x00A8 (size: 0x4)
    float GAMESTAGE_TRANSFORMING_TIME;                                                // 0x00AC (size: 0x4)
    float GAMESTAGE_GOODWINS_TIME;                                                    // 0x00B0 (size: 0x4)
    float GAMESTAGE_PROCESSENDGAMEDATA_TIME;                                          // 0x00B4 (size: 0x4)
    float GAMESTAGE_EVILWINS_TIME;                                                    // 0x00B8 (size: 0x4)
    float GAMESTAGE_NOBODYWINS_TIME;                                                  // 0x00BC (size: 0x4)
    float GAMESTAGE_MIN_INCUBATING_VAULT_TIME;                                        // 0x00C0 (size: 0x4)
    FVector Gravity;                                                                  // 0x00C4 (size: 0xC)
    FVector2D MOVIE_PREVIEW_YAW_LIMITS;                                               // 0x00D0 (size: 0x8)
    FVector2D MOVIE_PREVIEW_PITCH_LIMITS;                                             // 0x00D8 (size: 0x8)
    float LOBBY_COUNTDOWN_TIMER_MAX;                                                  // 0x00E0 (size: 0x4)
    float LOBBY_COUNTDOWN_TIMER_LOCKED;                                               // 0x00E4 (size: 0x4)
    float LOBBY_SHOW_LOADING_TIMER;                                                   // 0x00E8 (size: 0x4)
    float LOBBY_COUNTDOWN_TIMER_MATCHSTART;                                           // 0x00EC (size: 0x4)
    float LOBBY_CONNECTION_TIMEOUT;                                                   // 0x00F0 (size: 0x4)
    float LOBBY_DISINTEGRATION_RATE;                                                  // 0x00F4 (size: 0x4)
    int32 LOBBY_MINIMUM_PLAYERS;                                                      // 0x00F8 (size: 0x4)
    float ANALYTICS_NEAR_DOWNED_TEEN_DISTANCE;                                        // 0x00FC (size: 0x4)
    float ANALYTICS_CAMPING_DOWNED_TEEN_DISTANCE;                                     // 0x0100 (size: 0x4)
    int32 MODAL_SCREEN_LAYER;                                                         // 0x0104 (size: 0x4)
    float MAIN_MENU_SPIN_VELOCITY_NORMAL;                                             // 0x0108 (size: 0x4)
    float FRONTEND_CAMERA_HEIGHT_LERP_MULTIPLIER;                                     // 0x010C (size: 0x4)
    float FRONTEND_CAMERA_TRANSITION_DURATION;                                        // 0x0110 (size: 0x4)
    float FRONTEND_LOADOUT_TRANSITION_DURATION;                                       // 0x0114 (size: 0x4)
    float FRONTEND_LOADOUT_TRANSITION_EASE_EXPONENT;                                  // 0x0118 (size: 0x4)
    float MAIN_MENU_SPIN_VELOCITY_SLOW;                                               // 0x011C (size: 0x4)
    float MENU_LONG_PRESS_MINIMUM_PERIOD;                                             // 0x0120 (size: 0x4)
    float MENU_LONG_PRESS_MAXIMUM_PERIOD;                                             // 0x0124 (size: 0x4)
    FLinearColor THEME_BORDER_COLOR;                                                  // 0x0128 (size: 0x10)
    FLinearColor THEME_COLOR_ONE;                                                     // 0x0138 (size: 0x10)
    FLinearColor THEME_COLOR_TWO;                                                     // 0x0148 (size: 0x10)
    FLinearColor THEME_COLOR_THREE;                                                   // 0x0158 (size: 0x10)
    FLinearColor THEME_COLOR_FOUR;                                                    // 0x0168 (size: 0x10)
    FLinearColor THEME_COLOR_BG_DEFAULT;                                              // 0x0178 (size: 0x10)
    FLinearColor THEME_COLOR_BG_ONE;                                                  // 0x0188 (size: 0x10)
    FLinearColor THEME_COLOR_BG_TWO;                                                  // 0x0198 (size: 0x10)
    FLinearColor THEME_COLOR_BG_THREE;                                                // 0x01A8 (size: 0x10)
    FLinearColor THEME_COLOR_BG_FOUR;                                                 // 0x01B8 (size: 0x10)
    FLinearColor THEME_COLOR_BLUR_DEFAULT;                                            // 0x01C8 (size: 0x10)
    FLinearColor THEME_COLOR_BLUR_ONE;                                                // 0x01D8 (size: 0x10)
    FLinearColor THEME_COLOR_BLUR_TWO;                                                // 0x01E8 (size: 0x10)
    FLinearColor THEME_COLOR_BLUR_THREE;                                              // 0x01F8 (size: 0x10)
    FLinearColor THEME_COLOR_BLUR_FOUR;                                               // 0x0208 (size: 0x10)
    FLinearColor TOAST_DEFAULT_COLOR;                                                 // 0x0218 (size: 0x10)
    FLinearColor TOAST_WARNING_COLOR;                                                 // 0x0228 (size: 0x10)
    FLinearColor TOAST_CRITICAL_COLOR;                                                // 0x0238 (size: 0x10)
    float NAVWIDGET_BROADCAST_TIME;                                                   // 0x0248 (size: 0x4)
    FLinearColor NAVWIDGET_DEFAULT_NORMAL_COLOR;                                      // 0x024C (size: 0x10)
    FLinearColor NAVWIDGET_DEFAULT_HOVER_COLOR;                                       // 0x025C (size: 0x10)
    FLinearColor NAVWIDGET_DEFAULT_SELECTED_COLOR;                                    // 0x026C (size: 0x10)
    FLinearColor NAVWIDGET_DEFAULT_PRESSED_COLOR;                                     // 0x027C (size: 0x10)
    FLinearColor NAVWIDGET_DEFAULT_DISABLED_COLOR;                                    // 0x028C (size: 0x10)
    float NAVBUTTON_DOUBLE_CLICK_WINDOW;                                              // 0x029C (size: 0x4)
    FLinearColor COLOR_THEME_UNSELECTED;                                              // 0x02A0 (size: 0x10)
    FLinearColor COLOR_THEME_TEEN;                                                    // 0x02B0 (size: 0x10)
    FLinearColor COLOR_THEME_MONSTER;                                                 // 0x02C0 (size: 0x10)
    FLinearColor COLOR_THEME_EVENT;                                                   // 0x02D0 (size: 0x10)
    FLinearColor COLOR_THEME_BUTTON_ON;                                               // 0x02E0 (size: 0x10)
    FLinearColor COLOR_THEME_BUTTON_OFF;                                              // 0x02F0 (size: 0x10)
    FLinearColor COLOR_THEME_BUTTON_TEXT_ON;                                          // 0x0300 (size: 0x10)
    FLinearColor COLOR_THEME_BUTTON_TEXT_OFF;                                         // 0x0310 (size: 0x10)
    FLinearColor PRIMARY_NAVBUTTON_COLOR_NORMAL;                                      // 0x0320 (size: 0x10)
    FLinearColor PRIMARY_NAVBUTTON_COLOR_SELECTED;                                    // 0x0330 (size: 0x10)
    FLinearColor PRIMARY_NAVBUTTON_COLOR_HOVERED;                                     // 0x0340 (size: 0x10)
    FLinearColor PRIMARY_NAVBUTTON_COLOR_PRESSED;                                     // 0x0350 (size: 0x10)
    FLinearColor SECONDARY_NAVBUTTON_COLOR_NORMAL;                                    // 0x0360 (size: 0x10)
    FLinearColor SECONDARY_NAVBUTTON_COLOR_SELECTED;                                  // 0x0370 (size: 0x10)
    FLinearColor SECONDARY_NAVBUTTON_COLOR_HOVERED;                                   // 0x0380 (size: 0x10)
    FLinearColor SECONDARY_NAVBUTTON_COLOR_PRESSED;                                   // 0x0390 (size: 0x10)
    FLinearColor PRIMARY_ACTIONBUTTON_COLOR_NORMAL;                                   // 0x03A0 (size: 0x10)
    FLinearColor PRIMARY_ACTIONBUTTON_COLOR_HOVERED;                                  // 0x03B0 (size: 0x10)
    FLinearColor PRIMARY_ACTIONBUTTON_COLOR_PRESSED;                                  // 0x03C0 (size: 0x10)
    FLinearColor SECONDARY_ACTIONBUTTON_COLOR_NORMAL;                                 // 0x03D0 (size: 0x10)
    FLinearColor SECONDARY_ACTIONBUTTON_COLOR_HOVERED;                                // 0x03E0 (size: 0x10)
    FLinearColor SECONDARY_ACTIONBUTTON_COLOR_PRESSED;                                // 0x03F0 (size: 0x10)
    FLinearColor DISABLED_BUTTON_COLOR;                                               // 0x0400 (size: 0x10)
    FLinearColor THEME_COLOR_NORMAL;                                                  // 0x0410 (size: 0x10)
    FLinearColor THEME_COLOR_ACTIVE;                                                  // 0x0420 (size: 0x10)
    FLinearColor THEME_COLOR_INACTIVE;                                                // 0x0430 (size: 0x10)
    FLinearColor THEME_COLOR_NEUTRAL;                                                 // 0x0440 (size: 0x10)
    FLinearColor THEME_COLOR_WARNING;                                                 // 0x0450 (size: 0x10)
    FLinearColor THEME_COLOR_ERROR;                                                   // 0x0460 (size: 0x10)
    FLinearColor AFFINITY_COLOR_EXPERTISE;                                            // 0x0470 (size: 0x10)
    FLinearColor AFFINITY_COLOR_RECOVERY;                                             // 0x0480 (size: 0x10)
    FLinearColor AFFINITY_COLOR_SAVVY;                                                // 0x0490 (size: 0x10)
    FLinearColor AFFINITY_COLOR_STEALTH;                                              // 0x04A0 (size: 0x10)
    FLinearColor AFFINITY_COLOR_SUPPORT;                                              // 0x04B0 (size: 0x10)
    FLinearColor AFFINITY_COLOR_TOUGHNESS;                                            // 0x04C0 (size: 0x10)
    FLinearColor AFFINITY_COLOR_NONE;                                                 // 0x04D0 (size: 0x10)
    FLinearColor RARITY_COLOR_COMMON;                                                 // 0x04E0 (size: 0x10)
    FLinearColor RARITY_COLOR_UNCOMMON;                                               // 0x04F0 (size: 0x10)
    FLinearColor RARITY_COLOR_RARE;                                                   // 0x0500 (size: 0x10)
    FLinearColor RARITY_COLOR_ULTRARARE;                                              // 0x0510 (size: 0x10)
    FLinearColor RARITY_COLOR_LEGENDARY;                                              // 0x0520 (size: 0x10)
    FLinearColor RARITY_COLOR_EVENT;                                                  // 0x0530 (size: 0x10)
    FLinearColor RARITY_COLOR_HIDDEN;                                                 // 0x0540 (size: 0x10)
    FLinearColor TROPHY_INCOMPLETE_COLOR;                                             // 0x0550 (size: 0x10)
    FLinearColor TROPHY_COMPLETE_COLOR;                                               // 0x0560 (size: 0x10)
    uint32 CURRENT_PLAYER_SETTINGS_VERSION_NUMBER;                                    // 0x0570 (size: 0x4)
    FLinearColor CATEGORYSWITCHER_BUTTON_NORMAL_COLOR;                                // 0x0574 (size: 0x10)
    FLinearColor CATEGORYSWITCHER_BUTTON_SELECTED_COLOR;                              // 0x0584 (size: 0x10)
    FLinearColor CATEGORYSWITCHER_BUTTON_HIGHLIGHTED_COLOR;                           // 0x0594 (size: 0x10)
    FLinearColor CATEGORYSWITCHER_TEXT_NORMAL_COLOR;                                  // 0x05A4 (size: 0x10)
    FLinearColor CATEGORYSWITCHER_TEXT_SELECTED_COLOR;                                // 0x05B4 (size: 0x10)
    FLinearColor CATEGORYSWITCHER_TEXT_HIGHLIGHTED_COLOR;                             // 0x05C4 (size: 0x10)
    int32 JOURNEY_NUM_ACTS;                                                           // 0x05D4 (size: 0x4)
    int32 JOURNEY_MAXIMUM_ACTS;                                                       // 0x05D8 (size: 0x4)
    FLinearColor JOURNEY_LINE_LOCKED_COLOR;                                           // 0x05DC (size: 0x10)
    FLinearColor JOURNEY_LINE_UNLOCKED_COLOR;                                         // 0x05EC (size: 0x10)
    FLinearColor JOURNEY_NODE_LOCKED_COLOR;                                           // 0x05FC (size: 0x10)
    FLinearColor JOURNEY_NODE_UNLOCKED_COLOR;                                         // 0x060C (size: 0x10)
    FLinearColor JOURNEY_NODE_PURCHASED_COLOR;                                        // 0x061C (size: 0x10)
    int32 LOADING_SCREEN_LAYER;                                                       // 0x062C (size: 0x4)
    int32 WATERMARK_LAYER;                                                            // 0x0630 (size: 0x4)
    float STAGING_CONNECTION_TIMEOUT;                                                 // 0x0634 (size: 0x4)
    float LOBBY_TIMEOUT_CHECK_INTERVAL;                                               // 0x0638 (size: 0x4)
    float LOBBY_DETAILS_UPDATE_TIMER;                                                 // 0x063C (size: 0x4)
    float LOBBY_PRIZE_SCREEN_TIME;                                                    // 0x0640 (size: 0x4)
    int32 LOBBY_TIMEOUT_STRIKES_MAX;                                                  // 0x0644 (size: 0x4)
    float LOBBY_CLIENT_SERVER_TIMEOUT_MULTIPLIER;                                     // 0x0648 (size: 0x4)
    float EVIL_DEFAULT_MAX_TENSION_DISTANCE;                                          // 0x064C (size: 0x4)
    float EVIL_DEFAULT_MIN_TENSION_DISTANCE;                                          // 0x0650 (size: 0x4)
    float EVIL_MAX_SEEABLE_DISTANCE;                                                  // 0x0654 (size: 0x4)
    float EVIL_BASE_MAX_RAGE;                                                         // 0x0658 (size: 0x4)
    float EVIL_PASSIVE_SECONDS_PER_RAGE;                                              // 0x065C (size: 0x4)
    float EVIL_FEASTING_RAGE_BONUS_MULTIPLIER;                                        // 0x0660 (size: 0x4)
    float EVIL_SCREAM_RAGE_GAIN;                                                      // 0x0664 (size: 0x4)
    float BASE_PITCH_CONSTRAINT;                                                      // 0x0668 (size: 0x4)
    float FLAMETHROWER_BASE_LIFETIME;                                                 // 0x066C (size: 0x4)
    float FLAMETHROWER_DAMAGE_TIME;                                                   // 0x0670 (size: 0x4)
    float FLAMETHROWER_ROTATION_MAX_SPEED;                                            // 0x0674 (size: 0x4)
    float FLAMETHROWER_ROTATION_MIN_SCALE;                                            // 0x0678 (size: 0x4)
    float FLAMETHROWER_TIME_TO_RAMP_RANGE;                                            // 0x067C (size: 0x4)
    float FLAMETHROWER_RANGE_RAMP_EXPONENT;                                           // 0x0680 (size: 0x4)
    float FLAMETHROWER_BASE_RANGE;                                                    // 0x0684 (size: 0x4)
    float FLAMETHROWER_TIME_TO_REACH_RANGE;                                           // 0x0688 (size: 0x4)
    float FLAMETHROWER_PROJECTILE_DAMAGE_DECAY_TIMER;                                 // 0x068C (size: 0x4)
    float FLAMETHROWER_PROJECTILE_FIRE_RATE;                                          // 0x0690 (size: 0x4)
    float FLAMETHROWER_PROJECTILE_FALLOFF_TIME;                                       // 0x0694 (size: 0x4)
    float FLAMETHROWER_PROJECTILE_BOUNCINESS;                                         // 0x0698 (size: 0x4)
    float FLAMETHROWER_PROJECTILE_SPAWN_OFFSET;                                       // 0x069C (size: 0x4)
    float FLAMETHROWER_PROJECTILE_COLLISION_CAPSULE_SIZE;                             // 0x06A0 (size: 0x4)
    float FLAMETHROWER_PROJECTILE_DAMAGE_CAPSULE_SIZE;                                // 0x06A4 (size: 0x4)
    float HOLYSLINGSHOT_WEAPON_CHARGEMULTIPLIER;                                      // 0x06A8 (size: 0x4)
    float HOLYSLINGSHOT_WEAPON_DECREASEMULTIPLIER;                                    // 0x06AC (size: 0x4)
    float HOLYSLINGSHOT_PROJECTILE_SPEED;                                             // 0x06B0 (size: 0x4)
    FVector HOLYSLINGSHOT_PROJECTILE_SPAWN_POSITION;                                  // 0x06B4 (size: 0xC)
    FVector RAYGUN_PROJECTILE_SPAWN_POSITION;                                         // 0x06C0 (size: 0xC)
    bool RAYGUN_PROJECTILE_CLIENT_AUTHORITY;                                          // 0x06CC (size: 0x1)
    float RAYGUN_PROJECTILE_SERVER_EXPIRY_GRACEPERIOD;                                // 0x06D0 (size: 0x4)
    float STATICSHIELD_WARMUP_TIME;                                                   // 0x06D4 (size: 0x4)
    float STATICSHIELD_TIME_UNTIL_POWERED;                                            // 0x06D8 (size: 0x4)
    float STATICSHIELD_ZAP_MAX_DISTANCE;                                              // 0x06DC (size: 0x4)
    float STATICSHIELD_ENERGYPOINTS_REQUIRED;                                         // 0x06E0 (size: 0x4)
    float STATICSHIELD_BASE_MAX_SHIELD_TIME;                                          // 0x06E4 (size: 0x4)
    float STATICSHIELD_ACTIVATING_DEPLETION_FACTOR;                                   // 0x06E8 (size: 0x4)
    float STATICSHIELD_BASE_ENERGYPOINT_ENERGIZE_TIME;                                // 0x06EC (size: 0x4)
    float STATICSHIELD_DAMAGE_TIME;                                                   // 0x06F0 (size: 0x4)
    float STATICSHIELD_MESH_FADEOUT_TIME;                                             // 0x06F4 (size: 0x4)
    FVector SHOCK_AURA_POWERED_COLOR;                                                 // 0x06F8 (size: 0xC)
    FVector SHOCK_AURA_UNPOWERED_COLOR;                                               // 0x0704 (size: 0xC)
    FVector HOLY_AURA_COLOR;                                                          // 0x0710 (size: 0xC)
    FVector BURN_AURA_COLOR;                                                          // 0x071C (size: 0xC)
    FVector OCCULT_AURA_ABSORB_COLOR;                                                 // 0x0728 (size: 0xC)
    FVector OCCULT_AURA_POWERED_COLOR;                                                // 0x0734 (size: 0xC)
    float STATICSHIELD_ACTIVE_SPEED_RAMP_TIME;                                        // 0x0740 (size: 0x4)
    float TALISMAN_WARMUP_TIME;                                                       // 0x0744 (size: 0x4)
    float TALISMAN_TIME_UNTIL_POWERED;                                                // 0x0748 (size: 0x4)
    float TALISMAN_ABSORB_AMOUNT_REQUIRED;                                            // 0x074C (size: 0x4)
    float TALISMAN_BASE_MAX_BEAM_TIME;                                                // 0x0750 (size: 0x4)
    float TALISMAN_BASE_BEAM_MAX_DISTANCE;                                            // 0x0754 (size: 0x4)
    float TALISMAN_CONE_LOCK_RADIUS;                                                  // 0x0758 (size: 0x4)
    float TALISMAN_CONE_UNLOCK_RADIUS;                                                // 0x075C (size: 0x4)
    float TALISMAN_BEAM_DAMAGE_TIME;                                                  // 0x0760 (size: 0x4)
    float PROJECTILE_WEAPON_AIM_MAGNETISM_MIN;                                        // 0x0764 (size: 0x4)
    float PROJECTILE_WEAPON_AIM_MAGNETISM_MAX;                                        // 0x0768 (size: 0x4)
    float PROJECTILE_WEAPON_AIM_MAGNETISM_CURVE_POWER;                                // 0x076C (size: 0x4)
    float CHASE_MIN_FACING_YAW_RANGE;                                                 // 0x0770 (size: 0x4)
    float GOOD_CHASE_START_MIN_DISTANCE;                                              // 0x0774 (size: 0x4)
    float GOOD_CHASE_REFRESH_MIN_DISTANCE;                                            // 0x0778 (size: 0x4)
    float EVIL_CHASE_START_MIN_DISTANCE;                                              // 0x077C (size: 0x4)
    float EVIL_CHASE_REFRESH_MIN_DISTANCE;                                            // 0x0780 (size: 0x4)
    float CHASE_ACTIVE_TIME;                                                          // 0x0784 (size: 0x4)
    float CHASE_ONGOING_MAX_TOLERANCE_SECS;                                           // 0x0788 (size: 0x4)
    float EVIL_STOP_CHASE_DISTANCE;                                                   // 0x078C (size: 0x4)
    float BASECHAR_LOOKUPRATE;                                                        // 0x0790 (size: 0x4)
    float BASECHAR_LOOK_MOUSE_SENS_MULT;                                              // 0x0794 (size: 0x4)
    float BASECHAR_LOOK_MOUSE_BASE_SENS;                                              // 0x0798 (size: 0x4)
    float BASECHAR_LOOK_HORIZONTAL_SENS_MULT;                                         // 0x079C (size: 0x4)
    float BASECHAR_LOOK_VERTICAL_SENS_MULT;                                           // 0x07A0 (size: 0x4)
    float BASECHAR_LOOK_HORIZONTAL_BASE_SENS;                                         // 0x07A4 (size: 0x4)
    float BASECHAR_LOOK_VERTICAL_BASE_SENS;                                           // 0x07A8 (size: 0x4)
    float BASECHAR_MOVEMENT_INTERACTION_BUFFER_TIME;                                  // 0x07AC (size: 0x4)
    float BASECHAR_MOVEMENT_INTERACTION_MAX_TIME;                                     // 0x07B0 (size: 0x4)
    float BASECHAR_MOVEMENT_FRICTION_LERP_SPEED;                                      // 0x07B4 (size: 0x4)
    float BASECHAR_MOVEMENT_FRICTION_FORCE_MULTIPLIER;                                // 0x07B8 (size: 0x4)
    float BASECHAR_MOVEMENT_FRICTION_MIN_SPEED_MULTIPLIER;                            // 0x07BC (size: 0x4)
    float BASECHAR_MOVEMENT_FRICTION_DOT_THRESHOLD;                                   // 0x07C0 (size: 0x4)
    float BASECHAR_CAPSULE_RADIUS;                                                    // 0x07C4 (size: 0x4)
    float BASECHAR_CAPSULE_HALF_HEIGHT;                                               // 0x07C8 (size: 0x4)
    float BASECHAR_CAPSULE_PERCH_RADIUS;                                              // 0x07CC (size: 0x4)
    float BASECHAR_PING_COOLDOWN_DURATION;                                            // 0x07D0 (size: 0x4)
    float BASECHAR_PING_LIFETIME;                                                     // 0x07D4 (size: 0x4)
    float BASECHAR_PING_MIN_PENALTY_TIMER;                                            // 0x07D8 (size: 0x4)
    float BASECHAR_PING_PENALTY_TIME;                                                 // 0x07DC (size: 0x4)
    float BASECHAR_PING_VISIBILITY_BASE_RADIUS;                                       // 0x07E0 (size: 0x4)
    float BASECHAR_PING_VISIBILITY_RADIUS_MULTIPLIER;                                 // 0x07E4 (size: 0x4)
    float BASECHAR_PING_DOUBLECLICK_THRESHOLD;                                        // 0x07E8 (size: 0x4)
    float BASECHAR_PING_OFFSET_CRAFTINGSTATION;                                       // 0x07EC (size: 0x4)
    float BASECHAR_PING_OFFSET_PICKUP;                                                // 0x07F0 (size: 0x4)
    float BASECHAR_PING_OFFSET_CHARACTER;                                             // 0x07F4 (size: 0x4)
    float BASECHAR_PING_OFFSET_REMOTECHAR;                                            // 0x07F8 (size: 0x4)
    float BASECHAR_PING_OFFSET_MEDKIT;                                                // 0x07FC (size: 0x4)
    float BASECHAR_PING_OFFSET_HIDEPOINT;                                             // 0x0800 (size: 0x4)
    float BASECHAR_PING_OFFSET_VENDINGMACHINE;                                        // 0x0804 (size: 0x4)
    float BASECHAR_PING_OFFSET_WASTEBASKET;                                           // 0x0808 (size: 0x4)
    float BASECHAR_PING_OFFSET_LOCKBOX;                                               // 0x080C (size: 0x4)
    int32 BASECHAR_PING_NUM_MAX_TEEN;                                                 // 0x0810 (size: 0x4)
    int32 BASECHAR_PING_NUM_MAX_EVIL;                                                 // 0x0814 (size: 0x4)
    int32 BASECHAR_PING_EVIL_AUTOREPLACE_DISTANCE;                                    // 0x0818 (size: 0x4)
    float BASECHAR_PING_EVIL_MIN_SPOTLIGHT_HEIGHT;                                    // 0x081C (size: 0x4)
    FColor BASECHAR_PING_COLOR_EVIL_0;                                                // 0x0820 (size: 0x4)
    FColor BASECHAR_PING_COLOR_EVIL_1;                                                // 0x0824 (size: 0x4)
    FColor BASECHAR_PING_COLOR_EVIL_2;                                                // 0x0828 (size: 0x4)
    float TEEN_HIGH_FALL_DURATION_THRESHOLD;                                          // 0x082C (size: 0x4)
    float TEEN_FALL_DURATION_MAX_TIME;                                                // 0x0830 (size: 0x4)
    float TEEN_MAX_STEALTH_FALL_DISTANCE;                                             // 0x0834 (size: 0x4)
    float TEEN_HIT_REACTION_LENGTH;                                                   // 0x0838 (size: 0x4)
    float TEEN_MIN_FALL_DURATION;                                                     // 0x083C (size: 0x4)
    float TEEN_MAX_FALL_DURATION;                                                     // 0x0840 (size: 0x4)
    int32 TEEN_PERM_MARRED_TEEN_HIT_COUNTER;                                          // 0x0844 (size: 0x4)
    float TEEN_MARRED_LEVEL_1_TIME;                                                   // 0x0848 (size: 0x4)
    float TORN_STATUS_EFFECT_BLOOD_DROP_RATE_MULTIPLIER_INCREASE;                     // 0x084C (size: 0x4)
    float TORN_STATUS_EFFECT_BLOOD_SIZE_MULTIPLIER_INCREASE;                          // 0x0850 (size: 0x4)
    float TORN_STATUS_EFFECT_BLOOD_LIFETIME_MULTIPLIER_INCREASE;                      // 0x0854 (size: 0x4)
    float TORN_STATUS_EFFECT_DEBUG_DURATION;                                          // 0x0858 (size: 0x4)
    float TPCHAR_STATICSHIELD_ROTATION_RATE;                                          // 0x085C (size: 0x4)
    float TPCHAR_FALLING_LATERAL_FRICTION;                                            // 0x0860 (size: 0x4)
    float TPCHAR_TURNINPLACE_ANIMLENGTH;                                              // 0x0864 (size: 0x4)
    float TPCHAR_BREAKING_DECELERATION_FALLING;                                       // 0x0868 (size: 0x4)
    float TPCHAR_CAPSULE_CROUCH_ANIM_DURATION;                                        // 0x086C (size: 0x4)
    float TPCHAR_CAPSULE_LANDING_ANIM_DURATION;                                       // 0x0870 (size: 0x4)
    float TPCHAR_CAPSULE_CROUCH_HALF_HEIGHT;                                          // 0x0874 (size: 0x4)
    int32 TPCHAR_CAPSULE_ROLLBACK_NUM_TIMESTEPS;                                      // 0x0878 (size: 0x4)
    float TPCHAR_TOGGLE_CROUCH_CANCEL_DELAY_AFTER_ACTION;                             // 0x087C (size: 0x4)
    FColor TPCHAR_CAPSULE_GOOD_SHAPE_COLOR;                                           // 0x0880 (size: 0x4)
    FColor TPCHAR_CAPSULE_EVIL_SHAPE_COLOR;                                           // 0x0884 (size: 0x4)
    FColor TPCHAR_CAPSULE_TARGETING_SHAPE_COLOR;                                      // 0x0888 (size: 0x4)
    float DOLLMINION_CAPSULE_HALF_HEIGHT;                                             // 0x088C (size: 0x4)
    float DOLLMINION_TARGETING_CAPSULE_RADIUS;                                        // 0x0890 (size: 0x4)
    float TPCHAR_BASE_SPEED;                                                          // 0x0894 (size: 0x4)
    float TEEN_CRAWL_SPEED_MULTIPLIER;                                                // 0x0898 (size: 0x4)
    float TEEN_CRAWL_SPEED_MINIGAME_BOOST_INCREASE_FACTOR;                            // 0x089C (size: 0x4)
    float TEEN_CROUCH_SPEED_MULTIPLIER;                                               // 0x08A0 (size: 0x4)
    float TEEN_STEALTH_SPEED_MULTIPLIER;                                              // 0x08A4 (size: 0x4)
    float TEEN_WALK_SPEED_MULTIPLIER;                                                 // 0x08A8 (size: 0x4)
    float TEEN_RUN_SPEED_MULTIPLIER;                                                  // 0x08AC (size: 0x4)
    float TEEN_TALISMAN_CROUCH_SPEED_MULTIPLIER;                                      // 0x08B0 (size: 0x4)
    float TEEN_TALISMAN_WALK_SPEED_MULTIPLIER;                                        // 0x08B4 (size: 0x4)
    float TEEN_MOLOTOV_AIM_MOVEMENT_SPEED_MULTIPLIER;                                 // 0x08B8 (size: 0x4)
    float TEEN_SLINGSHOT_AIM_MOVEMENT_SPEED_MULTIPLIER;                               // 0x08BC (size: 0x4)
    float TEEN_FLAMETHROWER_AIM_MOVEMENT_SPEED_MULTIPLIER;                            // 0x08C0 (size: 0x4)
    float TEEN_CROSS_AIM_MOVEMENT_SPEED_MULTIPLIER;                                   // 0x08C4 (size: 0x4)
    float TEEN_CROSS_AIM_MOVEMENT_ANIMATED_SPEED;                                     // 0x08C8 (size: 0x4)
    float TEEN_SLINGSHOT_AIM_MOVEMENT_ANIMATED_SPEED;                                 // 0x08CC (size: 0x4)
    float TEEN_TALISMAN_AIM_MOVEMENT_ANIMATED_SPEED;                                  // 0x08D0 (size: 0x4)
    float TEEN_TALISMAN_CHARGE_MOVEMENT_ANIMATED_SPEED;                               // 0x08D4 (size: 0x4)
    float TEEN_TALISMAN_CROUCH_MOVEMENT_ANIMATED_SPEED;                               // 0x08D8 (size: 0x4)
    float TEEN_MOLOTOV_AIM_MOVEMENT_ANIMATED_SPEED;                                   // 0x08DC (size: 0x4)
    float TEEN_FLAMETHROWER_AIM_MOVEMENT_ANIMATED_SPEED;                              // 0x08E0 (size: 0x4)
    float TEEN_STATICSHIELD_AIM_MOVEMENT_ANIMATED_SPEED;                              // 0x08E4 (size: 0x4)
    float TEEN_RAYGUN_AIM_MOVEMENT_ANIMATED_SPEED;                                    // 0x08E8 (size: 0x4)
    float TEEN_DEMONSWORD_AIM_MOVEMENT_ANIMATED_SPEED;                                // 0x08EC (size: 0x4)
    float TEEN_HOLYSTAFF_AIM_MOVEMENT_ANIMATED_SPEED;                                 // 0x08F0 (size: 0x4)
    float TEEN_FLAMEMINE_AIM_MOVEMENT_ANIMATED_SPEED;                                 // 0x08F4 (size: 0x4)
    float TEEN_DEMONSWORD_AIM_MOVEMENT_SPEED_MULTIPLIER;                              // 0x08F8 (size: 0x4)
    float TEEN_RAYGUN_AIM_MOVEMENT_SPEED_MULTIPLIER;                                  // 0x08FC (size: 0x4)
    float TEEN_HOLYSTAFF_AIM_MOVEMENT_SPEED_MULTIPLIER;                               // 0x0900 (size: 0x4)
    float TEEN_TALISMAN_AIM_MOVEMENT_SPEED_MULTIPLIER;                                // 0x0904 (size: 0x4)
    float TEEN_ADRENALINE_SPEED_BONUS_MULTIPLIER;                                     // 0x0908 (size: 0x4)
    float TEEN_INJURY_RUN_SPEED_PENALTY_MULTIPLIER;                                   // 0x090C (size: 0x4)
    float TEEN_INJURY_WALK_SPEED_PENALTY_MULTIPLIER;                                  // 0x0910 (size: 0x4)
    float TEEN_STATICSHIELD_MIN_SPEED_MULTIPLIER;                                     // 0x0914 (size: 0x4)
    float TEEN_STATICSHIELD_BASE_MAX_SPEED_MULTIPLIER;                                // 0x0918 (size: 0x4)
    float TEEN_WALKIE_TALKIE_WALK_SPEED_MULTIPLIER;                                   // 0x091C (size: 0x4)
    float MAGIC_SPHERE_SPEED_MULTIPLIER;                                              // 0x0920 (size: 0x4)
    float MAGIC_SPHERE_ACCELERATION;                                                  // 0x0924 (size: 0x4)
    float RCCOPTER_SPEED_MULTIPLIER;                                                  // 0x0928 (size: 0x4)
    float RCCOPTER_ACCELERATION;                                                      // 0x092C (size: 0x4)
    float EVIL_INCORPOREAL_SPEED_MULTIPLIER;                                          // 0x0930 (size: 0x4)
    float EVIL_CROSS_RUN_SPEED_MULTIPLIER_MIN;                                        // 0x0934 (size: 0x4)
    float EVIL_CROSS_RUN_SPEED_MULTIPLIER_MAX;                                        // 0x0938 (size: 0x4)
    float EVIL_SLINGSHOT_RUN_SPEED_MULTIPLIER;                                        // 0x093C (size: 0x4)
    float EVIL_MOLOTOV_RUN_SPEED_MULTIPLIER;                                          // 0x0940 (size: 0x4)
    float EVIL_STATICSHIELD_RUN_SPEED_MULTIPLIER;                                     // 0x0944 (size: 0x4)
    float EVIL_PARCHMENT_RUN_SPEED_MULTIPLIER;                                        // 0x0948 (size: 0x4)
    float EVIL_FLAMETHROWER_RUN_SPEED_MULTIPLIER_MIN;                                 // 0x094C (size: 0x4)
    float EVIL_FLAMETHROWER_RUN_SPEED_MULTIPLIER_MAX;                                 // 0x0950 (size: 0x4)
    float EVIL_FLAMEMINE_RUN_SPEED_MULTIPLIER_MIN;                                    // 0x0954 (size: 0x4)
    float EVIL_FLAMEMINE_RUN_SPEED_MULTIPLIER_MAX;                                    // 0x0958 (size: 0x4)
    float EVIL_TALISMAN_RUN_SPEED_MULTIPLIER_MIN;                                     // 0x095C (size: 0x4)
    float EVIL_TALISMAN_RUN_SPEED_MULTIPLIER_MAX;                                     // 0x0960 (size: 0x4)
    float EVIL_RCCOPTER_RUN_SPEED_MULTIPLIER_MIN;                                     // 0x0964 (size: 0x4)
    float EVIL_RCCOPTER_RUN_SPEED_MULTIPLIER_MAX;                                     // 0x0968 (size: 0x4)
    float EVIL_RAYGUN_RUN_SPEED_MULTIPLIER_MIN;                                       // 0x096C (size: 0x4)
    float EVIL_RAYGUN_RUN_SPEED_MULTIPLIER_MAX;                                       // 0x0970 (size: 0x4)
    float EVIL_DEMONSWORD_RUN_SPEED_MULTIPLIER_MIN;                                   // 0x0974 (size: 0x4)
    float EVIL_DEMONSWORD_RUN_SPEED_MULTIPLIER_MAX;                                   // 0x0978 (size: 0x4)
    float EVIL_HOLYSTAFF_RUN_SPEED_MULTIPLIER_MIN;                                    // 0x097C (size: 0x4)
    float EVIL_HOLYSTAFF_RUN_SPEED_MULTIPLIER_MAX;                                    // 0x0980 (size: 0x4)
    float EVIL_DISINTEGRATION_RUN_SPEED_MULTIPLIER;                                   // 0x0984 (size: 0x4)
    float EVIL_BASE_ABILITY_CHARGE_MOVESPEED_MULTIPLIER;                              // 0x0988 (size: 0x4)
    float EVIL_WEAPON_DISTANCE_RUN_SPEED_MULTIPLIER_MIN;                              // 0x098C (size: 0x4)
    float EVIL_WEAPON_DISTANCE_RUN_SPEED_MULTIPLIER_MAX;                              // 0x0990 (size: 0x4)
    float EVIL_WEAPON_DISTANCE_RUN_SPEED_DISTANCE_MIN;                                // 0x0994 (size: 0x4)
    float EVIL_WEAPON_DISTANCE_RUN_SPEED_DISTANCE_MAX;                                // 0x0998 (size: 0x4)
    float WEAPON_CRAFT_GAMEMODE_MULTIPLIER;                                           // 0x099C (size: 0x4)
    float CRAFTING_FLAMETHROWER_BASE_TIME;                                            // 0x09A0 (size: 0x4)
    float CRAFTING_MOLOTOV_BASE_TIME;                                                 // 0x09A4 (size: 0x4)
    float CRAFTING_RCCOPTER_BASE_TIME;                                                // 0x09A8 (size: 0x4)
    float CRAFTING_PARCHMENT_BASE_TIME;                                               // 0x09AC (size: 0x4)
    float CRAFTING_CROSS_BASE_TIME;                                                   // 0x09B0 (size: 0x4)
    float CRAFTING_SLINGSHOT_BASE_TIME;                                               // 0x09B4 (size: 0x4)
    float CRAFTING_TALISMAN_BASE_TIME;                                                // 0x09B8 (size: 0x4)
    float CRAFTING_STATICSHIELD_BASE_TIME;                                            // 0x09BC (size: 0x4)
    float CRAFTING_DEMONSWORD_BASE_TIME;                                              // 0x09C0 (size: 0x4)
    float CRAFTING_RAYGUN_BASE_TIME;                                                  // 0x09C4 (size: 0x4)
    float CRAFTING_HOLYSTAFF_BASE_TIME;                                               // 0x09C8 (size: 0x4)
    float CRAFTING_FLAMEMINE_BASE_TIME;                                               // 0x09CC (size: 0x4)
    float CRAFTING_BASE_DECAY_MULTIPLIER;                                             // 0x09D0 (size: 0x4)
    FVector WEREWOLF_RELATIVE_FPMESH_LOCATION;                                        // 0x09D4 (size: 0xC)
    FRotator WEREWOLF_TP_ATTACK_PARTICLE_ROTATION;                                    // 0x09E0 (size: 0xC)
    FVector WEREWOLF_FP_ATTACK_PARTICLE_LOCATION;                                     // 0x09EC (size: 0xC)
    float WEREWOLF_RUN_SPEED_MULTIPLIER;                                              // 0x09F8 (size: 0x4)
    float WEREWOLF_ATTACK_HELD_RUN_SPEED_MULTIPLIER;                                  // 0x09FC (size: 0x4)
    float WEREWOLF_ATTACK_RECOVERY_RUN_SPEED_MULTIPLIER;                              // 0x0A00 (size: 0x4)
    float WEREWOLF_BERSERK_SPEED_BONUS_MULTIPLIER;                                    // 0x0A04 (size: 0x4)
    float WEREWOLF_BERSERK_ATTACK_RECOVERING_SPEED_BONUS_MULTIPLIER;                  // 0x0A08 (size: 0x4)
    float WEREWOLF_BERSERK_TENSION_DISTANCE_BONUS_MULTIPLIER;                         // 0x0A0C (size: 0x4)
    float WEREWOLF_ABILITY_LOCKOUT_BERSERK;                                           // 0x0A10 (size: 0x4)
    float EFFIGY_RAGE_FURY_MAX_SECONDS;                                               // 0x0A14 (size: 0x4)
    float EFFIGY_RAGE_FURY_TOTAL_INCREASE_MULTIPLIER;                                 // 0x0A18 (size: 0x4)
    float EFFIGY_AGONY_MAX_SECONDS;                                                   // 0x0A1C (size: 0x4)
    float EFFIGY_AGONY_LIFE_LOSS_TIME_INCREASE;                                       // 0x0A20 (size: 0x4)
    float EFFIGY_POWER_MAX_SECONDS;                                                   // 0x0A24 (size: 0x4)
    float EFFIGY_POWER_COOLDOWN_MULTIPLIER;                                           // 0x0A28 (size: 0x4)
    float EFFIGY_DREAD_MAX_SECONDS;                                                   // 0x0A2C (size: 0x4)
    float EFFIGY_PESTILENCE_MARRED_MAX_SECONDS;                                       // 0x0A30 (size: 0x4)
    int32 EFFIGY_BASE_CHARGE_HITS_REQUIRED;                                           // 0x0A34 (size: 0x4)
    FRotator DOLLMASTER_TP_ATTACK_PARTICLE_ROTATION;                                  // 0x0A38 (size: 0xC)
    FVector DOLLMASTER_FP_ATTACK_PARTICLE_LOCATION;                                   // 0x0A44 (size: 0xC)
    float DOLLMASTER_RUN_SPEED_MULTIPLIER;                                            // 0x0A50 (size: 0x4)
    float DOLLMASTER_ATTACK_HELD_RUN_SPEED_MULTIPLIER;                                // 0x0A54 (size: 0x4)
    float DOLLMASTER_ATTACK_RECOVERY_RUN_SPEED_MULTIPLIER;                            // 0x0A58 (size: 0x4)
    FName DOLLMASTER_BONENAME_TRAP_SPAWN;                                             // 0x0A5C (size: 0x8)
    FRotator DOLLMINION_TP_ATTACK_PARTICLE_ROTATION;                                  // 0x0A64 (size: 0xC)
    FVector DOLLMINION_FP_ATTACK_PARTICLE_LOCATION;                                   // 0x0A70 (size: 0xC)
    float DOLLMINION_RUN_SPEED_MULTIPLIER;                                            // 0x0A7C (size: 0x4)
    float DOLLMINION_ATTACK_HELD_RUN_SPEED_MULTIPLIER;                                // 0x0A80 (size: 0x4)
    float DOLLMINION_ATTACK_RECOVERY_RUN_SPEED_MULTIPLIER;                            // 0x0A84 (size: 0x4)
    float DOLLMINION_LEAP_SPEED_MULTIPLIER;                                           // 0x0A88 (size: 0x4)
    float DOLLMINION_LEAP_SPEED_DAMAGED_MULTIPLIER;                                   // 0x0A8C (size: 0x4)
    float DOLLMINION_DESTROY_DELAY_TIME;                                              // 0x0A90 (size: 0x4)
    float DOLLMINION_LEAP_CHARGE_MOVESPEED_MULTIPLIER;                                // 0x0A94 (size: 0x4)
    float DOLLMINION_LEAP_TRIGGERED_COOLDOWN_REDUCTION_MULTIPLIER;                    // 0x0A98 (size: 0x4)
    FVector TOAD_RELATIVE_FPMESH_LOCATION;                                            // 0x0A9C (size: 0xC)
    FRotator TOAD_TP_ATTACK_PARTICLE_ROTATION;                                        // 0x0AA8 (size: 0xC)
    FVector TOAD_FP_ATTACK_PARTICLE_LOCATION;                                         // 0x0AB4 (size: 0xC)
    float TOAD_RUN_SPEED_MULTIPLIER;                                                  // 0x0AC0 (size: 0x4)
    float TOAD_ATTACK_HELD_RUN_SPEED_MULTIPLIER;                                      // 0x0AC4 (size: 0x4)
    float TOAD_ATTACK_RECOVERY_RUN_SPEED_MULTIPLIER;                                  // 0x0AC8 (size: 0x4)
    float AUGMENT_TOAD_ARMOR_HITBONUS_TORN_DURATION;                                  // 0x0ACC (size: 0x4)
    float ANOMALY_IGNORE_FALLING_FRAMES;                                              // 0x0AD0 (size: 0x4)
    float MIMIC_RUN_SPEED_MULTIPLIER;                                                 // 0x0AD4 (size: 0x4)
    float MIMIC_BONUS_CROUCH_SPEED_MULTIPLIER_INCREASE;                               // 0x0AD8 (size: 0x4)
    float AI_MIMIC_MAX_LIFE_SPAN;                                                     // 0x0ADC (size: 0x4)
    float AI_MIMIC_RAGDOLL_LIFE_SPAN;                                                 // 0x0AE0 (size: 0x4)
    FVector ERADICATOR_RELATIVE_FPMESH_LOCATION;                                      // 0x0AE4 (size: 0xC)
    FVector ERADICATOR_FPCAMERA_BOOM_LOCATION;                                        // 0x0AF0 (size: 0xC)
    FVector ERADICATOR_FPMESH_LOCATION;                                               // 0x0AFC (size: 0xC)
    float ERADICATOR_RUN_SPEED_MULTIPLIER;                                            // 0x0B08 (size: 0x4)
    float ERADICATOR_ATTACK_HELD_RUN_SPEED_MULTIPLIER;                                // 0x0B0C (size: 0x4)
    float ERADICATOR_ATTACK_RECOVERY_RUN_SPEED_MULTIPLIER;                            // 0x0B10 (size: 0x4)
    float ERADICATOR_VEHICLE_SPEED_BONUS_MULTIPLIER;                                  // 0x0B14 (size: 0x4)
    float ERADICATOR_ABILITY_LOCKOUT_MODESWAP;                                        // 0x0B18 (size: 0x4)
    float ERADICATOR_ABILITY_LOCKOUT_ELECTRICSURGE;                                   // 0x0B1C (size: 0x4)
    float ERADICATOR_ABILITY_LOCKOUT_SCANNERBEAM;                                     // 0x0B20 (size: 0x4)
    float ERADICATOR_VEHICLE_TENSION_DISTANCE_BONUS_MULTIPLIER;                       // 0x0B24 (size: 0x4)
    float ERADICATOR_CHANCE_TO_SAY_HIT_INJURY_PHRASE;                                 // 0x0B28 (size: 0x4)
    int32 ERADICATOR_MIN_HITS_BEFORE_SAY_HIT_INJURY_PHRASE;                           // 0x0B2C (size: 0x4)
    float TPCHAR_WEAPON_USEDUP_TIME_MAXIMUM;                                          // 0x0B30 (size: 0x4)
    FVector TPCHAR_PROJECTION_ARC;                                                    // 0x0B34 (size: 0xC)
    FVector TPCHAR_PROJECTION_OFFSET;                                                 // 0x0B40 (size: 0xC)
    float TPCHAR_PROJECTION_LIFETIME;                                                 // 0x0B4C (size: 0x4)
    float TPCHAR_PROJECTION_INTERVAL;                                                 // 0x0B50 (size: 0x4)
    float TPCHAR_PROJECTION_MAXIMUM_DISTANCE;                                         // 0x0B54 (size: 0x4)
    float TPCHAR_FRIENDLY_PROXIMITY_CLOSE;                                            // 0x0B58 (size: 0x4)
    float TPCHAR_FRIENDLY_PROXIMITY_MEDIUM;                                           // 0x0B5C (size: 0x4)
    float TPCHAR_FRIENDLY_PROXIMITY_FAR;                                              // 0x0B60 (size: 0x4)
    float PING_SPHERECAST_RADIUS_SMALL;                                               // 0x0B64 (size: 0x4)
    float PING_SPHERECAST_RADIUS_BIG;                                                 // 0x0B68 (size: 0x4)
    float PING_HOVER_RADIUS;                                                          // 0x0B6C (size: 0x4)
    float PING_INDICATOR_MIN_SIZE;                                                    // 0x0B70 (size: 0x4)
    float PING_INDICATOR_MIN_SIZE_RADIUS;                                             // 0x0B74 (size: 0x4)
    float HUD_GUTTER_HORIZONTAL_SCALE;                                                // 0x0B78 (size: 0x4)
    float HUD_GUTTER_VERTICAL_SCALE;                                                  // 0x0B7C (size: 0x4)
    float HUD_GUTTER_CORNER_TIGHTNESS;                                                // 0x0B80 (size: 0x4)
    float HUD_GUTTER_LOWER_DEAD_ZONE_ANGLE;                                           // 0x0B84 (size: 0x4)
    float PING_INDICATOR_MAX_SIZE_RADIUS;                                             // 0x0B88 (size: 0x4)
    float HUD_ACTION_BAR_LERP_SPEED;                                                  // 0x0B8C (size: 0x4)
    float HUD_ACTION_BAR_SNAP_PERCENT_UPPER;                                          // 0x0B90 (size: 0x4)
    float HUD_ACTION_BAR_SNAP_PERCENT_LOWER;                                          // 0x0B94 (size: 0x4)
    float HUD_ACTION_BAR_SNAP_DIFFERENCE;                                             // 0x0B98 (size: 0x4)
    FLinearColor HUD_RETICLE_COLOR_STIGMA_BURN;                                       // 0x0B9C (size: 0x10)
    FLinearColor HUD_RETICLE_COLOR_STIGMA_HOLY;                                       // 0x0BAC (size: 0x10)
    FLinearColor HUD_RETICLE_COLOR_STIGMA_OCCULT;                                     // 0x0BBC (size: 0x10)
    FLinearColor HUD_RETICLE_COLOR_STIGMA_SHOCK;                                      // 0x0BCC (size: 0x10)
    float HUD_WEAPONCARD_LOCKED_OPACITY;                                              // 0x0BDC (size: 0x4)
    float TPCHAR_MAX_AIMING_PITCH;                                                    // 0x0BE0 (size: 0x4)
    float TPCHAR_BASE_GROUND_FRICTION;                                                // 0x0BE4 (size: 0x4)
    float TPCHAR_GOOD_ACCELERATION;                                                   // 0x0BE8 (size: 0x4)
    float TPCHAR_GOOD_BOOSTED_ACCELERATION;                                           // 0x0BEC (size: 0x4)
    float TPCHAR_EVIL_BOOSTED_ACCELERATION;                                           // 0x0BF0 (size: 0x4)
    float TPCHAR_STATIC_SHIELD_ACCELERATION;                                          // 0x0BF4 (size: 0x4)
    float TPCHAR_OBSERVER_ACCELERATION;                                               // 0x0BF8 (size: 0x4)
    float TPCHAR_OBSERVER_DECELERATION;                                               // 0x0BFC (size: 0x4)
    float EVIL_ACCELERATION;                                                          // 0x0C00 (size: 0x4)
    float EVIL_ATTACK_RECOVERY_ACCELERATION;                                          // 0x0C04 (size: 0x4)
    float EVIL_ATTACK_VALIDATION_RANGE_MULTIPLIER;                                    // 0x0C08 (size: 0x4)
    float FPCHAR_MAX_DANGER_SENSE_RANGE;                                              // 0x0C0C (size: 0x4)
    FLinearColor FPCHAR_DANGERSENSE_PRIMARYSWIRL_WOUND_COLOR;                         // 0x0C10 (size: 0x10)
    FLinearColor FPCHAR_DANGERSENSE_SECONDARYSWIRL_WOUND_COLOR;                       // 0x0C20 (size: 0x10)
    FLinearColor FPCHAR_DANGERSENSE_PRIMARYSWIRL_STUN_COLOR;                          // 0x0C30 (size: 0x10)
    FLinearColor FPCHAR_DANGERSENSE_SECONDARYSWIRL_STUN_COLOR;                        // 0x0C40 (size: 0x10)
    FColor FPCHAR_DANGERSENSE_SETTINGS_COLOR_WHITE;                                   // 0x0C50 (size: 0x4)
    FColor FPCHAR_DANGERSENSE_SETTINGS_COLOR_BLUE;                                    // 0x0C54 (size: 0x4)
    FColor FPCHAR_DANGERSENSE_SETTINGS_COLOR_MAGENTA;                                 // 0x0C58 (size: 0x4)
    FColor FPCHAR_DANGERSENSE_SETTINGS_COLOR_YELLOW;                                  // 0x0C5C (size: 0x4)
    FColor FPCHAR_DANGERSENSE_SETTINGS_COLOR_CYAN;                                    // 0x0C60 (size: 0x4)
    FColor FPCHAR_DANGERSENSE_SETTINGS_COLOR_RED;                                     // 0x0C64 (size: 0x4)
    FColor FPCHAR_DANGERSENSE_SETTINGS_COLOR_GREEN;                                   // 0x0C68 (size: 0x4)
    float FPCHAR_DANGERSENSE_SETTINGS_SCALE_MAX;                                      // 0x0C6C (size: 0x4)
    float FPCHAR_DANGERSENSE_SETTINGS_SCALE_MIN;                                      // 0x0C70 (size: 0x4)
    float FPCHAR_FEAST_TARGET_MIN_FACING_DOTPRODUCT;                                  // 0x0C74 (size: 0x4)
    float FPCHAR_TEEN_COLLISION_THRESHOLD_SECONDS;                                    // 0x0C78 (size: 0x4)
    float FPCHAR_STUN_INTRO_OUTRO_TIME;                                               // 0x0C7C (size: 0x4)
    FVector FPCHAR_VICTIMFINDER_SCALE;                                                // 0x0C80 (size: 0xC)
    FVector FPCHAR_RETICLE_ASSIST_SCALE_REDUCTION;                                    // 0x0C8C (size: 0xC)
    float FPCHAR_VICTIMFINDER_EXTENDED_PITCHDOWN_REACH;                               // 0x0C98 (size: 0x4)
    FName EVIL_BONENAME_FEAST_SOURCE;                                                 // 0x0C9C (size: 0x8)
    FName EVIL_RIGHT_BONENAME_BOUNCE_CHECK_START;                                     // 0x0CA4 (size: 0x8)
    FName EVIL_RIGHT_BONENAME_BOUNCE_CHECK_END;                                       // 0x0CAC (size: 0x8)
    FName EVIL_LEFT_BONENAME_BOUNCE_CHECK_START;                                      // 0x0CB4 (size: 0x8)
    FName EVIL_LEFT_BONENAME_BOUNCE_CHECK_END;                                        // 0x0CBC (size: 0x8)
    FVector DOLLMINION_RELATIVE_FPMESH_LOCATION;                                      // 0x0CC4 (size: 0xC)
    float DOLLMINION_LEAP_ACCELERATION;                                               // 0x0CD0 (size: 0x4)
    float DOLLMINION_LEAP_MAX_HEIGHT;                                                 // 0x0CD4 (size: 0x4)
    float DOLLMINION_LEAP_MAX_ACCELERATION_SCALE;                                     // 0x0CD8 (size: 0x4)
    float DOLLMINION_LEAP_MIN_ACCELERATION_SCALE;                                     // 0x0CDC (size: 0x4)
    float DOLLMINION_LEAP_TIME;                                                       // 0x0CE0 (size: 0x4)
    float DOLLMINION_WEAPON_DAMAGE_TIME_MULTIPLIER;                                   // 0x0CE4 (size: 0x4)
    float EVIL_MINIMUM_FACING_DOT_PRODUCT;                                            // 0x0CE8 (size: 0x4)
    float EVIL_SCREAM_RANGE;                                                          // 0x0CEC (size: 0x4)
    float EVIL_RESPAWN_SCREAM_RANGE;                                                  // 0x0CF0 (size: 0x4)
    int32 EVIL_SCREAM_EFFECT_VERTEX_DENSITY;                                          // 0x0CF4 (size: 0x4)
    float EVIL_SCREAM_EFFECT_DURATION;                                                // 0x0CF8 (size: 0x4)
    float EVIL_SCREAM_STARTING_RADIUS;                                                // 0x0CFC (size: 0x4)
    float EVIL_SCREAM_MIN_RADIUS_MULTIPLIER;                                          // 0x0D00 (size: 0x4)
    FPostProcessSettings EVIL_SCREAM_POST_PROCESS;                                    // 0x0D10 (size: 0x560)
    int32 EVIL_SCREAM_MAX_SHOCKWAVES;                                                 // 0x1270 (size: 0x4)
    int32 EVIL_RESPAWN_SCREAM_MAX_SHOCKWAVES;                                         // 0x1274 (size: 0x4)
    float EVIL_SCREAM_SHOCKWAVE_DELAY;                                                // 0x1278 (size: 0x4)
    float WEREWOLF_BERSERK_DURATION;                                                  // 0x127C (size: 0x4)
    float WEREWOLF_BASE_HOWL_RANGE;                                                   // 0x1280 (size: 0x4)
    float WEREWOLF_BERSERK_BASE_COOLDOWN;                                             // 0x1284 (size: 0x4)
    float WEREWOLF_HOWL_BASE_COOLDOWN;                                                // 0x1288 (size: 0x4)
    float WEREWOLF_SENSE_BASE_COOLDOWN;                                               // 0x128C (size: 0x4)
    float WEREWOLF_HOWL_BASE_CHARGE_TIME;                                             // 0x1290 (size: 0x4)
    float WEREWOLF_BERSERK_BASE_CHARGE_TIME;                                          // 0x1294 (size: 0x4)
    float WEREWOLF_SENSE_BASE_CHARGE_TIME;                                            // 0x1298 (size: 0x4)
    float DOLLMASTER_TRAP_BASE_COOLDOWN;                                              // 0x129C (size: 0x4)
    float DOLLMASTER_SUMMON_BASE_COOLDOWN;                                            // 0x12A0 (size: 0x4)
    float DOLLMASTER_SUMMON_RELEASE_COOLDOWN_REDUCTION;                               // 0x12A4 (size: 0x4)
    float DOLLMASTER_TELEPORT_BASE_COOLDOWN;                                          // 0x12A8 (size: 0x4)
    float DOLLMINION_LEAP_BASE_COOLDOWN;                                              // 0x12AC (size: 0x4)
    float DOLLMINION_LEAP_INITIAL_COOLDOWN_MULTIPLIER;                                // 0x12B0 (size: 0x4)
    float EVIL_BASE_INCORPOREAL_TIME;                                                 // 0x12B4 (size: 0x4)
    float EVIL_MINIMUM_INCORPOREAL_TIME;                                              // 0x12B8 (size: 0x4)
    float EVIL_DISINTEGRATION_TIME;                                                   // 0x12BC (size: 0x4)
    float EVIL_REINTEGRATION_TIME;                                                    // 0x12C0 (size: 0x4)
    float EVIL_STUN_TIME;                                                             // 0x12C4 (size: 0x4)
    float EVIL_STUN_RESISTANCE_TIME_MULTIPLIER;                                       // 0x12C8 (size: 0x4)
    float EVIL_STUN_MIN_MULTIPLIER;                                                   // 0x12CC (size: 0x4)
    float EVIL_STUN_MAX_MULTIPLIER;                                                   // 0x12D0 (size: 0x4)
    float EVIL_STUN_MAX_TIME;                                                         // 0x12D4 (size: 0x4)
    float EVIL_STUN_TIME_REDUCTION_RESET_TIME;                                        // 0x12D8 (size: 0x4)
    int32 EVIL_MAX_NUM_ABILITIES;                                                     // 0x12DC (size: 0x4)
    float EVIL_FEAST_COOLDOWN_BONUS_MULTIPLIER;                                       // 0x12E0 (size: 0x4)
    float EVIL_SCREAM_COOLDOWN_BONUS_MULTIPLIER;                                      // 0x12E4 (size: 0x4)
    float EVIL_BONUS_COOLDOWN_EQUALIZER;                                              // 0x12E8 (size: 0x4)
    float EVIL_FLINCH_SPEED_MULTIPLIER;                                               // 0x12EC (size: 0x4)
    float EVIL_SHARD_FLINCH_TIME;                                                     // 0x12F0 (size: 0x4)
    float ATTACKABLE_OBJECT_RECOVERY_PLAYRATE_INCREASE;                               // 0x12F4 (size: 0x4)
    int32 DOLLMASTER_BASE_MAX_TRAPS;                                                  // 0x12F8 (size: 0x4)
    int32 DOLLMASTER_MIN_TRAPS;                                                       // 0x12FC (size: 0x4)
    float DOLLMASTER_TRAP_TRIGGERED_LIFETIME;                                         // 0x1300 (size: 0x4)
    float DOLLMASTER_TRAP_SELECT_CAMERA_THRESHOLD;                                    // 0x1304 (size: 0x4)
    float DOLLMASTER_TRAP_DISARM_TIME;                                                // 0x1308 (size: 0x4)
    float DOLLMASTER_TRAP_DISARM_DISTANCE;                                            // 0x130C (size: 0x4)
    float DOLLMASTER_TRAP_FACING_LERP_SPEED;                                          // 0x1310 (size: 0x4)
    float DOLLMASTER_TRAP_MAX_PLACEMENT_RADIUS;                                       // 0x1314 (size: 0x4)
    bool DOLLMASTER_TRAP_PLACEMENT_ALWAYS_VISIBLE;                                    // 0x1318 (size: 0x1)
    float DOLLMASTER_TRAP_POST_RELEASE_INACTIVE_TIME;                                 // 0x131C (size: 0x4)
    float DOLLMASTER_TRAP_ABILITY_ABORT_INACTIVE_TIME;                                // 0x1320 (size: 0x4)
    float DOLLMASTER_DANGER_VIGNETTE_MIN_ALPHA;                                       // 0x1324 (size: 0x4)
    float DOLLMASTER_DANGER_VIGNETTE_MAX_ALPHA;                                       // 0x1328 (size: 0x4)
    float DOLLMASTER_BASE_TRAP_DETECTION_RADIUS;                                      // 0x132C (size: 0x4)
    float DOLLMASTER_BASE_TRAP_DETECTION_HEIGHT;                                      // 0x1330 (size: 0x4)
    float DOLLMASTER_BASE_TRAP_PROXIMITY;                                             // 0x1334 (size: 0x4)
    float DOLLMASTER_TRAP_MIN_APART_DISTANCE;                                         // 0x1338 (size: 0x4)
    float DOLLMASTER_TRAP_MIN_ICON_DRAW_DISTANCE;                                     // 0x133C (size: 0x4)
    float DOLLMASTER_TRIGGERED_TRAP_CHARGE_TIME_REDUCTION_FACTOR;                     // 0x1340 (size: 0x4)
    float DOLLMASTER_MAX_DANGER_SENSE_POSSESSION_RANGE;                               // 0x1344 (size: 0x4)
    float DOLLMASTER_ABILITY_TRAP_CHARGE_TIME;                                        // 0x1348 (size: 0x4)
    float DOLLMASTER_ABILITY_SUMMON_CHARGE_TIME;                                      // 0x134C (size: 0x4)
    float DOLLMASTER_ABILITY_TELEPORT_CHARGE_TIME;                                    // 0x1350 (size: 0x4)
    float DOLLMASTER_ABILITY_REMOVE_TRAP_CHARGE_TIME;                                 // 0x1354 (size: 0x4)
    float DOLLMASTER_DESTROY_MINION_EXPOSE_TIME;                                      // 0x1358 (size: 0x4)
    float DOLLMASTER_TRAP_MAX_OUTLINE_VIEW_DISTANCE;                                  // 0x135C (size: 0x4)
    float DOLLMINION_DEFAULT_ACTIVE_TIME;                                             // 0x1360 (size: 0x4)
    float DOLLMINION_LIFETIME_VIGNETTE_THRESHOLD;                                     // 0x1364 (size: 0x4)
    float DOLLMINION_LIFETIME_VIGNETTE_MAX_AMOUNT;                                    // 0x1368 (size: 0x4)
    float DOLLMINION_ABILITY_SUMMON_CHARGE_TIME;                                      // 0x136C (size: 0x4)
    float DOLLMINION_ABILITY_LEAP_CHARGE_TIME;                                        // 0x1370 (size: 0x4)
    float DOLLMINION_TIME_TO_SCORE_AFTER_LEAP;                                        // 0x1374 (size: 0x4)
    float DOLLMASTER_POSSESS_POSTPROCESS_TIME;                                        // 0x1378 (size: 0x4)
    float WEREWOLF_SENSE_DURATION;                                                    // 0x137C (size: 0x4)
    float WEREWOLF_SENSE_BASE_MINIMUM_RANGE;                                          // 0x1380 (size: 0x4)
    float WEREWOLF_SENSE_BASE_MAXIMUM_RANGE;                                          // 0x1384 (size: 0x4)
    float WEREWOLF_BERSERK_CHARGE_MOVESPEED_MULTIPLIER;                               // 0x1388 (size: 0x4)
    float WEREWOLF_HOWL_CHARGE_MOVESPEED_MULTIPLIER;                                  // 0x138C (size: 0x4)
    float WEREWOLF_SENSE_CHARGE_MOVESPEED_MULTIPLIER;                                 // 0x1390 (size: 0x4)
    float TOAD_LEAP_MAX_ACCELERATION_SCALE;                                           // 0x1394 (size: 0x4)
    float TOAD_LEAP_MIN_ACCELERATION_SCALE;                                           // 0x1398 (size: 0x4)
    float TOAD_LEAP_ACCELERATION;                                                     // 0x139C (size: 0x4)
    float TOAD_LEAP_MAX_HEIGHT;                                                       // 0x13A0 (size: 0x4)
    float TOAD_LEAP_SPEED_MULTIPLIER;                                                 // 0x13A4 (size: 0x4)
    float TOAD_LEAP_SPEED_DAMAGED_MULTIPLIER;                                         // 0x13A8 (size: 0x4)
    float TOAD_LEAP_TIME;                                                             // 0x13AC (size: 0x4)
    float TOAD_LEAP_BASE_COOLDOWN;                                                    // 0x13B0 (size: 0x4)
    float TOAD_LEAP_SHOCKWAVE_DURATION;                                               // 0x13B4 (size: 0x4)
    float TOAD_LEAP_STAGGER_DURATION;                                                 // 0x13B8 (size: 0x4)
    float TOAD_LEAP_SHOCKWAVE_RANGE;                                                  // 0x13BC (size: 0x4)
    float TOAD_LEAP_CHARGE_MOVESPEED_MULTIPLIER;                                      // 0x13C0 (size: 0x4)
    float TOAD_ACIDARMOR_BASE_CHARGE_TIME;                                            // 0x13C4 (size: 0x4)
    float TOAD_LEAP_BASE_CHARGE_TIME;                                                 // 0x13C8 (size: 0x4)
    float TOAD_LEAP_WEAPON_SHOCKWAVE_SIZE_REDUCTION_MULTIPLIER;                       // 0x13CC (size: 0x4)
    float TOAD_ECHOLOCATION_BASE_CHARGE_TIME;                                         // 0x13D0 (size: 0x4)
    float TOAD_ACIDARMOR_BASE_DURATION;                                               // 0x13D4 (size: 0x4)
    float TOAD_ACIDARMOR_CHARGE_MOVESPEED_MULTIPLIER;                                 // 0x13D8 (size: 0x4)
    float TOAD_ACIDARMOR_BASE_COOLDOWN;                                               // 0x13DC (size: 0x4)
    float TOAD_ACIDARMOR_SHATTER_FLINCH_TIME;                                         // 0x13E0 (size: 0x4)
    float TOAD_ECHOLOCATION_BASE_COOLDOWN;                                            // 0x13E4 (size: 0x4)
    float TOAD_ECHOLOCATION_CLOSE_RANGE;                                              // 0x13E8 (size: 0x4)
    float TOAD_ECHOLOCATION_RANGE;                                                    // 0x13EC (size: 0x4)
    float TOAD_ECHOLOCATION_RESONANCE_TIME_TO_REVEAL_FOR;                             // 0x13F0 (size: 0x4)
    float TOAD_ECHOLOCATION_EFFECT_DURATION;                                          // 0x13F4 (size: 0x4)
    float TOAD_ECHOLOCATION_CHARGE_MOVESPEED_MULTIPLIER;                              // 0x13F8 (size: 0x4)
    float TOAD_ECHOLOCATION_CLONE_MAX_OUTLINE_VALUE;                                  // 0x13FC (size: 0x4)
    float TOAD_ECHOLOCATION_CLONE_MIN_OUTLINE_VALUE;                                  // 0x1400 (size: 0x4)
    float TOAD_ECHOLOCATION_CLONE_MAX_OUTLINE_DISTANCE;                               // 0x1404 (size: 0x4)
    float TOAD_ECHOLOCATION_CLONE_MIN_OUTLINE_DISTANCE;                               // 0x1408 (size: 0x4)
    float TOAD_ECHOLOCATION_CLONE_BRIGHTNESS_MULTIPLIER;                              // 0x140C (size: 0x4)
    float TOAD_TIME_TO_SCORE_AFTER_ECHOLOCATION;                                      // 0x1410 (size: 0x4)
    float TOAD_TIME_TO_SCORE_AFTER_LEAP;                                              // 0x1414 (size: 0x4)
    float TOAD_LEAP_CAMERA_LERP_FACTOR;                                               // 0x1418 (size: 0x4)
    float ERADICATOR_VEHICLEMODE_ACCELERATION;                                        // 0x141C (size: 0x4)
    float ERADICATOR_VEHICLEMODE_BRAKING_DECELERATION;                                // 0x1420 (size: 0x4)
    float ERADICATOR_VEHICLEMODE_GROUND_FRICTION;                                     // 0x1424 (size: 0x4)
    float ERADICATOR_VEHICLEMODE_PIVOT_MAXSPEED_MULT;                                 // 0x1428 (size: 0x4)
    float ERADICATOR_VEHICLEMODE_PIVOT_IMPULSE;                                       // 0x142C (size: 0x4)
    float ERADICATOR_VEHICLEMODE_MIN_SPEED_TO_TRIGGER_IMPULSE;                        // 0x1430 (size: 0x4)
    float ERADICATOR_VEHICLE_INPUT_CLEAR_TIMER;                                       // 0x1434 (size: 0x4)
    float ERADICATOR_VEHICLEMODE_SPEEDBOOST_REDUCTION_MULTIPLIER;                     // 0x1438 (size: 0x4)
    float ERADICATOR_VEHICLEMODE_DOT_PRODUCT_THRESHOLD;                               // 0x143C (size: 0x4)
    float ERADICATOR_VEHICLEMODE_MIN_SPEED_THRESHOLD;                                 // 0x1440 (size: 0x4)
    int32 ERADICATOR_VEHICLEMODE_NUMBER_OF_MOVEMENT_VECTORS;                          // 0x1444 (size: 0x4)
    float ERADICATOR_SCANNERBEAM_CHARGE_TIME;                                         // 0x1448 (size: 0x4)
    float ERADICATOR_SCANNERBEAM_REVEAL_TIME;                                         // 0x144C (size: 0x4)
    float ERADICATOR_TARGETED_SURGE_CHARGE_TIME;                                      // 0x1450 (size: 0x4)
    float ERADICATOR_TARGETED_SURGE_TIME_TO_ADD;                                      // 0x1454 (size: 0x4)
    float ERADICATOR_TARGETED_SURGE_PERCENT_OF_MAX_TO_ADD;                            // 0x1458 (size: 0x4)
    float ERADICATOR_TARGETED_SURGE_BASE_OVERCHARGE;                                  // 0x145C (size: 0x4)
    float ERADICATOR_TARGETED_SURGE_BASE_OVERCHARGE_NO_WEAPON_HIGHLIGHT;              // 0x1460 (size: 0x4)
    float ERADICATOR_TARGETED_SURGE_BASE_COOLDOWN;                                    // 0x1464 (size: 0x4)
    float ERADICATOR_TARGETED_SURGE_FAST_CHARGE_MULTIPLIER;                           // 0x1468 (size: 0x4)
    float ERADICATOR_TARGETED_SURGE_FAST_CHARGE_TIME;                                 // 0x146C (size: 0x4)
    float ERADICATOR_TARGETED_SURGE_MAX_NUM_CHARGES;                                  // 0x1470 (size: 0x4)
    float ERADICATOR_TARGETED_SURGE_STUNTIME;                                         // 0x1474 (size: 0x4)
    float ERADICATOR_TIME_TO_SCORE_AFTER_SCANNERBEAM;                                 // 0x1478 (size: 0x4)
    float ERAD_TIME_TO_SCORE_AFTER_MODESWAP;                                          // 0x147C (size: 0x4)
    float ERADICATOR_SCANNERBEAM_BASE_COOLDOWN;                                       // 0x1480 (size: 0x4)
    float ERADICATOR_TARGETED_SURGE_CHARGE_MOVESPEED_MULTIPLIER;                      // 0x1484 (size: 0x4)
    float ERADICATOR_SCANNERBEAM_CHARGE_MOVESPEED_MULTIPLIER;                         // 0x1488 (size: 0x4)
    float ERADICATOR_MODESWAP_TO_ASSAULT_CHARGE_MOVESPEED_MULTIPLIER;                 // 0x148C (size: 0x4)
    float ERADICATOR_MODESWAP_TO_VEHICLE_CHARGE_MOVESPEED_MULTIPLIER;                 // 0x1490 (size: 0x4)
    float ERADICATOR_MODESWAP_CHARGE_TIME_TO_VEHICLE;                                 // 0x1494 (size: 0x4)
    float ERADICATOR_MODESWAP_CHARGE_TIME_TO_ASSAULT;                                 // 0x1498 (size: 0x4)
    float ERADICATOR_MODESWAP_CHARGE_TIME_INCORPOREAL;                                // 0x149C (size: 0x4)
    float ERADICATOR_SCANNERBEAM_SCAN_MOVESPEED_BONUS_MULTIPLIER;                     // 0x14A0 (size: 0x4)
    float ERADICATOR_ELECTROCUTION_SPEED_PENALTY;                                     // 0x14A4 (size: 0x4)
    float ERADICATOR_SCANNERBEAM_OPEN_TIME;                                           // 0x14A8 (size: 0x4)
    float ERADICATOR_SCANNERBEAM_WARMUP_TIME;                                         // 0x14AC (size: 0x4)
    float ERADICATOR_SCANNERBEAM_FADEOUT_TIME;                                        // 0x14B0 (size: 0x4)
    float ERADICATOR_SCANNERBEAM_SCAN_TEENS_TIME;                                     // 0x14B4 (size: 0x4)
    float ERADICATOR_SCANNERBEAM_SCANNER_DEPTH;                                       // 0x14B8 (size: 0x4)
    float ERADICATOR_SCANNERBEAM_START_ANGLE;                                         // 0x14BC (size: 0x4)
    float ERADICATOR_SCANNERBEAM_END_ANGLE;                                           // 0x14C0 (size: 0x4)
    float ERADICATOR_SCANNERBEAM_TIME_BEFORE_SWEEP_TO_PLAY_AUDIO;                     // 0x14C4 (size: 0x4)
    float ERADICATOR_SCANNERBEAM_TEEN_BATCH_TIME;                                     // 0x14C8 (size: 0x4)
    float ERADICATOR_SCANNERBEAM_MAX_RESPONSE_THRESHOLD;                              // 0x14CC (size: 0x4)
    float ERADICATOR_TARGETED_SURGE_MAX_RESPONSE_THRESHOLD;                           // 0x14D0 (size: 0x4)
    float ERADICATOR_TARGETED_SURGE_EFFECT_DEPTH;                                     // 0x14D4 (size: 0x4)
    float ERADICATOR_SCANNERBEAM_SCANBOX_SIZE;                                        // 0x14D8 (size: 0x4)
    float ERADICATOR_SURGE_BOX_SIZE_WIDTH;                                            // 0x14DC (size: 0x4)
    float ERADICATOR_SURGE_BOX_SIZE_HEIGHT;                                           // 0x14E0 (size: 0x4)
    float ERADICATOR_SCANNERBEAM_BASE_TO_HEIGHT_RATIO;                                // 0x14E4 (size: 0x4)
    float ERADICATOR_TARGETED_SURGE_BASE_TO_HEIGHT_RATIO;                             // 0x14E8 (size: 0x4)
    float EVIL_ATTACK_MAX_HELD_TIME;                                                  // 0x14EC (size: 0x4)
    float EVIL_ATTACK_MIN_HELD_TIME;                                                  // 0x14F0 (size: 0x4)
    float EVIL_ATTACK_UNRESPONSIVE_MAX_HELD_TIME;                                     // 0x14F4 (size: 0x4)
    float EVIL_ATTACK_INTRO_PLAYRATE_MODIFIER;                                        // 0x14F8 (size: 0x4)
    float EVIL_ATTACK_RELEASE_PLAYRATE_MODIFIER;                                      // 0x14FC (size: 0x4)
    float REMOTE_CHAR_SHUTDOWN_TIME;                                                  // 0x1500 (size: 0x4)
    float REMOTE_CHAR_EXPLOSION_TIME;                                                 // 0x1504 (size: 0x4)
    float REMOTE_CHAR_VIEW_BLEND_TIME;                                                // 0x1508 (size: 0x4)
    float REMOTE_CHAR_SPAWN_DISTANCE;                                                 // 0x150C (size: 0x4)
    float REMOTE_CHAR_TARGET_HEIGHT_OFFSET;                                           // 0x1510 (size: 0x4)
    float REMOTE_CHAR_INIT_GRAVITY_MULTIPLIER;                                        // 0x1514 (size: 0x4)
    float REMOTE_CHAR_SEEKING_GRAVITY_MULTIPLIER;                                     // 0x1518 (size: 0x4)
    float REMOTE_CHAR_ACCELERATION;                                                   // 0x151C (size: 0x4)
    float MAGIC_SPHERE_SUMMONING_TIME;                                                // 0x1520 (size: 0x4)
    float MAGIC_SPHERE_BASE_MAX_LIFETIME;                                             // 0x1524 (size: 0x4)
    float MAGIC_SPHERE_EVIL_COLLISION_RADIUS;                                         // 0x1528 (size: 0x4)
    float MAGIC_SPHERE_DETONATION_TIME;                                               // 0x152C (size: 0x4)
    float MAGIC_SPHERE_CAPSULE_RADIUS;                                                // 0x1530 (size: 0x4)
    float MAGIC_SPHERE_DAMAGE_TIME;                                                   // 0x1534 (size: 0x4)
    float RCCOPTER_SUMMONING_TIME;                                                    // 0x1538 (size: 0x4)
    float RCCOPTER_BASE_LIFETIME;                                                     // 0x153C (size: 0x4)
    float RCCOPTER_EXPLOSION_TIME;                                                    // 0x1540 (size: 0x4)
    float RCCOPTER_TURN_RATE;                                                         // 0x1544 (size: 0x4)
    float RCCOPTER_ZAP_DAMAGE_TIME;                                                   // 0x1548 (size: 0x4)
    float RCCOPTER_BASE_BEAM_LIFETIME_MULTIPLIER;                                     // 0x154C (size: 0x4)
    float RCCOPTER_MAX_TILT_ROTATION_ANGLE;                                           // 0x1550 (size: 0x4)
    float RCCOPTER_TILT_DECAY_RATE;                                                   // 0x1554 (size: 0x4)
    float RCCOPTER_BEAM_MAX_DISTANCE;                                                 // 0x1558 (size: 0x4)
    FVector RCCOPTER_CAMERA_RELATIVE_LOCATION;                                        // 0x155C (size: 0xC)
    float RCCOPTER_CAPSULE_RADIUS;                                                    // 0x1568 (size: 0x4)
    float RCCOPTER_CONE_LOCK_RADIUS;                                                  // 0x156C (size: 0x4)
    float RCCOPTER_CONE_UNLOCK_RADIUS;                                                // 0x1570 (size: 0x4)
    float RCCOPTER_FIRING_SPEED_MULTIPLIER_PENALTY;                                   // 0x1574 (size: 0x4)
    float RCCOPTER_PHYSICS_PROP_LAUNCH_FORCE;                                         // 0x1578 (size: 0x4)
    float RCCOPTER_FIRING_WARMUP_TIME;                                                // 0x157C (size: 0x4)
    float RCCOPTER_ELECTRICITY_ARC_CURVE_MULTIPLIER;                                  // 0x1580 (size: 0x4)
    float RCCOPTER_EVIL_COLLISION_RADIUS;                                             // 0x1584 (size: 0x4)
    float TEENSPECTRAL_CAPSULE_RADIUS;                                                // 0x1588 (size: 0x4)
    float TEENSPECTRAL_EVIL_SENSE_RANGE;                                              // 0x158C (size: 0x4)
    float LIFEESSENCE_REVIVE_TIME_BONUS_SMALL;                                        // 0x1590 (size: 0x4)
    float LIFEESSENCE_REVIVE_TIME_BONUS_LARGE;                                        // 0x1594 (size: 0x4)
    float LIFEESSENCE_SPAWNER_BASE_TIME;                                              // 0x1598 (size: 0x4)
    float LIFEESSENCE_SPAWNER_MAX_PERCENT_OCCUPIED;                                   // 0x159C (size: 0x4)
    float LIFEESSENCE_SPAWNER_COOLDOWN;                                               // 0x15A0 (size: 0x4)
    float LIFEESSENCE_LARGE_SIZE_MULTIPLIER;                                          // 0x15A4 (size: 0x4)
    float LIFEESSENCE_SMALL_SIZE_MULTIPLIER;                                          // 0x15A8 (size: 0x4)
    FVector LIFEESSENCE_SIZE_PROBABILITIES;                                           // 0x15AC (size: 0xC)
    float EVILENERGY_SPAWN_INTERVAL;                                                  // 0x15B8 (size: 0x4)
    int32 EVILENERGY_MAX_NUM;                                                         // 0x15BC (size: 0x4)
    float COOP_SCORE_BASE_ASSIST_WINDOW;                                              // 0x15C0 (size: 0x4)
    float COOP_SCORE_BASE_ASSIST_COOLDOWN;                                            // 0x15C4 (size: 0x4)
    float COOP_SCORE_EYEBALL_RANGE;                                                   // 0x15C8 (size: 0x4)
    float COOP_SCORE_STATICSHIELD_RANGE;                                              // 0x15CC (size: 0x4)
    float TEEN_HARRIED_MAX_SECONDS;                                                   // 0x15D0 (size: 0x4)
    float TEEN_GUARDIAN_RANGE;                                                        // 0x15D4 (size: 0x4)
    float EVIL_COMBAT_TIMEOUT_SECS;                                                   // 0x15D8 (size: 0x4)
    float CROSS_DAMAGE_TIME;                                                          // 0x15DC (size: 0x4)
    float CROSS_BASE_LIFETIME;                                                        // 0x15E0 (size: 0x4)
    float CROSS_BASE_MAX_DISTANCE;                                                    // 0x15E4 (size: 0x4)
    float CROSS_RADIUS_BASE_SIZE;                                                     // 0x15E8 (size: 0x4)
    float CROSS_TIME_TO_MAX_EFFECT;                                                   // 0x15EC (size: 0x4)
    float MOLOTOV_BASE_THROW_DISTANCE;                                                // 0x15F0 (size: 0x4)
    float MOLOTOV_DAMAGE_TIME;                                                        // 0x15F4 (size: 0x4)
    float MOLOTOV_DEBRIS_BASE_LIFETIME;                                               // 0x15F8 (size: 0x4)
    float MOLOTOV_THROWN_LIFETIME;                                                    // 0x15FC (size: 0x4)
    float MOLOTOV_FADE_TIME;                                                          // 0x1600 (size: 0x4)
    int32 MOLOTOV_MAX_DEBRIS_SPREAD;                                                  // 0x1604 (size: 0x4)
    int32 MOLOTOV_MAX_SPREAD_LEVELS;                                                  // 0x1608 (size: 0x4)
    float MOLOTOV_DEBRIS_SPREAD_OFFSET;                                               // 0x160C (size: 0x4)
    float MOLOTOV_MAX_DAMAGE_RADIUS;                                                  // 0x1610 (size: 0x4)
    float MOLOTOV_DEBRIS_VERTICAL_SPREAD;                                             // 0x1614 (size: 0x4)
    float MOLOTOV_DEBRIS_SPREAD_PROXY;                                                // 0x1618 (size: 0x4)
    float MOLOTOV_RELOAD_TIME;                                                        // 0x161C (size: 0x4)
    FVector MOLOTOV_PROJECTILE_SPAWN_POSITION;                                        // 0x1620 (size: 0xC)
    int32 MOLOTOV_PROJECTILE_MAX_DAMAGE_ZONES;                                        // 0x162C (size: 0x4)
    float MOLOTOV_PROJECTILE_DAMAGE_SPREAD;                                           // 0x1630 (size: 0x4)
    float MOLOTOV_PROJECTILE_MAX_DEBRIS_SPEED;                                        // 0x1634 (size: 0x4)
    float MOLOTOV_PROJECTILE_MIN_DEBRIS_SPEED;                                        // 0x1638 (size: 0x4)
    float HOLYSLINGSHOT_DAMAGE_TIME;                                                  // 0x163C (size: 0x4)
    float HOLYSLINGSHOT_FLY_DURATION;                                                 // 0x1640 (size: 0x4)
    float HOLYSLINGSHOT_BURN_DURATION;                                                // 0x1644 (size: 0x4)
    float HOLYSLINGSHOT_EXTINQUISH_DURATION;                                          // 0x1648 (size: 0x4)
    float HOLYSLINGSHOT_RELOAD_TIME;                                                  // 0x164C (size: 0x4)
    int32 HOLYSLINGSHOT_BASE_NUM_BULLETS;                                             // 0x1650 (size: 0x4)
    float HOLYSLINGSHOT_SPLASH_RADIUS;                                                // 0x1654 (size: 0x4)
    float HOLYSLINGSHOT_PROJECTILE_RADIUS;                                            // 0x1658 (size: 0x4)
    float RAYGUN_DAMAGE_SPHERE_END_RADIUS;                                            // 0x165C (size: 0x4)
    float RAYGUN_DAMAGE_SPHERE_START_RADIUS;                                          // 0x1660 (size: 0x4)
    float RAYGUN_DAMAGE_RADIUS_BLEND_TIME;                                            // 0x1664 (size: 0x4)
    float RAYGUN_CHARGE_TIME;                                                         // 0x1668 (size: 0x4)
    float RAYGUN_DAMAGE_TIME;                                                         // 0x166C (size: 0x4)
    float RAYGUN_PROJECTILE_SPEED;                                                    // 0x1670 (size: 0x4)
    float RAYGUN_PROJECTILE_DAMAGE_SECS;                                              // 0x1674 (size: 0x4)
    float RAYGUN_PROJECTILE_CLEANUP_TIME;                                             // 0x1678 (size: 0x4)
    float RAYGUN_PROJECTILE_DAMAGE_DECAY_TIMER;                                       // 0x167C (size: 0x4)
    float RAYGUN_MAX_NUM_SHOTS;                                                       // 0x1680 (size: 0x4)
    float RAYGUN_WARMUP_TIME;                                                         // 0x1684 (size: 0x4)
    float RAYGUN_RANGE;                                                               // 0x1688 (size: 0x4)
    float CROSS_WARMUP_TIME;                                                          // 0x168C (size: 0x4)
    float FLAMETHROWER_WARMUP_TIME;                                                   // 0x1690 (size: 0x4)
    float HOLYSLINGSHOT_WARMUP_TIME;                                                  // 0x1694 (size: 0x4)
    float MOLOTOV_WARMUP_TIME;                                                        // 0x1698 (size: 0x4)
    float HOLYSTAFF_BEAM_MIN_RADIUS;                                                  // 0x169C (size: 0x4)
    float HOLYSTAFF_BEAM_MAX_RADIUS;                                                  // 0x16A0 (size: 0x4)
    float HOLYSTAFF_BEAM_MOVE_SPEED;                                                  // 0x16A4 (size: 0x4)
    float HOLYSTAFF_DAMAGE_TIME;                                                      // 0x16A8 (size: 0x4)
    float HOLYSTAFF_HEAL_SPEED_INCREASE;                                              // 0x16AC (size: 0x4)
    float HOLYSTAFF_PHYSICS_PROP_LAUNCH_FORCE;                                        // 0x16B0 (size: 0x4)
    float HOLYSTAFF_BEAM_MAX_RANGE;                                                   // 0x16B4 (size: 0x4)
    float HOLYSTAFF_BEAM_PERCENT_CHARGED_PER_FULL_HEAL;                               // 0x16B8 (size: 0x4)
    float HOLYSTAFF_MAX_CHARGE;                                                       // 0x16BC (size: 0x4)
    float HOLYSTAFF_WARMUP_TIME;                                                      // 0x16C0 (size: 0x4)
    float HOLYSTAFF_ALLHEALTHY_CHARGEREGEN_PER_SECOND;                                // 0x16C4 (size: 0x4)
    float HOLYSTAFF_TIME_UNTIL_POWERED;                                               // 0x16C8 (size: 0x4)
    float TEEN_FLAMEMINE_AIM_MOVEMENT_SPEED_MULTIPLIER;                               // 0x16CC (size: 0x4)
    float FLAMEMINE_BASE_BEAM_MAX_DISTANCE;                                           // 0x16D0 (size: 0x4)
    float FLAMEMINE_BASE_CHARGE_TIME;                                                 // 0x16D4 (size: 0x4)
    float FLAMEMINE_BASE_SUMMONING_TIME;                                              // 0x16D8 (size: 0x4)
    float FLAMEMINE_FIRE_WARMUP_TIME;                                                 // 0x16DC (size: 0x4)
    float FLAMEMINE_DAMAGE_TIME;                                                      // 0x16E0 (size: 0x4)
    float FLAMEMINE_WARMUP_CHARGE_REDUCTION_MULTIPLIER;                               // 0x16E4 (size: 0x4)
    float FLAMEMINE_FIRE_CHARGE_REDUCTION_MULTIPLIER;                                 // 0x16E8 (size: 0x4)
    int32 FLAMEMINE_BASE_MINES_AT_ONCE;                                               // 0x16EC (size: 0x4)
    float FLAMEMINE_SUMMON_PERCENT_TO_CREATE_NEW_MINE;                                // 0x16F0 (size: 0x4)
    float FLAMEMINE_SUMMON_PERCENT_TO_CANCEL_OLD_MINE;                                // 0x16F4 (size: 0x4)
    float FLAMEMINE_CAMERABOOM_LENGTH;                                                // 0x16F8 (size: 0x4)
    FVector FLAMEMINE_CAMERABOOM_POSITION;                                            // 0x16FC (size: 0xC)
    float FLAMEMINE_SUMMON_CHARGE_PERCENT_COST;                                       // 0x1708 (size: 0x4)
    float FLAMEMINE_SEPARATION_DISTANCE;                                              // 0x170C (size: 0x4)
    float FLAMEMINE_EVILVIEWING_MIN_DRAIN_PER_SECOND;                                 // 0x1710 (size: 0x4)
    float FLAMEMINE_EVILVIEWING_MAX_DRAIN_PER_SECOND;                                 // 0x1714 (size: 0x4)
    float FLAMEMINE_EVILVIEWING_DRAIN_RAMP_SECONDS;                                   // 0x1718 (size: 0x4)
    float FLAMEMINE_EVILVIEWING_DRAIN_MAX_RANGE;                                      // 0x171C (size: 0x4)
    float FLAMEMINE_EVILVIEWING_DRAIN_DECAY_MULTIPLIER;                               // 0x1720 (size: 0x4)
    float FLAMEMINE_PULSE_RATE;                                                       // 0x1724 (size: 0x4)
    FVector2D FLAMEMINE_PULSE_RANGE;                                                  // 0x1728 (size: 0x8)
    FLinearColor FLAMEMINE_IDLE_COLOUR;                                               // 0x1730 (size: 0x10)
    FLinearColor FLAMEMINE_ALERT_COLOUR;                                              // 0x1740 (size: 0x10)
    FLinearColor FLAMEMINE_FIRING_COLOUR;                                             // 0x1750 (size: 0x10)
    float FLAMEMINE_GRAVITY_MULTIPLIER;                                               // 0x1760 (size: 0x4)
    float FLAMEMINE_CHAR_TARGET_HEIGHT_OFFSET;                                        // 0x1764 (size: 0x4)
    float DEMONSWORD_PROJECTILE_MAXWALK_SPEED;                                        // 0x1768 (size: 0x4)
    float DEMONSWORD_PROJECTILE_CLEANUP_TIME;                                         // 0x176C (size: 0x4)
    float DEMONSWORD_PROJECTILE_DAMAGE_DECAY_TIMER;                                   // 0x1770 (size: 0x4)
    float DEMONSWORD_INITIAL_CHARGE_TIME;                                             // 0x1774 (size: 0x4)
    float DEMONSWORD_CHARGE_TIME;                                                     // 0x1778 (size: 0x4)
    float DEMONSWORD_CHARGE_PERCENT_ALLOW_BUFFERSHOT;                                 // 0x177C (size: 0x4)
    float DEMONSWORD_MIN_AIM_TARGET_DISTANCE;                                         // 0x1780 (size: 0x4)
    float DEMONSWORD_FRAMEBUFFER_TIME;                                                // 0x1784 (size: 0x4)
    float DEMONSWORD_DAMAGE_TIME;                                                     // 0x1788 (size: 0x4)
    float DEMONSWORD_MAX_NUM_SHOTS;                                                   // 0x178C (size: 0x4)
    float DEMONSWORD_WARMUP_TIME;                                                     // 0x1790 (size: 0x4)
    FRotator DEMONSWORD_PARTICLE_ROTATION;                                            // 0x1794 (size: 0xC)
    FVector DEMONSWORD_PROJECTILE_SCALE;                                              // 0x17A0 (size: 0xC)
    float DEMONSWORD_PROJECTILE_TRAIL_TIME;                                           // 0x17AC (size: 0x4)
    float DEMONSWORD_PROJECTILE_TRAIL_DAMAGE_RATE;                                    // 0x17B0 (size: 0x4)
    float DEMONSWORD_MAX_RANGE;                                                       // 0x17B4 (size: 0x4)
    float PROJECTILE_ROTATION_RATE;                                                   // 0x17B8 (size: 0x4)
    float CONTROLLER_TURN_TO_FACE_INTERP_SPEED;                                       // 0x17BC (size: 0x4)
    float CONTROLLER_TURN_TO_FACE_QUICK_INTERP_SPEED;                                 // 0x17C0 (size: 0x4)
    float VAULTPOINT_FALLING_ANIM_ABORT_TIME;                                         // 0x17C4 (size: 0x4)
    float VAULTPOINT_MIN_LERP_SPEED;                                                  // 0x17C8 (size: 0x4)
    float VAULTPOINT_MAX_LERP_SPEED;                                                  // 0x17CC (size: 0x4)
    float VAULTPOINT_MAX_LERP_REQUIRED_VELOCITY;                                      // 0x17D0 (size: 0x4)
    float VAULTPOINT_ROOTMOTION_MINIMUM_FORWARD_TRANSLATION;                          // 0x17D4 (size: 0x4)
    float VAULTPOINT_MONSTER_ROOTMOTION_MINIMUM_FORWARD_TRANSLATION;                  // 0x17D8 (size: 0x4)
    float TPCHAR_BASE_HIDESPEED_MULTIPLIER;                                           // 0x17DC (size: 0x4)
    float TPCHAR_BASE_VAULTSPEED_MULTIPLIER;                                          // 0x17E0 (size: 0x4)
    float TPCHAR_BASE_VAULTSPEED_ADRENALINE_MULTIPLIER;                               // 0x17E4 (size: 0x4)
    float FPCHAR_BASE_VAULTSPEED_MULTIPLIER;                                          // 0x17E8 (size: 0x4)
    float FPCHAR_INCORPOREAL_VAULTSPEED_MULTIPLIER;                                   // 0x17EC (size: 0x4)
    float VAULTPOINT_SIBLING_FLAT_SEARCH_DISTANCE;                                    // 0x17F0 (size: 0x4)
    float VAULTPOINT_SIBLING_MAX_HEIGHT_DIFFERENCE;                                   // 0x17F4 (size: 0x4)
    FVector TPCHAR_RELATIVE_MESH_LOCATION;                                            // 0x17F8 (size: 0xC)
    FVector TPCHAR_RELATIVE_CAMERA_BOOM_LOCATION;                                     // 0x1804 (size: 0xC)
    FVector TPCHAR_RELATIVE_CAMERA_COMPONENT_LOCATION;                                // 0x1810 (size: 0xC)
    float TPCHAR_CAMERA_BOOM_ARM_LENGTH;                                              // 0x181C (size: 0x4)
    float TPCHAR_CAMERA_BOOM_ARM_INTERP_SPEED;                                        // 0x1820 (size: 0x4)
    float TPCHAR_CAMERA_BOOM_ARM_MOVE_MULTIPLIER;                                     // 0x1824 (size: 0x4)
    float TPCHAR_CAMERA_BOOM_ARM_RUN_MULTIPLIER;                                      // 0x1828 (size: 0x4)
    float TPCHAR_CAMERA_BOOM_ARM_SPRINT_MULTIPLIER;                                   // 0x182C (size: 0x4)
    float TPCHAR_INTERACTION_HEALING_RADIUS;                                          // 0x1830 (size: 0x4)
    float TPCHAR_INTERACTION_HEALING_BUFFER;                                          // 0x1834 (size: 0x4)
    float TPCHAR_INTERACTION_REVIVE_RADIUS;                                           // 0x1838 (size: 0x4)
    float TPCHAR_INTERACTION_REVIVE_BUFFER;                                           // 0x183C (size: 0x4)
    float TPCHAR_INTERACTION_RESURRECTION_RADIUS;                                     // 0x1840 (size: 0x4)
    float TPCHAR_INTERACTION_TRAPDISARM_RADIUS;                                       // 0x1844 (size: 0x4)
    float TPCHAR_INTERACTION_TRAPDISARM_BUFFER;                                       // 0x1848 (size: 0x4)
    float TPCHAR_CAMERA_BOOM_ARM_AIMING_LENGTH;                                       // 0x184C (size: 0x4)
    float TPCHAR_CAMERA_BOOM_ARM_STATICSHIELD_LENGTH;                                 // 0x1850 (size: 0x4)
    FVector TPCHAR_CAMERA_BOOM_ARM_OFFSET;                                            // 0x1854 (size: 0xC)
    FVector TPCHAR_CAMERA_BOOM_ARM_PRONE_OFFSET;                                      // 0x1860 (size: 0xC)
    FVector TPCHAR_CAMERA_BOOM_ARM_AIMING_OFFSET;                                     // 0x186C (size: 0xC)
    FVector TPCHAR_CAMERA_BOOM_ARM_CROUCH_AIMING_OFFSET;                              // 0x1878 (size: 0xC)
    FVector TPCHAR_CAMERA_BOOM_ARM_CROUCH_OFFSET;                                     // 0x1884 (size: 0xC)
    FVector TPCHAR_CAMERA_BOOM_ARM_STATICSHIELD_OFFSET;                               // 0x1890 (size: 0xC)
    float TPCHAR_CAMERA_BOOM_ARM_PROBE_SIZE;                                          // 0x189C (size: 0x4)
    FRotator TPCHAR_RELATIVE_MESH_ROTATION;                                           // 0x18A0 (size: 0xC)
    float TPCHAR_CAMERA_FIELD_OF_VIEW;                                                // 0x18AC (size: 0x4)
    float TPCHAR_CAMERA_TRANSITION_SCALE;                                             // 0x18B0 (size: 0x4)
    FVector TPCHAR_AUDIO_COMPONENT_OFFSET;                                            // 0x18B4 (size: 0xC)
    float FP_CAMERA_FIELD_OF_VIEW;                                                    // 0x18C0 (size: 0x4)
    float WEREWOLF_HOWL_COWERING_TIME;                                                // 0x18C4 (size: 0x4)
    FRotator WEREWOLF_TPCHAR_RELATIVE_MESH_ROTATION;                                  // 0x18C8 (size: 0xC)
    FVector WEREWOLF_FPCAMERA_BOOM_LOCATION;                                          // 0x18D4 (size: 0xC)
    FVector DOLLMASTER_FPCAMERA_BOOM_LOCATION;                                        // 0x18E0 (size: 0xC)
    FVector DOLLMINION_FPCAMERA_BOOM_LOCATION;                                        // 0x18EC (size: 0xC)
    FVector DOLLMINION_TPCAMERA_BOOM_LOCATION;                                        // 0x18F8 (size: 0xC)
    FVector DOLLMASTER_RELATIVE_MESH_LOCATION;                                        // 0x1904 (size: 0xC)
    FVector DOLLMASTER_RELATIVE_FPMESH_LOCATION;                                      // 0x1910 (size: 0xC)
    FVector DOLLMINION_RELATIVE_MESH_LOCATION;                                        // 0x191C (size: 0xC)
    FVector OBSERVER_CAMERA_BOOM_LOCATION;                                            // 0x1928 (size: 0xC)
    float TPCHAR_BREATHING_CROSSFADE_TIME_FACTOR;                                     // 0x1934 (size: 0x4)
    float TPCHAR_WEAPON_DISCARD_TIME;                                                 // 0x1938 (size: 0x4)
    float TPCHAR_BASE_ADRENALINE_TIME;                                                // 0x193C (size: 0x4)
    float TPCHAR_INJURY_EVILPASSTHROUGH_SECS;                                         // 0x1940 (size: 0x4)
    float TPCHAR_HEAL_BASE_TIME;                                                      // 0x1944 (size: 0x4)
    float TPCHAR_HEAL_TWO_PARTICIPANT_SPEED_DECREASE;                                 // 0x1948 (size: 0x4)
    float TPCHAR_HEAL_THREE_PARTICIPANT_SPEED_DECREASE;                               // 0x194C (size: 0x4)
    float TPCHAR_HEAL_MEDKIT_REDUCTION_FACTOR;                                        // 0x1950 (size: 0x4)
    float TPCHAR_HEAL_HOLYSTAFF_SELF_REDUCTION_FACTOR;                                // 0x1954 (size: 0x4)
    float TPCHAR_RESURRECT_LIFE;                                                      // 0x1958 (size: 0x4)
    float TPCHAR_REVIVE_BASE_TIME;                                                    // 0x195C (size: 0x4)
    float TPCHAR_REVIVE_TWO_PARTICIPANT_SPEED_DECREASE;                               // 0x1960 (size: 0x4)
    float TPCHAR_REVIVE_THREE_PARTICIPANT_SPEED_DECREASE;                             // 0x1964 (size: 0x4)
    float TPCHAR_BASE_RESURRECT_TIME;                                                 // 0x1968 (size: 0x4)
    float TPCHAR_BASE_SUBDUED_TIME;                                                   // 0x196C (size: 0x4)
    float TPCHAR_EVIL_RESPAWN_SUBDUED_TIME;                                           // 0x1970 (size: 0x4)
    float TPCHAR_BASE_MANUAL_TRANSFORM_TIME;                                          // 0x1974 (size: 0x4)
    float TPCHAR_BASE_DOUBLE_VISION_MAX_STRENGTH;                                     // 0x1978 (size: 0x4)
    float TPCHAR_BASE_DOUBLE_VISION_TIME;                                             // 0x197C (size: 0x4)
    float TPCHAR_BASE_MAX_LIFE;                                                       // 0x1980 (size: 0x4)
    float TPCHAR_BASE_EXT_LIFE;                                                       // 0x1984 (size: 0x4)
    float TPCHAR_SHORT_GAME_LIFE_PENALTY;                                             // 0x1988 (size: 0x4)
    float TPCHAR_INJURY_LIFE_LOSS;                                                    // 0x198C (size: 0x4)
    float TPCHAR_KNOCKDOWN_LIFE_LOSS;                                                 // 0x1990 (size: 0x4)
    float TPCHAR_MINIMUM_PRONE_LIFE;                                                  // 0x1994 (size: 0x4)
    float TPCHAR_PRONE_LIFE_LOSS_PER_SECOND;                                          // 0x1998 (size: 0x4)
    float TPCHAR_PRONE_SKILLTEST_FAIL_LIFE_LOSS;                                      // 0x199C (size: 0x4)
    float TPCHAR_HIDING_CAPSULE_RADIUS;                                               // 0x19A0 (size: 0x4)
    float TPCHAR_MAX_DEATH_SECS;                                                      // 0x19A4 (size: 0x4)
    float TPCHAR_MAX_INJURED_SECS;                                                    // 0x19A8 (size: 0x4)
    float TPCHAR_MAX_TIME_SINCE_CRAFT_FAIL;                                           // 0x19AC (size: 0x4)
    float TPCHAR_MAX_TIME_SINCE_EVIL_STUN_OR_TRANSFORM;                               // 0x19B0 (size: 0x4)
    float TPCHAR_MAX_TIME_DEAD_OUTLINE;                                               // 0x19B4 (size: 0x4)
    float TPCHAR_STOP_HEAL_AXIS_THRESHOLD;                                            // 0x19B8 (size: 0x4)
    float TPCHAR_INHIBITED_HEAL_SPEED_MULTIPLIER;                                     // 0x19BC (size: 0x4)
    float TPCHAR_INHIBITED_SOLO_HEAL_SPEED_MULTIPLIER;                                // 0x19C0 (size: 0x4)
    float TPCHAR_INHIBITED_CRAFT_SPEED_MULTIPLIER;                                    // 0x19C4 (size: 0x4)
    float TPCHAR_STAGGER_SPEED_PENALTY;                                               // 0x19C8 (size: 0x4)
    float SKILLTEST_MINIGAME_MINIMUM_SPEED;                                           // 0x19CC (size: 0x4)
    float SKILLTEST_MINIGAME_MAXIMUM_SPEED;                                           // 0x19D0 (size: 0x4)
    float SKILLTEST_MINIGAME_MINIMUM_POSITION;                                        // 0x19D4 (size: 0x4)
    float SKILLTEST_MINIGAME_MAXIMUM_POSITION;                                        // 0x19D8 (size: 0x4)
    float SKILLTEST_MINIGAME_MINIMUM_TIMER;                                           // 0x19DC (size: 0x4)
    float SKILLTEST_MINIGAME_MAXIMUM_TIMER;                                           // 0x19E0 (size: 0x4)
    float SKILLTEST_MINIGAME_WARNING_TIMER;                                           // 0x19E4 (size: 0x4)
    float SKILLTEST_MINIGAME_TIMEOUT_TIMER;                                           // 0x19E8 (size: 0x4)
    float SKILLTEST_MINIGAME_INCREMENT_MULTIPLAYER;                                   // 0x19EC (size: 0x4)
    float SKILLTEST_MINIGAME_INCREMENT_COOLDOWN;                                      // 0x19F0 (size: 0x4)
    float SKILLTEST_MINIGAME_PRONE_MULTIPLIER;                                        // 0x19F4 (size: 0x4)
    float SKILLTEST_MINIGAME_ENERGIZING_MULTIPLIER;                                   // 0x19F8 (size: 0x4)
    float SKILLTEST_MINIGAME_COOLDOWN_TIMER;                                          // 0x19FC (size: 0x4)
    float SKILLTEST_MINIGAME_COMMON_BOOST_TIMER;                                      // 0x1A00 (size: 0x4)
    float SKILLTEST_MINIGAME_CRAFTING_BOOST_TIMER;                                    // 0x1A04 (size: 0x4)
    float SKILLTEST_MINIGAME_BASE_PENALTY_TIMER;                                      // 0x1A08 (size: 0x4)
    float SKILLTEST_MINIGAME_PRONE_PENALTY_TIMER;                                     // 0x1A0C (size: 0x4)
    float SKILLTEST_MINIGAME_INACTIVE_PENALTY_TIME_FACTOR;                            // 0x1A10 (size: 0x4)
    float SKILLTEST_MINIGAME_COMMON_FAIL_SPEED_PENALTY;                               // 0x1A14 (size: 0x4)
    float SKILLTEST_MINIGAME_COMMON_BOOSTED_SPEED_INCREASE;                           // 0x1A18 (size: 0x4)
    float SKILLTEST_MINIGAME_CRAFTING_BOOSTED_SPEED_INCREASE;                         // 0x1A1C (size: 0x4)
    float MINIGAME_RINGALIGN_TIMEOUT_TIMER;                                           // 0x1A20 (size: 0x4)
    float MINIGAME_RINGALIGN_MAX_TARGET_RADIUS;                                       // 0x1A24 (size: 0x4)
    float MINIGAME_RINGALIGN_MIN_TARGET_RADIUS;                                       // 0x1A28 (size: 0x4)
    float MINIGAME_RINGALIGN_MAX_TARGET_WIDTH;                                        // 0x1A2C (size: 0x4)
    float MINIGAME_RINGALIGN_MIN_TARGET_WIDTH;                                        // 0x1A30 (size: 0x4)
    float MINIGAME_RINGALIGN_MIN_ADJUSTMENT_SPEED;                                    // 0x1A34 (size: 0x4)
    float MINIGAME_RINGALIGN_MAX_ADJUSTMENT_SPEED;                                    // 0x1A38 (size: 0x4)
    float SKILLTEST_MINIGAME_BULLSEYE_SCORE;                                          // 0x1A3C (size: 0x4)
    float SKILLTEST_MINIGAME_PASS_SCORE;                                              // 0x1A40 (size: 0x4)
    float SKILLTEST_MINIGAME_POST_SUBMIT_TIME;                                        // 0x1A44 (size: 0x4)
    float ENERGYPOINT_MIN_POWER_ON_TIME;                                              // 0x1A48 (size: 0x4)
    float ENERGYPOINT_MAX_POWER_ON_TIME;                                              // 0x1A4C (size: 0x4)
    float PICKUP_MAX_CANDIDATE_DISTANCE;                                              // 0x1A50 (size: 0x4)
    float PICKUP_ONTHEFLOOR_DISTANCE_HIGH_THRESHOLD;                                  // 0x1A54 (size: 0x4)
    float PICKUP_ONTHEFLOOR_DISTANCE_MEDIUM_THRESHOLD;                                // 0x1A58 (size: 0x4)
    float DARKSHARD_ENABLED;                                                          // 0x1A5C (size: 0x4)
    float DARKSHARD_BASE_INITIAL_SPAWN_TIME;                                          // 0x1A60 (size: 0x4)
    float DARKSHARD_INTERVAL;                                                         // 0x1A64 (size: 0x4)
    float DARKSHARD_GOOD_EFFECT_DURATION;                                             // 0x1A68 (size: 0x4)
    float DARKSHARD_EVIL_EFFECT_DURATION;                                             // 0x1A6C (size: 0x4)
    float DARKSHARD_LIFETIME;                                                         // 0x1A70 (size: 0x4)
    float DARKSHARD_SELECTION_THRESHOLD;                                              // 0x1A74 (size: 0x4)
    float DARKSHARD_REVEAL_TIME;                                                      // 0x1A78 (size: 0x4)
    float DARKSHARD_TEEN_SCORING_RANGE;                                               // 0x1A7C (size: 0x4)
    float DARKSHARD_ACTIVATION_RADIUS;                                                // 0x1A80 (size: 0x4)
    float DARKSHARD_ICON_HEIGHT;                                                      // 0x1A84 (size: 0x4)
    float DARKSHARD_RAMP_SPEEDUP_MAX_SECS;                                            // 0x1A88 (size: 0x4)
    float DARKSHARD_MIN_SPAWN_DELAY_AFTER_EVENT;                                      // 0x1A8C (size: 0x4)
    float DARKSHARD_MAX_SPAWN_DELAY_AFTER_EVENT;                                      // 0x1A90 (size: 0x4)
    FLinearColor DARKSHARD_INACTIVE_COLOR;                                            // 0x1A94 (size: 0x10)
    float DARKSHARD_PER_TEEN_LOSS_SPAWN_DELAY_BONUS_MULTIPLIER;                       // 0x1AA4 (size: 0x4)
    float DARKSHARD_PER_TEEN_LOSS_EVIL_EFFECT_REDUCTION_MULTIPLIER;                   // 0x1AA8 (size: 0x4)
    float DARKSHARD_EMPOWERED_SCREAM_RANGE;                                           // 0x1AAC (size: 0x4)
    float DARKSHARD_EMPOWERED_SCREAM_EFFECT_DURATION;                                 // 0x1AB0 (size: 0x4)
    float DARKSHARD_EVIL_EMPOWERED_BONUS_DURATION;                                    // 0x1AB4 (size: 0x4)
    float PICKUP_PILLS_FED_DURATION;                                                  // 0x1AB8 (size: 0x4)
    float PICKUP_PILLS_FED_EXPONENT;                                                  // 0x1ABC (size: 0x4)
    float PICKUP_PILLS_LIFE_RESTORED;                                                 // 0x1AC0 (size: 0x4)
    float PICKUP_PILLS_HEAL_PULSE_RATE;                                               // 0x1AC4 (size: 0x4)
    float PICKUP_ADRENALINE_PULSE_RATE;                                               // 0x1AC8 (size: 0x4)
    float PICKUP_ADRENALINE_DURATION;                                                 // 0x1ACC (size: 0x4)
    float PICKUP_ADRENALINE_RAMP_TIME;                                                // 0x1AD0 (size: 0x4)
    float PICKUP_WALKIE_TALKIE_EFFECT_SPREAD_RANGE;                                   // 0x1AD4 (size: 0x4)
    float PICKUP_WALKIE_TALKIE_CHARGE_TIME;                                           // 0x1AD8 (size: 0x4)
    float PICKUP_WALKIE_TALKIE_NOISE_AMOUNT;                                          // 0x1ADC (size: 0x4)
    float PICKUP_WALKIE_TALKIE_NOISE_FREQUENCY;                                       // 0x1AE0 (size: 0x4)
    float PICKUP_WALKIE_RUN_SPEED_PENALTY_MULTIPLIER;                                 // 0x1AE4 (size: 0x4)
    float PICKUP_WALKIE_UI_COLOR_CHANGE_SPEED;                                        // 0x1AE8 (size: 0x4)
    float PICKUP_NOISEMAKER_REVEAL_TIME;                                              // 0x1AEC (size: 0x4)
    float PICKUP_NOISEMAKER_POST_SHUTDOWN_LIFETIME;                                   // 0x1AF0 (size: 0x4)
    float PICKUP_NOISEMAKER_ARMING_TIME;                                              // 0x1AF4 (size: 0x4)
    float PICKUP_NOISEMAKER_RADIUS;                                                   // 0x1AF8 (size: 0x4)
    float PICKUP_SMOKEBOMB_BLIND_CAPSULE_HALF_HEIGHT;                                 // 0x1AFC (size: 0x4)
    float PICKUP_SMOKEBOMB_BLIND_CAPSULE_RADIUS;                                      // 0x1B00 (size: 0x4)
    float PICKUP_SMOKEBOMB_NIAGARA_RADIUS;                                            // 0x1B04 (size: 0x4)
    float PICKUP_SMOKEBOMB_LIFETIME;                                                  // 0x1B08 (size: 0x4)
    float PICKUP_SMOKEBOMB_POSTPROCESS_FADING_DURATION;                               // 0x1B0C (size: 0x4)
    float PICKUP_SMOKEBOMB_BLIND_TIME;                                                // 0x1B10 (size: 0x4)
    float PICKUP_SMOKEBOMB_TEEN_HIDE_DURATION;                                        // 0x1B14 (size: 0x4)
    float PICKUP_SMOKEBOMB_SELF_CLEANING_DURATION;                                    // 0x1B18 (size: 0x4)
    float PICKUP_SMOKEBOMB_EXTINQUISH_DURATION;                                       // 0x1B1C (size: 0x4)
    float PICKUP_PERCENT_IN_SEARCHABLES_MIN;                                          // 0x1B20 (size: 0x4)
    float PICKUP_PERCENT_IN_SEARCHABLES_MAX;                                          // 0x1B24 (size: 0x4)
    float TEENSPECTRAL_REVIVE_PULSE_RATE;                                             // 0x1B28 (size: 0x4)
    float TEENSPECTRAL_FEAST_PULSE_RATE;                                              // 0x1B2C (size: 0x4)
    float TEENSPECTRAL_TEENVISION_MAX_RANGE;                                          // 0x1B30 (size: 0x4)
    float TEENSPECTRAL_SHUTDOWN_TIME;                                                 // 0x1B34 (size: 0x4)
    float TEENSPECTRAL_MAX_ACCELERATION;                                              // 0x1B38 (size: 0x4)
    float TEENSPECTRAL_SPEED_MULTIPLIER;                                              // 0x1B3C (size: 0x4)
    float TEEN_CLOSE_BY_RANGE;                                                        // 0x1B40 (size: 0x4)
    float MIN_BLEEDING_DECAL_DURATION;                                                // 0x1B44 (size: 0x4)
    float MAX_BLEEDING_DECAL_DURATION;                                                // 0x1B48 (size: 0x4)
    float MIN_BLEEDING_DECAL_INTERVAL;                                                // 0x1B4C (size: 0x4)
    float MAX_BLEEDING_DECAL_INTERVAL;                                                // 0x1B50 (size: 0x4)
    float MIN_BLEEDING_DECAL_SIZE;                                                    // 0x1B54 (size: 0x4)
    float MAX_BLEEDING_DECAL_SIZE;                                                    // 0x1B58 (size: 0x4)
    float BLEEDING_DECAL_DURATION_INITIAL_DECLINE_TIME;                               // 0x1B5C (size: 0x4)
    float BLEEDING_DECAL_DURATION_INITIAL_BONUS_MULTIPLIER;                           // 0x1B60 (size: 0x4)
    float BLEEDING_DECAL_SIZE_INITIAL_DECLINE_TIME;                                   // 0x1B64 (size: 0x4)
    float BLEEDING_DECAL_SIZE_INITIAL_BONUS_MULTIPLIER;                               // 0x1B68 (size: 0x4)
    float BLEEDING_DECAL_INTERVAL_INITIAL_DECLINE_TIME;                               // 0x1B6C (size: 0x4)
    float BLEEDING_DECAL_INTERVAL_INITIAL_REDUCTION_MULTIPLIER;                       // 0x1B70 (size: 0x4)
    float BLEED_BONUS_DELAY_SECS_UNTIL_MAX;                                           // 0x1B74 (size: 0x4)
    float BLEED_BONUS_DELAY_MAX_AMOUNT;                                               // 0x1B78 (size: 0x4)
    float MIN_ATTACK_DECAL_DURATION;                                                  // 0x1B7C (size: 0x4)
    float MAX_ATTACK_DECAL_DURATION;                                                  // 0x1B80 (size: 0x4)
    int32 INVENTORY_SLOTS_PER_SCREEN;                                                 // 0x1B84 (size: 0x4)
    int32 MAX_EQUIPPED_PERKS;                                                         // 0x1B88 (size: 0x4)
    FLinearColor STATION_UNUSED_LIGHT_COLOR;                                          // 0x1B8C (size: 0x10)
    FLinearColor STATION_USED_LIGHT_COLOR;                                            // 0x1B9C (size: 0x10)
    FLinearColor STATION_PROGRESS_TINT_COLOR;                                         // 0x1BAC (size: 0x10)
    float STATION_FAIL_GLOW_TIME;                                                     // 0x1BBC (size: 0x4)
    float ENERGYPOINT_FAIL_GLOW_TIME;                                                 // 0x1BC0 (size: 0x4)
    float BASECHAR_MIN_ROTATION_RATE;                                                 // 0x1BC4 (size: 0x4)
    float BASECHAR_SLOW_MAX_ROTATION_RATE;                                            // 0x1BC8 (size: 0x4)
    float BASECHAR_FAST_MAX_ROTATION_RATE;                                            // 0x1BCC (size: 0x4)
    float BASECHAR_DEFAULT_MANUAL_ROTATION_RATE;                                      // 0x1BD0 (size: 0x4)
    float BASECHAR_VELOCITY_ROTATION_THRESHOLD;                                       // 0x1BD4 (size: 0x4)
    float MOTION_SENTINEL_RADIUS;                                                     // 0x1BD8 (size: 0x4)
    float MOTION_SENTINEL_MAX_SPEED;                                                  // 0x1BDC (size: 0x4)
    float MOTION_SENTINEL_MIN_SPEED;                                                  // 0x1BE0 (size: 0x4)
    float MOTION_SENTINEL_PLAYER_SPEED_THRESHOLD;                                     // 0x1BE4 (size: 0x4)
    float MOTION_SENTINEL_BREADCRUMB_START_TIMER;                                     // 0x1BE8 (size: 0x4)
    float MOTION_SENTINEL_BREADCRUMB_TIMER;                                           // 0x1BEC (size: 0x4)
    float MOTION_SENTINEL_BREADCRUMB_PROXIMITY;                                       // 0x1BF0 (size: 0x4)
    float MOTION_SENTINEL_REVEAL_REDUCTION_MULTIPLIER;                                // 0x1BF4 (size: 0x4)
    int32 MOTION_SENTINEL_MAX_BREADCRUMBS;                                            // 0x1BF8 (size: 0x4)
    float MOTION_SENTINEL_REVEAL_PARTICLE_TIMER;                                      // 0x1BFC (size: 0x4)
    float MOTION_SENTINEL_REVEAL_WHISPER_TIMER;                                       // 0x1C00 (size: 0x4)
    float MOTION_SENTINEL_REVEAL_AURA_TIMER;                                          // 0x1C04 (size: 0x4)
    float MOTION_SENTINEL_REVEAL_MAX_TIMER;                                           // 0x1C08 (size: 0x4)
    float MOTION_SENTINEL_WHISPER_MODIFIER;                                           // 0x1C0C (size: 0x4)
    float MOTION_SENTINEL_WHISPER_MIN_SCALE;                                          // 0x1C10 (size: 0x4)
    float MOTION_SENTINEL_WHISPER_MAX_SCALE;                                          // 0x1C14 (size: 0x4)
    float DARKSHARD_PROGRESS_TIME_REQUIRED;                                           // 0x1C18 (size: 0x4)
    float DARKSHARD_EMPOWERED_REVEAL_TIME;                                            // 0x1C1C (size: 0x4)
    float DARKSHARD_EMPOWERED_PROGRESS_TIME_REQUIRED;                                 // 0x1C20 (size: 0x4)
    float HUD_INPUT_DEAD_ZONE;                                                        // 0x1C24 (size: 0x4)
    float HUD_SCOREPOPUP_SPACER_TIME;                                                 // 0x1C28 (size: 0x4)
    float TRITON_OCCLUSION_MAX_DISTANCE;                                              // 0x1C2C (size: 0x4)
    float TRITON_LISTENER_UP_OFFSET;                                                  // 0x1C30 (size: 0x4)
    float TRITON_EMITTER_UP_OFFSET;                                                   // 0x1C34 (size: 0x4)
    float TRITION_ACOUSTICS_MAX_UPDATE_DISTANCE;                                      // 0x1C38 (size: 0x4)
    float TRITON_MAX_ALLOW_LASTVALIDPOSITION_DISTANCE;                                // 0x1C3C (size: 0x4)
    float COWER_POSTPROCESS_FADE_IN_TIME;                                             // 0x1C40 (size: 0x4)
    float COWER_POSTPROCESS_FADE_OUT_TIME;                                            // 0x1C44 (size: 0x4)
    float DEAFEN_RECOVERY_SECS;                                                       // 0x1C48 (size: 0x4)
    float GAME_SCORE_MAX_PER_CATEGORY;                                                // 0x1C4C (size: 0x4)
    float GAME_SCORE_MIN_CHASE_TIME;                                                  // 0x1C50 (size: 0x4)
    float GAME_SCORE_LONG_CHASE_SECS;                                                 // 0x1C54 (size: 0x4)
    float GAME_SCORE_MAX_CHASE_DURATION_POINTS;                                       // 0x1C58 (size: 0x4)
    float ROOMFRAME_MIN_SECS_TO_CHANGE_ROOMS;                                         // 0x1C5C (size: 0x4)
    float ROOMFRAME_SECS_TO_FADE_ROOM_LABEL;                                          // 0x1C60 (size: 0x4)
    float CONTROLLER_INPUT_DEAD_ZONE;                                                 // 0x1C64 (size: 0x4)
    float INPUTMANAGER_INPUT_BUFFER_DURATION;                                         // 0x1C68 (size: 0x4)
    int32 ROOMFRAME_MAX_NAME_LENGTH;                                                  // 0x1C6C (size: 0x4)
    int32 ROOMFRAME_LOCAL_PLAYER_TEXT_SIZE;                                           // 0x1C70 (size: 0x4)
    float BASECHAR_DISTANCE_TRAVELLED_PERIOD;                                         // 0x1C74 (size: 0x4)
    float BASECHAR_DISTANCE_TRAVELLED_PERIOD_STEP;                                    // 0x1C78 (size: 0x4)
    float TPCHAR_SPRINT_VAULT_DISTANCE_TRAVELLED_REQUIRED;                            // 0x1C7C (size: 0x4)
    int32 EVENT_HOLIDAY_SEARCHABLECOUNT_ORNAMENT;                                     // 0x1C80 (size: 0x4)
    int32 EVENT_HOLIDAY_SEARCHABLECOUNT_JACKINTHEBOX;                                 // 0x1C84 (size: 0x4)
    int32 EVENT_HOLIDAY_EVIL_PROPCOUNT_ORNAMENT;                                      // 0x1C88 (size: 0x4)
    float EVENT_HOLIDAY_EVIL_ORNAMENT_SHRINK_TIME;                                    // 0x1C8C (size: 0x4)
    float EVENT_HOLIDAY_EVIL_ORNAMENT_INITIAL_SCALE;                                  // 0x1C90 (size: 0x4)
    float EVENT_HOLIDAY_EVIL_ORNAMENT_INITIAL_LIFETIME;                               // 0x1C94 (size: 0x4)
    FVector EVENT_HOLIDAY_EVIL_ORNAMENT_INITIAL_OFFSET;                               // 0x1C98 (size: 0xC)
    FVector EVENT_HOLIDAY_EVIL_ORNAMENT_DISAPPEARPARTICLE_OFFSET;                     // 0x1CA4 (size: 0xC)
    float EVENT_HOLIDAY_EVIL_ORNAMENT_DISAPPEARPARTICLE_SPAWNTIMEBEFORE_SECONDS;      // 0x1CB0 (size: 0x4)
    int32 EVENT_HOLIDAY_EVIL_PROPCOUNT_JACKINTHEBOX;                                  // 0x1CB4 (size: 0x4)
    int32 EVENT_HALLOWEEN_EVIL_PROPCOUNT;                                             // 0x1CB8 (size: 0x4)
    int32 EVENT_EASTER_EVIL_PROPCOUNT;                                                // 0x1CBC (size: 0x4)
    FColor EVENT_EASTER_EVILEVENTPROP_COLOR_0;                                        // 0x1CC0 (size: 0x4)
    FColor EVENT_EASTER_EVILEVENTPROP_COLOR_1;                                        // 0x1CC4 (size: 0x4)
    FColor EVENT_EASTER_EVILEVENTPROP_COLOR_2;                                        // 0x1CC8 (size: 0x4)
    FColor EVENT_EASTER_EVILEVENTPROP_COLOR_3;                                        // 0x1CCC (size: 0x4)
    FColor EVENT_EASTER_EVILEVENTPROP_COLOR_4;                                        // 0x1CD0 (size: 0x4)
    FColor EVENT_EASTER_EVILEVENTPROP_COLOR_5;                                        // 0x1CD4 (size: 0x4)
    FColor EVENT_EASTER_TEENSEARCHABLE_COLOR_0;                                       // 0x1CD8 (size: 0x4)
    FColor EVENT_EASTER_TEENSEARCHABLE_COLOR_1;                                       // 0x1CDC (size: 0x4)
    FColor EVENT_EASTER_TEENSEARCHABLE_COLOR_2;                                       // 0x1CE0 (size: 0x4)
    FColor EVENT_EASTER_TEENSEARCHABLE_COLOR_3;                                       // 0x1CE4 (size: 0x4)
    FColor EVENT_EASTER_TEENSEARCHABLE_COLOR_4;                                       // 0x1CE8 (size: 0x4)
    FColor EVENT_EASTER_TEENSEARCHABLE_COLOR_5;                                       // 0x1CEC (size: 0x4)
    int32 SEARCHABLE_MANAGER_TOTAL_ADRENALINE;                                        // 0x1CF0 (size: 0x4)
    int32 SEARCHABLE_MANAGER_TOTAL_PILLS;                                             // 0x1CF4 (size: 0x4)
    int32 SEARCHABLE_MANAGER_TOTAL_WALKIE;                                            // 0x1CF8 (size: 0x4)
    int32 SEARCHABLE_MANAGER_TOTAL_NOISEMAKER;                                        // 0x1CFC (size: 0x4)
    int32 SEARCHABLE_MANAGER_TOTAL_RESURRECT;                                         // 0x1D00 (size: 0x4)
    int32 SEARCHABLE_MANAGER_TOTAL_SMOKEBOMB;                                         // 0x1D04 (size: 0x4)
    float SEARCHABLE_MANAGER_MIN_LOCKBOX_DISTANCE_FROM_GOOD;                          // 0x1D08 (size: 0x4)
    int32 SEARCHABLE_MAX_PUZZLES_NODES;                                               // 0x1D0C (size: 0x4)
    int32 SEARCHABLE_MIN_PUZZLES_NODES;                                               // 0x1D10 (size: 0x4)
    float SEARCHABLE_MINIGAME_BASE_SPIN_SPEED;                                        // 0x1D14 (size: 0x4)
    float SEARCHABLE_SHUTDOWN_LOCKOUT_TIME;                                           // 0x1D18 (size: 0x4)
    float SEARCHABLE_VENDINGMACHINE_SHUTDOWN_SHAKETRANSLATION_MAX;                    // 0x1D1C (size: 0x4)
    float SEARCHABLE_VENDINGMACHINE_SHUTDOWN_SHAKEROTATION_MAX;                       // 0x1D20 (size: 0x4)
    float SEARCHABLE_VENDINGMACHINE_SHUTDOWN_FLICKER_TIME;                            // 0x1D24 (size: 0x4)
    float SEARCHABLE_POPVENDINGMACHINE_ADRENALINE_CHANCE;                             // 0x1D28 (size: 0x4)
    float SEARCHABLE_CANDYVENDINGMACHINE_PILLS_CHANCE;                                // 0x1D2C (size: 0x4)
    float SEARCHABLE_WASTEBASKET_WALKIE_CHANCE;                                       // 0x1D30 (size: 0x4)
    float SEARCHABLE_WASTEBASKET_NOISEMAKER_CHANCE;                                   // 0x1D34 (size: 0x4)
    float SEARCHABLE_WASTEBASKET_SMOKEBOMB_CHANCE;                                    // 0x1D38 (size: 0x4)
    float SEARCHABLE_LOCKBOX_BOOKOFDEAD_CHANCE;                                       // 0x1D3C (size: 0x4)
    int32 SEARCHABLE_POPVENDINGMACHINE_BASE_PUZZLES;                                  // 0x1D40 (size: 0x4)
    int32 SEARCHABLE_CANDYVENDINGMACHINE_BASE_PUZZLES;                                // 0x1D44 (size: 0x4)
    int32 SEARCHABLE_WASTEBASKET_BASE_PUZZLES;                                        // 0x1D48 (size: 0x4)
    int32 SEARCHABLE_LOCKBOX_BASE_PUZZLES;                                            // 0x1D4C (size: 0x4)
    int32 SEARCHABLE_EVENT_HALLOWEEN_BASE_PUZZLES;                                    // 0x1D50 (size: 0x4)
    int32 SEARCHABLE_EVENT_HOLIDAY_BASE_PUZZLES;                                      // 0x1D54 (size: 0x4)
    int32 SEARCHABLE_EVENT_EASTER_BASE_PUZZLES;                                       // 0x1D58 (size: 0x4)
    int32 SEARCHABLE_EVENT_HOLIDAY_SEARCHABLECOUNT_ORNAMENT;                          // 0x1D5C (size: 0x4)
    int32 SEARCHABLE_EVENT_HOLIDAY_SEARCHABLECOUNT_JACKINTHEBOX;                      // 0x1D60 (size: 0x4)
    int32 SEARCHABLE_EVENT_EASTER_SEARCHABLECOUNT;                                    // 0x1D64 (size: 0x4)
    float SEARCHABLE_LOCKBOX_DISINTEGRATION_DURATION;                                 // 0x1D68 (size: 0x4)
    float SEARCHABLE_LOCKBOX_DISINTEGRATION_MAX_WARPSCALE;                            // 0x1D6C (size: 0x4)
    float SEARCHABLE_LOCKBOX_RESPAWN_MAX_CHECK_DISTANCE;                              // 0x1D70 (size: 0x4)
    float SEARCHABLE_LOCKBOX_MAX_AURASFX_ATTENUATION_SCALE;                           // 0x1D74 (size: 0x4)
    float SEARCHABLE_LOCKBOX_AURASFX_RAMP_SECS;                                       // 0x1D78 (size: 0x4)
    float SEARCHABLE_VENDINGMACHINE_MIN_RECHARGE_TIME;                                // 0x1D7C (size: 0x4)
    float SEARCHABLE_VENDINGMACHINE_MAX_RECHARGE_TIME;                                // 0x1D80 (size: 0x4)
    float SEARCHABLE_ROTATOR_MIN_ANGLE;                                               // 0x1D84 (size: 0x4)
    float SEARCHABLE_WASTEBASKET_TIP_ANGLE;                                           // 0x1D88 (size: 0x4)
    float SEARCHABLE_ROTATOR_CONFIRMATION_TIME;                                       // 0x1D8C (size: 0x4)
    float SEASONALEVENTCENTERPIECE_SPECTRAL_ORBIT_RADIUS;                             // 0x1D90 (size: 0x4)
    int32 SEASONALEVENTCENTERPIECE_SPECTRAL_SPAWNNUM;                                 // 0x1D94 (size: 0x4)
    float SEASONALEVENTCENTERPIECE_SPECTRAL_VERTICALOFFSET;                           // 0x1D98 (size: 0x4)
    float SEASONALEVENTCENTERPIECE_POINTRADIUS_MIN;                                   // 0x1D9C (size: 0x4)
    float SEASONALEVENTCENTERPIECE_POINTRADIUS_MAX;                                   // 0x1DA0 (size: 0x4)
    float SEASONALEVENTCENTERPIECE_HOLIDAY_EVIL_ORNAMENT_ANIMATION_TIME;              // 0x1DA4 (size: 0x4)
    float SEASONALEVENTCENTERPIECE_HOLIDAY_EVIL_ORNAMENT_REVEAL_INTERVAL;             // 0x1DA8 (size: 0x4)
    int32 SEASONALEVENTCENTERPIECE_HOLIDAY_EVIL_ORNAMENTS_PER_LAYER;                  // 0x1DAC (size: 0x4)
    float SEASONALEVENTCENTERPIECE_HOLIDAY_LAYER_FADEINTIME;                          // 0x1DB0 (size: 0x4)
    float SEASONALEVENTCENTERPIECE_HOLIDAY_EVIL_ORNAMENT_ARCHEIGHT;                   // 0x1DB4 (size: 0x4)
    float STATIONBASE_POINTRADIUS_MIN;                                                // 0x1DB8 (size: 0x4)
    float STATIONBASE_POINTRADIUS_MAX;                                                // 0x1DBC (size: 0x4)
    int32 SIGNAL_SECONDS_TO_SHOW;                                                     // 0x1DC0 (size: 0x4)
    int32 SIGNAL_BASE_HEIGHT;                                                         // 0x1DC4 (size: 0x4)
    int32 SIGNAL_CROUCHED_HEIGHT;                                                     // 0x1DC8 (size: 0x4)
    float BASECHAR_SECONDS_BEFORE_SIGNAL_MENU_SHOWN;                                  // 0x1DCC (size: 0x4)
    int32 VOICECHAT_TILE_MAX_NAME_LENGTH;                                             // 0x1DD0 (size: 0x4)
    int32 VOICECHAT_MAX_SPEAKERS_GAIN;                                                // 0x1DD4 (size: 0x4)
    float VOICECHAT_REQUEST_TIMEOUT;                                                  // 0x1DD8 (size: 0x4)
    float VOICECHAT_REQUEST_BACKOFF_INCREMENT;                                        // 0x1DDC (size: 0x4)
    float VOICECHAT_REQUEST_BACKOFF_MAX;                                              // 0x1DE0 (size: 0x4)
    int32 VOICECHAT_MAX_CHANNEL_CONNECTION_ATTEMPTS;                                  // 0x1DE4 (size: 0x4)
    int32 VOICECHAT_PREVIOUS_ATTEMPTS_TO_REMEMBER;                                    // 0x1DE8 (size: 0x4)
    int32 VOICECHAT_MAX_MICROPHONE_GAIN;                                              // 0x1DEC (size: 0x4)
    float DARKSHARD_DESTROYED_TIME;                                                   // 0x1DF0 (size: 0x4)
    int32 MAX_AUGMENT_TIER;                                                           // 0x1DF4 (size: 0x4)
    float AUGMENT_STAT_LIFETIME_BOOST_SECONDS_1;                                      // 0x1DF8 (size: 0x4)
    float AUGMENT_STAT_LIFETIME_BOOST_SECONDS_2;                                      // 0x1DFC (size: 0x4)
    float AUGMENT_STAT_LIFETIME_BOOST_SECONDS_3;                                      // 0x1E00 (size: 0x4)
    float AUGMENT_STAT_FASTENERGIZE_BOOST_1;                                          // 0x1E04 (size: 0x4)
    float AUGMENT_STAT_FASTENERGIZE_BOOST_2;                                          // 0x1E08 (size: 0x4)
    float AUGMENT_STAT_FASTENERGIZE_BOOST_3;                                          // 0x1E0C (size: 0x4)
    float AUGMENT_STAT_MAX_SPEED_BOOST_1;                                             // 0x1E10 (size: 0x4)
    float AUGMENT_STAT_MAX_SPEED_BOOST_2;                                             // 0x1E14 (size: 0x4)
    float AUGMENT_STAT_MAX_SPEED_BOOST_3;                                             // 0x1E18 (size: 0x4)
    float AUGMENT_STAT_FASTDEPLOYMOVE_DEPLOY_SPEED_BONUS_MULTIPLIER;                  // 0x1E1C (size: 0x4)
    float AUGMENT_STAT_FASTDEPLOYMOVE_ACTIVE_SPEED_PENALTY_MULTIPLIER;                // 0x1E20 (size: 0x4)
    float AUGMENT_STAT_HEAREVIL_EXTRA_CHARGES_REQUIRED;                               // 0x1E24 (size: 0x4)
    int32 AUGMENT_STAT_FASTENERGIZE_FUSE_BOX_DISCOUNT;                                // 0x1E28 (size: 0x4)
    float AUGMENT_STAT_FASTENERGIZE_CHARGE_TIME_BONUS_SECONDS;                        // 0x1E2C (size: 0x4)
    float AUGMENT_STAT_MAXSPEED_TOP_SPEED_BONUS_MULTIPLIER;                           // 0x1E30 (size: 0x4)
    float AUGMENT_STAT_MAXSPEED_ENERGY_CONSUMPTION_BONUS_MULTIPLIER;                  // 0x1E34 (size: 0x4)
    float AUGMENT_STAT_ENERGIZEDMOVE_SPEEDBOOST_BONUS_MULTIPLIER;                     // 0x1E38 (size: 0x4)
    float AUGMENT_STAT_ENERGIZEDMOVE_SPEEDBOOST_TIME_SECONDS;                         // 0x1E3C (size: 0x4)
    float AUGMENT_STAT_ENERGIZEDMOVE_SHIELD_CRAFT_TIME_BONUS_MULTIPLIER;              // 0x1E40 (size: 0x4)
    float AUGMENT_CROS_EXTRAENERGY_ENERGY_CONSUMPTION_REDUCTION;                      // 0x1E44 (size: 0x4)
    float AUGMENT_CROS_EXTRAENERGY_TIME_TO_MAX_EFFECT_INCREASE;                       // 0x1E48 (size: 0x4)
    float AUGMENT_CROS_FASTCRAFT_CRAFT_SPEED_BONUS_MULTIPLIER;                        // 0x1E4C (size: 0x4)
    float AUGMENT_CROS_WIDEBEAM_STUN_TIME_DECREASE_MULTIPLIER;                        // 0x1E50 (size: 0x4)
    float AUGMENT_CROS_WIDEBEAM_INCORPOREAL_TIME_INCREASE_MULTIPLIER;                 // 0x1E54 (size: 0x4)
    float AUGMENT_CROS_DAMAGEBLOCK_DURATION;                                          // 0x1E58 (size: 0x4)
    float AUGMENT_CROS_LONGRANGE_RANGE_MULTIPLIER_INCREASE;                           // 0x1E5C (size: 0x4)
    float AUGMENT_SLIN_LIFETIME_BOOST_SECONDS_1;                                      // 0x1E60 (size: 0x4)
    float AUGMENT_SLIN_LIFETIME_BOOST_SECONDS_2;                                      // 0x1E64 (size: 0x4)
    float AUGMENT_SLIN_LIFETIME_BOOST_SECONDS_3;                                      // 0x1E68 (size: 0x4)
    float AUGMENT_SLIN_EXTRASHOT_BOOST;                                               // 0x1E6C (size: 0x4)
    float AUGMENT_SLIN_BLIND_BLINDTIME;                                               // 0x1E70 (size: 0x4)
    float AUGMENT_SLIN_BLIND_CRAFTTIME_BONUS_MULTIPLIER;                              // 0x1E74 (size: 0x4)
    int32 AUGMENT_SLIN_DIRECTHIT_EXTRASHOTS;                                          // 0x1E78 (size: 0x4)
    int32 AUGMENT_SLIN_NOSTICK_EXTRA_GRENADES;                                        // 0x1E7C (size: 0x4)
    float AUGMENT_SLIN_FASTCRAFT_CRAFT_SPEED_BONUS_MULTIPLIER;                        // 0x1E80 (size: 0x4)
    int32 AUGMENT_SLIN_FASTCRAFT_GRENADE_REDUCTION;                                   // 0x1E84 (size: 0x4)
    float AUGMENT_SLIN_STICKBONUS_STUN_TIME_INCREASE_MULTIPLIER;                      // 0x1E88 (size: 0x4)
    float AUGMENT_SLIN_STICKBONUS_INCORPOREAL_TIME_DECREASE_MULTIPLIER;               // 0x1E8C (size: 0x4)
    float AUGMENT_WEREWOLF_HOWL_FASTCOOLDOWN_COOLDOWN_REDUCTION_BONUS_MULTIPLIER;     // 0x1E90 (size: 0x4)
    float AUGMENT_WEREWOLF_HOWL_FASTCOOLDOWN_RANGE_REDUCTION_MULTIPLIER;              // 0x1E94 (size: 0x4)
    float AUGMENT_WEREWOLF_HOWL_STAGGER_TIME;                                         // 0x1E98 (size: 0x4)
    float AUGMENT_WEREWOLF_HOWL_STAGGER_DEAFEN_TIME;                                  // 0x1E9C (size: 0x4)
    float AUGMENT_WEREWOLF_HOWL_STAGGER_COOLDOWN_INCREASE_MULTIPLIER;                 // 0x1EA0 (size: 0x4)
    float AUGMENT_WEREWOLF_HOWL_REACTION_TIME;                                        // 0x1EA4 (size: 0x4)
    float AUGMENT_WEREWOLF_HOWL_REACTION_DAMAGE_CHARGE_TIME_REDUCTION_MULTIPLIER;     // 0x1EA8 (size: 0x4)
    float AUGMENT_WEREWOLF_HOWL_REACTION_CHARGE_TIME_BONUS_MULTIPLIER;                // 0x1EAC (size: 0x4)
    float AUGMENT_WEREWOLF_BERSERK_HITPERSIST_COOLDOWN_BONUS_MULTIPLIER;              // 0x1EB0 (size: 0x4)
    float AUGMENT_WEREWOLF_BERSERK_HITPERSIST_EXTENDED_SECONDS;                       // 0x1EB4 (size: 0x4)
    float AUGMENT_WEREWOLF_BERSERK_LONGDURATION_DURATION_BONUS_MULTIPLIER;            // 0x1EB8 (size: 0x4)
    float AUGMENT_WEREWOLF_BERSERK_LONGDURATION_SPEED_BOOST_PENALTY_BONUS_MULTIPLIER; // 0x1EBC (size: 0x4)
    float AUGMENT_WEREWOLF_BERSERK_INSTANTREFRESH_CHARGE_TIME_REDUCTION;              // 0x1EC0 (size: 0x4)
    float AUGMENT_WEREWOLF_BERSERK_INSTANTREFRESH_COOLDOWN_REDUCTION_MULTIPLIER;      // 0x1EC4 (size: 0x4)
    float AUGMENT_WEREWOLF_SENSE_EXTENDRANGE_MAX_RANGE_BONUS_MULTIPLIER;              // 0x1EC8 (size: 0x4)
    float AUGMENT_WEREWOLF_SENSE_EXTENDRANGE_MIN_RANGE_BONUS_MULTIPLIER;              // 0x1ECC (size: 0x4)
    float AUGMENT_WEREWOLF_SENSE_MARK_TEEN_IN_RANGE_CONSUMPTION_BONUS_MULTIPLIER;     // 0x1ED0 (size: 0x4)
    float AUGMENT_WEREWOLF_SENSE_MARK_TEEN_OUT_OF_RANGE_CONSUMPTION_PENALTY_MULTIPLIER; // 0x1ED4 (size: 0x4)
    float AUGMENT_WEREWOLF_SENSE_TOGGLE_MINIMUM_COOLDOWN_SECONDS;                     // 0x1ED8 (size: 0x4)
    float AUGMENT_DOLLMASTER_TRAP_IMPROVEDDETECT_RADIUS;                              // 0x1EDC (size: 0x4)
    float AUGMENT_DOLLMASTER_TRAP_IMPROVEDDETECT_MAX_TRAP_REDUCTION;                  // 0x1EE0 (size: 0x4)
    float AUGMENT_DOLLMASTER_TRAP_EXTRATRAPS_MAX_TRAP_INCREASE;                       // 0x1EE4 (size: 0x4)
    float AUGMENT_DOLLMASTER_TRAP_EXTRATRAPS_TRIGGER_DISTANCE_REDUCTION_MULTIPLIER;   // 0x1EE8 (size: 0x4)
    float AUGMENT_DOLLMASTER_TRAP_TRIPPERSIST_REVEAL_TIME;                            // 0x1EEC (size: 0x4)
    float AUGMENT_DOLLMASTER_TRAP_TRIPPERSIST_SUMMON_COOLDOWN_REDUCTION_MULTIPLIER;   // 0x1EF0 (size: 0x4)
    float AUGMENT_DOLLMASTER_SUMMON_LONGDURATION_DURATION_BONUS_MULTIPLIER;           // 0x1EF4 (size: 0x4)
    float AUGMENT_DOLLMASTER_SUMMON_LONGDURATION_POSSESSION_TIME_BONUS_MULTIPLIER;    // 0x1EF8 (size: 0x4)
    float AUGMENT_DOLLMASTER_SUMMON_EXTRAJUMPS_EXTRA_JUMPS;                           // 0x1EFC (size: 0x4)
    float AUGMENT_DOLLMASTER_SUMMON_EXTRAJUMPS_MOVESPEED_PENALTY_MULTIPLIER;          // 0x1F00 (size: 0x4)
    float AUGMENT_DOLLMASTER_SUMMON_JUMPREFRESH_POSSESSION_DURATION_PENALTY_MULTIPLIER; // 0x1F04 (size: 0x4)
    float AUGMENT_DOLLMASTER_SUMMON_JUMPREFRESH_COOLDOWN_REDUCTION_MULTIPLIER;        // 0x1F08 (size: 0x4)
    float AUGMENT_DOLLMASTER_TELEPORT_HITREFRESH_DURATION;                            // 0x1F0C (size: 0x4)
    float AUGMENT_DOLLMASTER_TELEPORT_HITREFRESH_COOLDOWN_SECONDS;                    // 0x1F10 (size: 0x4)
    float AUGMENT_DOLLMASTER_TELEPORT_HITREFRESH_TELEPORT_COOLDOWN_PENALTY_MULTIPLIER; // 0x1F14 (size: 0x4)
    float AUGMENT_DOLLMASTER_TELEPORT_DOUBLETELEPORT_WINDOW_DURATION;                 // 0x1F18 (size: 0x4)
    float AUGMENT_DOLLMASTER_TELEPORT_DOUBLETELEPORT_ACTIVATION_TIME_BONUS_MULTIPLIER; // 0x1F1C (size: 0x4)
    float AUGMENT_DOLLMASTER_TELEPORT_NOTARGETING_ACTIVATION_TIME_PENALTY_MULTIPLIER; // 0x1F20 (size: 0x4)
    FVector TOAD_FPCAMERA_BOOM_LOCATION;                                              // 0x1F24 (size: 0xC)
    float AUGMENT_TOAD_LEAP_IMPROVEDSTAGGER_STAGGER_RADIUS_BONUS_MULTIPLIER;          // 0x1F30 (size: 0x4)
    float AUGMENT_TOAD_LEAP_IMPROVEDSTAGGER_STAGGER_DURATION_BONUS_MULTIPLIER;        // 0x1F34 (size: 0x4)
    float AUGMENT_TOAD_LEAP_IMPROVEDSTAGGER_LEAP_COOLDOWN_BONUS_MULTIPLIER;           // 0x1F38 (size: 0x4)
    float AUGMENT_TOAD_LEAP_FASTSPEED_LEAP_SPEED_BONUS_MULTIPLIER;                    // 0x1F3C (size: 0x4)
    float AUGMENT_TOAD_LEAP_FASTSPEED_LEAP_TIME_PENALTY_MULTIPLIER;                   // 0x1F40 (size: 0x4)
    float AUGMENT_TOAD_LEAP_FASTSPEED_LEAP_ACTIVATION_TIME_BONUS_MULTIPLIER;          // 0x1F44 (size: 0x4)
    float AUGMENT_TOAD_LEAP_FASTCOOLDOWN_LEAP_COOLDOWN_PENALTY_MULTIPLIER;            // 0x1F48 (size: 0x4)
    float AUGMENT_TOAD_LEAP_FASTCOOLDOWN_STAGGER_RADIUS_PENALTY_MULTIPLIER;           // 0x1F4C (size: 0x4)
    float AUGMENT_TOAD_ARMOR_HITBONUS_DAMAGE_BONUS_MULTIPLIER;                        // 0x1F50 (size: 0x4)
    float AUGMENT_TOAD_ARMOR_HITBONUS_LEAP_LOCKOUT_SECONDS;                           // 0x1F54 (size: 0x4)
    float AUGMENT_TOAD_ARMOR_SPEEDBONUS_SPEED_BONUS_MULTIPLIER;                       // 0x1F58 (size: 0x4)
    float AUGMENT_TOAD_ARMOR_SPEEDBONUS_ACTIVATION_TIME_BONUS_MULTIPLIER;             // 0x1F5C (size: 0x4)
    float AUGMENT_TOAD_ARMOR_FASTCOOLDOWN_ARMOR_COOLDOWN_PENALTY_MULTIPLIER;          // 0x1F60 (size: 0x4)
    float AUGMENT_TOAD_ECHOLOCATION_CLONEMOTION_FREQUENCY_SECONDS;                    // 0x1F64 (size: 0x4)
    float AUGMENT_TOAD_ECHOLOCATION_CLONEMOTION_LIFETIME_SECONDS;                     // 0x1F68 (size: 0x4)
    float AUGMENT_TOAD_ECHOLOCATION_CLONEMOTION_COPY_SECONDS;                         // 0x1F6C (size: 0x4)
    float AUGMENT_TOAD_ECHOLOCATION_CLONEMOTION_ACTIVATION_TIME_BONUS_MULTIPLIER;     // 0x1F70 (size: 0x4)
    float AUGMENT_TOAD_ECHOLOCATION_DEAFEN_DEAFEN_TIME;                               // 0x1F74 (size: 0x4)
    FLinearColor AUGMENT_TOAD_ECHOLOCATION_WEAPONDETECT_AURA_COLOR;                   // 0x1F78 (size: 0x10)
    float AUGMENT_TOAD_ECHOLOCATION_WEAPONDETECT_COOLDOWN_BONUS_MULTIPLIER;           // 0x1F88 (size: 0x4)
    float AUGMENT_ERADICATOR_MODESWAP_SPEEDBOOST_RUN_SPEED_BONUS_MULTIPLIER;          // 0x1F8C (size: 0x4)
    float AUGMENT_ERADICATOR_MODESWAP_SPEEDBOOST_BOOST_SECONDS;                       // 0x1F90 (size: 0x4)
    float AUGMENT_ERADICATOR_MODESWAP_SPEEDBOOST_LOCKOUT_SECONDS;                     // 0x1F94 (size: 0x4)
    float AUGMENT_ERADICATOR_MODESWAP_FASTCHARGE_SWAP_CHARGE_REDUCTION_MULTIPLIER;    // 0x1F98 (size: 0x4)
    float AUGMENT_ERADICATOR_MODESWAP_FASTCHARGE_VEHICLE_SPEED_REDUCTION_MULTIPLIER;  // 0x1F9C (size: 0x4)
    float AUGMENT_ERADICATOR_MODESWAP_FASTSURGECOOLDOWN_ASSAULT_SURGE_COOLDOWN_PENALTY_MULTIPLIER; // 0x1FA0 (size: 0x4)
    float AUGMENT_ERADICATOR_MODESWAP_FASTSURGECOOLDOWN_VEHICLE_SURGE_COOLDOWN_BONUS_MULTIPLIER; // 0x1FA4 (size: 0x4)
    float AUGMENT_ERADICATOR_ELECTRICSURGE_EXPOSE_CHARGE_TIME_INCREASE_MULTIPLIER;    // 0x1FA8 (size: 0x4)
    float AUGMENT_ERADICATOR_ELECTRICSURGE_INHIBIT_INHIBITED_SECONDS;                 // 0x1FAC (size: 0x4)
    float AUGMENT_ERADICATOR_ELECTRICSURGE_INHIBIT_OVERCHARGED_EXTRA_SECONDS;         // 0x1FB0 (size: 0x4)
    float AUGMENT_ERADICATOR_ELECTRICSURGE_EXTRASURGE_AREA_INCREASE_MULTIPLIER;       // 0x1FB4 (size: 0x4)
    float AUGMENT_ERADICATOR_SCANNERBEAM_ARMED_EXPOSED_DURATION_BONUS_MULTIPLIER;     // 0x1FB8 (size: 0x4)
    float AUGMENT_ERADICATOR_SCANNERBEAM_ARMED_EXPOSED_DURATION_REDUCTION_MULTIPLIER; // 0x1FBC (size: 0x4)
    float AUGMENT_ERADICATOR_SCANNERBEAM_WIDEAREA_SCAN_SIZE_MULTIPLIER;               // 0x1FC0 (size: 0x4)
    float AUGMENT_ERADICATOR_SCANNERBEAM_WIDEAREA_CHARGE_TIME_INCREASE_MULTIPLIER;    // 0x1FC4 (size: 0x4)
    float AUGMENT_ERADICATOR_SCANNERBEAM_FASTMOVING_RUN_SPEED_BONUS_MULTIPLIER;       // 0x1FC8 (size: 0x4)
    float AUGMENT_ERADICATOR_SCANNERBEAM_FASTMOVING_RUN_SPEED_PENALTY_MULTIPLIER;     // 0x1FCC (size: 0x4)
    float AUGMENT_TECHNICIAN_ATTENUATION_REDUCTION_FACTOR;                            // 0x1FD0 (size: 0x4)
    float AUGMENT_TECHNICIAN_VOLUME_REDUCTION_FACTOR;                                 // 0x1FD4 (size: 0x4)
    int32 AUGMENT_TECHNICIAN_MAX_ACTIVE_TEENS_1;                                      // 0x1FD8 (size: 0x4)
    int32 AUGMENT_TECHNICIAN_MAX_ACTIVE_TEENS_2;                                      // 0x1FDC (size: 0x4)
    int32 AUGMENT_TECHNICIAN_MAX_ACTIVE_TEENS_3;                                      // 0x1FE0 (size: 0x4)
    float AUGMENT_STATIONVISION_MAX_VIEW_DISTANCE_INCREASE_MULTIPLIER_1;              // 0x1FE4 (size: 0x4)
    float AUGMENT_STATIONVISION_MAX_VIEW_DISTANCE_INCREASE_MULTIPLIER_2;              // 0x1FE8 (size: 0x4)
    float AUGMENT_TECHNICIAN_PULSE_RATE;                                              // 0x1FEC (size: 0x4)
    float AUGMENT_TECHNICIAN_PULSE_MAX;                                               // 0x1FF0 (size: 0x4)
    float AUGMENT_CRAFTMASTER_TOKEN_CRAFTING_BONUS_MULTIPLIER_1;                      // 0x1FF4 (size: 0x4)
    float AUGMENT_CRAFTMASTER_TOKEN_CRAFTING_BONUS_MULTIPLIER_2;                      // 0x1FF8 (size: 0x4)
    float AUGMENT_CRAFTMASTER_TOKEN_CRAFTING_BONUS_MULTIPLIER_3;                      // 0x1FFC (size: 0x4)
    float AUGMENT_MULTITASKER_CRAFTING_DECAY_REDUCTION_MULTIPLIER_1;                  // 0x2000 (size: 0x4)
    float AUGMENT_MULTITASKER_CRAFTING_DECAY_REDUCTION_MULTIPLIER_2;                  // 0x2004 (size: 0x4)
    float AUGMENT_MULTITASKER_CRAFTING_DECAY_REDUCTION_MULTIPLIER_3;                  // 0x2008 (size: 0x4)
    float AUGMENT_HEALMASTER_SPEED_INCREASE_MULTIPLIER_1;                             // 0x200C (size: 0x4)
    float AUGMENT_HEALMASTER_SPEED_INCREASE_MULTIPLIER_2;                             // 0x2010 (size: 0x4)
    float AUGMENT_HEALMASTER_SPEED_INCREASE_MULTIPLIER_3;                             // 0x2014 (size: 0x4)
    float AUGMENT_ESSENCERESTORE_LIFELOSS_PREVENTION_TIME_1;                          // 0x2018 (size: 0x4)
    float AUGMENT_ESSENCERESTORE_LIFELOSS_PREVENTION_TIME_2;                          // 0x201C (size: 0x4)
    float AUGMENT_ESSENCERESTORE_LIFELOSS_PREVENTION_TIME_3;                          // 0x2020 (size: 0x4)
    float AUGMENT_ESSENCERESTORE_MOVEMENT_SPEED_TIME_1;                               // 0x2024 (size: 0x4)
    float AUGMENT_ESSENCERESTORE_MOVEMENT_SPEED_TIME_2;                               // 0x2028 (size: 0x4)
    float AUGMENT_ESSENCERESTORE_MOVEMENT_SPEED_TIME_3;                               // 0x202C (size: 0x4)
    float AUGMENT_ESSENCERESTORE_MOVEMENT_SPEED_BONUS_MULTIPLIER;                     // 0x2030 (size: 0x4)
    float AUGMENT_REVIVEMASTER_REVIVE_SPEED_INCREASE_1;                               // 0x2034 (size: 0x4)
    float AUGMENT_REVIVEMASTER_REVIVE_SPEED_INCREASE_2;                               // 0x2038 (size: 0x4)
    float AUGMENT_REVIVEMASTER_REVIVE_SPEED_INCREASE_3;                               // 0x203C (size: 0x4)
    float AUGMENT_REVIVEMASTER_REVIVE_BONUS_LIFE_FACTOR_1;                            // 0x2040 (size: 0x4)
    float AUGMENT_REVIVEMASTER_REVIVE_BONUS_LIFE_FACTOR_2;                            // 0x2044 (size: 0x4)
    float AUGMENT_REVIVEMASTER_REVIVE_BONUS_LIFE_FACTOR_3;                            // 0x2048 (size: 0x4)
    float AUGMENT_INJURYVISION_INJURED_AURA_TIME_1;                                   // 0x204C (size: 0x4)
    float AUGMENT_INJURYVISION_INJURED_AURA_TIME_2;                                   // 0x2050 (size: 0x4)
    float AUGMENT_INJURYVISION_INJURED_AURA_TIME_3;                                   // 0x2054 (size: 0x4)
    float AUGMENT_HARDY_BONUS_HEALTH_1;                                               // 0x2058 (size: 0x4)
    float AUGMENT_HARDY_BONUS_HEALTH_2;                                               // 0x205C (size: 0x4)
    float AUGMENT_HARDY_BONUS_HEALTH_3;                                               // 0x2060 (size: 0x4)
    float AUGMENT_HARDY_BONUS_HEALTH_DURATION;                                        // 0x2064 (size: 0x4)
    float AUGMENT_SLOWDYING_TIME_DECREASE_1;                                          // 0x2068 (size: 0x4)
    float AUGMENT_SLOWDYING_TIME_DECREASE_2;                                          // 0x206C (size: 0x4)
    float AUGMENT_SLOWDYING_TIME_DECREASE_3;                                          // 0x2070 (size: 0x4)
    float AUGMENT_BLEEDREDUCTION_CLOT_SECS_1;                                         // 0x2074 (size: 0x4)
    float AUGMENT_BLEEDREDUCTION_CLOT_SECS_2;                                         // 0x2078 (size: 0x4)
    float AUGMENT_BLEEDREDUCTION_CLOT_SECS_3;                                         // 0x207C (size: 0x4)
    float AUGMENT_BLEEDREDUCTION_TIME_TO_MAX_INTERVAL;                                // 0x2080 (size: 0x4)
    float AUGMENT_KEEPWEAPON_NUM_DEATHS_REQUIRED_1;                                   // 0x2084 (size: 0x4)
    float AUGMENT_KEEPWEAPON_NUM_DEATHS_REQUIRED_2;                                   // 0x2088 (size: 0x4)
    float AUGMENT_PICKUPVISION_RANGE_1;                                               // 0x208C (size: 0x4)
    float AUGMENT_PICKUPVISION_RANGE_2;                                               // 0x2090 (size: 0x4)
    float AUGMENT_PICKUPVISION_RANGE_3;                                               // 0x2094 (size: 0x4)
    float AUGMENT_SEARCHMASTER_ATTENUATION_SCALE_FACTOR_1;                            // 0x2098 (size: 0x4)
    float AUGMENT_SEARCHMASTER_ATTENUATION_SCALE_FACTOR_2;                            // 0x209C (size: 0x4)
    float AUGMENT_SEARCHMASTER_ATTENUATION_SCALE_FACTOR_3;                            // 0x20A0 (size: 0x4)
    float AUGMENT_SEARCHMASTER_VOLUME_REDUCTION_FACTOR;                               // 0x20A4 (size: 0x4)
    float AUGMENT_SEARCHMASTER_SEARCHABLE_MINIGAME_SPEED_INCREASE_1;                  // 0x20A8 (size: 0x4)
    float AUGMENT_SEARCHMASTER_SEARCHABLE_MINIGAME_SPEED_INCREASE_2;                  // 0x20AC (size: 0x4)
    float AUGMENT_SEARCHMASTER_SEARCHABLE_MINIGAME_SPEED_INCREASE_3;                  // 0x20B0 (size: 0x4)
    float AUGMENT_MEDKITMASTER_HEAL_SPEED_BONUS_MULTIPLIER_1;                         // 0x20B4 (size: 0x4)
    float AUGMENT_MEDKITMASTER_HEAL_SPEED_BONUS_MULTIPLIER_2;                         // 0x20B8 (size: 0x4)
    float AUGMENT_MEDKITMASTER_HEAL_SPEED_BONUS_MULTIPLIER_3;                         // 0x20BC (size: 0x4)
    float AUGMENT_PICKUPEXPERT_BONUS_MULTIPLIER_1;                                    // 0x20C0 (size: 0x4)
    float AUGMENT_PICKUPEXPERT_BONUS_MULTIPLIER_2;                                    // 0x20C4 (size: 0x4)
    float AUGMENT_PICKUPEXPERT_BONUS_MULTIPLIER_3;                                    // 0x20C8 (size: 0x4)
    float AUGMENT_TEENVISION_MAX_RANGE_1;                                             // 0x20CC (size: 0x4)
    float AUGMENT_TEENVISION_MAX_RANGE_2;                                             // 0x20D0 (size: 0x4)
    float AUGMENT_TEENVISION_MAX_RANGE_3;                                             // 0x20D4 (size: 0x4)
    float AUGMENT_SPRY_ADRENALINE_TIME_INCREASE_MULTIPLIER_1;                         // 0x20D8 (size: 0x4)
    float AUGMENT_SPRY_ADRENALINE_TIME_INCREASE_MULTIPLIER_2;                         // 0x20DC (size: 0x4)
    float AUGMENT_SPRY_ADRENALINE_TIME_INCREASE_MULTIPLIER_3;                         // 0x20E0 (size: 0x4)
    float AUGMENT_MOTIVATOR_MAX_RANGE;                                                // 0x20E4 (size: 0x4)
    float AUGMENT_MOTIVATOR_ACTION_SPEED_INCREASE_1;                                  // 0x20E8 (size: 0x4)
    float AUGMENT_MOTIVATOR_ACTION_SPEED_INCREASE_2;                                  // 0x20EC (size: 0x4)
    float AUGMENT_MOTIVATOR_ACTION_SPEED_INCREASE_3;                                  // 0x20F0 (size: 0x4)
    float AUGMENT_ESSENCEVISION_ESSENCE_VISION_RADIUS_1;                              // 0x20F4 (size: 0x4)
    float AUGMENT_ESSENCEVISION_ESSENCE_VISION_RADIUS_2;                              // 0x20F8 (size: 0x4)
    float AUGMENT_ESSENCEVISION_ESSENCE_VISION_TEENSPECTRAL_MOVEMENT_BONUS_MULTIPLIER_1; // 0x20FC (size: 0x4)
    float AUGMENT_ESSENCEVISION_ESSENCE_VISION_TEENSPECTRAL_MOVEMENT_BONUS_MULTIPLIER_2; // 0x2100 (size: 0x4)
    float AUGMENT_ESSENCEVISION_ESSENCE_VISION_TEENSPECTRAL_MOVEMENT_BONUS_MULTIPLIER_3; // 0x2104 (size: 0x4)
    float AUGMENT_CROUCHMASTER_SPEED_INCREASE_1;                                      // 0x2108 (size: 0x4)
    float AUGMENT_CROUCHMASTER_SPEED_INCREASE_2;                                      // 0x210C (size: 0x4)
    float AUGMENT_CROUCHMASTER_SPEED_INCREASE_3;                                      // 0x2110 (size: 0x4)
    float AUGMENT_HIDEMASTER_COOLDOWN_1;                                              // 0x2114 (size: 0x4)
    float AUGMENT_HIDEMASTER_COOLDOWN_2;                                              // 0x2118 (size: 0x4)
    float AUGMENT_HIDEMASTER_COOLDOWN_3;                                              // 0x211C (size: 0x4)
    float AUGMENT_HIDEMASTER_UNTRACEABLE_SECS_1;                                      // 0x2120 (size: 0x4)
    float AUGMENT_HIDEMASTER_UNTRACEABLE_SECS_2;                                      // 0x2124 (size: 0x4)
    float AUGMENT_HIDEMASTER_UNTRACEABLE_SECS_3;                                      // 0x2128 (size: 0x4)
    float AUGMENT_VAULTMASTER_COOLDOWN_1;                                             // 0x212C (size: 0x4)
    float AUGMENT_VAULTMASTER_COOLDOWN_2;                                             // 0x2130 (size: 0x4)
    float AUGMENT_VAULTMASTER_COOLDOWN_3;                                             // 0x2134 (size: 0x4)
    float AUGMENT_VAULTMASTER_VAULT_SPEED_BONUS_MULTIPLIER;                           // 0x2138 (size: 0x4)
    float AUGMENT_VAULTMASTER_SPEED_BOOST_DURATION;                                   // 0x213C (size: 0x4)
    float AUGMENT_FAILMASTER_FAIL_CHANCE_DECREASE_1;                                  // 0x2140 (size: 0x4)
    float AUGMENT_FAILMASTER_FAIL_CHANCE_DECREASE_2;                                  // 0x2144 (size: 0x4)
    float AUGMENT_FAILMASTER_FAIL_CHANCE_DECREASE_3;                                  // 0x2148 (size: 0x4)
    float AUGMENT_LONEWOLF_MOVESPEED_BONUS_MULTIPLIER_1;                              // 0x214C (size: 0x4)
    float AUGMENT_LONEWOLF_MOVESPEED_BONUS_MULTIPLIER_2;                              // 0x2150 (size: 0x4)
    float AUGMENT_LONEWOLF_MOVESPEED_BONUS_MULTIPLIER_3;                              // 0x2154 (size: 0x4)
    float AUGMENT_LONEWOLF_MIN_RANGE;                                                 // 0x2158 (size: 0x4)
    float AUGMENT_INSPIRED_MAX_TOKENS_1;                                              // 0x215C (size: 0x4)
    float AUGMENT_INSPIRED_MAX_TOKENS_2;                                              // 0x2160 (size: 0x4)
    float AUGMENT_INSPIRED_MAX_TOKENS_3;                                              // 0x2164 (size: 0x4)
    float AUGMENT_SECONDWIND_INJURY_RECOVERY_SECS_1;                                  // 0x2168 (size: 0x4)
    float AUGMENT_SECONDWIND_INJURY_RECOVERY_SECS_2;                                  // 0x216C (size: 0x4)
    float AUGMENT_SECONDWIND_INJURY_RECOVERY_SECS_3;                                  // 0x2170 (size: 0x4)
    float AUGMENT_LETHALITY_LIFE_LOSS_BONUS_1;                                        // 0x2174 (size: 0x4)
    float AUGMENT_LETHALITY_LIFE_LOSS_BONUS_2;                                        // 0x2178 (size: 0x4)
    float AUGMENT_LETHALITY_LIFE_LOSS_BONUS_3;                                        // 0x217C (size: 0x4)
    float AUGMENT_RESOLVE_MIN_RECOVERY_AMOUNT_1;                                      // 0x2180 (size: 0x4)
    float AUGMENT_RESOLVE_MIN_RECOVERY_AMOUNT_2;                                      // 0x2184 (size: 0x4)
    float AUGMENT_RESOLVE_MIN_RECOVERY_AMOUNT_3;                                      // 0x2188 (size: 0x4)
    float AUGMENT_INVIGORATING_ADRENALINE_BOOST_SECS_1;                               // 0x218C (size: 0x4)
    float AUGMENT_INVIGORATING_ADRENALINE_BOOST_SECS_2;                               // 0x2190 (size: 0x4)
    float AUGMENT_INVIGORATING_ADRENALINE_BOOST_SECS_3;                               // 0x2194 (size: 0x4)
    float AUGMENT_AUGUR_EVIL_REVEAL_SECS_1;                                           // 0x2198 (size: 0x4)
    float AUGMENT_AUGUR_EVIL_REVEAL_SECS_2;                                           // 0x219C (size: 0x4)
    float AUGMENT_AUGUR_EVIL_REVEAL_SECS_3;                                           // 0x21A0 (size: 0x4)
    float AUGMENT_FEROCITY_RECOVERY_PLAYRATE_INCREASE_1;                              // 0x21A4 (size: 0x4)
    float AUGMENT_FEROCITY_RECOVERY_PLAYRATE_INCREASE_2;                              // 0x21A8 (size: 0x4)
    float AUGMENT_FEROCITY_RECOVERY_PLAYRATE_INCREASE_3;                              // 0x21AC (size: 0x4)
    float AUGMENT_GLUTTONY_FEAST_RAGE_BONUS_MULTIPLIER_INCREASE_1;                    // 0x21B0 (size: 0x4)
    float AUGMENT_GLUTTONY_FEAST_RAGE_BONUS_MULTIPLIER_INCREASE_2;                    // 0x21B4 (size: 0x4)
    float AUGMENT_GLUTTONY_FEAST_RAGE_BONUS_MULTIPLIER_INCREASE_3;                    // 0x21B8 (size: 0x4)
    float AUGMENT_VIGILANCE_CRAFT_FAIL_REVEAL_SECS_1;                                 // 0x21BC (size: 0x4)
    float AUGMENT_VIGILANCE_CRAFT_FAIL_REVEAL_SECS_2;                                 // 0x21C0 (size: 0x4)
    float AUGMENT_VIGILANCE_CRAFT_FAIL_REVEAL_SECS_3;                                 // 0x21C4 (size: 0x4)
    float AUGMENT_VIGILANCE_SKILLTEST_TIMER_BONUS_MULTIPLIER_1;                       // 0x21C8 (size: 0x4)
    float AUGMENT_VIGILANCE_SKILLTEST_TIMER_BONUS_MULTIPLIER_2;                       // 0x21CC (size: 0x4)
    float AUGMENT_VIGILANCE_SKILLTEST_TIMER_BONUS_MULTIPLIER_3;                       // 0x21D0 (size: 0x4)
    float AUGMENT_WRATH_DAMAGED_RAGE_LOSS_REDUCTION_1;                                // 0x21D4 (size: 0x4)
    float AUGMENT_WRATH_DAMAGED_RAGE_LOSS_REDUCTION_2;                                // 0x21D8 (size: 0x4)
    float AUGMENT_WRATH_DAMAGED_RAGE_LOSS_REDUCTION_3;                                // 0x21DC (size: 0x4)
    float AUGMENT_VENGEANCE_SPEED_BOOST_SECS_1;                                       // 0x21E0 (size: 0x4)
    float AUGMENT_VENGEANCE_SPEED_BOOST_SECS_2;                                       // 0x21E4 (size: 0x4)
    float AUGMENT_VENGEANCE_SPEED_BOOST_SECS_3;                                       // 0x21E8 (size: 0x4)
    float AUGMENT_VENGEANCE_SPEED_BONUS_MULTIPLIER;                                   // 0x21EC (size: 0x4)
    float AUGMENT_HIDESENSE_REVEAL_TIME_SECONDS;                                      // 0x21F0 (size: 0x4)
    float AUGMENT_HIDESENSE_REVEAL_DELAY_SECONDS_1;                                   // 0x21F4 (size: 0x4)
    float AUGMENT_HIDESENSE_REVEAL_DELAY_SECONDS_2;                                   // 0x21F8 (size: 0x4)
    float AUGMENT_HIDESENSE_REVEAL_DELAY_SECONDS_3;                                   // 0x21FC (size: 0x4)
    float AUGMENT_HIDESENSE_HIDE_PLAYRATE_BONUS_MULTIPLIER_1;                         // 0x2200 (size: 0x4)
    float AUGMENT_HIDESENSE_HIDE_PLAYRATE_BONUS_MULTIPLIER_2;                         // 0x2204 (size: 0x4)
    float AUGMENT_HIDESENSE_HIDE_PLAYRATE_BONUS_MULTIPLIER_3;                         // 0x2208 (size: 0x4)
    float AUGMENT_INCORPOREALMASTER_INCORPOREAL_SPEED_BONUS_MULTIPLIER_2;             // 0x220C (size: 0x4)
    float AUGMENT_INCORPOREALMASTER_INCORPOREAL_SPEED_BONUS_MULTIPLIER_3;             // 0x2210 (size: 0x4)
    float AUGMENT_INCORPOREALMASTER_ACCELERATION;                                     // 0x2214 (size: 0x4)
    float AUGMENT_HEALSENSE_RANGE_1;                                                  // 0x2218 (size: 0x4)
    float AUGMENT_HEALSENSE_RANGE_2;                                                  // 0x221C (size: 0x4)
    float AUGMENT_HEALSENSE_RANGE_3;                                                  // 0x2220 (size: 0x4)
    float AUGMENT_HEALSENSE_MIN_HEALING_TIME;                                         // 0x2224 (size: 0x4)
    float AUGMENT_FEASTSTEALTH_DURATION_1;                                            // 0x2228 (size: 0x4)
    float AUGMENT_FEASTSTEALTH_DURATION_2;                                            // 0x222C (size: 0x4)
    float AUGMENT_FEASTSTEALTH_DURATION_3;                                            // 0x2230 (size: 0x4)
    float AUGMENT_FEASTSTEALTH_COOLDOWN;                                              // 0x2234 (size: 0x4)
    float AUGMENT_FEASTDRAINESSENSE_LIFE_LOSS_PERCENT_PER_SECOND_1;                   // 0x2238 (size: 0x4)
    float AUGMENT_FEASTDRAINESSENSE_LIFE_LOSS_PERCENT_PER_SECOND_2;                   // 0x223C (size: 0x4)
    float AUGMENT_FEASTDRAINESSENSE_LIFE_LOSS_PERCENT_PER_SECOND_3;                   // 0x2240 (size: 0x4)
    float AUGMENT_RAGESPEED_MOVESPEED_BONUS_MULTIPLIER_1;                             // 0x2244 (size: 0x4)
    float AUGMENT_RAGESPEED_MOVESPEED_BONUS_MULTIPLIER_2;                             // 0x2248 (size: 0x4)
    float AUGMENT_RAGESPEED_MOVESPEED_BONUS_MULTIPLIER_3;                             // 0x224C (size: 0x4)
    float AUGMENT_RAGESPEED_ABILITY_COOLDOWN_PENALTY_MULTIPLIER_1;                    // 0x2250 (size: 0x4)
    float AUGMENT_RAGESPEED_ABILITY_COOLDOWN_PENALTY_MULTIPLIER_2;                    // 0x2254 (size: 0x4)
    float AUGMENT_RAGESPEED_ABILITY_COOLDOWN_PENALTY_MULTIPLIER_3;                    // 0x2258 (size: 0x4)
    float AUGMENT_KILLINHIBIT_INHIBIT_TIME_SECONDS_1;                                 // 0x225C (size: 0x4)
    float AUGMENT_KILLINHIBIT_INHIBIT_TIME_SECONDS_2;                                 // 0x2260 (size: 0x4)
    float AUGMENT_KILLINHIBIT_INHIBIT_TIME_SECONDS_3;                                 // 0x2264 (size: 0x4)
    float AUGMENT_KILLINHIBIT_COOLDOWN_SECONDS;                                       // 0x2268 (size: 0x4)
    float AUGMENT_EXTENDSUBDUED_TIME_BONUS_MULTIPLIER_1;                              // 0x226C (size: 0x4)
    float AUGMENT_EXTENDSUBDUED_TIME_BONUS_MULTIPLIER_2;                              // 0x2270 (size: 0x4)
    float AUGMENT_EXTENDSUBDUED_TIME_BONUS_MULTIPLIER_3;                              // 0x2274 (size: 0x4)
    float AUGMENT_EVILSHARDMASTER_CAPTURE_TIME_REDUCTION_SECONDS_1;                   // 0x2278 (size: 0x4)
    float AUGMENT_EVILSHARDMASTER_CAPTURE_TIME_REDUCTION_SECONDS_2;                   // 0x227C (size: 0x4)
    float AUGMENT_EVILSHARDMASTER_CAPTURE_TIME_REDUCTION_SECONDS_3;                   // 0x2280 (size: 0x4)
    float AUGMENT_EVILPICKUPUSEREVEAL_REVEAL_TIME_SECONDS_1;                          // 0x2284 (size: 0x4)
    float AUGMENT_EVILPICKUPUSEREVEAL_REVEAL_TIME_SECONDS_2;                          // 0x2288 (size: 0x4)
    float AUGMENT_EVILPICKUPUSEREVEAL_REVEAL_TIME_SECONDS_3;                          // 0x228C (size: 0x4)
    float AUGMENT_PRONEREVEAL_RANGE_1;                                                // 0x2290 (size: 0x4)
    float AUGMENT_PRONEREVEAL_RANGE_2;                                                // 0x2294 (size: 0x4)
    float AUGMENT_PRONEREVEAL_RANGE_3;                                                // 0x2298 (size: 0x4)
    int32 AUGMENT_CROWDREVEAL_MIN_OTHER_TEENS;                                        // 0x229C (size: 0x4)
    float AUGMENT_CROWDREVEAL_DURATION;                                               // 0x22A0 (size: 0x4)
    float AUGMENT_CROWDREVEAL_MIN_ACTIVATION_DISTANCE;                                // 0x22A4 (size: 0x4)
    float AUGMENT_CROWDREVEAL_TEEN_RANGE;                                             // 0x22A8 (size: 0x4)
    float AUGMENT_CROWDREVEAL_COOLDOWN_1;                                             // 0x22AC (size: 0x4)
    float AUGMENT_CROWDREVEAL_COOLDOWN_2;                                             // 0x22B0 (size: 0x4)
    float AUGMENT_CROWDREVEAL_COOLDOWN_3;                                             // 0x22B4 (size: 0x4)
    float AUGMENT_PICKUPDROP_COOLDOWN_SECONDS_1;                                      // 0x22B8 (size: 0x4)
    float AUGMENT_PICKUPDROP_COOLDOWN_SECONDS_2;                                      // 0x22BC (size: 0x4)
    float AUGMENT_PICKUPDROP_COOLDOWN_SECONDS_3;                                      // 0x22C0 (size: 0x4)
    float AUGMENT_SCREAMRANGE_RANGE_BONUS_MULTIPLIER_1;                               // 0x22C4 (size: 0x4)
    float AUGMENT_SCREAMRANGE_RANGE_BONUS_MULTIPLIER_2;                               // 0x22C8 (size: 0x4)
    float AUGMENT_SCREAMRANGE_RANGE_BONUS_MULTIPLIER_3;                               // 0x22CC (size: 0x4)
    float AUGMENT_RCTR_SPEEDANDCONSUMPTION_SPEED_BONUS;                               // 0x22D0 (size: 0x4)
    float AUGMENT_RCTR_SPEEDANDCONSUMPTION_CONSUMPTION_BONUS_MULTIPLIER;              // 0x22D4 (size: 0x4)
    float AUGMENT_RCTR_EXTRAHEALTH_SPEED_PENALTY;                                     // 0x22D8 (size: 0x4)
    float AUGMENT_RCTR_EXTRAHEALTH_EVIL_HIT_PERCENT_LOST;                             // 0x22DC (size: 0x4)
    float AUGMENT_RCTR_BEAMRANGE_RANGE_INCREASE;                                      // 0x22E0 (size: 0x4)
    float AUGMENT_RCTR_BEAMRANGE_EXPOSED_DISTANCE;                                    // 0x22E4 (size: 0x4)
    float AUGMENT_RCTR_REVEALTEENS_REVEAL_MAX_RANGE;                                  // 0x22E8 (size: 0x4)
    float AUGMENT_RCTR_REVEALTEENS_DEPLOY_TIME_BONUS_SECONDS;                         // 0x22EC (size: 0x4)
    float AUGMENT_RCTR_LONGDURATION_ENERGY_CONSUMPTION_MULTIPLIER;                    // 0x22F0 (size: 0x4)
    float AUGMENT_RYGN_FASTCRAFT_CRAFTSPEED_BONUS_MULTIPLIER;                         // 0x22F4 (size: 0x4)
    int32 AUGMENT_RYGN_SHOTBOUNCE_NUMBER_OF_BOUNCES;                                  // 0x22F8 (size: 0x4)
    float AUGMENT_RYGN_SPREADSHOT_WARMUPTIME_PENALTY;                                 // 0x22FC (size: 0x4)
    float AUGMENT_RYGN_SHOTBOUNCE_CRAFT_TIME_PENALTY_MULTIPLIER;                      // 0x2300 (size: 0x4)
    float AUGMENT_RYGN_SPREADSHOT_SHOOTING_ANGLE;                                     // 0x2304 (size: 0x4)
    float AUGMENT_RYGN_SPREADSHOT_PROJECTILE_NUMBER_OF_SHOTS;                         // 0x2308 (size: 0x4)
    float AUGMENT_RYGN_REVEALINGSHOTS_REVEAL_TIME;                                    // 0x230C (size: 0x4)
    float AUGMENT_RYGN_REVEALINGSHOTS_AMMO_PENALTY_MULTIPLIER;                        // 0x2310 (size: 0x4)
    float AUGMENT_RYGN_HEALTHRESTORE_PERCENT_PER_SHOT;                                // 0x2314 (size: 0x4)
    float AUGMENT_RYGN_HEALTHRESTORE_RANGE_REDUCTION_MULTIPLIER;                      // 0x2318 (size: 0x4)
    float AUGMENT_STAF_CHARGEREGEN_HEALTH_LOSS_PERCENT_PER_SECOND;                    // 0x231C (size: 0x4)
    float AUGMENT_STAF_CHARGEREGEN_MAX_CHARGE_PERCENT;                                // 0x2320 (size: 0x4)
    float AUGMENT_STAF_PRONEHEALTH_CHARGE_PERCENT_FROM_REVIVE;                        // 0x2324 (size: 0x4)
    float AUGMENT_STAF_PRONEHEALTH_CONSUMPTION_BONUS_MULTIPLIER;                      // 0x2328 (size: 0x4)
    float AUGMENT_STAF_INJUREONCRAFT_CHARGE_PERCENT_FROM_INJURY;                      // 0x232C (size: 0x4)
    float AUGMENT_STAF_CHARGEREVEAL_CRAFTTIME_BONUS_MULTIPLIER;                       // 0x2330 (size: 0x4)
    float AUGMENT_STAF_FASTHEAL_HEALSPEED_BONUS_MULTIPLIER;                           // 0x2334 (size: 0x4)
    float AUGMENT_MOLO_SPEEDBOOST_SPEED_BONUS_MULTIPLIER;                             // 0x2338 (size: 0x4)
    float AUGMENT_MOLO_SPEEDBOOST_DEBRIS_LIFE_REDUCTION_MULTIPLIER;                   // 0x233C (size: 0x4)
    float AUGMENT_MOLO_BOUNCETHROW_BOUNCINESS;                                        // 0x2340 (size: 0x4)
    int32 AUGMENT_MOLO_BOUNCETHROW_NUMBER_OF_BOUNCES;                                 // 0x2344 (size: 0x4)
    int32 AUGMENT_MOLO_EXTRAMOLOTOV_EXTRA_AMOUNT;                                     // 0x2348 (size: 0x4)
    float AUGMENT_MOLO_EXTRAMOLOTOV_CRAFT_SPEED_MULTIPLIER;                           // 0x234C (size: 0x4)
    float AUGMENT_MOLO_LONGBURN_POWER_REDUCTION_MULTIPLIER;                           // 0x2350 (size: 0x4)
    float AUGMENT_MOLO_LONGBURN_DEBRIS_LIFE_BONUS_MULTIPLIER;                         // 0x2354 (size: 0x4)
    float AUGMENT_MOLO_SLOWRECOVERY_SPEED_PENALTY_BONUS_MULTIPLIER;                   // 0x2358 (size: 0x4)
    float AUGMENT_MOLO_SLOWRECOVERY_EVIL_RECOVERY_PENALTY_SECONDS;                    // 0x235C (size: 0x4)
    float AUGMENT_MOLO_SLOWRECOVERY_WARMUP_TIME_BONUS;                                // 0x2360 (size: 0x4)
    float AUGMENT_MOLO_SPEEDBOOST_DURATION;                                           // 0x2364 (size: 0x4)
    float AUGMENT_FLTR_AMMOREGEN_PERCENT_PER_SECOND;                                  // 0x2368 (size: 0x4)
    float AUGMENT_FLTR_AMMOREGEN_CHARGE_CONSUMPTION_BONUS_MULTIPLIER;                 // 0x236C (size: 0x4)
    float AUGMENT_FLTR_INJUREDFREEFIRE_FREE_FIRE_TIME;                                // 0x2370 (size: 0x4)
    float AUGMENT_FLTR_INJUREDFREEFIRE_SHOW_OWNER_TIME;                               // 0x2374 (size: 0x4)
    float AUGMENT_FLTR_LONGRANGE_RANGE_BONUS_MULTIPLIER;                              // 0x2378 (size: 0x4)
    float AUGMENT_FLTR_LONGRANGE_WARMUP_TIME_BONUS;                                   // 0x237C (size: 0x4)
    float AUGMENT_FLTR_REDUCERAGE_RAGE_PERCENT_PER_SECOND;                            // 0x2380 (size: 0x4)
    float AUGMENT_FLTR_REDUCERAGE_CRAFT_SPEED_PENALTY_MULTIPLIER;                     // 0x2384 (size: 0x4)
    float AUGMENT_FLTR_FASTCRAFT_CRAFT_SPEED_BONUS_MULTIPLIER;                        // 0x2388 (size: 0x4)
    float AUGMENT_FLAMEMINE_EXPOSE_SUMMON_TIME_INCREASE_MULTIPLIER;                   // 0x238C (size: 0x4)
    int32 AUGMENT_FLAMEMINE_MULTI_MAX_MINES;                                          // 0x2390 (size: 0x4)
    float AUGMENT_FLAMEMINE_MULTI_FIRING_COST_INCREASE_MULTIPLIER;                    // 0x2394 (size: 0x4)
    float AUGMENT_FLAMEMINE_LONGDURATION_FIRING_COST_REDUCTION_MULTIPLIER;            // 0x2398 (size: 0x4)
    float AUGMENT_FLAMEMINE_LONGDURATION_CRAFT_TIME_INCREASE_MULTIPLIER;              // 0x239C (size: 0x4)
    float AUGMENT_FLAMEMINE_MOBILE_MOVESPEED;                                         // 0x23A0 (size: 0x4)
    float AUGMENT_FLAMEMINE_SIGHT_WARMUP_CHARGE_REDUCTION_BONUS_MULTIPLIER;           // 0x23A4 (size: 0x4)
    float AUGMENT_DSRD_SPEEDBOOST_TRAIL_DURATION_PENALTY_MULTIPLIER;                  // 0x23A8 (size: 0x4)
    float AUGMENT_DSRD_SPEEDBOOST_SPEED_BONUS_MULTIPLIER;                             // 0x23AC (size: 0x4)
    float AUGMENT_DSRD_SPEEDBOOST_DURATION;                                           // 0x23B0 (size: 0x4)
    float AUGMENT_DSRD_REVEALEVIL_TEEN_REVEAL_TIME;                                   // 0x23B4 (size: 0x4)
    float AUGMENT_DSRD_FASTCRAFT_CRAFTING_BONUS_MULTIPLIER;                           // 0x23B8 (size: 0x4)
    float AUGMENT_DSRD_PROJECTILELIFETIME_TRAIL_DURATION_BONUS_MULTIPLIER;            // 0x23BC (size: 0x4)
    float AUGMENT_DSRD_PROJECTILELIFETIME_SWING_TIME_BONUS_MULTIPLIER;                // 0x23C0 (size: 0x4)
    float AUGMENT_DSRD_REVEALEVIL_EVIL_REVEAL_TIME;                                   // 0x23C4 (size: 0x4)
    int32 AUGMENT_DSRD_EXTRASWINGS_AMMO_BONUS;                                        // 0x23C8 (size: 0x4)
    float AUGMENT_DSRD_EXTRASWINGS_CRAFT_PENALTY;                                     // 0x23CC (size: 0x4)
    float AUGMENT_PRCH_TELEPORT_CRAFTING_BONUS_MULTIPLIER;                            // 0x23D0 (size: 0x4)
    float AUGMENT_PRCH_TELEPORT_CHARGE_TIME;                                          // 0x23D4 (size: 0x4)
    float AUGMENT_PRCH_REVEAL_AURA_REVEAL_TIME;                                       // 0x23D8 (size: 0x4)
    float AUGMENT_PRCH_REVEAL_SPEED_PENALTY_BONUS_MULTIPLIER;                         // 0x23DC (size: 0x4)
    float AUGMENT_PRCH_LONGDURATION_SUMMONING_BONUS_SECONDS;                          // 0x23E0 (size: 0x4)
    float AUGMENT_PRCH_LONGDURATION_ENERGY_BONUS_MULTIPLIER;                          // 0x23E4 (size: 0x4)
    float AUGMENT_PRCH_FASTMOVEMENT_MAX_SPEED_BONUS_MULTIPLIER;                       // 0x23E8 (size: 0x4)
    float AUGMENT_PRCH_FASTMOVEMENT_CONSUMPTION_INCREASE_MULTIPLIER;                  // 0x23EC (size: 0x4)
    float AUGMENT_PRCH_SENSEEVIL_RANGE;                                               // 0x23F0 (size: 0x4)
    float AUGMENT_PRCH_SENSEEVIL_EXPLOSION_RADIUS_REDUCTION_MULTIPLIER;               // 0x23F4 (size: 0x4)
    float AUGMENT_TALI_SILENT_CHARGE_TIME_BONUS_MULTIPLIER;                           // 0x23F8 (size: 0x4)
    float AUGMENT_TALI_SILENT_CHARGE_VOLUME_REDUCTION_MULTIPLIER;                     // 0x23FC (size: 0x4)
    float AUGMENT_TALI_LIFECHARGE_HEALTH_LOSS_PERCENT_PER_SECOND;                     // 0x2400 (size: 0x4)
    float AUGMENT_TALI_LIFECHARGE_ABSORB_PERCENT_PER_SECOND;                          // 0x2404 (size: 0x4)
    float AUGMENT_TALI_LIFECHARGE_MAX_CHARGE_PERCENT;                                 // 0x2408 (size: 0x4)
    float AUGMENT_TALI_LONGRANGE_WARMUP_TIME_BONUS;                                   // 0x240C (size: 0x4)
    float AUGMENT_TALI_LONGRANGE_RANGE_BONUS_MULTIPLIER;                              // 0x2410 (size: 0x4)
    float AUGMENT_TALI_ABSORBREVEALED_ABSORB_BONUS_MULTIPLIER;                        // 0x2414 (size: 0x4)
    float AUGMENT_TALI_ABSORBREVEALED_CRAFT_SPEED_BONUS_MULTIPLIER;                   // 0x2418 (size: 0x4)
    float AUGMENT_TALI_RECHARGEABLE_CRAFT_SPEED_PENALTY_MULTIPLIER;                   // 0x241C (size: 0x4)
    float STICKER_MAX_PLACEMENT_DISTANCE_TEEN;                                        // 0x2420 (size: 0x4)
    float STICKER_MAX_PLACEMENT_DISTANCE_EVIL;                                        // 0x2424 (size: 0x4)
    float STICKER_MAX_PLACEMENT_COOLDOWN;                                             // 0x2428 (size: 0x4)
    int32 STICKER_MAX_PER_CHARACTER;                                                  // 0x242C (size: 0x4)
    float STICKER_LIFETIME_SECS;                                                      // 0x2430 (size: 0x4)
    FVector STICKER_BASE_SCALE;                                                       // 0x2434 (size: 0xC)
    FVector EVIL_STICKER_BASE_SCALE;                                                  // 0x2440 (size: 0xC)
    int32 MAX_VISIBLE_STATUS_EFFECTS;                                                 // 0x244C (size: 0x4)
    int32 MAX_VISIBLE_STATUS_EFFECT_TOKENS;                                           // 0x2450 (size: 0x4)
    FLinearColor STATUS_TILE_COLOR_POSITIVE;                                          // 0x2454 (size: 0x10)
    FLinearColor STATUS_TILE_COLOR_NEUTRAL;                                           // 0x2464 (size: 0x10)
    FLinearColor STATUS_TILE_COLOR_NEGATIVE;                                          // 0x2474 (size: 0x10)
    FLinearColor STATUS_TILE_COLOR_TIER_1;                                            // 0x2484 (size: 0x10)
    FLinearColor STATUS_TILE_COLOR_TIER_2;                                            // 0x2494 (size: 0x10)
    FLinearColor STATUS_TILE_COLOR_TIER_3;                                            // 0x24A4 (size: 0x10)
    FLinearColor STATUS_TILE_COLOR_ABILITY;                                           // 0x24B4 (size: 0x10)
    float CINEMATIC_CAMERA_SPEED_MULTIPLIER_MAX;                                      // 0x24C4 (size: 0x4)
    float CINEMATIC_CAMERA_DOF_FOCUS_PLANE_MAX;                                       // 0x24C8 (size: 0x4)
    float CINEMATIC_CAMERA_DOF_INTENSITY_MAX;                                         // 0x24CC (size: 0x4)
    float CINEMATIC_CAMERA_DPAD_INCREMENT_AMOUNT;                                     // 0x24D0 (size: 0x4)
    float CINEMATIC_CAMERA_BASE_FLY_SPEED;                                            // 0x24D4 (size: 0x4)
    float CINEMATIC_CAMERA_FAST_MODE_SPEED_MULTIPLIER;                                // 0x24D8 (size: 0x4)
    float CINEMATIC_CAMERA_ROLL_BASE_RATE;                                            // 0x24DC (size: 0x4)
    float CINEMATIC_CAMERA_CRANE_BASE_RATE;                                           // 0x24E0 (size: 0x4)
    float CINEMATIC_CAMERA_FOV_CHANGE_BASE_RATE;                                      // 0x24E4 (size: 0x4)
    float CINEMATIC_CAMERA_STICK_PRESS_THRESHOLD;                                     // 0x24E8 (size: 0x4)
    float CINEMATIC_CAMERA_ORBIT_ZOOM_SPEED;                                          // 0x24EC (size: 0x4)
    float CINEMATIC_CAMERA_MENU_CURSOR_COOLDOWN;                                      // 0x24F0 (size: 0x4)
    float CINEMATIC_CAMERA_LOCK_ON_SEARCH_RADIUS;                                     // 0x24F4 (size: 0x4)
    float MATCHMOD_POINTBOOST_MULTI_ALL_MULTIPLIER;                                   // 0x24F8 (size: 0x4)
    float MATCHMOD_POINTBOOST_SINGLE_ALL_MULTIPLIER;                                  // 0x24FC (size: 0x4)
    float MATCHMOD_POINTBOOST_SINGLE_INGENUITYPURSUIT_1_MULTIPLIER;                   // 0x2500 (size: 0x4)
    float MATCHMOD_POINTBOOST_SINGLE_COOPTORMENT_1_MULTIPLIER;                        // 0x2504 (size: 0x4)
    float MATCHMOD_POINTBOOST_SINGLE_WEAPONRYONSLAUGHT_1_MULTIPLIER;                  // 0x2508 (size: 0x4)
    float MATCHMOD_POINTBOOST_SINGLE_GRITDOMINANCE_1_MULTIPLIER;                      // 0x250C (size: 0x4)
    float MATCHMOD_POINTBOOST_SINGLE_INGENUITYPURSUIT_2_MULTIPLIER;                   // 0x2510 (size: 0x4)
    float MATCHMOD_POINTBOOST_SINGLE_COOPTORMENT_2_MULTIPLIER;                        // 0x2514 (size: 0x4)
    float MATCHMOD_POINTBOOST_SINGLE_WEAPONRYONSLAUGHT_2_MULTIPLIER;                  // 0x2518 (size: 0x4)
    float MATCHMOD_POINTBOOST_SINGLE_GRITDOMINANCE_2_MULTIPLIER;                      // 0x251C (size: 0x4)
    float MATCHMOD_RESURRECTMODIFIER_EXTRAHEALTH_BONUS_PERCENT;                       // 0x2520 (size: 0x4)
    float MATCHMOD_RESURRECTMODIFIER_LESSPUZZLES_NUM_PUZZLES;                         // 0x2524 (size: 0x4)
    int32 MATCHMOD_PICKUPSTARVE_PILLS_01_REMOVED_NUM;                                 // 0x2528 (size: 0x4)
    int32 MATCHMOD_PICKUPSTARVE_PILLS_02_REMOVED_NUM;                                 // 0x252C (size: 0x4)
    int32 MATCHMOD_PICKUPSTARVE_ADRENALINE_01_REMOVED_NUM;                            // 0x2530 (size: 0x4)
    int32 MATCHMOD_PICKUPSTARVE_ADRENALINE_02_REMOVED_NUM;                            // 0x2534 (size: 0x4)
    int32 MATCHMOD_PICKUPSTARVE_COMBO_01_PILLS_REMOVED_NUM;                           // 0x2538 (size: 0x4)
    int32 MATCHMOD_PICKUPSTARVE_COMBO_01_ADRENALINE_REMOVED_NUM;                      // 0x253C (size: 0x4)
    float MATCHMOD_SPAWNSTART_ALLTOGETHER_RADIUS;                                     // 0x2540 (size: 0x4)
    float MATCHMOD_TRANSFORMSTART_DELAY_BONUS_MULTIPLIER;                             // 0x2544 (size: 0x4)
    float MATCHMOD_TRANSFORMSTART_TRANSFORM_TIME_REDUCTION_MULTIPLIER;                // 0x2548 (size: 0x4)
    int32 MATCHMOD_SPAWNSTART_ALTOGETHER_MAX_TARGETS;                                 // 0x254C (size: 0x4)
    float SPAWNSTART_ALTOGETHER_DEBUG_CAPSULES;                                       // 0x2550 (size: 0x4)
    float EMOTE_COOLDOWN_DURATION;                                                    // 0x2554 (size: 0x4)
    float EMOTE_LOCK_IN_PLACE_TIME;                                                   // 0x2558 (size: 0x4)
    int32 EVILSPECTRAL_TARGET_SPAWN_DEFAULT_NUM;                                      // 0x255C (size: 0x4)
    float EVILSPECTRAL_ORBIT_RADIUS_DEFAULT;                                          // 0x2560 (size: 0x4)
    float EVILSPECTRAL_ORBIT_RADIUS_FEASTING;                                         // 0x2564 (size: 0x4)
    float EVILSPECTRAL_ORBIT_RADIUS_PING;                                             // 0x2568 (size: 0x4)
    float EVILSPECTRAL_VERTICALOFFSET_PING_MIN;                                       // 0x256C (size: 0x4)
    float EVILSPECTRAL_VERTICALOFFSET_PING_MAX;                                       // 0x2570 (size: 0x4)
    int32 EVILSPECTRAL_TARGET_SPAWN_NUM_PING;                                         // 0x2574 (size: 0x4)
    float MATCHEVENTQUEUE_TRAPATTACKAFTERTRIGGER_NUM_SECONDS;                         // 0x2578 (size: 0x4)
    float MATCHEVENTQUEUE_DOLLTELEPORTATTACK_NUM_SECONDS;                             // 0x257C (size: 0x4)
    float TPCHAR_ACTION1_BUFFER_DURATION;                                             // 0x2580 (size: 0x4)
    float SCOREPOPUP_LERPSPEED;                                                       // 0x2584 (size: 0x4)
    float SCOREPOPUP_DISTANCE_BETWEEN;                                                // 0x2588 (size: 0x4)
    float SCOREPOPUP_ADDITIONAL_MESSAGE_SCALE;                                        // 0x258C (size: 0x4)
    float SCOREPOPUP_SCALE_LERP_SPEED;                                                // 0x2590 (size: 0x4)
    float SCOREPOPUP_ADDITIONAL_MESSAGE_OPACITY;                                      // 0x2594 (size: 0x4)
    float SCOREPOPUP_TIME_BETWEEN_MESSAGES;                                           // 0x2598 (size: 0x4)
    float SCOREPOPUP_FULL_OPACITY_TIME;                                               // 0x259C (size: 0x4)
    float SCOREPOPUP_FADEOUT_TIME;                                                    // 0x25A0 (size: 0x4)
    float SCOREPOPUP_FADEIN_TIME;                                                     // 0x25A4 (size: 0x4)
    float PLAYERNAME_HOVER_TIME_BEFORE_FADE_IN;                                       // 0x25A8 (size: 0x4)
    float PLAYERNAME_FADE_IN_RATE;                                                    // 0x25AC (size: 0x4)
    FLinearColor STATION_BURN_COLOR;                                                  // 0x25B0 (size: 0x10)
    FLinearColor STATION_HOLY_COLOR;                                                  // 0x25C0 (size: 0x10)
    FLinearColor STATION_OCCULT_COLOR;                                                // 0x25D0 (size: 0x10)
    FLinearColor STATION_SHOCK_COLOR;                                                 // 0x25E0 (size: 0x10)
    FLinearColor STATION_UNUSED_COLOR;                                                // 0x25F0 (size: 0x10)
    FLinearColor STATION_USED_COLOR;                                                  // 0x2600 (size: 0x10)
    FLinearColor STATION_FAILED_COLOR;                                                // 0x2610 (size: 0x10)
    EWeaponTypeEnum STATION_DEFAULT_ELECTRIC_WEAPON;                                  // 0x2620 (size: 0x1)
    EWeaponTypeEnum STATION_DEFAULT_FLAME_WEAPON;                                     // 0x2621 (size: 0x1)
    EWeaponTypeEnum STATION_DEFAULT_OCCULT_WEAPON;                                    // 0x2622 (size: 0x1)
    EWeaponTypeEnum STATION_DEFAULT_HOLY_WEAPON;                                      // 0x2623 (size: 0x1)
    FLinearColor EVILDAMAGEPANEL_BURN_FILLED_COLOR;                                   // 0x2624 (size: 0x10)
    FLinearColor EVILDAMAGEPANEL_OCCULT_FILLED_COLOR;                                 // 0x2634 (size: 0x10)
    FLinearColor EVILDAMAGEPANEL_HOLY_FILLED_COLOR;                                   // 0x2644 (size: 0x10)
    FLinearColor EVILDAMAGEPANEL_ELECTRIC_FILLED_COLOR;                               // 0x2654 (size: 0x10)
    FLinearColor EVILDAMAGEPANEL_BURN_UNFILLED_COLOR;                                 // 0x2664 (size: 0x10)
    FLinearColor EVILDAMAGEPANEL_OCCULT_UNFILLED_COLOR;                               // 0x2674 (size: 0x10)
    FLinearColor EVILDAMAGEPANEL_HOLY_UNFILLED_COLOR;                                 // 0x2684 (size: 0x10)
    FLinearColor EVILDAMAGEPANEL_ELECTRIC_UNFILLED_COLOR;                             // 0x2694 (size: 0x10)
    float DARKSHARD_OVERLAY_ICON_LERP_SPEED_SECONDS;                                  // 0x26A4 (size: 0x4)
    float TPCHAR_BASE_STATIONVISION_RANGE;                                            // 0x26A8 (size: 0x4)
    float TPCHAR_BASE_MEDKIT_VISION_RANGE;                                            // 0x26AC (size: 0x4)
    float TPCHAR_BASE_RESURRECT_DEAD_VISION_RANGE;                                    // 0x26B0 (size: 0x4)
    FLinearColor PLAYER_1_COLOR;                                                      // 0x26B4 (size: 0x10)
    FLinearColor PLAYER_2_COLOR;                                                      // 0x26C4 (size: 0x10)
    FLinearColor PLAYER_3_COLOR;                                                      // 0x26D4 (size: 0x10)
    FLinearColor PLAYER_4_COLOR;                                                      // 0x26E4 (size: 0x10)
    FLinearColor PLAYER_5_COLOR;                                                      // 0x26F4 (size: 0x10)
    FLinearColor PLAYER_6_COLOR;                                                      // 0x2704 (size: 0x10)
    FLinearColor PLAYER_7_COLOR;                                                      // 0x2714 (size: 0x10)
    FLinearColor PLAYERCARD_HEALTH_DEFAULT_COLOR;                                     // 0x2724 (size: 0x10)
    FLinearColor PLAYERCARD_HEALTH_INJURED_COLOR;                                     // 0x2734 (size: 0x10)
    FLinearColor PLAYERCARD_HEALTH_PRONE_COLOR;                                       // 0x2744 (size: 0x10)
    FLinearColor PLAYERCARD_HEALTH_DEAD_COLOR;                                        // 0x2754 (size: 0x10)
    FLinearColor PLAYERCARD_HEALTH_HARDY_COLOR;                                       // 0x2764 (size: 0x10)
    FLinearColor PLAYERCARD_HEALTH_DEFAULT_BORDERCOLOR;                               // 0x2774 (size: 0x10)
    float PLAYERCARD_EVILHIT_SHAKE_TIME;                                              // 0x2784 (size: 0x4)
    float PLAYERCARD_EVILHIT_SHAKE_TRANSLATIONSCALE;                                  // 0x2788 (size: 0x4)
    float PLAYERCARD_EVILHIT_SHAKE_ENRAGED_MULTIPLIER;                                // 0x278C (size: 0x4)
    float PLAYERCARD_EVILHIT_SHAKE_ROTATIONSCALE;                                     // 0x2790 (size: 0x4)
    float PHYSICS_HAIR_MAX_WINDSPEED;                                                 // 0x2794 (size: 0x4)
    float PHYSICS_HAIR_ANGULAR_MULTIPLIER;                                            // 0x2798 (size: 0x4)
    float PHYSICS_HAIR_ANGULAR_DECAY;                                                 // 0x279C (size: 0x4)
    float PHYSICS_HAIR_MAX_DELTA;                                                     // 0x27A0 (size: 0x4)
    bool PHYSICS_HAIR_MATERIAL_ENABLED;                                               // 0x27A4 (size: 0x1)
    float SCORE_TEEN_REVIVE;                                                          // 0x27A8 (size: 0x4)
    float SCORE_TEEN_RESURRECT;                                                       // 0x27AC (size: 0x4)
    float SCORE_TEEN_HEAL;                                                            // 0x27B0 (size: 0x4)
    float SCORE_TEEN_WOUND_ASSIST;                                                    // 0x27B4 (size: 0x4)
    float SCORE_TEEN_STUN_ASSIST;                                                     // 0x27B8 (size: 0x4)
    float SCORE_TEEN_CHASE_ASSIST;                                                    // 0x27BC (size: 0x4)
    float SCORE_TEEN_GUARDIAN;                                                        // 0x27C0 (size: 0x4)
    float SCORE_TEEN_CENTERPIECE_COMPLETED_HOLIDAY;                                   // 0x27C4 (size: 0x4)
    float SCORE_TEEN_LIFEESSENCE_SMALL;                                               // 0x27C8 (size: 0x4)
    float SCORE_TEEN_LIFEESSENCE_LARGE;                                               // 0x27CC (size: 0x4)
    float SCORE_TEEN_SURVIVED_MATCH;                                                  // 0x27D0 (size: 0x4)
    float SCORE_TEEN_DAMAGE_AVOIDANCE_MAX_BONUS;                                      // 0x27D4 (size: 0x4)
    float SCORE_TEEN_SELF_HEAL;                                                       // 0x27D8 (size: 0x4)
    float SCORE_TEEN_CHASE_POINTS_PER_SECOND;                                         // 0x27DC (size: 0x4)
    float SCORE_TEEN_ESCAPED_CHASE;                                                   // 0x27E0 (size: 0x4)
    float SCORE_TEEN_PING_RESURRECT;                                                  // 0x27E4 (size: 0x4)
    float GAME_SCORE_EASTER_TEEN_HUNT_COMPLETED;                                      // 0x27E8 (size: 0x4)
    float SCORE_TEEN_PERFECT_SKILL;                                                   // 0x27EC (size: 0x4)
    float SCORE_TEEN_PASS_SKILL;                                                      // 0x27F0 (size: 0x4)
    float SCORE_TEEN_FIND_ITEM;                                                       // 0x27F4 (size: 0x4)
    float SCORE_TEEN_TRICK_OR_TREAT;                                                  // 0x27F8 (size: 0x4)
    float SCORE_TEEN_EVIL_TRIP_NOISEMAKER;                                            // 0x27FC (size: 0x4)
    float SCORE_TEEN_DISARM_DOLLMASTER_TRAP;                                          // 0x2800 (size: 0x4)
    float SCORE_TEEN_USED_PILLS;                                                      // 0x2804 (size: 0x4)
    float SCORE_TEEN_USED_ADRENALINE;                                                 // 0x2808 (size: 0x4)
    float SCORE_TEEN_USED_WALKIE;                                                     // 0x280C (size: 0x4)
    float SCORE_TEEN_USED_SMOKEBOMB;                                                  // 0x2810 (size: 0x4)
    float SCORE_TEEN_SHARD_ACTIVATED;                                                 // 0x2814 (size: 0x4)
    float SCORE_TEEN_SHARD_ACTIVATED_ASSIST;                                          // 0x2818 (size: 0x4)
    float SCORE_TEEN_SEARCHED_PRESENT_HOLIDAY;                                        // 0x281C (size: 0x4)
    float SCORE_TEEN_USED_ORNAMENT_HOLIDAY;                                           // 0x2820 (size: 0x4)
    float SCORE_TEEN_HOLIDAY_USED_TREAT;                                              // 0x2824 (size: 0x4)
    float GAME_SCORE_EASTER_SEARCHED_EVENT;                                           // 0x2828 (size: 0x4)
    float SCORE_TEEN_CRAFTING_POINTS_PER_SECOND;                                      // 0x282C (size: 0x4)
    float SCORE_TEEN_WOUND_EVIL;                                                      // 0x2830 (size: 0x4)
    float SCORE_TEEN_STUN_EVIL;                                                       // 0x2834 (size: 0x4)
    float SCORE_TEEN_KILL_EVIL;                                                       // 0x2838 (size: 0x4)
    float SCORE_TEEN_DESTROY_MINION;                                                  // 0x283C (size: 0x4)
    float SCORE_TEEN_DAMAGED_EVIL;                                                    // 0x2840 (size: 0x4)
    float SCORE_TEEN_HARRIED_EVIL;                                                    // 0x2844 (size: 0x4)
    float SCORE_TEEN_TOAD_ARMOR_BROKEN;                                               // 0x2848 (size: 0x4)
    float SCORE_TEEN_TALISMAN_FULL_CHARGE;                                            // 0x284C (size: 0x4)
    float SCORE_TEEN_HOLYSTAFF_FULL_CHARGE;                                           // 0x2850 (size: 0x4)
    float SCORE_TEEN_STATICSHIELD_FULL_CHARGE;                                        // 0x2854 (size: 0x4)
    float SCORE_EVIL_INJURES_PLAYER;                                                  // 0x2858 (size: 0x4)
    float SCORE_EVIL_KNOCKDOWN_TEEN;                                                  // 0x285C (size: 0x4)
    float SCORE_EVIL_KILLS_PLAYER;                                                    // 0x2860 (size: 0x4)
    float SCORE_EVIL_REVENGE_HIT;                                                     // 0x2864 (size: 0x4)
    float SCORE_EVIL_CHASE_COMPLETED;                                                 // 0x2868 (size: 0x4)
    float SCORE_EVIL_FOUND_HIDING_TEEN;                                               // 0x286C (size: 0x4)
    float SCORE_EVIL_CHASE_POINTS_PER_SECOND;                                         // 0x2870 (size: 0x4)
    float SCORE_EVIL_ATTACKED_PRESENT_HOLIDAY;                                        // 0x2874 (size: 0x4)
    float SCORE_EVIL_USED_ORNAMENT_HOLIDAY;                                           // 0x2878 (size: 0x4)
    float SCORE_EVIL_ENERGY_COLLECTED;                                                // 0x287C (size: 0x4)
    float GAME_SCORE_EASTER_EVENT_ATTACKED;                                           // 0x2880 (size: 0x4)
    float SCORE_EVIL_KNOCKDOWN_WITH_RAGE;                                             // 0x2884 (size: 0x4)
    float SCORE_EVIL_SHARD_ACTIVATED;                                                 // 0x2888 (size: 0x4)
    float SCORE_EVIL_POINTS_PER_WOUND_AVOIDED;                                        // 0x288C (size: 0x4)
    float SCORE_EVIL_HIT_ARMED_TEEN;                                                  // 0x2890 (size: 0x4)
    float SCORE_EVIL_DESTROYS_COPTER;                                                 // 0x2894 (size: 0x4)
    float SCORE_EVIL_HIT_VENDINGMACHINE;                                              // 0x2898 (size: 0x4)
    float SCORE_EVIL_EVENT_ATTACKED_HALLOWEEN_PUMPKIN;                                // 0x289C (size: 0x4)
    float SCORE_EVIL_CENTERPIECE_COMPLETED_HOLIDAY;                                   // 0x28A0 (size: 0x4)
    float GAME_SCORE_EASTER_EVIL_HUNT_COMPLETED;                                      // 0x28A4 (size: 0x4)
    float SCORE_EVIL_CREATE_EFFIGY;                                                   // 0x28A8 (size: 0x4)
    float SCORE_WEREWOLF_HOWL_HIT;                                                    // 0x28AC (size: 0x4)
    float SCORE_WEREWOLF_BERSERK_HIT;                                                 // 0x28B0 (size: 0x4)
    float SCORE_WEREWOLF_SENSE_HIT;                                                   // 0x28B4 (size: 0x4)
    float SCORE_DOLLMASTER_TRAP_TRIGGER;                                              // 0x28B8 (size: 0x4)
    float SCORE_DOLLMASTER_DOLL_HIT;                                                  // 0x28BC (size: 0x4)
    float SCORE_DOLLMASTER_DOLL_LEAP_ATTACK;                                          // 0x28C0 (size: 0x4)
    float SCORE_DOLLMASTER_TELEPORT_ESCAPE;                                           // 0x28C4 (size: 0x4)
    float SCORE_DOLLMASTER_TELEPORT_ATTACK;                                           // 0x28C8 (size: 0x4)
    float SCORE_TOAD_ECHOLOCATION_ATTACK;                                             // 0x28CC (size: 0x4)
    float SCORE_TOAD_ARMOR_ATTACK;                                                    // 0x28D0 (size: 0x4)
    float SCORE_TOAD_LEAP_ATTACK;                                                     // 0x28D4 (size: 0x4)
    float SCORE_ERADICATOR_SCAN_HIT;                                                  // 0x28D8 (size: 0x4)
    float SCORE_ERADICATOR_ELECTROCUTED_HIT;                                          // 0x28DC (size: 0x4)
    float SCORE_ERADICATOR_TEEN_ELECTROCUTED;                                         // 0x28E0 (size: 0x4)
    float SCORE_ERADICATOR_TEEN_ELECTROCUTED_EXTRA_TEEN_BONUS;                        // 0x28E4 (size: 0x4)
    float SCORE_ERADICATOR_VEHICLEMODE_HIT;                                           // 0x28E8 (size: 0x4)
    int32 WEAPONXP_MAX_POINTS_PER_MATCH;                                              // 0x28EC (size: 0x4)
    int32 WEAPONXP_POINTS_PER_CRAFT_PERCENT;                                          // 0x28F0 (size: 0x4)
    int32 WEAPONXP_POINTS_CRAFT_WEAPON;                                               // 0x28F4 (size: 0x4)
    int32 WEAPONXP_POINTS_PER_CHARGE_PERCENT;                                         // 0x28F8 (size: 0x4)
    int32 WEAPONXP_POINTS_PER_REMOTECHAR_SEC;                                         // 0x28FC (size: 0x4)
    int32 WEAPONXP_POINTS_PER_DAMAGE_EVIL_SEC;                                        // 0x2900 (size: 0x4)
    int32 WEAPONXP_POINTS_TOAD_ARMOR_BREAK;                                           // 0x2904 (size: 0x4)
    int32 WEAPONXP_POINTS_DESTROY_MINION;                                             // 0x2908 (size: 0x4)
    int32 WEAPONXP_POINTS_STUN_EVIL;                                                  // 0x290C (size: 0x4)
    int32 WEAPONXP_POINTS_WOUND_EVIL;                                                 // 0x2910 (size: 0x4)
    int32 WEAPONXP_POINTS_ASSIST_TEEN;                                                // 0x2914 (size: 0x4)
    float PROPS_IMPACT_SOUND_INTENSITY_HEAVYBUMP;                                     // 0x2918 (size: 0x4)
    float PROPS_IMPACT_SOUND_INTENSITY_LIGHTBUMP;                                     // 0x291C (size: 0x4)
    float PROPS_IMPACT_SOUND_INTENSITY_KICK;                                          // 0x2920 (size: 0x4)
    float PROP_STABILIZATION_MULTIPLIER;                                              // 0x2924 (size: 0x4)
    float PROP_SLEEP_MULTIPLIER;                                                      // 0x2928 (size: 0x4)
    float STORE_TILE_SLIDESHOW_TIME_PER_SLIDE;                                        // 0x292C (size: 0x4)
    float STORE_BASE_FP_PER_USD;                                                      // 0x2930 (size: 0x4)
    FColor STORE_PRIZE_PACK_TILE_BACKGROUND;                                          // 0x2934 (size: 0x4)
    int32 STORE_PRIZE_PACK_TILE_SPACER_SIZE;                                          // 0x2938 (size: 0x4)
    bool FOOTSTEP_FX_SYSTEM_ENABLED;                                                  // 0x293C (size: 0x1)
    FLinearColor HIDEPOINT_GLINT_COLOR;                                               // 0x2940 (size: 0x10)
    float HIDEPOINT_ROOTMOTION_MINIMUM_FORWARD_TRANSLATION;                           // 0x2950 (size: 0x4)
    float HIDEPOINT_TIME_HIDING_UNTIL_SUCCESSFULLY_AVOIDED_FOR_STATS;                 // 0x2954 (size: 0x4)
    float MET_CNT_HITTEENSHORTLYAFTERTRANSFORM_SECONDS;                               // 0x2958 (size: 0x4)
    float MET_CNT_HITTEENSHORTLYAFTERFAILEDSTATION_SECONDS;                           // 0x295C (size: 0x4)
    float MET_CNT_HITTEENSHORTLYAFTERRETURN_SECONDS;                                  // 0x2960 (size: 0x4)
    int32 MET_CNT_SCREAMAFFECTSMANY_TEENS_REQUIRED;                                   // 0x2964 (size: 0x4)
    float MET_CNT_REVENGEHITTEEN_MAX_TIME;                                            // 0x2968 (size: 0x4)
    FLinearColor DAMAGE_INDICATOR_COLOR_BURN;                                         // 0x296C (size: 0x10)
    FLinearColor DAMAGE_INDICATOR_COLOR_SHOCK;                                        // 0x297C (size: 0x10)
    FLinearColor DAMAGE_INDICATOR_COLOR_OCCULT;                                       // 0x298C (size: 0x10)
    FLinearColor DAMAGE_INDICATOR_COLOR_HOLY;                                         // 0x299C (size: 0x10)
    float SHOW_ABILITY_TIP_TIMER;                                                     // 0x29AC (size: 0x4)
    float OBSERVER_TP_CAMERA_ROTATION_LAG;                                            // 0x29B0 (size: 0x4)
    float OBSERVER_FP_CAMERA_ROTATION_LAG;                                            // 0x29B4 (size: 0x4)
    bool AI_CAMERA_BOOM_USECONTROLROTATION;                                           // 0x29B8 (size: 0x1)
    int32 AI_BEST_TARGET_LOW_BIAS;                                                    // 0x29BC (size: 0x4)
    int32 AI_BEST_TARGET_MEDIUM_BIAS;                                                 // 0x29C0 (size: 0x4)
    int32 AI_BEST_TARGET_HIGH_BIAS;                                                   // 0x29C4 (size: 0x4)
    float AI_TEEN_HITS_IMPORTANCE_MULTIPLIER;                                         // 0x29C8 (size: 0x4)
    float AI_TIME_SPENT_CHASING_DECAY_MULTIPLIER;                                     // 0x29CC (size: 0x4)
    float AI_MIN_TIME_SPENT_CHASING_BEFORE_TARGET_CHANGE;                             // 0x29D0 (size: 0x4)
    float AI_PATROL_UTILITY_SCORE_ULTRA_HIGH;                                         // 0x29D4 (size: 0x4)
    float AI_PATROL_UTILITY_SCORE_HIGH;                                               // 0x29D8 (size: 0x4)
    float AI_PATROL_UTILITY_SCORE_MED;                                                // 0x29DC (size: 0x4)
    float AI_PATROL_UTILITY_SCORE_LOW;                                                // 0x29E0 (size: 0x4)
    float AI_PATROL_UTILITY_SCORE_ZERO;                                               // 0x29E4 (size: 0x4)
    float AI_PATROL_TEEN_VISITED_COOLDOWN;                                            // 0x29E8 (size: 0x4)
    float AI_PATROL_TEEN_PRONE_VALID_TIME;                                            // 0x29EC (size: 0x4)
    float AI_PATROL_TEEN_SEARCHING_DISTANCE_LOWERBOUND;                               // 0x29F0 (size: 0x4)
    float AI_PATROL_TEEN_SEARCHING_DISTANCE_UPPERBOUND;                               // 0x29F4 (size: 0x4)
    float AI_PATROL_STATION_VISITED_COOLDOWN;                                         // 0x29F8 (size: 0x4)
    float AI_PATROL_STATION_FAILED_DURATION;                                          // 0x29FC (size: 0x4)
    float AI_PATROL_STATION_SEARCHING_DISTANCE_LOWERBOUND;                            // 0x2A00 (size: 0x4)
    float AI_PATROL_STATION_SEARCHING_DISTANCE_UPPERBOUND;                            // 0x2A04 (size: 0x4)
    float AI_PATROL_DARKSHARD_VISITED_COOLDOWN;                                       // 0x2A08 (size: 0x4)
    float AI_PATROL_MEDKIT_VISITED_COOLDOWN;                                          // 0x2A0C (size: 0x4)
    float AI_PATROL_MEDKIT_SEARCHING_DISTANCE_LOWERBOUND;                             // 0x2A10 (size: 0x4)
    float AI_PATROL_MEDKIT_SEARCHING_DISTANCE_UPPERBOUND;                             // 0x2A14 (size: 0x4)
    bool AI_DEBUG_NOHIT;                                                              // 0x2A18 (size: 0x1)
    bool AI_DEBUG_NOSEE;                                                              // 0x2A19 (size: 0x1)
    bool AI_DEBUG_NOHEAR;                                                             // 0x2A1A (size: 0x1)
    bool AI_DEBUG_LOG_NOISE_EVENTS;                                                   // 0x2A1B (size: 0x1)
    bool AI_DEBUG_LOG_BEHAVIOR;                                                       // 0x2A1C (size: 0x1)
    float AI_TIME_BEFORE_TRITON_UPDATE;                                               // 0x2A20 (size: 0x4)
    float BASECHAR_DISTANCE_THRESHOLD_BEFORE_TRITON_UPDATE;                           // 0x2A24 (size: 0x4)
    float AI_INITIAL_HEARING_ACCURACY;                                                // 0x2A28 (size: 0x4)
    float AI_HEARING_ACCURACY_DECREASE_PER_DIFFICULTY_LEVEL;                          // 0x2A2C (size: 0x4)
    float AI_EVIL_ADDITIONAL_SPACING_BUFFER;                                          // 0x2A30 (size: 0x4)
    float AI_EVIL_MAX_DAMAGE_RANGE_AWARENESS;                                         // 0x2A34 (size: 0x4)
    float AI_EVIL_ROTATION_RATE;                                                      // 0x2A38 (size: 0x4)
    float AMMO_PERCENTAGE_TO_DISCARD_WEAPON;                                          // 0x2A3C (size: 0x4)
    float PARCHMENT_CHARGE_REDUCTION_ONHIT;                                           // 0x2A40 (size: 0x4)
    float COPTER_CHARGE_REDUCTION_ONHIT;                                              // 0x2A44 (size: 0x4)
    float STAT_CHARGE_REDUCTION_ONHIT;                                                // 0x2A48 (size: 0x4)
    int32 SURVIVAL_DOLL_ROUND;                                                        // 0x2A4C (size: 0x4)

    class UGameConstants* GetDefaultGameConstants();
}; // Size: 0x2A50

class UGameInfoInstance : public UGameInstance
{
    FMatchSummaryInfoData mMatchSummaryInfoData;                                      // 0x01D8 (size: 0x80)
    bool mbForceTritonOff;                                                            // 0x0258 (size: 0x1)
    bool mbIsReturningToFEnd;                                                         // 0x0259 (size: 0x1)
    TArray<FString> mVoiceChatParticipants;                                           // 0x0288 (size: 0x10)
    FString mPartyVoiceChatId;                                                        // 0x0298 (size: 0x10)
    FString mLobbyVoiceChatId;                                                        // 0x02A8 (size: 0x10)
    class ULobbyManager* mpLobbyManager;                                              // 0x02C0 (size: 0x8)
    class UTipsManager* mpTipsManager;                                                // 0x02C8 (size: 0x8)
    FString mErrorString;                                                             // 0x02D0 (size: 0x10)
    class UBackendManager* mBackendManagerForHost;                                    // 0x0330 (size: 0x8)
    class UBackendQueueManager* mpBackendQueueManager;                                // 0x0338 (size: 0x8)
    class ULoadoutManager* mLoadoutManagerForHost;                                    // 0x0340 (size: 0x8)
    class ULoadoutManager* mLoadoutManagerForClient;                                  // 0x0348 (size: 0x8)
    class USeasonPassManager* mpSeasonPassManager;                                    // 0x0350 (size: 0x8)
    class UPatchNotesManager* mpPatchNotesManager;                                    // 0x0358 (size: 0x8)
    class UServerNotificationManager* mpServerNotificationManager;                    // 0x0360 (size: 0x8)
    class USeasonalEventManager* mpSeasonalEventManager;                              // 0x0368 (size: 0x8)
    bool mbShowEndOfRound;                                                            // 0x0370 (size: 0x1)
    class UDataTable* mpAudioMetaData;                                                // 0x0390 (size: 0x8)
    class UNavWidgetManager* mpNavWidgetManager;                                      // 0x0398 (size: 0x8)
    class UInputManager* mpInputManager;                                              // 0x03A0 (size: 0x8)
    class UGuideSystem* mpGuideSystem;                                                // 0x03A8 (size: 0x8)
    class UModalManager* mpModalManager;                                              // 0x03B0 (size: 0x8)
    class UGameScriptingManager* mpGameScriptingManager;                              // 0x03B8 (size: 0x8)
    class USocialManager* mpSocialManager;                                            // 0x03C0 (size: 0x8)
    class USmokeTestEngine* mpSmokeTestEngine;                                        // 0x03C8 (size: 0x8)
    class UPlayerSaveGame* mpPlayerSaveGame;                                          // 0x03D0 (size: 0x8)
    class UPlayerJourneyDataSave* mpPlayerJourneyDataSave;                            // 0x03D8 (size: 0x8)
    class UNewFlagTracker* mpNewFlagTracker;                                          // 0x03E0 (size: 0x8)
    class UHUDLoadingScreenWidget* mpLoadingScreenWidget;                             // 0x03E8 (size: 0x8)
    class UHUDWatermarkWidget* mpWatermarkWidget;                                     // 0x03F0 (size: 0x8)
    TSubclassOf<class UHUDWatermarkWidget> mHUDWatermarkWidgetClass;                  // 0x03F8 (size: 0x8)
    class UToastWidget* mpToastWidget;                                                // 0x0400 (size: 0x8)
    TSubclassOf<class UToastWidget> mToastWidgetClass;                                // 0x0408 (size: 0x8)
    bool mbWaitingToStartReplay;                                                      // 0x0410 (size: 0x1)
    FReplayInfo mQueuedReplay;                                                        // 0x0418 (size: 0x30)
    int32 mNumFEVisits;                                                               // 0x0448 (size: 0x4)
    bool mUploadPlayerSettings;                                                       // 0x044C (size: 0x1)
    class UDbItemDatabase* mpDbItemDatabase;                                          // 0x0450 (size: 0x8)
    class UPlotTwistManager* mpPlotTwistManager;                                      // 0x0458 (size: 0x8)
    class UAnalyticsManager* mpAnalyticsManager;                                      // 0x0460 (size: 0x8)
    class UJourneyManager* mpJourneyManager;                                          // 0x0468 (size: 0x8)
    class UMovieManager* mpMovieManager;                                              // 0x0470 (size: 0x8)
    class URewardManager* mpRewardManager;                                            // 0x0478 (size: 0x8)
    class UCharacterTemplateManager* mpCharacterTemplateManager;                      // 0x0480 (size: 0x8)
    class UStoreManager* mpStoreManager;                                              // 0x0488 (size: 0x8)
    TSubclassOf<class UHUDLoadingScreenWidget> mHUDLoadingScreenWidgetClass;          // 0x0490 (size: 0x8)
    class UGameLiftManagerForClient* mpGameLiftManagerForClient;                      // 0x0498 (size: 0x8)
    class UGameLiftManagerForServer* mpGameLiftManagerForServer;                      // 0x04A0 (size: 0x8)
    class UGameLiftRegionManager* mpGameLiftRegionManager;                            // 0x04A8 (size: 0x8)
    class UMatchmakingNotificationManager* mpMatchmakingNotificationManager;          // 0x04B0 (size: 0x8)
    class UMatchmakingNotificationPeer* mpMatchmakingNotificationPeer;                // 0x04B8 (size: 0x8)
    class USimpleProfilerManager* mpSimpleProfilerManager;                            // 0x04C0 (size: 0x8)
    class UDiscordManager* mpDiscordManager;                                          // 0x04C8 (size: 0x8)

    void UpdateStartReplay();
    void UpdateSettingsVersionNumber();
    void UpdateReturnToFrontEnd();
    void UpdatePushToTalk();
    void ShowPrizesScreen(ELevelType CurrentLevel, ESubLevelType currentSubLevel, ECharacterType currentCharacterType);
    void ShowLoadingScreen(ELevelType CurrentLevel, ESubLevelType currentSubLevel, ECharacterType currentCharacterType);
    void SetVoiceChatOutputVolume(float Val);
    void SetVoiceChatOutputDevice(FString DeviceID);
    void SetVoiceChatMuteOnUnfocused(bool bNewValue);
    void SetVoiceChatMode(EVoiceChatMode voiceChatMode);
    void SetVoiceChatInputVolume(float Val);
    void SetVoiceChatInputDevice(FString DeviceID);
    void SetSaveFileCreated();
    void SetPartyVoiceChatId(FString roomName);
    void SetLobbyVoiceChatId(FString roomName);
    void SetForceTritonOff(bool bSet);
    void SetErrorString(FString str);
    void SetAudioOutputDevice(FString DeviceID);
    void RemoveVoiceChatParticipantFromList(FString UniqueId);
    void OnVoiceChatPlayerTalkingUpdate(FString ChannelName, FString PlayerName, bool bIsTalking);
    void OnVoiceChatPlayerRemoved(FString ChannelName, FString PlayerName);
    void OnVoiceChatPlayerAdded(FString ChannelName, FString PlayerName);
    void OnVoiceChatChannelJoined(FString ChannelName);
    void OnSettingsVersionNumberIncremented(uint32 newVersionNumber);
    void OnPreExit();
    void OnNetworkErrorConfirm();
    void OnInputBindingChanged();
    FString NetErrorToString(TEnumAsByte<ENetworkFailure::Type> FailureType);
    bool IsWorldAudible();
    bool IsSuspended();
    bool IsSaveFileCreated();
    bool IsSameBrandOfServer(FString aServerName);
    bool IsHoldingPushToTalk();
    bool IsForceTritonOff();
    bool IsCustomGameMode();
    void IncrementNumFEVisits();
    void HideLoadingScreen();
    bool HasFocus();
    TArray<FString> GetVoiceChatParticipantsList();
    bool GetTutorialModeActive();
    class UTipsManager* GetTipsManager();
    class UStoreManager* GetStoreManager();
    class USocialManager* GetSocialManager();
    class USimpleProfilerManager* GetSimpleProfilerManager();
    class UServerNotificationManager* GetServerNotificationManager();
    FString GetServerName();
    ESubLevelType GetSelectedSubLevelType();
    class USeasonPassManager* GetSeasonPassManager();
    class USeasonalEventManager* GetSeasonalEventManager();
    class URewardManager* GetRewardManager();
    class UPlotTwistManager* GetPlotTwistManager();
    FString GetPlayerSettingsSaveName();
    class UPlayerSaveGame* GetPlayerSaveGame();
    class UPatchNotesManager* GetPatchNotesManager();
    FString GetPartyVoiceChatId();
    int32 GetNumFEVisits();
    class UNewFlagTracker* GetNewFlagTracker();
    class UNavWidgetManager* GetNavWidgetManager();
    class UMovieManager* GetMovieManager();
    class UMatchmakingNotificationPeer* GetMatchmakingNotificationPeer();
    class UMatchmakingNotificationManager* GetMatchmakingNotificationManager();
    FString GetLobbyVoiceChatId();
    class ULobbyManager* GetLobbyManager();
    class UHUDLoadingScreenWidget* GetLoadingScreen();
    class UJourneyManager* GetJourneyManager();
    class UGameScriptingManager* GetGameScriptingManager();
    class UGameLiftRegionManager* GetGameLiftRegionManager();
    class UGameLiftManagerForServer* GetGameLiftManagerForServer();
    class UGameLiftManagerForClient* GetGameLiftManagerForClient();
    FString GetErrorString();
    class UDiscordManager* GetDiscordManager();
    class UDbItemDatabase* GetDbItemDatabase();
    class UCharacterTemplateManager* GetCharacterTemplateManager();
    FString GetChannelString(bool bParty);
    class UBackendQueueManager* GetBackendQueueManager();
    class UAnalyticsManager* GetAnalyticsManager();
    void DoVoiceChatLogin();
    void DoTryToQuitTheApplication();
    void DisplayErrorMessage(FString errorMessage);
    void CreateNewSaveFile();
    void ClearVoiceChatParticipantsList();
    void ApplySoundSettings();
    void ApplyLanguage();
    void AddVoiceChatParticipantToList(FString UniqueId);
}; // Size: 0x6E8

class UGameLiftManagerForClient : public UObject
{

    class UGameLiftManagerForClient* GetGameLiftManagerForClientInstance(class UObject* pWorldContextObject);
}; // Size: 0x320

class UGameLiftManagerForServer : public UObject
{

    class UGameLiftManagerForServer* GetGameLiftManagerForServerInstance(class UObject* pWorldContextObject);
}; // Size: 0x28

class UGameLiftRegionManager : public UObject
{

    class UGameLiftRegionManager* GetGameLiftRegionManagerInstance(class UObject* pWorldContextObject);
}; // Size: 0x48

class UGameLiftUtils : public UObject
{
}; // Size: 0x28

class UGameModeDataAsset : public UPrimaryDataAsset
{
    FText mDisplayName;                                                               // 0x0030 (size: 0x18)
    FText mDescription;                                                               // 0x0048 (size: 0x18)
    FSoftObjectPath mGameModePath;                                                    // 0x0060 (size: 0x18)
    class UTexture2D* mpThumbnail;                                                    // 0x0078 (size: 0x8)
    bool mbOverrideSkipToHuntStage;                                                   // 0x0080 (size: 0x1)
    bool mbShouldSkipToHuntStage;                                                     // 0x0081 (size: 0x1)
    bool mbOverridePreferredFaction;                                                  // 0x0082 (size: 0x1)
    EFaction mPlayerPreferredFaction;                                                 // 0x0083 (size: 0x1)
    FString mGameModeClassFilePath;                                                   // 0x0088 (size: 0x10)

    FString GetGameModeFilePath();
    void GenerateClassPath();
}; // Size: 0x98

class UGameModeOverlayWidget : public UBaseOverlay
{
    TMap<int32, UTexture2D*> SignalTextures;                                          // 0x0280 (size: 0x50)
    class UWidgetSwitcher* mpWidgetSwitcher;                                          // 0x02D0 (size: 0x8)
    class UOverlay* mpGameModeOverlay;                                                // 0x02D8 (size: 0x8)
    class UOverlay* mpCustomGameOverlay;                                              // 0x02E0 (size: 0x8)
    class UOverlay* mpCodeEntryOverlay;                                               // 0x02E8 (size: 0x8)
    class UOverlay* mpFactionSettingsOverlay;                                         // 0x02F0 (size: 0x8)
    class UImage* mpFactionBackground;                                                // 0x02F8 (size: 0x8)
    class UImage* mpRegionBackground;                                                 // 0x0300 (size: 0x8)
    class UGameModeUserButton* mpQuickPlayMatchmakingButton;                          // 0x0308 (size: 0x8)
    class UGameModeUserButton* mpMatchmakingModeButton;                               // 0x0310 (size: 0x8)
    class UGameModeUserButton* mpCustomGamesModeButton;                               // 0x0318 (size: 0x8)
    class UGameModeUserButton* mpTutorialModeButton;                                  // 0x0320 (size: 0x8)
    class UGameModeUserButton* mpTrainingModeButton;                                  // 0x0328 (size: 0x8)
    class UGameModeUserButton* mpHostButton;                                          // 0x0330 (size: 0x8)
    class UGameModeUserButton* mpJoinButton;                                          // 0x0338 (size: 0x8)
    class UBaseUserButton* mpSubmitCodeUserButton;                                    // 0x0340 (size: 0x8)
    class UBaseUserButton* mpCancelCodeUserButton;                                    // 0x0348 (size: 0x8)
    class UEditableTextBox* mpLobbyCodeTextBox;                                       // 0x0350 (size: 0x8)
    class UButton* mpRegionLeftButton;                                                // 0x0358 (size: 0x8)
    class UButtonPromptWidget* mpRegionLeftPrompt;                                    // 0x0360 (size: 0x8)
    class UButton* mpRegionRightButton;                                               // 0x0368 (size: 0x8)
    class UButtonPromptWidget* mpRegionRightPrompt;                                   // 0x0370 (size: 0x8)
    class UTextBlock* mpRegionText;                                                   // 0x0378 (size: 0x8)
    class UImage* mpRegionSignalImage;                                                // 0x0380 (size: 0x8)
    class UButton* mpFactionLeftButton;                                               // 0x0388 (size: 0x8)
    class UButtonPromptWidget* mpFactionLeftPrompt;                                   // 0x0390 (size: 0x8)
    class UButton* mpFactionRightButton;                                              // 0x0398 (size: 0x8)
    class UButtonPromptWidget* mpFactionRightPrompt;                                  // 0x03A0 (size: 0x8)
    class UTextBlock* mpFactionPrefix;                                                // 0x03A8 (size: 0x8)
    class UTextBlock* mpFactionText;                                                  // 0x03B0 (size: 0x8)
    FSlateBrush mEvilQuickPlayImage;                                                  // 0x03B8 (size: 0x88)
    FSlateBrush mTeenQuickPlayImage;                                                  // 0x0440 (size: 0x88)
    FSlateBrush mEvilMatchmakingImage;                                                // 0x04C8 (size: 0x88)
    FSlateBrush mTeenMatchmakingImage;                                                // 0x0550 (size: 0x88)
    FSlateBrush mEvilCustomImage;                                                     // 0x05D8 (size: 0x88)
    FSlateBrush mTeenCustomImage;                                                     // 0x0660 (size: 0x88)
    FSlateBrush mEvilTrainingImage;                                                   // 0x06E8 (size: 0x88)
    FSlateBrush mTeenTrainingImage;                                                   // 0x0770 (size: 0x88)
    FSlateBrush mEvilTutorialImage;                                                   // 0x07F8 (size: 0x88)
    FSlateBrush mTeenTutorialImage;                                                   // 0x0880 (size: 0x88)
    FSlateBrush m2xEventIcon;                                                         // 0x0908 (size: 0x88)
    FSlateColor mFactionBackgroundDefaultColor;                                       // 0x0990 (size: 0x28)
    FLinearColor mFactionTextDisabledColor;                                           // 0x09B8 (size: 0x10)
    FSlateColor mFactionBackgroundDisabledColor;                                      // 0x09C8 (size: 0x28)
    float mRegionCooldownTimer;                                                       // 0x09F4 (size: 0x4)

    void OnTutorialModeSelected();
    void OnTrainingModeSelected();
    void OnTeenTutorialPressed();
    void OnTeenTrainingPressed();
    void OnSubmitCodePressed();
    void OnRegionRightPressed();
    void OnRegionLeftPressed();
    void OnQuickPlayMatchmakingModeSelected();
    void OnMatchmakingModeSelected();
    void OnJoinPressed();
    void OnHostPressed();
    void OnFactionRightPressed();
    void OnFactionLeftPressed();
    void OnEvilTutorialPressed();
    void OnEvilTrainingPressed();
    void OnCustomGameModeSelected();
    void OnCancelCodePressed();
}; // Size: 0x9F8

class UGameModeSelectUserButton : public UBaseUserButton
{
    class UTextBlock* mpRegionText;                                                   // 0x0478 (size: 0x8)
    class UTextBlock* mpSelectedGameModeText;                                         // 0x0480 (size: 0x8)
    class UTextBlock* mpSelectedGameModeSubText;                                      // 0x0488 (size: 0x8)
    class UImage* mpBgImage;                                                          // 0x0490 (size: 0x8)
    class UImage* mpBlurImage;                                                        // 0x0498 (size: 0x8)

}; // Size: 0x4A0

class UGameModeUserButton : public UBaseUserButton
{
    TMap<class ECharacterType, class UTexture2D*> QuickplayIcons;                     // 0x0478 (size: 0x50)
    class UTextBlock* mpModeTextBlock;                                                // 0x04C8 (size: 0x8)
    class UTextBlock* mpModeDescriptionTextBlock;                                     // 0x04D0 (size: 0x8)
    class UWidget* mpBonusPanel;                                                      // 0x04D8 (size: 0x8)
    class UImage* mpBonusIcon;                                                        // 0x04E0 (size: 0x8)
    class UBorder* mpQuickplayBorder;                                                 // 0x04E8 (size: 0x8)
    class UTextBlock* mpBonusTextBlock;                                               // 0x04F0 (size: 0x8)
    class UImage* mpGameModeImage;                                                    // 0x04F8 (size: 0x8)
    FMargin GameModeImagePadding;                                                     // 0x0500 (size: 0x10)
    FText mModeText;                                                                  // 0x0510 (size: 0x18)
    FText mModeDescriptionText;                                                       // 0x0528 (size: 0x18)
    FText mBonusText;                                                                 // 0x0540 (size: 0x18)
    bool IsQuickplay;                                                                 // 0x0558 (size: 0x1)
    class UWidgetAnimation* mpHoverAnimation;                                         // 0x0560 (size: 0x8)

}; // Size: 0x570

class UGameScriptingManager : public UObject
{
    FGameScriptingManagerOnTutorialButton1Pressed OnTutorialButton1Pressed;           // 0x0038 (size: 0x10)
    void TutorialDelegate_OnTutorialButton1Pressed(bool bPressed);
    FGameScriptingManagerOnTutorialButton2Pressed OnTutorialButton2Pressed;           // 0x0048 (size: 0x10)
    void TutorialDelegate_OnTutorialButton2Pressed(bool bPressed);
    FGameScriptingManagerOnTutorialButton3Pressed OnTutorialButton3Pressed;           // 0x0058 (size: 0x10)
    void TutorialDelegate_OnTutorialButton3Pressed(bool bPressed);
    FGameScriptingManagerOnTutorialButton4Pressed OnTutorialButton4Pressed;           // 0x0068 (size: 0x10)
    void TutorialDelegate_OnTutorialButton4Pressed(bool bPressed);
    FGameScriptingManagerOnTutorialScroll OnTutorialScroll;                           // 0x0078 (size: 0x10)
    void TutorialDelegate_OnTutorialScroll(float AxisValue);

    void TutorialOnly_UnPossesSpectral(class ATPChar* pTPChar);
    void TutorialOnly_StopAIBehaviour(class ATPChar* charToStop);
    void TutorialOnly_StartTransformingStage();
    void TutorialOnly_SpawnPingAtLocation(FVector Location, FColor Color);
    class ATPChar* TutorialOnly_SpawnCharacter(ECharacterType typeToSpawn, FTransform SpawnTransform, bool isAIControlled, TSubclassOf<class AAIController> ControllerClass, class AActor* pOwner);
    void TutorialOnly_SpawnBloodOrbAtLocation(FTransform givenTransform);
    void TutorialOnly_SetWerewolfCharacterState(class AWerewolfChar* charToSetState, EWerewolfCharacterState charState);
    void TutorialOnly_SetTutorialTextVisibility(ESlateVisibility Visibility);
    void TutorialOnly_SetTutorialSubTextVisibility(ESlateVisibility Visibility);
    void TutorialOnly_SetTutorialPanelVisibility(ESlateVisibility Visibility);
    void TutorialOnly_SetTutorialHideUI(bool Val);
    void TutorialOnly_SetTutorialCharacter(class ATPChar* pTPChar, bool Val);
    void TutorialOnly_SetTutorialAllowedWeaponsList(TArray<EWeaponTypeEnum> weaponsList);
    void TutorialOnly_SetIsImmortal(bool isImmortal, class ATPChar* charToSetImmortality);
    void TutorialOnly_SetGameplayPause(bool IsPaused);
    void TutorialOnly_SetFrozen(bool frozen, class ATPChar* charToSetInput);
    void TutorialOnly_SetEvilTypeToTransform(ECharacterType availableEvils);
    void TutorialOnly_SetEnableHeartBeat(bool Enabled);
    void TutorialOnly_SetDamageTypeHitEvil(TArray<EDamageType> damageTypeList);
    void TutorialOnly_SetCustomRotation(class ATPChar* pTPChar, bool Enabled, FRotator customRotation, float rotationSpeed);
    void TutorialOnly_SetCharacterState(class ATPChar* charToSetState, ECharacterState newState);
    void TutorialOnly_SetCharacterObjectVolumeEnabled(class ATPChar* givenCharacter, bool Val);
    void TutorialOnly_SetBloodTrailTime(class ATPChar* pTPChar, float bloodTrailLifetime, bool overrideDefault);
    void TutorialOnly_SetAllowedToMove(class ATPChar* pTPChar, bool bCanMove);
    void TutorialOnly_ReviveCharacter(class ATPChar* pCharToMove, class ATPChar* pCharToRevive, EMovementSpeedType movementSpeedType);
    void TutorialOnly_ResurrectCharacter(class ATPChar* pCharToMove, class ATPChar* pCharToResurrect, EMovementSpeedType movementSpeedType);
    void TutorialOnly_PrintTutorialText(FText textToPrint, float timeToPrint, bool bConfirmationOverlay);
    void TutorialOnly_PrintTutorialSubtext(FText textToPrint, float timeToPrint, bool bConfirmationOverlay);
    void TutorialOnly_PopulatePlayerSettings();
    bool TutorialOnly_IsLoadingScreenActive();
    void TutorialOnly_InteractHidepoint(class ATPChar* pCharToMove, EMovementSpeedType movementSpeedType);
    void TutorialOnly_HealCharacter(class ATPChar* pCharToMove, class ATPChar* pCharToHeal, EMovementSpeedType movementSpeedType);
    void TutorialOnly_GoToLocation(class ATPChar* charToMove, FVector givenLocation, EMovementSpeedType movementSpeedType, bool bOverrideSpeed);
    void TutorialOnly_GoToCharacter(class ATPChar* charToMove, class ATPChar* givenCharacter, EMovementSpeedType movementSpeedType, bool bOverrideSpeed);
    EWerewolfCharacterState TutorialOnly_GetWerewolfCharacterState(class AWerewolfChar* charToGetState);
    TArray<EWeaponTypeEnum> TutorialOnly_GetWeaponTypeHitEvil();
    TArray<EWeaponTypeEnum> TutorialOnly_GetTutorialAllowedWeaponsList();
    float TutorialOnly_GetRevivePercentage(class ATPChar* pTPChar);
    TArray<EDamageType> TutorialOnly_GetDamageTypeHitEvil();
    ECharacterType TutorialOnly_GetCharacterType(int32 Index);
    ECharacterState TutorialOnly_GetCharacterState(class ATPChar* charToGetState);
    FText TutorialOnly_GetCharacterLocName(int32 Index);
    void TutorialOnly_FinishTeenTutorialBackendCall();
    void TutorialOnly_FinishEvilTutorialBackendCall();
    void TutorialOnly_EvilPatrol(class ATPChar* pCharToMove, FVector givenLocation, EMovementSpeedType movementSpeedType, bool bOverrideSpeed);
    void TutorialOnly_EquipWeapon(EWeaponTypeEnum weaponType, class ATPChar* charToEquipWeapon);
    void TutorialOnly_EquipItem(EPickupType pickupType, class ATPChar* charToEquip);
    void TutorialOnly_DisconnectTutorial();
    void TutorialOnly_ClearDamageTypesEvil(TArray<EDamageType> damageTypeList);
    void TutorialOnly_ChaseAndHitCharacter(class AFPChar* charToMove, class ATPChar* givenCharacter, EMovementSpeedType movementSpeedType);
    void TutorialOnly_ChangeCharacter(ECharacterType CharacterType, FTransform SpawnTransform);
}; // Size: 0x88

class UGameTab : public UBaseTab
{
    class UNavScrollBox* mpNavScrollBox;                                              // 0x0280 (size: 0x8)
    class UOptionToggleUserButton* mpAutomaticRegionToggle;                           // 0x0288 (size: 0x8)
    class UOptionSelectorUserButton* mpRegionSelector;                                // 0x0290 (size: 0x8)
    class UOptionSelectorUserButton* mpLanguageSelector;                              // 0x0298 (size: 0x8)
    class UOptionToggleUserButton* mpGameHUDToggle;                                   // 0x02A0 (size: 0x8)
    class UOptionToggleUserButton* mpReticleToggle;                                   // 0x02A8 (size: 0x8)
    class UOptionToggleUserButton* mpScoreFeedToggle;                                 // 0x02B0 (size: 0x8)
    class UOptionsFlagSelectorUserButton* mpHintsToggle;                              // 0x02B8 (size: 0x8)
    class UOptionSingleUserButton* mpDangerSenseOptionsButton;                        // 0x02C0 (size: 0x8)
    ELanguageSetting mLanguage;                                                       // 0x02C8 (size: 0x1)

    void OnDangerSenseOptionsPressed();
    void OnAutoRegionChanged(bool bSet);
}; // Size: 0x2D0

class UGameUtilStatics : public UObject
{

    class UExtAkComponent* SpawnExtAkComponentAtLocation(class UObject* WorldContextObject, class UAkAudioEvent* AkEvent, class UAkAuxBus* EarlyReflectionsBus, FVector Location, FRotator Orientation, bool AutoPost, FString EventName, FString EarlyReflectionsBusName, bool AutoDestroy);
    void RegisterComponentToEffectsManager(class UObject* pWorldContextObject, class USceneComponent* pComponent, FEffectVisibility Visibility);
    FVector2D ProjectWorldToViewBilateral(FVector WorldPosition, class UWorld* pWorld);
    FVector2D GetEdgeOfRoundedRectangle(float angleInDegrees, float Height, float Width, float curveTightness);
    FVector2D GetEdgeOfEllipse(float angleInDegrees, float Height, float Width);
    void FindScreenEdgeLocationForWorldLocation(class UWorld* pWorld, FVector InLocation, FVector2D& outScreenPosition, float& outRotationAngleDegrees, bool& bIsOnScreen);
}; // Size: 0x28

class UGameplayHUDInterface : public UUserWidget
{
    class UHUDPlayerCardPanel* mpPlayerCardPanel;                                     // 0x0260 (size: 0x8)
    class UHUDEvilDamagePanel* mpEvilDamagePanel;                                     // 0x0268 (size: 0x8)
    class UHUDDarkShardOverlay* mpDarkShardOverlayPanel;                              // 0x0270 (size: 0x8)
    class UHUDEvilRagePanel* mpEvilRageOverlayPanel;                                  // 0x0278 (size: 0x8)
    class UHUDNotificationsPanel* mpNotificationsPanel;                               // 0x0280 (size: 0x8)
    class UHUDActionBar* mpActionBarPanel;                                            // 0x0288 (size: 0x8)

    class UHUDPlayerCardPanel* GetPlayerCardPanelHUD();
    class APlayerController* GetOwningPlayerController();
    class UHUDNotificationsPanel* GetNotificationsPanelHUD();
    class UHUDEvilRagePanel* GetEvilRagePanelHUD();
    class UHUDEvilDamagePanel* GetEvilDamagePanelHUD();
    class UHUDDarkShardOverlay* GetDarkShardOverlay();
    class UHUDActionBar* GetActionBarPanel();
}; // Size: 0x290

class UGameplayTask_FacingCamera : public UGameplayTask
{
    class UPrimitiveComponent* mpTargetComponent;                                     // 0x0068 (size: 0x8)
    class AActor* pTargetActor;                                                       // 0x0070 (size: 0x8)
    class APlayerCameraManager* mpPlayerCameraManager;                                // 0x0078 (size: 0x8)
    FGameplayTask_FacingCameraOnTaskFinished OnTaskFinished;                          // 0x0080 (size: 0x10)
    void GenericGameplayTaskDelegate();
    FGameplayTask_FacingCameraOnTaskFailed OnTaskFailed;                              // 0x0090 (size: 0x10)
    void GenericGameplayTaskDelegate();

    class UGameplayTask_FacingCamera* ConstructTask(TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner, class UPrimitiveComponent* pRotatingComponent, class APlayerCameraManager* pPlayerCameraManager);
}; // Size: 0xA0

class UGameplayTask_PlayMaterialEffects : public UGameplayTask
{
    class UMeshComponent* mpTargetMeshComp;                                           // 0x0068 (size: 0x8)
    TArray<FMaterialScalerSetterContext> mMaterialScalerSetterContexts;               // 0x0078 (size: 0x10)
    TArray<class UMaterialInstanceDynamic*> mpMIDs;                                   // 0x0090 (size: 0x10)
    FGameplayTask_PlayMaterialEffectsOnTaskFinished OnTaskFinished;                   // 0x00A0 (size: 0x10)
    void GenericGameplayTaskDelegate();
    FGameplayTask_PlayMaterialEffectsOnTaskFailed OnTaskFailed;                       // 0x00B0 (size: 0x10)
    void GenericGameplayTaskDelegate();

    class UGameplayTask_PlayMaterialEffects* ConstructTask(TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner, const TArray<FMaterialScalerSetterContext>& materialScalerSetterContexts, class UMeshComponent* pMeshComp, bool bConvertMatToDynamic);
}; // Size: 0xC0

class UGoodCharAnimInstance : public UBaseCharAnimInstance
{
    FGoodCharAnimInstanceProxy mProxy;                                                // 0x02C0 (size: 0x960)
    class ATPChar* mpOwnerTPChar;                                                     // 0x0C20 (size: 0x8)
    class UAnimMontage* mpLandMontage;                                                // 0x0C28 (size: 0x8)
    class UAnimSequence* mpCrouchAnimSequence;                                        // 0x0C30 (size: 0x8)
    FVector2D mEyeBlinkRange;                                                         // 0x0C38 (size: 0x8)
    FVector2D mEyeBlinkOpenRange;                                                     // 0x0C40 (size: 0x8)
    class UAnimSequence* mpWeaponUsedUpSequence;                                      // 0x0C48 (size: 0x8)
    class UAnimSequence* mpDemonswordLoopAnimSequence;                                // 0x0C50 (size: 0x8)
    class UAnimSequence* mpDemonswordIntroAnimSequence;                               // 0x0C58 (size: 0x8)
    class UAnimSequence* mpRaygunIntroAnimationSequence;                              // 0x0C60 (size: 0x8)
    class UAnimSequence* mpSligshotIntroAnimationSequence;                            // 0x0C68 (size: 0x8)
    class UAnimSequence* mpMolotovIntroAnimationSequence;                             // 0x0C70 (size: 0x8)
    class UAnimSequence* mpHolyStaffAnimationSequence;                                // 0x0C78 (size: 0x8)
    class UAnimSequence* mpCrossAnimationSequence;                                    // 0x0C80 (size: 0x8)
    class UAnimSequence* mpFlamethrowerAnimationSequence;                             // 0x0C88 (size: 0x8)
    class UAnimSequence* mpFlameMineAnimationSequence;                                // 0x0C90 (size: 0x8)
    class UAnimSequence* mpStaticShieldAnimationSEquence;                             // 0x0C98 (size: 0x8)

    bool ShouldRotateInPlace();
    void SetSimulateReaction(bool Val);
    void SetIsPlayingResurrectOutro(bool Val);
    void SetHitAngle(FVector Val);
    void SetFootPosition(float footPosition);
    void SetAllowProneRotation(bool Val);
    FTPWeaponStateData GetWeaponStateData();
    float GetUsedUpAnimationPlayRate();
    bool GetSimulateReaction();
    class UBlendSpaceBase* GetLocomotionOverride();
    FVector GetHitAngle();
    float GetCurrentWeaponTravelTimePlayRate();
    float GetCurrentWeaponLoopTimePlayRate();
    float GetCurrentWeaponIntroTimePlayRate();
    float GetCurrentWeaponFrameBufferTime();
    float GetCrouchForwardAnimationPlayRate();
    float GetCrouchAnimationPlayRate();
    float GetCrawlAnimationPlayRate();
    FTPCharStateData GetCharStateData();
    FTPMovementData GetCharMovementData();
    FCharacterBodyShapePreset GetBodyShapePreset();
    void ClientUpdatePanicAnims(float DeltaTime);
    void AnimNotify_WeaponShootStart(const class UAnimNotify* Notify);
    void AnimNotify_WeaponShootEnd(const class UAnimNotify* Notify);
    void AnimNotify_VendingMachineHitAnimNotify(const class UAnimNotify* Notify);
    void AnimNotify_ThrowWeaponAnimNotify(const class UAnimNotify* Notify);
    void AnimNotify_StopPlayingPickupAnim(const class UAnimNotify* Notify);
    void AnimNotify_StopPlayingPanicAnimation(const class UAnimNotify* Notify);
    void AnimNotify_StopPickupInteractingSequence(const class UAnimNotify* Notify);
    void AnimNotify_StopJustWoundedEvil(const class UAnimNotify* Notify);
    void AnimNotify_StaticShieldActiveStart(const class UAnimNotify* Notify);
    void AnimNotify_StaticShieldActiveEnd(const class UAnimNotify* Notify);
    void AnimNotify_StartProneSequence(const class UAnimNotify* Notify);
    void AnimNotify_StartPickupInteractingSequence(const class UAnimNotify* Notify);
    void AnimNotify_StartKilledSequence(const class UAnimNotify* Notify);
    void AnimNotify_SlingshotAimStart(const class UAnimNotify* Notify);
    void AnimNotify_SlingshotAimEnd(const class UAnimNotify* Notify);
    void AnimNotify_SlingshotActivateStart(const class UAnimNotify* Notify);
    void AnimNotify_SetUnsafeFENDAnimation(const class UAnimNotify* Notify);
    void AnimNotify_SetSafeFENDAnimation(const class UAnimNotify* Notify);
    void AnimNotify_SetCraftingItem(const class UAnimNotify* Notify);
    void AnimNotify_SearchLoopStart(const class UAnimNotify* Notify);
    void AnimNotify_RiseFromProne_Entered(const class UAnimNotify* Notify);
    void AnimNotify_RightFootstep(const class UAnimNotify* Notify);
    void AnimNotify_RevivingLoopStart(const class UAnimNotify* Notify);
    void AnimNotify_RevivingLoopEnd(const class UAnimNotify* Notify);
    void AnimNotify_ResurrectLoopStart(const class UAnimNotify* Notify);
    void AnimNotify_RCCopterActiveStop(const class UAnimNotify* Notify);
    void AnimNotify_RCCopterActiveStart(const class UAnimNotify* Notify);
    void AnimNotify_ProneToLoco(const class UAnimNotify* Notify);
    void AnimNotify_ParchmentActiveStop(const class UAnimNotify* Notify);
    void AnimNotify_ParchmentActiveStart(const class UAnimNotify* Notify);
    void AnimNotify_NoisemakerArmLoopStart(const class UAnimNotify* Notify);
    void AnimNotify_MolotovAimStart(const class UAnimNotify* Notify);
    void AnimNotify_MolotovAimEnd(const class UAnimNotify* Notify);
    void AnimNotify_MolotovActivateStart(const class UAnimNotify* Notify);
    void AnimNotify_MedKitHealLoopStop(const class UAnimNotify* Notify);
    void AnimNotify_MedKitHealLoopStart(const class UAnimNotify* Notify);
    void AnimNotify_LobbyPoseFullyBlended(const class UAnimNotify* Notify);
    void AnimNotify_LobbyPose_Left(const class UAnimNotify* Notify);
    void AnimNotify_LobbyPose_Entered(const class UAnimNotify* Notify);
    void AnimNotify_LobbyFlavorFinished(const class UAnimNotify* Notify);
    void AnimNotify_LeftResurrectOutro(const class UAnimNotify* Notify);
    void AnimNotify_LeftFootstep(const class UAnimNotify* Notify);
    void AnimNotify_HealingLoopStart(const class UAnimNotify* Notify);
    void AnimNotify_HealingLoopEnd(const class UAnimNotify* Notify);
    void AnimNotify_GivePickup_Left(const class UAnimNotify* Notify);
    void AnimNotify_ForceClothReset(const class UAnimNotify* Notify);
    void AnimNotify_FlamethrowerFireStart(const class UAnimNotify* Notify);
    void AnimNotify_FlamethrowerAimEnd(const class UAnimNotify* Notify);
    void AnimNotify_FireDemonSword(const class UAnimNotify* Notify);
    void AnimNotify_FinishProneSequence(const class UAnimNotify* Notify);
    void AnimNotify_FinishKilledSequence(const class UAnimNotify* Notify);
    void AnimNotify_Feasted_Idle_Left(const class UAnimNotify* Notify);
    void AnimNotify_Feasted_Idle_Entered(const class UAnimNotify* Notify);
    void AnimNotify_FallingSequenceEnd(const class UAnimNotify* Notify);
    void AnimNotify_EnteredTransformIntro(const class UAnimNotify* Notify);
    void AnimNotify_EnteredStopping(const class UAnimNotify* Notify);
    void AnimNotify_EnteredResurrectOutro(const class UAnimNotify* Notify);
    void AnimNotify_EnergizeShieldStart(const class UAnimNotify* Notify);
    void AnimNotify_EnergizeShieldEnd(const class UAnimNotify* Notify);
    void AnimNotify_EmoteStart(const class UAnimNotify* Notify);
    void AnimNotify_EmoteComplete(const class UAnimNotify* Notify);
    void AnimNotify_DMSW_FireTransition(const class UAnimNotify* Notify);
    void AnimNotify_DisarmTrapStart(const class UAnimNotify* Notify);
    void AnimNotify_DemonSwordFireStart(const class UAnimNotify* Notify);
    void AnimNotify_DemonSwordFireEnd(const class UAnimNotify* Notify);
    void AnimNotify_DemonSwordAimStart(const class UAnimNotify* Notify);
    void AnimNotify_DemonSwordAimEnd(const class UAnimNotify* Notify);
    void AnimNotify_DemonSwordAbort(const class UAnimNotify* Notify);
    void AnimNotify_CrossFireStart(const class UAnimNotify* Notify);
    void AnimNotify_CrossAimEnd(const class UAnimNotify* Notify);
    void AnimNotify_CraftSuccessComplete(const class UAnimNotify* Notify);
    void AnimNotify_CraftLoopStop(const class UAnimNotify* Notify);
    void AnimNotify_CraftLoopStart(const class UAnimNotify* Notify);
    void AnimNotify_CraftFailComplete(const class UAnimNotify* Notify);
    void AnimNotify_CoreMotion_Start(const class UAnimNotify* Notify);
    void AnimNotify_CoreMotion_FullyBlended(const class UAnimNotify* Notify);
    void AnimNotify_CoreMotion_End(const class UAnimNotify* Notify);
    void AnimNotify_ClearEmote(const class UAnimNotify* Notify);
    void AnimNotify_CenterpieceIntroEnd(const class UAnimNotify* Notify);
}; // Size: 0xCA0

class UGoodCharUBAnimInstance : public UAnimInstance
{

    void AnimNotify_UsedPickupAnimNotify(const class UAnimNotify* Notify);
    void AnimNotify_ClearPickupAnimNotify(const class UAnimNotify* Notify);
}; // Size: 0x2C0

class UGrantableButtonWidget : public UUserWidget
{
    class UNavButton* mpNavButton;                                                    // 0x0260 (size: 0x8)
    class UGrantableItemWidget* mpItemWidget;                                         // 0x0268 (size: 0x8)

}; // Size: 0x270

class UGrantableItemWidget : public UUserWidget
{
    class UTextBlock* mpNameText;                                                     // 0x0270 (size: 0x8)
    class UImage* mpIcon;                                                             // 0x0278 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
}; // Size: 0x280

class UGuideModalWidget : public UBaseModal
{
    class UNavButton* mpDismissButton;                                                // 0x02B0 (size: 0x8)
    class UNavButton* mpDisableButton;                                                // 0x02B8 (size: 0x8)
    class UBorder* mpContentBox;                                                      // 0x02C0 (size: 0x8)
    class UTextBlock* mpTitle;                                                        // 0x02C8 (size: 0x8)
    class UUserWidget* mpContent;                                                     // 0x02D0 (size: 0x8)

    void HideModal();
}; // Size: 0x2D8

class UGuideSuggestionWidget : public UMetaWidget
{
    bool mbIsInViewport;                                                              // 0x0400 (size: 0x1)
    float HorizontalOffset;                                                           // 0x0404 (size: 0x4)
    float VerticalAlignment;                                                          // 0x0408 (size: 0x4)

    void NativeTick(const FGeometry& MyGeometry, float InDeltaTime);
    void HideSuggestion();
    void DismissSuggestion();
}; // Size: 0x410

class UGuideSystem : public UObject
{
}; // Size: 0xF8

class UHBCreditsScreen : public UBaseScreen
{
    class UVerticalBox* mpVerticalBox;                                                // 0x02C0 (size: 0x8)
    class UWidgetAnimation* mpIntroAnim;                                              // 0x02C8 (size: 0x8)
    class UWidgetAnimation* mpScrollAnim;                                             // 0x02D0 (size: 0x8)
    float mTimeToShowCredits;                                                         // 0x02D8 (size: 0x4)

    void RestartSequence();
    void OnIntroFinished();
}; // Size: 0x2E0

class UHUDActionBar : public UUserWidget
{
    class UWidgetSwitcher* mpActionTypeWidgetSwitcher;                                // 0x0260 (size: 0x8)
    class UCraftingProgressBar* mpHUDCraftingBar;                                     // 0x0268 (size: 0x8)
    class UWeaponProgressBar* mpHUDWeaponProgressBar;                                 // 0x0270 (size: 0x8)
    class UHealingProgressBar* mpHUDHealingProgressBar;                               // 0x0278 (size: 0x8)
    class UEvilAbilityProgressBar* mpHUDEvilAbilityProgressBar;                       // 0x0280 (size: 0x8)
    class UDarkShardProgressBar* mpHUDDarkShardProgressBar;                           // 0x0288 (size: 0x8)
    class UDiscardWeaponProgressBar* mpHUDDiscardProgressBar;                         // 0x0290 (size: 0x8)
    class UManualTransformProgressBar* mpHUDManualTransformProgressBar;               // 0x0298 (size: 0x8)
    class UDisarmDollTrapProgressBar* mpHUDDisarmDollTrapProgressBar;                 // 0x02A0 (size: 0x8)
    class UDeployNoisemakerProgressBar* mpDeployNoisemakerProgressBar;                // 0x02A8 (size: 0x8)

    void Update(class ATPChar* pTrackedChar);
}; // Size: 0x2B8

class UHUDActionPromptPanel : public UUserWidget
{
    class URichTextBlock* mpPromptTextLeft;                                           // 0x0260 (size: 0x8)
    class URichTextBlock* mpPromptTextRight;                                          // 0x0268 (size: 0x8)
    class UButtonPromptWidget* mpButtonPromptWidget;                                  // 0x0270 (size: 0x8)

}; // Size: 0x278

class UHUDAnnouncementPanel : public UUserWidget
{
    class UCanvasPanel* mpMessagePanel;                                               // 0x0260 (size: 0x8)
    class URichTextBlock* mpMessageText;                                              // 0x0268 (size: 0x8)
    class UWidgetAnimation* mpShowMessage;                                            // 0x0270 (size: 0x8)
    TArray<FMessageInfo> mMessageQueue;                                               // 0x0278 (size: 0x10)
    FMessageInfo mCurrentMessageInfo;                                                 // 0x0288 (size: 0x20)

    void OnAnimFinished();
}; // Size: 0x2A8

class UHUDAugmentPanel : public UUserWidget
{
    class UHorizontalBox* mpHorizontalBox;                                            // 0x0268 (size: 0x8)
    class UTextBlock* mpAugmentTextBlock;                                             // 0x0270 (size: 0x8)
    class ATPChar* mpLastTrackedTPChar;                                               // 0x0278 (size: 0x8)
    class AGameplayPC* mpTrackedGameplayPC;                                           // 0x0280 (size: 0x8)

}; // Size: 0x288

class UHUDAuraIndicatorWidget : public UUserWidget
{
    class AActor* mpTrackedActor;                                                     // 0x0260 (size: 0x8)
    FVector mTrackedPosition;                                                         // 0x0268 (size: 0xC)
    float mLifetimeRemaining;                                                         // 0x0274 (size: 0x4)
    class UImage* mpPointerIcon;                                                      // 0x0278 (size: 0x8)
    bool mbPrivate;                                                                   // 0x0280 (size: 0x1)
    class AGameplayPS* mpOwningPS;                                                    // 0x0288 (size: 0x8)
    bool mbTrackingActor;                                                             // 0x0290 (size: 0x1)
    bool mbTeenFaction;                                                               // 0x0291 (size: 0x1)
    bool mbHasLifetime;                                                               // 0x0292 (size: 0x1)
    EAuraIndicatorType mIndicatorType;                                                // 0x0293 (size: 0x1)
    TScriptInterface<class IAuraIndicatorInterface> mValidator;                       // 0x0298 (size: 0x10)

}; // Size: 0x2A8

class UHUDDamageIndicator : public UUserWidget
{
    class UImage* mpDamageCursorImage;                                                // 0x0260 (size: 0x8)
    class UImage* mpDamageBloomImage;                                                 // 0x0268 (size: 0x8)
    class UWidget* mpPivotWidget;                                                     // 0x0270 (size: 0x8)
    float mTotalDuration;                                                             // 0x0278 (size: 0x4)
    EWeaponTypeEnum mWeaponType;                                                      // 0x027C (size: 0x1)

}; // Size: 0x290

class UHUDDamagePanelStigmaWidget : public UUserWidget
{
    TArray<class UMaterialInterface*> mpIconMaterialInterfaces;                       // 0x0260 (size: 0x10)
    FLinearColor mLethalColor;                                                        // 0x0270 (size: 0x10)
    FLinearColor mNonLethalColor;                                                     // 0x0280 (size: 0x10)
    class UMaterialInterface* mpIconMaterialInterface;                                // 0x0290 (size: 0x8)
    EDamageType mDamageType;                                                          // 0x0298 (size: 0x1)
    class UWidgetSwitcher* mpLethalSwitcher;                                          // 0x02A0 (size: 0x8)
    class UImage* mpStigmaIconImage;                                                  // 0x02A8 (size: 0x8)
    class UImage* mpBGLethalImage;                                                    // 0x02B0 (size: 0x8)
    class UImage* mpBGNonLethalImage;                                                 // 0x02B8 (size: 0x8)
    class UWidgetAnimation* mpDamageComplete;                                         // 0x02C0 (size: 0x8)
    class UMaterialInstanceDynamic* mpIconMaterialInstance;                           // 0x02C8 (size: 0x8)
    class AFPChar* mpMainEvil;                                                        // 0x02D0 (size: 0x8)

    void UpdateHitPercentage();
    void SetDynamicMaterials();
    void OnDamageApplied(EDamageType DamageType);
    float GetCurrentDamagePercentageForDamageType(bool& bIsLethal);
}; // Size: 0x2D8

class UHUDDangerSenseWidget : public UUserWidget
{
    class UCanvasPanel* mpDangerSensePanel;                                           // 0x0260 (size: 0x8)
    class UImage* mpDangerSenseImage;                                                 // 0x0268 (size: 0x8)
    class UOverlay* mpDangerSenseSettingsOverlay;                                     // 0x0270 (size: 0x8)
    class UWidgetAnimation* mpDangerSenseToggleAnim;                                  // 0x0278 (size: 0x8)
    class UWidgetAnimation* mpDangerSenseIdleAnim;                                    // 0x0280 (size: 0x8)

    void Update(class ATPChar* pTrackedTPChar);
    FColor GetColorForDangerSenseSetting(int32 Color);
}; // Size: 0x288

class UHUDDarkShardOverlay : public UUserWidget
{
    class UImage* mpShardIconImage;                                                   // 0x0260 (size: 0x8)
    class UCanvasPanel* mpShardPanel;                                                 // 0x0268 (size: 0x8)
    class UCanvasPanel* mpShardStartTargetCanvas;                                     // 0x0270 (size: 0x8)
    class UImage* mpProgressBarImage;                                                 // 0x0278 (size: 0x8)
    class UTextBlock* mpMessageText;                                                  // 0x0280 (size: 0x8)
    class UTextBlock* mpDistanceText;                                                 // 0x0288 (size: 0x8)
    class UMaterialInstance* mpCircularProgressMaterialInstance;                      // 0x0290 (size: 0x8)
    class UWidgetAnimation* mpShardSpawnedAnimation;                                  // 0x0298 (size: 0x8)
    class UWidgetAnimation* mpShardIconAppearAnimation;                               // 0x02A0 (size: 0x8)
    class UTexture2D* mpShardInactiveTexture;                                         // 0x02A8 (size: 0x8)
    FLinearColor mShardInactiveColor;                                                 // 0x02B0 (size: 0x10)
    class UTexture2D* mpShardActiveTexture;                                           // 0x02C0 (size: 0x8)
    bool mbDidShardExistLastFrame;                                                    // 0x02C8 (size: 0x1)
    bool mbShardRevealedLastFrame;                                                    // 0x02C9 (size: 0x1)
    bool mbHasAnimatedToPosition;                                                     // 0x02CA (size: 0x1)
    bool mbIconAllowedToAnimate;                                                      // 0x02CB (size: 0x1)
    FVector2D mShardIconStartPosition;                                                // 0x02CC (size: 0x8)
    float mLerpProgress;                                                              // 0x02D4 (size: 0x4)
    bool mbShardExists;                                                               // 0x02D8 (size: 0x1)
    float mShardLifetimeRemaining;                                                    // 0x02DC (size: 0x4)
    bool mbShardBeingTaken;                                                           // 0x02E0 (size: 0x1)
    float mTimeBeforeShardTaken;                                                      // 0x02E4 (size: 0x4)
    TArray<FText> mPlayerNamesTakingShard;                                            // 0x02E8 (size: 0x10)
    bool mbShardExistedLastFrame;                                                     // 0x02F8 (size: 0x1)
    FVector2D mCurrentStartLocation;                                                  // 0x02FC (size: 0x8)

    void UpdateShardInfo(bool bShardExists, float shardLifetimeRemaining, bool bShardBeingTaken, float timeBeforeShardTaken, const TArray<FText>& playerNamesTakingShard);
    void OnShardTimedOut();
    void OnShardTaken();
    void OnShardIconAppearAnimationFinished();
}; // Size: 0x308

class UHUDEffigyPanel : public UUserWidget
{
    class UImage* mpEffigyImage;                                                      // 0x0260 (size: 0x8)
    class UTextBlock* mpCurrentChargeText;                                            // 0x0268 (size: 0x8)
    class UTextBlock* mpMaxChargeText;                                                // 0x0270 (size: 0x8)
    class UHorizontalBox* mpChargeHorizontalBox;                                      // 0x0278 (size: 0x8)
    class UHorizontalBox* mpMainHorizontalBox;                                        // 0x0280 (size: 0x8)
    class USizeBox* mpButtonSizeBox;                                                  // 0x0288 (size: 0x8)
    class UButtonPromptWidget* mpButtonPromptWidget;                                  // 0x0290 (size: 0x8)
    class UImage* mpEffigyBackingImage;                                               // 0x0298 (size: 0x8)
    float mDollMasterPanelOffset;                                                     // 0x02A0 (size: 0x4)
    class UWidgetAnimation* mpPortalPulseAnimation;                                   // 0x02A8 (size: 0x8)
    class UWidgetAnimation* mpEffigyNumWobblingAnimation;                             // 0x02B0 (size: 0x8)
    float mStartHeight;                                                               // 0x02B8 (size: 0x4)
    class UTexture2D* mpEffigyPortalActive_Texture;                                   // 0x02C0 (size: 0x8)
    class UTexture2D* mpEffigyPortalInactive_Texture;                                 // 0x02C8 (size: 0x8)
    class UTexture2D* mpEffigyTriangleActive_Texture;                                 // 0x02D0 (size: 0x8)
    class UTexture2D* mpEffigyTriangleCannotUse_Texture;                              // 0x02D8 (size: 0x8)
    class UTexture2D* mpEffigyTriangleInactive_Texture;                               // 0x02E0 (size: 0x8)

}; // Size: 0x2F0

class UHUDEmoteMenu : public UHUDRadialMenu
{
    class UButtonPromptWidget* mpCancelPrompt;                                        // 0x0308 (size: 0x8)
    class UImage* mpCooldownImage;                                                    // 0x0310 (size: 0x8)
    class UTexture2D* mpRingTexture;                                                  // 0x0318 (size: 0x8)
    class UMaterialInstance* mpCircularProgressMaterialInstance;                      // 0x0320 (size: 0x8)
    bool mbPopulatedEmoteData;                                                        // 0x0328 (size: 0x1)
    class ATPChar* mpLastPopulatedTPChar;                                             // 0x0330 (size: 0x8)

}; // Size: 0x338

class UHUDEradicatorOverlayPanel : public UHUDEvilOverlayPanel
{
    class UMaterialInterface* mpPowerSlideMaterialInterface;                          // 0x0270 (size: 0x8)
    class UMaterialParameterCollection* mpEradicatorHUDParameterCollection;           // 0x0278 (size: 0x8)
    class USizeBox* mpSurgeSizeBox;                                                   // 0x0280 (size: 0x8)
    class UWidgetAnimation* mpSlideAvailableAnimation;                                // 0x0288 (size: 0x8)
    class UWidgetAnimation* mpAssaultModeAnimation;                                   // 0x0290 (size: 0x8)
    class UWidgetAnimation* mpAssaultOutAnimation;                                    // 0x0298 (size: 0x8)
    class UWidgetAnimation* mpAssaultToVehicleAnimation;                              // 0x02A0 (size: 0x8)
    class UWidgetAnimation* mpScanMiddleAnimation;                                    // 0x02A8 (size: 0x8)
    class UWidgetAnimation* mpScanWarmupAnimation;                                    // 0x02B0 (size: 0x8)
    class UWidgetAnimation* mpVehicleModeAnimation;                                   // 0x02B8 (size: 0x8)
    class UWidgetAnimation* mpSurgeOutAnimation;                                      // 0x02C0 (size: 0x8)
    class UWidgetAnimation* mpSurgeWarmupAnimation;                                   // 0x02C8 (size: 0x8)
    class UWidgetAnimation* mpIncorporealAnimation;                                   // 0x02D0 (size: 0x8)
    class UWidgetAnimation* mpIncorporealOutAnimation;                                // 0x02D8 (size: 0x8)
    class UWidgetAnimation* mpBigScanAnimation;                                       // 0x02E0 (size: 0x8)
    bool bDebugMode;                                                                  // 0x02E8 (size: 0x1)
    class USizeBox* mpScanSizeBox;                                                    // 0x02F0 (size: 0x8)
    class UOverlay* mpVehicleContainer;                                               // 0x02F8 (size: 0x8)
    class UOverlay* mpAssaultContainer;                                               // 0x0300 (size: 0x8)
    class UOverlay* mpBanishedContainer;                                              // 0x0308 (size: 0x8)
    class UImage* mpScanSweepBar;                                                     // 0x0310 (size: 0x8)
    class UStateMachineComponent* pOwningDeathwireStateMachineComponent;              // 0x0318 (size: 0x8)
    EEradicatorHUDState mPrevState;                                                   // 0x0320 (size: 0x1)
    EEradicatorHUDState mNewState;                                                    // 0x0321 (size: 0x1)
    float mCurrentStateTime;                                                          // 0x0324 (size: 0x4)
    bool mbObserved_DirtyFlag;                                                        // 0x0328 (size: 0x1)

    void UpdateSurgeBoxSize(class AEradicatorChar* pEradChar);
    void TryUpdateFlipbookAnimator(const int32& prevState, const int32& newState, const float& currentStateTime, const float& prevStateExitTime);
    void OnStateUpdate(const int32& currentState, const float& currentTime);
    void OnStateChange(const int32& prevState, int32 newState, const float& endTime);
    void CaptureCurrentStateProgress(class UStateMachineComponent* StateMachineComponent);
}; // Size: 0x338

class UHUDEvilAbilityItemWidget : public UUserWidget
{
    FLinearColor mAbilityReadyColor;                                                  // 0x0260 (size: 0x10)
    FLinearColor mAbilityOnCooldownColor;                                             // 0x0270 (size: 0x10)
    FLinearColor mAbilityCooldownBoostColor;                                          // 0x0280 (size: 0x10)
    FLinearColor mAbilityLockoutColor;                                                // 0x0290 (size: 0x10)
    EGameActionType mActionType;                                                      // 0x02A0 (size: 0x1)
    TArray<class UTexture2D*> mpBackgroundPortraits;                                  // 0x02A8 (size: 0x10)
    class UMaterialInterface* mpAbilityIconMaterialInterface;                         // 0x02B8 (size: 0x8)
    EEvilAbilityState mAbilityState;                                                  // 0x02C0 (size: 0x1)
    float mCooldownAlpha;                                                             // 0x02C4 (size: 0x4)
    class UCanvasPanel* mpCanvasPanel;                                                // 0x02C8 (size: 0x8)
    class UProgressBar* mpCooldownProgressBar;                                        // 0x02D0 (size: 0x8)
    class UTextBlock* mpAbilityCountText;                                             // 0x02D8 (size: 0x8)
    class UTextBlock* mpCooldownSecondsText;                                          // 0x02E0 (size: 0x8)
    class UButtonPromptWidget* mpAbilityControlButtonImage;                           // 0x02E8 (size: 0x8)
    class UImage* mpBackgroundImage;                                                  // 0x02F0 (size: 0x8)
    class UCanvasPanel* mpAbilityResourceCounterPanel;                                // 0x02F8 (size: 0x8)
    class UImage* mpResourceCounterFullCircle;                                        // 0x0300 (size: 0x8)
    class UWidgetAnimation* mpAbilityNotUsable;                                       // 0x0308 (size: 0x8)
    class UMaterialInstanceDynamic* mpAbilityIconMaterialInstance;                    // 0x0310 (size: 0x8)
    class AFPChar* mpFPChar;                                                          // 0x0318 (size: 0x8)

}; // Size: 0x328

class UHUDEvilDamagePanel : public UUserWidget
{
    class UMaterialInterface* mpArmourMaterialInterface;                              // 0x0260 (size: 0x8)
    class UMaterialInterface* mpDollMinionMaterialInterface;                          // 0x0268 (size: 0x8)
    class UMaterialInterface* mpAnomalyMimicMaterialInterface;                        // 0x0270 (size: 0x8)
    class UWidgetAnimation* mpArmourOn;                                               // 0x0278 (size: 0x8)
    class UWidgetAnimation* mpArmourBroken;                                           // 0x0280 (size: 0x8)
    class UWidgetAnimation* mpArmourTimeout;                                          // 0x0288 (size: 0x8)
    class UWidgetAnimation* mpDollMinionOn;                                           // 0x0290 (size: 0x8)
    class UWidgetAnimation* mpDollMinionTimeout;                                      // 0x0298 (size: 0x8)
    class UWidgetAnimation* mpAnomalyMimicOn;                                         // 0x02A0 (size: 0x8)
    class UWidgetAnimation* mpAnomalyMimicDestroyed;                                  // 0x02A8 (size: 0x8)
    class UImage* mpArmourImage;                                                      // 0x02B0 (size: 0x8)
    class UImage* mpDollImage;                                                        // 0x02B8 (size: 0x8)
    class UImage* mpAnomalyImage;                                                     // 0x02C0 (size: 0x8)
    class UImage* mpArmourLeft;                                                       // 0x02C8 (size: 0x8)
    class UImage* mpArmourRight;                                                      // 0x02D0 (size: 0x8)
    class UWidgetSwitcher* mpGameModeSwitcher;                                        // 0x02D8 (size: 0x8)
    class UHorizontalBox* mpDollPanel;                                                // 0x02E0 (size: 0x8)
    class USizeBox* mpExtraDollsSizeBox;                                              // 0x02E8 (size: 0x8)
    class UTextBlock* mpExtraDollsText;                                               // 0x02F0 (size: 0x8)
    int32 mMaxNumberOfDollFaces;                                                      // 0x02F8 (size: 0x4)
    bool mbIsShowingRageMessageText;                                                  // 0x02FC (size: 0x1)
    bool mbPlayingDollDamageAnimationForward;                                         // 0x02FD (size: 0x1)
    bool mbPlayingAnomalyMimicDamageAnimationForward;                                 // 0x02FE (size: 0x1)
    bool mbMimicDamagedLastFrame;                                                     // 0x02FF (size: 0x1)
    class UMaterialInstanceDynamic* mpArmourMaterialInstance;                         // 0x0308 (size: 0x8)
    class UMaterialInstanceDynamic* mpDollMinionMaterialInstance;                     // 0x0310 (size: 0x8)
    class UMaterialInstanceDynamic* mpAnomalyMimicMaterialInstance;                   // 0x0318 (size: 0x8)
    TSubclassOf<class UHUDSurvivalDollCharWidget> mSurvivalDollCharWidgetClass;       // 0x0320 (size: 0x8)

}; // Size: 0x328

class UHUDEvilIcon_Widget : public UUserWidget
{
    class UImage* mpIconFG;                                                           // 0x0260 (size: 0x8)
    class UImage* mpIconBG;                                                           // 0x0268 (size: 0x8)

    void HighlightSelection();
    class UImage* GetFGEvilIcon();
    void ClearHighlight();
}; // Size: 0x270

class UHUDEvilOverlayPanel : public UCustomizableUserWidget
{

    void Update(class ATPChar* pTrackedTPChar);
    void InitializeState(class ATPChar* pTrackedTPChar);
    void BindStateMachineDelegate(class UStateMachineComponent* pstateMachineComponent);
}; // Size: 0x270

class UHUDEvilPanel : public UUserWidget
{
    class UHUDEvilAbilityItemWidget* mpEvilAbilityItem0;                              // 0x0260 (size: 0x8)
    class UHUDEvilAbilityItemWidget* mpEvilAbilityItem1;                              // 0x0268 (size: 0x8)
    class UHUDEvilAbilityItemWidget* mpEvilAbilityItem2;                              // 0x0270 (size: 0x8)
    class UCanvasPanel* mpDollTrapsPanel;                                             // 0x0278 (size: 0x8)
    class UTextBlock* mpCurrentTrapsPlaced;                                           // 0x0280 (size: 0x8)
    class UTextBlock* mpTotalTrapsAvailable;                                          // 0x0288 (size: 0x8)
    class UButtonPromptWidget* mpRemoveTrapButton;                                    // 0x0290 (size: 0x8)
    class UTextBlock* mpRemoveTrapTextBlock;                                          // 0x0298 (size: 0x8)

}; // Size: 0x2A0

class UHUDEvilRagePanel : public UUserWidget
{
    class UMaterialInterface* mpRageMaterialInterface;                                // 0x0260 (size: 0x8)
    class UTextBlock* mpRageText;                                                     // 0x0268 (size: 0x8)
    class UImage* mpRageBarFill;                                                      // 0x0270 (size: 0x8)
    class UWidgetAnimation* mpRageBarFull;                                            // 0x0278 (size: 0x8)
    class UWidgetAnimation* mpRageBarPulse;                                           // 0x0280 (size: 0x8)
    class UTexture2D* mpFilledTexture;                                                // 0x0288 (size: 0x8)
    class UTexture2D* mpUnFilledTexture;                                              // 0x0290 (size: 0x8)
    class UMaterialInstanceDynamic* mpRageMaterialInstance;                           // 0x0298 (size: 0x8)

    void UpdateRageProgressBar(class ATPChar* pTrackedTPChar);
    void Update(class ATPChar* pTrackedTPChar);
    void OnRageBarFullFinished();
}; // Size: 0x2A8

class UHUDEvilWheelPanel : public UUserWidget
{
    TArray<class UHUDEvilIcon_Widget*> mEvilIconWidgets;                              // 0x0260 (size: 0x10)
    class UHorizontalBox* mpActiveControlsBox;                                        // 0x0270 (size: 0x8)
    class UHorizontalBox* mpEvilIconsBox;                                             // 0x0278 (size: 0x8)
    class UTextBlock* mpCountdownText;                                                // 0x0280 (size: 0x8)
    class UImage* mpChangeLeftImage;                                                  // 0x0288 (size: 0x8)
    class UImage* mpChangeRightImage;                                                 // 0x0290 (size: 0x8)
    class UImage* mpTransformImage;                                                   // 0x0298 (size: 0x8)
    class ATPChar* mpTrackedChar;                                                     // 0x02A0 (size: 0x8)
    TArray<ECharacterType> mTutorialAvailableEvils;                                   // 0x02A8 (size: 0x10)
    TArray<ECharacterType> mAvailableEvils;                                           // 0x02B8 (size: 0x10)
    int32 mCurrentEvilIndex;                                                          // 0x02C8 (size: 0x4)
    bool mbIsSelectingRandom;                                                         // 0x02CC (size: 0x1)

    void SetAvailableTutorialEvils(TArray<ECharacterType> availableEvils);
    void OnDeviceTypeChanged();
    TArray<ECharacterType> GetEvilList();
    ECharacterType GetCurrentSelectedEvilType();
}; // Size: 0x2D0

class UHUDFailedStationIndicatorWidget : public UUserWidget
{
    class AStationBase* mpTrackedStation;                                             // 0x0260 (size: 0x8)
    class UCanvasPanel* mpIndicatorCanvas;                                            // 0x0268 (size: 0x8)
    class UImage* mpStationIcon;                                                      // 0x0270 (size: 0x8)
    class UWidgetAnimation* mpOnStationFailedAnimation;                               // 0x0278 (size: 0x8)

    void SetTrackedStation(class AStationBase* pStation);
    void OnStationFailedAnimationFinished();
    class AStationBase* GetTrackedStation();
}; // Size: 0x280

class UHUDLoadingScreenWidget : public UUserWidget
{
    TArray<class UTexture2D*> HintTitleTextures;                                      // 0x0260 (size: 0x10)
    class UDataTable* mpHintsDefTable;                                                // 0x0270 (size: 0x8)
    TArray<FLoadingScreenData> mLoadingScreenData;                                    // 0x0280 (size: 0x10)
    class UTexture2D* mpDefaultTexture;                                               // 0x0290 (size: 0x8)
    class UTexture2D* mpSurvivalTexture;                                              // 0x0298 (size: 0x8)
    FMargin PrizeRevealPadding;                                                       // 0x02A0 (size: 0x10)
    FVector2D TeenToEvilSpacer;                                                       // 0x02B0 (size: 0x8)
    float ShowPrizeRevealPerPlayer;                                                   // 0x02B8 (size: 0x4)
    float ScreenTransitionTime;                                                       // 0x02BC (size: 0x4)
    class UBorder* mpBackgroundBorder;                                                // 0x02C0 (size: 0x8)
    class ULoadingScreenVoiceGroupWidget* mpVoiceGroupWidget;                         // 0x02C8 (size: 0x8)
    class UTextBlock* mpTipTitleText;                                                 // 0x02D0 (size: 0x8)
    class UOverlay* mpTipsOverlay;                                                    // 0x02D8 (size: 0x8)
    class UVerticalBox* mpTipsBox;                                                    // 0x02E0 (size: 0x8)
    class UImage* mpTip1TitleIcon;                                                    // 0x02E8 (size: 0x8)
    class UTextBlock* mpTip1TitleText;                                                // 0x02F0 (size: 0x8)
    class UTextBlock* mpTip1Text;                                                     // 0x02F8 (size: 0x8)
    class UImage* mpTip2TitleIcon;                                                    // 0x0300 (size: 0x8)
    class UTextBlock* mpTip2TitleText;                                                // 0x0308 (size: 0x8)
    class UTextBlock* mpTip2Text;                                                     // 0x0310 (size: 0x8)
    class UImage* mpTip3TitleIcon;                                                    // 0x0318 (size: 0x8)
    class UTextBlock* mpTip3TitleText;                                                // 0x0320 (size: 0x8)
    class UTextBlock* mpTip3Text;                                                     // 0x0328 (size: 0x8)
    class UTextBlock* mpLevelNameText;                                                // 0x0330 (size: 0x8)
    class UCanvasPanel* mpPrizePanel;                                                 // 0x0338 (size: 0x8)
    class UHorizontalBox* mpPrizeBox;                                                 // 0x0340 (size: 0x8)
    class UButton* mpToggleDetailsButton;                                             // 0x0348 (size: 0x8)
    class UTextBlock* mpToggleDetailsText;                                            // 0x0350 (size: 0x8)
    class UOverlay* mpLoadingOverlay;                                                 // 0x0358 (size: 0x8)
    class UImage* mpLoadingImage;                                                     // 0x0360 (size: 0x8)
    class UTextBlock* mpLoadingWaitingText;                                           // 0x0368 (size: 0x8)
    class UOverlay* mpSpinnerOverlay;                                                 // 0x0370 (size: 0x8)
    class UImage* mpEarlyAccessImage;                                                 // 0x0378 (size: 0x8)
    ELoadingScreenState mState;                                                       // 0x0380 (size: 0x1)
    TMap<class FString, class FHintData> mHintData;                                   // 0x0388 (size: 0x50)
    TMap<class FDbItemId, class EFaction> mHiddenPrizeData;                           // 0x03D8 (size: 0x50)
    TArray<FString> mHintIds;                                                         // 0x0428 (size: 0x10)
    TArray<FDbItemId> mTeenPrizeIds;                                                  // 0x0438 (size: 0x10)
    FDbItemId mEvilPrizeId;                                                           // 0x0448 (size: 0x18)
    TArray<class UPrizeRevealWidget*> mPrizeRevealWidgets;                            // 0x0460 (size: 0x10)
    int32 mCurrentPrize;                                                              // 0x0470 (size: 0x4)
    float mStateTimer;                                                                // 0x0474 (size: 0x4)
    bool mbIsInViewport;                                                              // 0x0478 (size: 0x1)
    ELevelType mLevelType;                                                            // 0x0480 (size: 0x1)
    ESubLevelType mSubLevelType;                                                      // 0x0481 (size: 0x1)
    ECharacterType mCharacterType;                                                    // 0x0482 (size: 0x1)

    void UpdateToggleDetailsText();
    void UpdateState(float DeltaTime);
    void UpdateLoadingHintText(float InDeltaTime);
    void ShowWaiting(TArray<FString> Names);
    void ShowRandomHint();
    void ShowLoadingScreenDirectly();
    void SetupPrizeReveal();
    void SetupAndStartScreen();
    void SetSubLevelType(ESubLevelType SubLevelType);
    void SetState(ELoadingScreenState State);
    void SetLevelType(ELevelType LevelType);
    void SetCharacterType(ECharacterType CharType);
    void PopulateHintTable();
    void OnToggleDetailsPressed();
    void OnAltActionPressed();
    void InputAction_ToggleShowPrizeDetails(bool bPressed);
    void InputAction_NextHint(bool bPressed);
    void Hide();
    bool FadeBackground(bool bFadeIn);
    void BeginFadeOut();
    void AddPrizeWidget(FDbItemId ItemId, bool bIsEvilCharacter);
    void AddHint(FString Name, FHintData hint);
    void AddAllPrizeData();
    void AddAllHints();
    void _DEBUG_SimulatePrizes();
}; // Size: 0x488

class UHUDMinigame_BarTiming : public UUserWidget
{
    class UCanvasPanel* mpActionBarPanel;                                             // 0x0260 (size: 0x8)
    class UImage* mpTargetBarImage;                                                   // 0x0268 (size: 0x8)
    class UCanvasPanel* mpBarPanel;                                                   // 0x0270 (size: 0x8)
    class UCanvasPanelSlot* mpBarPanelSlot;                                           // 0x0278 (size: 0x8)
    class UImage* mpStatusImage;                                                      // 0x0280 (size: 0x8)
    class USizeBox* mpPassBox1;                                                       // 0x0288 (size: 0x8)
    class USizeBox* mpPassBox2;                                                       // 0x0290 (size: 0x8)
    class USizeBox* mpBullseyeBox;                                                    // 0x0298 (size: 0x8)
    float mCurrentValue;                                                              // 0x02A0 (size: 0x4)
    float mTargetValue;                                                               // 0x02A4 (size: 0x4)
    class UImage* mpCraftingCurrentValueIndicatorImage;                               // 0x02A8 (size: 0x8)
    class UCanvasPanelSlot* mpCraftingCurrentValueIndicatorSlot;                      // 0x02B0 (size: 0x8)
    class UImage* mpProneCurrentValueIndicatorImage;                                  // 0x02B8 (size: 0x8)
    class UCanvasPanelSlot* mpProneCurrentValueIndicatorSlot;                         // 0x02C0 (size: 0x8)
    class UCanvasPanelSlot* mpTargetAreaBoxSlot;                                      // 0x02C8 (size: 0x8)
    class UTexture2D* mpNeutralHammerIcon;                                            // 0x02D0 (size: 0x8)
    class UTexture2D* mpPassHammerIcon;                                               // 0x02D8 (size: 0x8)
    class UTexture2D* mpFailHammerIcon;                                               // 0x02E0 (size: 0x8)
    class UTexture2D* mpBullseyeHammerIcon;                                           // 0x02E8 (size: 0x8)
    class UTexture2D* mpNeutralProneLine;                                             // 0x02F0 (size: 0x8)
    class UTexture2D* mpBullseyeProneLine;                                            // 0x02F8 (size: 0x8)
    class UTexture2D* mpFailProneLine;                                                // 0x0300 (size: 0x8)
    class UTexture2D* mpBullseyeGlow;                                                 // 0x0308 (size: 0x8)
    class UTexture2D* mpFailGlow;                                                     // 0x0310 (size: 0x8)
    class UImage* mpDarkGlow;                                                         // 0x0318 (size: 0x8)
    class UImage* mpColoredGlow;                                                      // 0x0320 (size: 0x8)
    TMap<class EBarTimingMinigameType, class FBarTimingStyleGuide> mMinigameStyleGuides; // 0x0328 (size: 0x50)
    class UImage* mpReviveLineLeft;                                                   // 0x0378 (size: 0x8)
    class UImage* mpReviveLineRight;                                                  // 0x0380 (size: 0x8)
    EBarTimingMinigameType mCurrentMinigameType;                                      // 0x0388 (size: 0x1)
    class UTextBlock* mpDescriptionText;                                              // 0x0390 (size: 0x8)
    class USizeBox* mpProneLeftSideBox;                                               // 0x0398 (size: 0x8)
    class USizeBox* mpProneRightSideBox;                                              // 0x03A0 (size: 0x8)
    float mReviveSpriteGlowOffset;                                                    // 0x03A8 (size: 0x4)
    class UHorizontalBox* mpReviveLineBox;                                            // 0x03B0 (size: 0x8)
    class USpacer* mpProneLineSpacer;                                                 // 0x03B8 (size: 0x8)
    class UCanvasPanelSlot* mpDescriptionOverlaySlot;                                 // 0x03C0 (size: 0x8)
    class UCanvasPanelSlot* mpMinigameBoxSlot;                                        // 0x03C8 (size: 0x8)
    class UCanvasPanel* mpMinigameStatusPanel;                                        // 0x03D0 (size: 0x8)

    void UpdateVisibility(class ATPChar* pTrackedChar);
    void UpdateMinigame(class ATPChar* pTrackedChar);
    void Update(class ATPChar* pTrackedChar);
    bool ShouldShowMinigameStatus(class ATPChar* pTrackedChar);
    bool ShouldShowMinigameProgressBar(class ATPChar* pTrackedChar);
}; // Size: 0x3D8

class UHUDMinigame_RingAligning : public UUserWidget
{
    class UCanvasPanel* mpRingAlignPanel;                                             // 0x0260 (size: 0x8)
    class UImage* mpRingAlignRingImage;                                               // 0x0268 (size: 0x8)
    class UHorizontalBox* mpRingAlignActionBox;                                       // 0x0270 (size: 0x8)
    class UMaterialInstance* mpHeartMaterial;                                         // 0x0278 (size: 0x8)
    class UMaterialInstance* mpCrossMaterial;                                         // 0x0280 (size: 0x8)
    class UMaterialInstance* mpPentagonMaterial;                                      // 0x0288 (size: 0x8)
    class UMaterialInstanceDynamic* mpCurrentRingAlignMaterial;                       // 0x0290 (size: 0x8)
    ERingAligningMinigameType mCurrentMinigameType;                                   // 0x0298 (size: 0x1)
    ERingAligningMinigameType mMinigameTypeLastFrame;                                 // 0x0299 (size: 0x1)

    void UpdateVisibility(class ATPChar* pTrackedChar);
    void UpdateMinigameType(class ATPChar* pTrackedChar);
    void UpdateMinigame(class ATPChar* pTrackedChar);
    void Update(class ATPChar* pTrackedChar);
    bool ShouldShowMinigame(class ATPChar* pTrackedChar);
}; // Size: 0x2A0

class UHUDMinigame_Rotator : public UUserWidget
{
    class UCanvasPanel* mpRotatorPanel;                                               // 0x0260 (size: 0x8)
    class UCanvasPanel* mpRotatorNodePanel;                                           // 0x0268 (size: 0x8)
    class UHorizontalBox* mpRotatorChallengeNumIndicatorBox;                          // 0x0270 (size: 0x8)
    class UTexture2D* mpRotatorNodeImage;                                             // 0x0278 (size: 0x8)
    class UTexture2D* mpRotatorNodeLockedImage;                                       // 0x0280 (size: 0x8)
    class UTexture2D* mpRotatorNodeCorrectImage;                                      // 0x0288 (size: 0x8)
    class UTexture2D* mpRotatorTargetImage;                                           // 0x0290 (size: 0x8)
    int32 mProgressNodeNegativeMargin;                                                // 0x0298 (size: 0x4)
    class UImage* mpBackgroundImage;                                                  // 0x02A0 (size: 0x8)
    class UButtonPromptWidget* mpButtonPromptLeft;                                    // 0x02A8 (size: 0x8)
    class UButtonPromptWidget* mpButtonPromptRight;                                   // 0x02B0 (size: 0x8)
    class UCanvasPanel* mpRotatorTargetPanel;                                         // 0x02B8 (size: 0x8)
    float mRotatorRadius;                                                             // 0x02C0 (size: 0x4)
    float mRotatorTargetDiameter;                                                     // 0x02C4 (size: 0x4)
    int32 mMaxRotatorNodes;                                                           // 0x02C8 (size: 0x4)
    int32 mMaxRotatorPuzzles;                                                         // 0x02CC (size: 0x4)
    TArray<class UImage*> mRotatorTargetImageList;                                    // 0x02D0 (size: 0x10)
    TArray<class UImage*> mRotatorNodeImageList;                                      // 0x02E0 (size: 0x10)
    class UVerticalBox* mpConfirmControls;                                            // 0x02F0 (size: 0x8)
    TSubclassOf<class UHUDMinigame_Rotator_ProgressNode> mProgressNodeClass;          // 0x02F8 (size: 0x8)
    TArray<class UHUDMinigame_Rotator_ProgressNode*> mCurrentProgressNodes;           // 0x0300 (size: 0x10)
    int32 mViewedPuzzlesCompleteLastFrame;                                            // 0x0310 (size: 0x4)
    class UVerticalBox* mpControlsBox;                                                // 0x0318 (size: 0x8)
    class ATPChar* mpLastViewedTPChar;                                                // 0x0320 (size: 0x8)
    bool mbNeedsObserverRefresh;                                                      // 0x0328 (size: 0x1)
    TMap<class ERotatorMinigameType, class FRotatorStyleGuide> mMinigameStyleGuides;  // 0x0330 (size: 0x50)
    ERotatorMinigameType mCurrentDisplayedRotatorStyle;                               // 0x0380 (size: 0x1)

    void UpdateVisibility(class ATPChar* pTrackedChar);
    void UpdateRotatorGame(class ATPChar* pTrackedChar);
    void UpdateObserver(class ATPChar* pTrackedChar);
    void Update(class ATPChar* pTrackedChar);
    ERotatorMinigameType GetRotatorTypeFromSearchablePoint(class ASearchablePoint* pPoint);
    void GenerateRotatorUI(class URotatorMinigame* pMinigame);
    void GenerateProgressNodes(int32 Num);
    void AlignRotatorUI(TArray<int32> anglePositions, float puzzleRotation, class ATPChar* pTrackedChar);
}; // Size: 0x388

class UHUDMinigame_Rotator_ProgressNode : public UUserWidget
{
    class UImage* mpContainerBorder;                                                  // 0x0260 (size: 0x8)
    class UImage* mpOnCompleteImage;                                                  // 0x0268 (size: 0x8)
    class UTexture2D* mpContainerFilledImage;                                         // 0x0270 (size: 0x8)
    class UImage* mpCurrentPuzzleIndicator;                                           // 0x0278 (size: 0x8)

    void PopulateData(class UTexture2D* pEmptyContainer, class UTexture2D* pFullContainer, class UTexture2D* pOnComplete);
    void DoSetCurrent();
    void DoSetComplete();
}; // Size: 0x280

class UHUDNotification : public UUserWidget
{
    bool mbIsPermanent;                                                               // 0x0260 (size: 0x1)
    class UWidgetAnimation* mpNotificationFadeIn;                                     // 0x0268 (size: 0x8)
    class UWidgetAnimation* mpNotificationFadeOut;                                    // 0x0270 (size: 0x8)
    class UWidgetAnimation* mpEnragedTextAnim;                                        // 0x0278 (size: 0x8)
    class UTextBlock* mpNotificationTextBlock;                                        // 0x0280 (size: 0x8)

    void UpdateVisibility();
    void StartNotification();
    void ShowNotification();
    void SetNotificationType(EHUDNotificationType Val);
    void SetDurationAndText(float Duration, FText textToShow);
    bool IsShowingNotification();
    void HideNotification();
    void FinishNotification();
}; // Size: 0x2B0

class UHUDNotificationsPanel : public UUserWidget
{
    TSubclassOf<class UHUDNotification> mHUDNotificationWidgetClass;                  // 0x0260 (size: 0x8)
    class UHUDNotification* mpPermanentHUDNotification;                               // 0x0268 (size: 0x8)
    TArray<class UHUDNotification*> mNotificationsQueue;                              // 0x0270 (size: 0x10)
    class UHUDNotification* mpCurrentNotification;                                    // 0x0280 (size: 0x8)
    bool mbEvilWasEnragedLastFrame;                                                   // 0x0288 (size: 0x1)
    bool mbWasSpectralLastFrame;                                                      // 0x0289 (size: 0x1)
    bool mbShowedWinConditionNotification;                                            // 0x028A (size: 0x1)

    void UpdateWinConditionNotifications(class ATPChar* pTrackedChar);
    void UpdateSpectralNotifications(class ATPChar* pTrackedChar);
    void UpdateRageNotifications(class ATPChar* pTrackedChar);
    void UpdateQueue();
    void Update(class ATPChar* pTrackedChar);
    void SetPermanentNotification(FText textToShow, EHUDNotificationType notificationType);
    void QueueNotification(float Duration, FText textToShow, EHUDNotificationType notificationType);
    void HidePermanentNotification();
    void ClearNotificationsOfType(EHUDNotificationType notificationType);
}; // Size: 0x290

class UHUDPickupPanel : public UUserWidget
{
    class UButtonPromptWidget* mpKeyPrompt_Use;                                       // 0x0260 (size: 0x8)
    class UButtonPromptWidget* mpKeyPrompt_Give;                                      // 0x0268 (size: 0x8)
    class UCanvasPanel* mpGiveItemPanel;                                              // 0x0270 (size: 0x8)
    class UImage* mpPickupImage;                                                      // 0x0278 (size: 0x8)
    class UImage* mpWalkieProgressBar;                                                // 0x0280 (size: 0x8)
    float mWalkieProgressBarStartingLength;                                           // 0x0288 (size: 0x4)
    class UTexture2D* mpGiveIcon;                                                     // 0x0290 (size: 0x8)
    class UTexture2D* mpDropIcon;                                                     // 0x0298 (size: 0x8)
    class UImage* mpGiveItemImage;                                                    // 0x02A0 (size: 0x8)

}; // Size: 0x2A8

class UHUDPingIndicatorWidget : public UUserWidget
{
    class UImage* mpBackgroundBorder;                                                 // 0x0260 (size: 0x8)
    class UImage* mpBackgroundFill;                                                   // 0x0268 (size: 0x8)
    class UImage* mpPingIcon;                                                         // 0x0270 (size: 0x8)
    class UImage* mpHoveredIndicatorImage;                                            // 0x0278 (size: 0x8)
    class UTextBlock* mpDistanceIndicatorText;                                        // 0x0280 (size: 0x8)
    class UCanvasPanel* mpMainCanvas;                                                 // 0x0288 (size: 0x8)
    class UCanvasPanel* mpOnScreenCanvas;                                             // 0x0290 (size: 0x8)
    class UCanvasPanel* mpOffScreenCanvas;                                            // 0x0298 (size: 0x8)
    class UImage* mpOffScreenIcon;                                                    // 0x02A0 (size: 0x8)
    class UCustomProgressBar* mpPingProgressBar;                                      // 0x02A8 (size: 0x8)
    class UTexture2D* mpOffscreenTexture;                                             // 0x02B0 (size: 0x8)
    class AGameplayHUD* mpOwningHUD;                                                  // 0x02B8 (size: 0x8)
    class APlayerController* mpPlayerController;                                      // 0x02C0 (size: 0x8)
    class APing* mpTrackedPing;                                                       // 0x02C8 (size: 0x8)

    void UpdateVisibility();
    void UpdatePingIndicator();
    void Update();
    void SetTrackedPing(class APing* pPing);
    void SetPlayerController(class APlayerController* PlayerController);
    void SetGameplayHUD(class AGameplayHUD* pHUD);
    void OnUnGuttered();
    void OnGuttered();
    float GetTrackedPingLifetimeRemainingPercentage();
    class APing* GetTrackedPing();
    class AGameplayHUD* GetGameplayHUD();
    void Clear();
}; // Size: 0x2E0

class UHUDPingMenu : public UHUDRadialMenu
{
    class UImage* mpCancelImage;                                                      // 0x0308 (size: 0x8)
    class UImage* mpSwitchMenuImage;                                                  // 0x0310 (size: 0x8)
    class UImage* mpCooldownImage;                                                    // 0x0318 (size: 0x8)
    class UTexture2D* mpRingTexture;                                                  // 0x0320 (size: 0x8)
    class UMaterialInstance* mpCircularProgressMaterialInstance;                      // 0x0328 (size: 0x8)

}; // Size: 0x330

class UHUDPlayerCard : public UUserWidget
{
    float mHealthBarUpdateInterval;                                                   // 0x0260 (size: 0x4)
    FLinearColor mLethalWeaponColor;                                                  // 0x0264 (size: 0x10)
    FLinearColor mNonLethalWeaponColor;                                               // 0x0274 (size: 0x10)
    FLinearColor mNonActiveWeaponColor;                                               // 0x0284 (size: 0x10)
    FLinearColor mActiveWeaponColor;                                                  // 0x0294 (size: 0x10)
    FLinearColor mHighWeaponIconColor;                                                // 0x02A4 (size: 0x10)
    FLinearColor mMidWeaponIconColor;                                                 // 0x02B4 (size: 0x10)
    FLinearColor mLowWeaponIconColor;                                                 // 0x02C4 (size: 0x10)
    FLinearColor mShadowBarFillColor;                                                 // 0x02D4 (size: 0x10)
    TArray<FLinearColor> mHudStateToColors;                                           // 0x02E8 (size: 0x10)
    FLinearColor mReviveBarColor;                                                     // 0x02F8 (size: 0x10)
    class UTexture* mpNormalHealthBarTexture;                                         // 0x0308 (size: 0x8)
    class UTexture* mpProneHealthBarTexture;                                          // 0x0310 (size: 0x8)
    TArray<class UTexture2D*> mpCurrentActionTextures;                                // 0x0318 (size: 0x10)
    class UTexture2D* mpProneArrowsNormal;                                            // 0x0328 (size: 0x8)
    class UTexture2D* mpProneArrowsMarred;                                            // 0x0330 (size: 0x8)
    class UCanvasPanel* mpCanvasPanel;                                                // 0x0338 (size: 0x8)
    class UTextBlock* mpPlayerName;                                                   // 0x0340 (size: 0x8)
    class UImage* mpCharacterPortraitImage;                                           // 0x0348 (size: 0x8)
    class UWidgetSwitcher* mpTeenBGStateSwitcher;                                     // 0x0350 (size: 0x8)
    class UWidgetSwitcher* mpTeenStateSwitcher;                                       // 0x0358 (size: 0x8)
    class UWidgetSwitcher* mpTeenStateIconSwitcher;                                   // 0x0360 (size: 0x8)
    class UTextBlock* mpRoomLabelText;                                                // 0x0368 (size: 0x8)
    class UTextBlock* mpEvilRoomLabelText;                                            // 0x0370 (size: 0x8)
    class UImage* mpStatusBarImage;                                                   // 0x0378 (size: 0x8)
    class UCanvasPanel* mpStatusBarPanel;                                             // 0x0380 (size: 0x8)
    class UImage* mpWeaponIconImage;                                                  // 0x0388 (size: 0x8)
    class UCustomProgressBar* mpHealthBar;                                            // 0x0390 (size: 0x8)
    class UCustomProgressBar* mpHealthBarShadow;                                      // 0x0398 (size: 0x8)
    class UWidgetSwitcher* mpHealthBarBackgroundSwitcher;                             // 0x03A0 (size: 0x8)
    class UImage* mpSpeakerImage;                                                     // 0x03A8 (size: 0x8)
    class UImage* mpPingIndicatorImage;                                               // 0x03B0 (size: 0x8)
    class UImage* mpPickupImage;                                                      // 0x03B8 (size: 0x8)
    class UCanvasPanel* mpHealthBarCanvasPanel;                                       // 0x03C0 (size: 0x8)
    class UVerticalBox* mpTeenStatusBarVerticalPanel;                                 // 0x03C8 (size: 0x8)
    class UVerticalBox* mpEvilStatusBarVerticalPanel;                                 // 0x03D0 (size: 0x8)
    class UTextBlock* mpHitsTextBlock;                                                // 0x03D8 (size: 0x8)
    class UImage* mpCriticalHealthImage;                                              // 0x03E0 (size: 0x8)
    class UProgressBar* mpReviveBar;                                                  // 0x03E8 (size: 0x8)
    class UWidgetSwitcher* mpFactionSwitcher;                                         // 0x03F0 (size: 0x8)
    class UWidgetSwitcher* mpEvilStateSwitcher;                                       // 0x03F8 (size: 0x8)
    class UImage* mpCharacterRageBGImage;                                             // 0x0400 (size: 0x8)
    class UImage* mpEvilCharacterPortraitImage;                                       // 0x0408 (size: 0x8)
    class UImage* mpCharacterRageEyeGlowImage;                                        // 0x0410 (size: 0x8)
    class UTextBlock* mpEvilPlayerName;                                               // 0x0418 (size: 0x8)
    class UCanvasPanel* mpWeaponCanvasPanel;                                          // 0x0420 (size: 0x8)
    class UImage* mpWeaponIconGlowBGImage;                                            // 0x0428 (size: 0x8)
    class UImage* mpWeaponIconBorderImage;                                            // 0x0430 (size: 0x8)
    class UImage* mpWeaponIconBGImage;                                                // 0x0438 (size: 0x8)
    class UCanvasPanel* mpHardyHealthCanvasPanel;                                     // 0x0440 (size: 0x8)
    class USizeBox* mpHardyHealthBarSizeBox;                                          // 0x0448 (size: 0x8)
    class USizeBox* mpHardyHealthBarShadowSizeBox;                                    // 0x0450 (size: 0x8)
    class UCustomProgressBar* mpHardyHealthBar;                                       // 0x0458 (size: 0x8)
    class USpacer* mpHardySpacer;                                                     // 0x0460 (size: 0x8)
    class UCustomProgressBar* mpHardyShadowHealthBar;                                 // 0x0468 (size: 0x8)
    class UCanvasPanel* mpDollMinionPanel;                                            // 0x0470 (size: 0x8)
    class UCustomProgressBar* mpDollMinionLifetimeBar;                                // 0x0478 (size: 0x8)
    class UImage* mpDollMinionRageImage;                                              // 0x0480 (size: 0x8)
    class UButtonPromptWidget* mpDismissButton;                                       // 0x0488 (size: 0x8)
    class UHorizontalBox* mpEvilEventHolidayHB;                                       // 0x0490 (size: 0x8)
    class UTextBlock* mpEvilEventHolidayText;                                         // 0x0498 (size: 0x8)
    class UWidgetAnimation* mpCriticalIconAnim;                                       // 0x04A0 (size: 0x8)
    class UWidgetAnimation* mpProneIconAnim;                                          // 0x04A8 (size: 0x8)
    class UWidgetAnimation* mpInjuredIconAnim;                                        // 0x04B0 (size: 0x8)
    class UWidgetAnimation* mpWeaponCraftAnim;                                        // 0x04B8 (size: 0x8)
    class UWidgetAnimation* mpMarredIconAnim;                                         // 0x04C0 (size: 0x8)
    float mCurrentShakeTime;                                                          // 0x04C8 (size: 0x4)
    bool mbEnragedShake;                                                              // 0x04CC (size: 0x1)
    class ATPChar* mpTrackedTPChar;                                                   // 0x04D8 (size: 0x8)
    class ATPChar* mpLocallyViewedChar;                                               // 0x04E0 (size: 0x8)

}; // Size: 0x4F8

class UHUDPlayerCardPanel : public UUserWidget
{
    int32 MAX_PLAYER_CARDS;                                                           // 0x0260 (size: 0x4)
    TSubclassOf<class UHUDPlayerCard> mHudPlayerCardClass;                            // 0x0268 (size: 0x8)
    TArray<class UHUDPlayerCard*> mpPlayerCards;                                      // 0x0270 (size: 0x10)
    class UHUDPlayerCard* mpSelfCard;                                                 // 0x0280 (size: 0x8)
    class ATPChar* mpLastTrackedTPChar;                                               // 0x0288 (size: 0x8)
    class ARoomFrame* mpCurrentlyDisplayedRoomFrame;                                  // 0x0290 (size: 0x8)
    class UTextBlock* mpLocalRoomFrameLocationText;                                   // 0x0298 (size: 0x8)
    class UImage* mpLocalRoomFrameLocationImage;                                      // 0x02A0 (size: 0x8)
    class UVerticalBox* mpPlayersBox;                                                 // 0x02A8 (size: 0x8)
    class UCanvasPanel* mpSpectatorCanvas;                                            // 0x02B0 (size: 0x8)
    class UTextBlock* mpSpectatorTitleText;                                           // 0x02B8 (size: 0x8)
    class UWidgetSwitcher* mpMessageSwitcher;                                         // 0x02C0 (size: 0x8)

    void UpdateSpectatorPanel(class ATPChar* pTrackedChar);
}; // Size: 0x2C8

class UHUDPlayerName : public UUserWidget
{
    float mTimeHoveringTargetChar;                                                    // 0x0260 (size: 0x4)
    FVector mLastSeenPosition;                                                        // 0x0264 (size: 0xC)
    class UTextBlock* mpPlayerNameText;                                               // 0x0270 (size: 0x8)
    float mTimeHoveredOnChar;                                                         // 0x0278 (size: 0x4)
    class UCurveFloat* mpHeightOffsetCurve;                                           // 0x0280 (size: 0x8)
    class UCurveFloat* mpTextSizeCurve;                                               // 0x0288 (size: 0x8)
    class UCanvasPanel* mpContentCanvas;                                              // 0x0290 (size: 0x8)

    void UpdateVisibility(bool bWantToSee);
    void NativeConstruct();
    float GetTimeToHoverBeforeShowing();
    float GetFadeRate();
}; // Size: 0x298

class UHUDRadialMenu : public UUserWidget
{
    FLinearColor mIconNonHighlightedColor;                                            // 0x0260 (size: 0x10)
    int32 mNumberOfSegments;                                                          // 0x0270 (size: 0x4)
    int32 mMenuRadius;                                                                // 0x0274 (size: 0x4)
    float mSegmentAngleOffset;                                                        // 0x0278 (size: 0x4)
    int32 mCursorRotationRadius;                                                      // 0x027C (size: 0x4)
    float mTimeHasBeenVisible;                                                        // 0x0280 (size: 0x4)
    float mMenuExpansionAnimationRate;                                                // 0x0284 (size: 0x4)
    float mIconDistanceOffset;                                                        // 0x0288 (size: 0x4)
    float mMenuDeadZone;                                                              // 0x028C (size: 0x4)
    FVector2D mIndividualIconSize;                                                    // 0x0290 (size: 0x8)
    bool mbIsShown;                                                                   // 0x0298 (size: 0x1)
    TArray<FRadialMenuSegement> mSegmentList;                                         // 0x02A0 (size: 0x10)
    class UTexture2D* mpRadialSegmentImage_UnSelected;                                // 0x02B0 (size: 0x8)
    class UTexture2D* mpRadialSegmentImage_Selected;                                  // 0x02B8 (size: 0x8)
    class UCanvasPanel* mpCanvasPanel;                                                // 0x02C0 (size: 0x8)
    class UBackgroundBlur* mpBackgroundBlur;                                          // 0x02C8 (size: 0x8)
    class APlayerController* mpCurrentPlayerController;                               // 0x02D0 (size: 0x8)
    class ATPChar* mpCurrentChar;                                                     // 0x02D8 (size: 0x8)
    int32 mCurrentSegmentSelection;                                                   // 0x02E0 (size: 0x4)
    FVector2D mLastNonZeroAccel;                                                      // 0x02E4 (size: 0x8)
    float mMouseAccelMinMagnitude;                                                    // 0x02EC (size: 0x4)
    bool mbDisableEntireMenu;                                                         // 0x02F0 (size: 0x1)
    class UTextBlock* mpSegmentNameText;                                              // 0x0300 (size: 0x8)

    void Update(class ATPChar* pTrackedTPChar);
    void TurnMenuOnOrOff(bool bPressed, bool bDoCancelDoResetCursor);
    void SetIsShown(bool bNewValue);
    void SetEntireMenuDisabled(bool NewValue);
    void SetCurrentPlayerController(class APlayerController* pNewValue);
    void SetCurrentChar(class ATPChar* pNewValue);
    void RecieveSegementSelection(int32 segmentNum);
    bool IsEntireMenuDisabled();
    bool IsCurrentlyShown();
    FVector2D GetCursorPosition();
    FVector2D GetCursorMovementVector();
    class APlayerController* GetCurrentPlayerController();
    class ATPChar* GetCurrentChar();
}; // Size: 0x308

class UHUDRadialMenuSegment : public UUserWidget
{
    class UTexture2D* mpSelectedTexture;                                              // 0x0260 (size: 0x8)
    class UTexture2D* mpUnSelectedTexture;                                            // 0x0268 (size: 0x8)
    class UImage* mpIconImage;                                                        // 0x0270 (size: 0x8)
    class UImage* mpSegmentBackground;                                                // 0x0278 (size: 0x8)
    class UImage* mpSelectorImage;                                                    // 0x0280 (size: 0x8)

    void SetSelected(bool bSelected);
    void SetSegmentIconAngle(float NewValue);
    void PopulateData(class UTexture2D* pIconTexture);
}; // Size: 0x288

class UHUDReplayPanel : public UUserWidget
{
    class UButton* mpPauseButton;                                                     // 0x0260 (size: 0x8)
    class UButton* mpSlowDownButton;                                                  // 0x0268 (size: 0x8)
    class UButton* mpSpeedUpButton;                                                   // 0x0270 (size: 0x8)
    class UButton* mpSkipForwardButton;                                               // 0x0278 (size: 0x8)
    class UButton* mpSkipBackwardButton;                                              // 0x0280 (size: 0x8)
    class UTextBlock* mpTimeDilationText;                                             // 0x0288 (size: 0x8)
    class UProgressBar* mpProgressBar;                                                // 0x0290 (size: 0x8)
    class UTextBlock* mpCurrentTimeText;                                              // 0x0298 (size: 0x8)
    class UTextBlock* mpTotalTimeText;                                                // 0x02A0 (size: 0x8)
    bool mbIsPaused;                                                                  // 0x02A8 (size: 0x1)
    int16 mMaxTimeDilationPower;                                                      // 0x02AA (size: 0x2)
    int16 mMinTimeDilationPower;                                                      // 0x02AC (size: 0x2)
    int16 mTimeDilationPower;                                                         // 0x02AE (size: 0x2)
    bool mbIsScrubbing;                                                               // 0x02B0 (size: 0x1)
    bool mbIsMouseDown;                                                               // 0x02B1 (size: 0x1)
    FVector2D mClickedPosition;                                                       // 0x02B4 (size: 0x8)
    FVector2D mCurrentPosition;                                                       // 0x02BC (size: 0x8)

    bool ShouldShowCursor();
    void OnTimeDilate();
    void OnSpeedUp();
    void OnSlowDown();
    void OnSkipForward();
    void OnSkipBackward();
    void OnPause();
    float GetScrubPercent();
}; // Size: 0x2C8

class UHUDReticle : public UUserWidget
{
    class UImage* mpReticleImage;                                                     // 0x0260 (size: 0x8)
    class UImage* mpInnerRing;                                                        // 0x0268 (size: 0x8)
    class UImage* mpOuterRing;                                                        // 0x0270 (size: 0x8)
    class UImage* mpMiddleRing;                                                       // 0x0278 (size: 0x8)
    class UImage* mpMonsterAssistRing;                                                // 0x0280 (size: 0x8)
    class UImage* mpDisabledRingImage;                                                // 0x0288 (size: 0x8)
    class UWidgetAnimation* mpHitMarkerAnimation;                                     // 0x0290 (size: 0x8)
    class UWidgetAnimation* mpWeaponDisabledAnimation;                                // 0x0298 (size: 0x8)
    class UTexture2D* mpRingTexture;                                                  // 0x02A0 (size: 0x8)
    class UMaterialInstance* mpCircularProgressMaterialInstance;                      // 0x02A8 (size: 0x8)

    void Update(class ATPChar* pTrackedTPChar);
    void StopDisabledAnimation();
    bool ShouldPlayDisabledWeaponEffect(class ATPChar* pTrackedTPChar);
    void PlayHitmarkerAnimation();
    void PlayDisabledAnimation();
}; // Size: 0x2B0

class UHUDScorePopup : public UUserWidget
{
    class UTextBlock* mpMessageTextBlock;                                             // 0x0260 (size: 0x8)
    class UTextBlock* mpScoreTextBlock;                                               // 0x0268 (size: 0x8)
    class UBorder* mpMessageBorder;                                                   // 0x0270 (size: 0x8)
    class AGameplayHUD* mpOwnerHUD;                                                   // 0x0278 (size: 0x8)

}; // Size: 0x2A0

class UHUDScoreWidget : public UUserWidget
{
    class UMatchStateSummaryWidget* mpMatchSummaryWidget;                             // 0x0260 (size: 0x8)

}; // Size: 0x268

class UHUDServerTypeWidget : public UUserWidget
{
    class UTextBlock* mpServerTypeText;                                               // 0x0260 (size: 0x8)

    void SetServerText();
}; // Size: 0x268

class UHUDSignalMenu : public UHUDRadialMenu
{
    class UImage* mpCancelImage;                                                      // 0x0308 (size: 0x8)
    class UImage* mpCooldownImage;                                                    // 0x0310 (size: 0x8)
    class UTexture2D* mpRingTexture;                                                  // 0x0318 (size: 0x8)
    class UMaterialInstance* mpCircularProgressMaterialInstance;                      // 0x0320 (size: 0x8)

}; // Size: 0x328

class UHUDStatusPanels : public UUserWidget
{
    TArray<class UHUDStatusTile*> mCurrentStatusTileList;                             // 0x0260 (size: 0x10)
    TArray<FStatusTileData> mAllStatusData;                                           // 0x0270 (size: 0x10)
    TSubclassOf<class UHUDStatusTile> mStatusTileClass;                               // 0x0280 (size: 0x8)
    class UHorizontalBox* mpTileBox;                                                  // 0x0288 (size: 0x8)

    void PresentStatusData(TArray<FStatusTileData> allData, class ATPChar* pTrackedChar);
}; // Size: 0x290

class UHUDStatusTile : public UUserWidget
{
    class UCanvasPanel* mpCanvas;                                                     // 0x0260 (size: 0x8)
    class UImage* mpProgressRingForeground;                                           // 0x0268 (size: 0x8)
    class UImage* mpProgressRingBackground;                                           // 0x0270 (size: 0x8)
    class UImage* mpStatusIcon;                                                       // 0x0278 (size: 0x8)
    class UTextBlock* mpStatusText;                                                   // 0x0280 (size: 0x8)
    class UMaterialInstance* mpCircularProgressMaterialInstance;                      // 0x0288 (size: 0x8)
    int32 mIndex;                                                                     // 0x0290 (size: 0x4)
    FLinearColor mTier1Effect;                                                        // 0x0294 (size: 0x10)
    FLinearColor mTier2Effect;                                                        // 0x02A4 (size: 0x10)
    FLinearColor mTier3Effect;                                                        // 0x02B4 (size: 0x10)
    FLinearColor mPositiveEffect;                                                     // 0x02C4 (size: 0x10)
    FLinearColor mNegativeEffect;                                                     // 0x02D4 (size: 0x10)
    FLinearColor mAbilityEffect;                                                      // 0x02E4 (size: 0x10)
    FLinearColor mNeutralEffect;                                                      // 0x02F4 (size: 0x10)
    TArray<class UImage*> mTokenBlips;                                                // 0x0308 (size: 0x10)

}; // Size: 0x320

class UHUDStickerMenu : public UHUDRadialMenu
{
    class UImage* mpCooldownImage;                                                    // 0x0308 (size: 0x8)
    class UTexture2D* mpRingTexture;                                                  // 0x0310 (size: 0x8)
    class UMaterialInstance* mpCircularProgressMaterialInstance;                      // 0x0318 (size: 0x8)
    class UButtonPromptWidget* mpCancelPrompt;                                        // 0x0320 (size: 0x8)
    bool mbPopulatedStickerData;                                                      // 0x0328 (size: 0x1)
    class ATPChar* mpLastTrackedTPChar;                                               // 0x0330 (size: 0x8)

}; // Size: 0x338

class UHUDSurvivalDollCharWidget : public UUserWidget
{
    class UImage* mpDollImage;                                                        // 0x0260 (size: 0x8)

}; // Size: 0x268

class UHUDTabScreen : public UBaseOverlay
{
    class UCategorySwitcher* mpCategorySwitcher;                                      // 0x0280 (size: 0x8)
    class UWidgetSwitcher* mpTabScreenWidgetSwitcher;                                 // 0x0288 (size: 0x8)
    class UMatchStateSummaryWidget* mpMatchSummaryWidget;                             // 0x0290 (size: 0x8)
    class UEndOfRoundPlayerDetailsWidget* mpPlayerDetailsWidget;                      // 0x0298 (size: 0x8)
    class UTextBlock* mpWarningText;                                                  // 0x02A0 (size: 0x8)
    class USceneSummaryWidget* mpSceneSummaryWidget;                                  // 0x02A8 (size: 0x8)
    class ABaseChar* mpLastViewedBaseChar;                                            // 0x02B0 (size: 0x8)

    void Update(class ATPChar* pTrackedTPChar);
}; // Size: 0x2B8

class UHUDTextureLibrary : public UObject
{
}; // Size: 0x28

class UHUDTutorialPanel : public UBaseScreen
{
    class UImage* mpBottomTutorialImagePanel;                                         // 0x02C0 (size: 0x8)
    class UCanvasPanel* mpOverlayPanel;                                               // 0x02C8 (size: 0x8)
    class UCanvasPanel* mpMainTextPanel;                                              // 0x02D0 (size: 0x8)
    class UCanvasPanel* mpBottomTextPanel;                                            // 0x02D8 (size: 0x8)
    class UCanvasPanel* mpSubTextPanel;                                               // 0x02E0 (size: 0x8)
    class UTypeWriterWidget* mpBottomTutorialText;                                    // 0x02E8 (size: 0x8)
    class UTypeWriterWidget* mpSubtextTutorialText;                                   // 0x02F0 (size: 0x8)
    class UTypeWriterWidget* mpOverlaySubText;                                        // 0x02F8 (size: 0x8)
    class UTypeWriterWidget* mpOverlayMainText;                                       // 0x0300 (size: 0x8)
    class UNavButton* mpConfirmButton;                                                // 0x0308 (size: 0x8)
    float mOverlayButtonDelay;                                                        // 0x0310 (size: 0x4)
    float mOverlayButtonTimer;                                                        // 0x0314 (size: 0x4)

    void OnConfirmPressed();
}; // Size: 0x318

class UHUDWatermarkWidget : public UUserWidget
{
    bool mbIsInViewport;                                                              // 0x0260 (size: 0x1)
    FString mCurrentIdentifier;                                                       // 0x0268 (size: 0x10)
    class UCanvasPanel* mpWatermarkCanvasPanel;                                       // 0x0278 (size: 0x8)

    void ShowWatermark(FString Identifier);
    void Hide();
}; // Size: 0x280

class UHUDWeaponPanel : public UUserWidget
{
    class UTexture2D* mpAmmoDepletingTexture;                                         // 0x0260 (size: 0x8)
    class UTexture2D* mpAmmoBarNormalTexture;                                         // 0x0268 (size: 0x8)
    class UCustomProgressBar* mpAmmoBar;                                              // 0x0270 (size: 0x8)
    class UCustomProgressBar* mpChargeBar;                                            // 0x0278 (size: 0x8)
    class UTextBlock* mpCurrentAmmoCountText;                                         // 0x0280 (size: 0x8)
    class UTextBlock* mpTotalAmmoCountText;                                           // 0x0288 (size: 0x8)
    class UWidgetSwitcher* mpAmmoCountWidgetSwitcher;                                 // 0x0290 (size: 0x8)
    class UImage* mpStigmaIconImage;                                                  // 0x0298 (size: 0x8)
    class UImage* mpWeaponIconImage;                                                  // 0x02A0 (size: 0x8)
    class UTextBlock* mpUseText;                                                      // 0x02A8 (size: 0x8)
    class UHorizontalBox* mpChargeBarBox;                                             // 0x02B0 (size: 0x8)
    class UCanvasPanel* mpWeaponPanel;                                                // 0x02B8 (size: 0x8)
    class UCustomProgressBar* mpChargeBar0;                                           // 0x02C0 (size: 0x8)
    class UCustomProgressBar* mpChargeBar1;                                           // 0x02C8 (size: 0x8)
    class UCustomProgressBar* mpChargeBar2;                                           // 0x02D0 (size: 0x8)
    class UCustomProgressBar* mpChargeBar3;                                           // 0x02D8 (size: 0x8)
    class UWidgetSwitcher* mpChargeBoxWidgetSwitcher;                                 // 0x02E0 (size: 0x8)
    class UHorizontalBox* mpDiscardPanel;                                             // 0x02E8 (size: 0x8)
    class UHorizontalBox* mpUseWeaponPanel;                                           // 0x02F0 (size: 0x8)
    class UButtonPromptWidget* mpDiscardActionButton;                                 // 0x02F8 (size: 0x8)
    class UButtonPromptWidget* mpUseWeaponActionButton;                               // 0x0300 (size: 0x8)
    class UHorizontalBox* mpDismissPanel;                                             // 0x0308 (size: 0x8)
    class UTextBlock* mpDismissText;                                                  // 0x0310 (size: 0x8)
    class UButtonPromptWidget* mpDismissWeaponActionButton;                           // 0x0318 (size: 0x8)
    class UHorizontalBox* mpActionIconsBox;                                           // 0x0320 (size: 0x8)
    class AWeaponBase* mpCurrentWeapon;                                               // 0x0328 (size: 0x8)
    class ATPChar* mpTrackedChar;                                                     // 0x0330 (size: 0x8)

    void UpdateKeyBinding();
    void UpdateIcons();
    void UpdateCharged(float DeltaTime);
    void UpdateAmmo(float DeltaTime);
    void Update(class ATPChar* pTrackedChar);
}; // Size: 0x340

class UHUDWeaponSelectionWheel : public UHUDWheelPanelBase
{
    class UImage* mpWeaponImage;                                                      // 0x02A0 (size: 0x8)
    EDamageType mLastDamageTypePopulated;                                             // 0x02A8 (size: 0x1)
    bool mbLastDamageTypePopulatedLethalLastFrame;                                    // 0x02A9 (size: 0x1)
    class UCanvasPanel* mpMainCanvasPanel;                                            // 0x02B0 (size: 0x8)
    bool mbWantToFadeOut;                                                             // 0x02B8 (size: 0x1)
    class UWidgetAnimation* mpCraftingAnimation;                                      // 0x02C0 (size: 0x8)
    class ATPChar* mpCurrentlyTrackedChar;                                            // 0x02C8 (size: 0x8)
    class UTextBlock* mpWeaponPowerText;                                              // 0x02D0 (size: 0x8)
    class UTextBlock* mpActiveCraftingWeaponNameText;                                 // 0x02D8 (size: 0x8)
    class UImage* mpActiveCraftingStigmaImage;                                        // 0x02E0 (size: 0x8)
    class UImage* mpActiveCraftingWeaponImage;                                        // 0x02E8 (size: 0x8)
    class UWidgetSwitcher* mpWeaponWheelWidgetSwitcher;                               // 0x02F0 (size: 0x8)
    class UHorizontalBox* mpRightPromptBox;                                           // 0x02F8 (size: 0x8)
    class UHorizontalBox* mpLeftPromptBox;                                            // 0x0300 (size: 0x8)
    class UBorder* mpWeaponPowerTextBorder;                                           // 0x0308 (size: 0x8)
    int32 mSpectatorNumWeaponsForTypeTotal;                                           // 0x0310 (size: 0x4)
    bool mbForceSpectatorRefresh;                                                     // 0x0314 (size: 0x1)

    void SetItemNameText(FText NewValue);
    void PopulateWeaponData(TArray<EWeaponTypeEnum> wepList, TArray<EWeaponTypeEnum> augmentBlockedWeapons);
    void PlayCraftingAnimation(float animationTime, bool bReverse);
    bool IsCurrentWeaponTypeBlockedByAugment();
    FText GetWeaponPowerNameForWeapon(class ATPChar* pTrackedChar, EWeaponTypeEnum wepType);
    class UTexture2D* GetWeaponPowerIconForWeapon(class ATPChar* pTrackedChar, EWeaponTypeEnum wepType);
    EWeaponTypeEnum GetCurrentWeaponTypeSelected();
    bool AllowedToCycle();
}; // Size: 0x318

class UHUDWeaponSelectionWheelCard : public UUserWidget
{
    class USizeBox* mpWeaponPowerBox;                                                 // 0x0260 (size: 0x8)
    class UImage* mpWeaponPowerImage;                                                 // 0x0268 (size: 0x8)
    class UImage* mpStigmaImage;                                                      // 0x0270 (size: 0x8)
    class UImage* mpWeaponImage;                                                      // 0x0278 (size: 0x8)
    class UCanvasPanel* mpWeaponPanel;                                                // 0x0280 (size: 0x8)
    class UCanvasPanel* mpLockPanel;                                                  // 0x0288 (size: 0x8)

}; // Size: 0x290

class UHUDWeaponSkinIcon : public UUserWidget
{
    class UImage* mpIconImage;                                                        // 0x0260 (size: 0x8)

}; // Size: 0x268

class UHUDWheelPanelBase : public UUserWidget
{
    TArray<class UWheelItemData*> mCurrentItemData;                                   // 0x0260 (size: 0x10)
    TArray<class UWidget*> mWheelCardList;                                            // 0x0270 (size: 0x10)
    class UTextBlock* mpItemNameText;                                                 // 0x0280 (size: 0x8)
    class UButtonPromptWidget* mpLeftPrompt;                                          // 0x0288 (size: 0x8)
    class UButtonPromptWidget* mpRightPrompt;                                         // 0x0290 (size: 0x8)
    int32 mCurrentlySelectedIndex;                                                    // 0x0298 (size: 0x4)

    void PopulateData(TArray<class UTexture2D*> textureList, TArray<FText> nameList);
    int32 GetSelectedIndex();
    void Cycle(int32 Direction);
}; // Size: 0x2A0

class UHUDWheelPanelIcon : public UUserWidget
{
    class UImage* mpIconImage;                                                        // 0x0260 (size: 0x8)

}; // Size: 0x268

class UHealingProgressBar : public UBaseActionProgressBar
{
    bool mbShowedProgressLastFrame;                                                   // 0x0270 (size: 0x1)

}; // Size: 0x278

class UHideCustomMatchSettingsUserButton : public UBaseUserButton
{
    class UTextBlock* mpHideCustomMatchSettingsButtonText;                            // 0x0478 (size: 0x8)
    class UImage* mpArrowIcon;                                                        // 0x0480 (size: 0x8)
    class UWidgetAnimation* HideAnim;                                                 // 0x0488 (size: 0x8)

}; // Size: 0x490

class UHolySlingshotSkinDataAsset : public UTeenWeaponSkinDataAsset
{
    FSkinStaticMesh mProjectileMesh;                                                  // 0x01E8 (size: 0xA8)
    FSkinSkeletalMesh mSlingshotMesh;                                                 // 0x0290 (size: 0x168)
    FSkinParticleSystem mBlastParticleSystem;                                         // 0x03F8 (size: 0xD8)
    FSkinParticleSystem mTrailParticleSystem;                                         // 0x04D0 (size: 0xD8)
    FSkinParticleSystem mEvilBeamParticleSystem;                                      // 0x05A8 (size: 0xD8)
    FSkinDecal mProjectileImpactDecal;                                                // 0x0680 (size: 0x58)
    EWise_WEP_HolySlingshot mWiseHolySlingshotSwitch;                                 // 0x06D8 (size: 0x1)

}; // Size: 0x6E0

class UHolyStaffSkinDataAsset : public UTeenWeaponSkinDataAsset
{
    FSkinNiagaraSystem mpHolyStaffNiagaraSystem;                                      // 0x01E8 (size: 0x30)
    EWise_WEP_HolyStaff mWiseHolyStaffSwitch;                                         // 0x0218 (size: 0x1)
    FSkinParticleSystem mIndicatorSystem;                                             // 0x0220 (size: 0xD8)

}; // Size: 0x2F8

class UHoverBorder : public UBorder
{
    FHoverBorderOnMouseEnterEvent OnMouseEnterEvent;                                  // 0x0270 (size: 0x10)
    void OnBorderHoverEvent();
    FHoverBorderOnMouseLeaveEvent OnMouseLeaveEvent;                                  // 0x0280 (size: 0x10)
    void OnBorderHoverEvent();

}; // Size: 0x290

class UHttpRequestInfo : public UObject
{
    FString mEndPoint;                                                                // 0x0068 (size: 0x10)
    FString mRequestContent;                                                          // 0x0078 (size: 0x10)

}; // Size: 0x88

class UHttpService : public UObject
{
    TArray<class UDelegateInfo*> mOnHttpResponseDelegate;                             // 0x0028 (size: 0x10)
    TArray<class UHttpRequestInfo*> mRequestInfoArray;                                // 0x0040 (size: 0x10)

}; // Size: 0x78

class UImageNavButton : public UNavButton
{
}; // Size: 0x618

class UImageTextUserButton : public UImageUserButton
{
    FText Text;                                                                       // 0x0490 (size: 0x18)
    class UTextBlock* mpTextBlock;                                                    // 0x04A8 (size: 0x8)

}; // Size: 0x4B0

class UImageUserButton : public UBaseUserButton
{
    class UTexture2D* NormalImageTexture;                                             // 0x0478 (size: 0x8)
    class UTexture2D* HighlightImageTexture;                                          // 0x0480 (size: 0x8)
    class UImage* mpNormalImage;                                                      // 0x0488 (size: 0x8)

}; // Size: 0x490

class UInGameTipWidget : public UUserWidget
{
    class UWidgetAnimation* mpFadeToggle;                                             // 0x0260 (size: 0x8)
    class UWidgetAnimation* mpDelay;                                                  // 0x0268 (size: 0x8)
    class UTextBlock* mpTipText;                                                      // 0x0270 (size: 0x8)
    class UImage* mpTipIcon;                                                          // 0x0278 (size: 0x8)
    float mAnimPlayRate;                                                              // 0x0280 (size: 0x4)
    class UTextStateSwitch* mpStateSwitcher;                                          // 0x0288 (size: 0x8)
    FTip mTipToShow;                                                                  // 0x0290 (size: 0x60)
    float mTipTimer;                                                                  // 0x02F0 (size: 0x4)
    float mTimeToShow;                                                                // 0x02F4 (size: 0x4)
    bool mbShowingTip;                                                                // 0x02F8 (size: 0x1)

    void ShowInGameTip(const FTip& Tip);
    void OnDelayFinished();
    bool IsShowingInGameTip();
    void HideTip();
}; // Size: 0x300

class UIndexIndicatorBoxTileWidget : public UUserWidget
{
    class UCanvasPanel* mpSelectedCanvas;                                             // 0x0260 (size: 0x8)
    class UCanvasPanel* mpUnSelectedCanvas;                                           // 0x0268 (size: 0x8)

    void SetIsSelected(bool bNewValue);
}; // Size: 0x270

class UIndexIndicatorBoxWidget : public UUserWidget
{
    class UHorizontalBox* mpTileContainer;                                            // 0x0260 (size: 0x8)
    TSubclassOf<class UIndexIndicatorBoxTileWidget> mTileClass;                       // 0x0268 (size: 0x8)
    TArray<class UIndexIndicatorBoxTileWidget*> mGeneratedTiles;                      // 0x0270 (size: 0x10)

    void SetTotalIndexCount(int32 NewValue);
    void SetSelectedIndex(int32 NewValue);
}; // Size: 0x280

class UInputManager : public UObject
{
    TMap<class FKey, class FGameActionsArray> mKeyToGameActions;                      // 0x0028 (size: 0x50)
    TMap<class EGameActionType, class FKeysArray> mActionTypeToKeysMap;               // 0x0078 (size: 0x50)
    FVector2D mXbInputAxisLook;                                                       // 0x0158 (size: 0x8)
    FVector2D mXbInputAxisMovement;                                                   // 0x0160 (size: 0x8)
    FVector2D mKbInputAxisLook;                                                       // 0x0168 (size: 0x8)
    FVector2D mKbInputAxisMovement;                                                   // 0x0170 (size: 0x8)
    FVector2D mMenuInputAxis;                                                         // 0x0178 (size: 0x8)
    FVector2D mMenuRotateAxis;                                                        // 0x0180 (size: 0x8)
    float mXbTriggerLeft;                                                             // 0x0188 (size: 0x4)
    float mXbTriggerRight;                                                            // 0x018C (size: 0x4)
    FVector2D mLastRecordedMousePos;                                                  // 0x0190 (size: 0x8)
    bool mbKbForwardPressed;                                                          // 0x0198 (size: 0x1)
    bool mbKbRightPressed;                                                            // 0x0199 (size: 0x1)
    bool mbKbBackwardPressed;                                                         // 0x019A (size: 0x1)
    bool mbKbLeftpressed;                                                             // 0x019B (size: 0x1)
    bool mbXbDPadUpPressed;                                                           // 0x019C (size: 0x1)
    bool mbXbDPadDownPressed;                                                         // 0x019D (size: 0x1)
    bool mbXbDPadLeftPressed;                                                         // 0x019E (size: 0x1)
    bool mbXbDPadRightPressed;                                                        // 0x019F (size: 0x1)
    class UCurveFloat* mpGamepadRSVerticalAimingCurve;                                // 0x01A0 (size: 0x8)
    class UCurveFloat* mpGamepadRSHorizontalAimingCurve;                              // 0x01A8 (size: 0x8)
    class UCurveFloat* mpGamepadLSVerticalAimingCurve;                                // 0x01B0 (size: 0x8)
    class UCurveFloat* mpGamepadLSHorizontalAimingCurve;                              // 0x01B8 (size: 0x8)
    class ABasePC* mpBasePC;                                                          // 0x01C0 (size: 0x8)
    bool mbMonkeyActive;                                                              // 0x01C8 (size: 0x1)
    TArray<bool> mMonkeyKeyPressedArray;                                              // 0x01D0 (size: 0x10)
    bool mbIsInInputRebindMode;                                                       // 0x01E0 (size: 0x1)
    TArray<EGameActionType> mCurrentlyBufferedActions;                                // 0x01E8 (size: 0x10)
    float mTimeSinceLastActionBuffered;                                               // 0x01F8 (size: 0x4)
    TArray<EGameActionType> mEligibleBufferActions;                                   // 0x0200 (size: 0x10)
    TArray<FKey> mSecretCodeKeyBuffer;                                                // 0x0210 (size: 0x10)
    float mTimeSinceSecretCodeKeyBuffered;                                            // 0x0220 (size: 0x4)
    bool mbSecretCodeEntered;                                                         // 0x0224 (size: 0x1)

    void UpdateInputBuffers(float DeltaTime);
    void UnbindAction(EGameActionType Action);
    TMap<class FKey, class FGameActionsArray> StripInvalidActionKeys(TMap<class FKey, class FGameActionsArray> inputConfig);
    void SetupAxisBinds(class UInputComponent* pInputComponent, class UCurveFloat* pGamepadRSVerticalAimingCurve, class UCurveFloat* pGamepadRSHorizontalAimingCurve, class UCurveFloat* pGamepadLSVerticalAimingCurve, class UCurveFloat* pGamepadLSHorizontalAimingCurve, class ABasePC* pBasePC);
    void SetShowMouseCursor(bool bShow);
    void SetInInputRebindMode(bool bVal);
    void RestoreDefaultConfiguration();
    void RemoveGameActionEventListener(EGameActionType aGameAction, FGameActionEventHandle listener);
    void RemapKeyToAction(const FKey& aKey, EGameActionType Action);
    void RefreshMovementAxis();
    void MonkeyToggleRandomButton();
    void MapKeyToAction(const FKey& aKey, EGameActionType Action);
    bool IsKeyLegalToRemap(const FKey& Key);
    bool IsHoldingAnyModifierKeys();
    bool IsActionLegalToRemap(EGameActionType GameActionType);
    bool IsActionGroupPairCompatible(EGameActionType givenGameAction, EGameActionType gameActionToRemap);
    int32 GetThumbMouseButtonIndex(FKey givenKey);
    float GetRightTriggerAxis();
    FVector2D GetMoveAxis();
    FVector2D GetMenuRotateAxis();
    FVector2D GetMenuMoveAxis();
    FVector2D GetLookAxis();
    float GetLeftTriggerAxis();
    TArray<EGameActionType> GetInputBufferedCommands();
    EInputActionGroup GetActionGroup(EGameActionType GameActionType);
    void ForceKeyboardMouseInput();
    void ForceDeviceTypeChanged();
    void DoTick(float DeltaTime);
    void ConsumeBufferedInput(EGameActionType ActionType);
    void ClearInputs();
    void ClearAllEventListeners();
    void ClearAllDeviceTypeChangedEvents();
}; // Size: 0x228

class UInputRebindModal : public UBaseModal
{
    class UTextBlock* mpMessageText;                                                  // 0x02A8 (size: 0x8)
    class UTextBlock* mpGameActionText;                                               // 0x02B0 (size: 0x8)
    class UTextBlock* mpCancelText;                                                   // 0x02B8 (size: 0x8)

    void SetInputData(EGameActionType ActionType, EInputBindingCategory cat, bool bIsKeyboard);
    void OnKeyPressed(const FKey& Key, bool bIsPressedDown);
    void OnDeviceTypeChanged();
}; // Size: 0x300

class UInteractablePropManager : public UWorldSubsystem
{
    TArray<class AInteractablePropBase*> mInteractableProps;                          // 0x0038 (size: 0x10)
    TArray<class AInteractablePropBase*> mSpectralProps;                              // 0x0048 (size: 0x10)
    TArray<class USkeletalMeshComponent*> mSpectralMeshComponentPool;                 // 0x0058 (size: 0x10)
    class UStaticMesh* mpSpectralSphereMesh;                                          // 0x0068 (size: 0x8)
    TMap<class FName, class UMaterialInstanceDynamic*> mDynamicFadeMaterialLibrary;   // 0x0070 (size: 0x50)
    bool mbShouldHideInteractions;                                                    // 0x00C0 (size: 0x1)
    int32 mPropSoundsThisTick;                                                        // 0x00C4 (size: 0x4)

    void RemoveInteractableProp(class AInteractablePropBase* pProp);
    void AddInteractableProp(class AInteractablePropBase* pProp);
}; // Size: 0xC8

class UInteractableTrainingObjectWidget : public UUserWidget
{
}; // Size: 0x260

class UInterconnectJourneyMapNode : public UBaseJourneyMapNode
{
}; // Size: 0x400

class UIssue1Widget : public UUserWidget
{
    TArray<class TSubclassOf<UIssuePageWidget>> PageDefs;                             // 0x0260 (size: 0x10)
    class UButton* mpPageLeftButton;                                                  // 0x0270 (size: 0x8)
    class UButton* mpPageRightButton;                                                 // 0x0278 (size: 0x8)
    class UCanvasPanel* mpLeftPage;                                                   // 0x0280 (size: 0x8)
    class UCanvasPanel* mpRightPage;                                                  // 0x0288 (size: 0x8)
    class UCanvasPanel* mpAnimLeftPage;                                               // 0x0290 (size: 0x8)
    class UCanvasPanel* mpAnimRightPage;                                              // 0x0298 (size: 0x8)
    class UWidgetAnimation* IdleAnim;                                                 // 0x02A0 (size: 0x8)
    class UWidgetAnimation* PageLeftAnim;                                             // 0x02A8 (size: 0x8)
    class UWidgetAnimation* PageRightAnim;                                            // 0x02B0 (size: 0x8)

    void OnPageRightButton();
    void OnPageLeftButton();
    void OnAnimPageAnimComplete();
}; // Size: 0x2C0

class UIssueBoxCostUserButton : public UBoxUserButton
{
    class UHorizontalBox* mpCostBox;                                                  // 0x04C8 (size: 0x8)
    class UHorizontalBox* mpCostIconBox;                                              // 0x04D0 (size: 0x8)
    class UImage* mpCurrencyIcon;                                                     // 0x04D8 (size: 0x8)
    class UTextBlock* mpCostText;                                                     // 0x04E0 (size: 0x8)
    bool mbForceHideCostBox;                                                          // 0x04E8 (size: 0x1)

}; // Size: 0x4F0

class UIssueFeaturePageWidget : public UIssuePageWidget
{
    FString ButtonData;                                                               // 0x0390 (size: 0x10)
    EPointType CostType;                                                              // 0x03A0 (size: 0x1)
    int32 Cost;                                                                       // 0x03A4 (size: 0x4)
    class UIssueBoxCostUserButton* mpUserButton;                                      // 0x03A8 (size: 0x8)

    void OnButtonPressed();
}; // Size: 0x3B0

class UIssueFluffWidget : public UBaseIssueWidget
{
    class UImage* mpItemIcon;                                                         // 0x0398 (size: 0x8)
    class UTextBlock* mpItemText;                                                     // 0x03A0 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
    void OnItemClicked();
}; // Size: 0x410

class UIssueItemWidget : public UBaseIssueWidget
{
    class UImage* mpItemIcon;                                                         // 0x0398 (size: 0x8)
    class UStateSwitcher* mpStateSwitcher;                                            // 0x03A0 (size: 0x8)
    class UImage* mpRarityBackground;                                                 // 0x03A8 (size: 0x8)
    class UBorder* mpRarityBorder;                                                    // 0x03B0 (size: 0x8)
    class UTextBlock* mpRarityText;                                                   // 0x03B8 (size: 0x8)
    class UTextBlock* mpTierText;                                                     // 0x03C0 (size: 0x8)
    class UCanvasPanel* mpFreePanel;                                                  // 0x03C8 (size: 0x8)
    class UImage* mpFreeImage;                                                        // 0x03D0 (size: 0x8)
    class UCanvasPanel* mpCompletedPanel;                                             // 0x03D8 (size: 0x8)
    class UTextBlock* mpItemNameText;                                                 // 0x03E0 (size: 0x8)
    class UTextBlock* mpItemTypeText;                                                 // 0x03E8 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
    void OnItemClicked();
}; // Size: 0x408

class UIssueMoviePageWidget : public UIssuePageWidget
{
    FString MovieID;                                                                  // 0x0390 (size: 0x10)
    class UTextBlock* mpAvailabilityText;                                             // 0x03A0 (size: 0x8)
    class UTextBlock* mpTitleText;                                                    // 0x03A8 (size: 0x8)
    class UBaseUserButton* mpUserButton;                                              // 0x03B0 (size: 0x8)

    void OnScenesPressed();
}; // Size: 0x3B8

class UIssuePageFooterWidget : public UMetaWidget
{
    class UTextBlock* mpPageNumberText;                                               // 0x0378 (size: 0x8)

}; // Size: 0x380

class UIssuePageHeaderWidget : public UMetaWidget
{
    class UTextBlock* mpTierText;                                                     // 0x0378 (size: 0x8)
    class UTextBlock* mpDaysText;                                                     // 0x0380 (size: 0x8)
    class UTextBlock* mpRemainingText;                                                // 0x0388 (size: 0x8)
    class UIssueBoxCostUserButton* mpPurchasePassButton;                              // 0x0390 (size: 0x8)
    class USeasonPassTierStarsWidget* mpStarsWidget;                                  // 0x0398 (size: 0x8)

    void OnPurchasePassPressed();
    void OnPurchasePassConfirmed();
}; // Size: 0x3A0

class UIssuePageWidget : public UMetaWidget
{
    class UGridPanel* mpGrid;                                                         // 0x0378 (size: 0x8)
    class UIssuePageHeaderWidget* mpPageHeader;                                       // 0x0380 (size: 0x8)
    class UIssuePageFooterWidget* mpPageFooter;                                       // 0x0388 (size: 0x8)

    void OnNavDirection(ESelectionNavigation dir);
}; // Size: 0x390

class UIssueRewardWidget : public UBaseRewardWidget
{
    class UImage* mpBackground;                                                       // 0x03C0 (size: 0x8)
    class UWidgetAnimation* Intro;                                                    // 0x03C8 (size: 0x8)
    class UWidgetAnimation* Claim;                                                    // 0x03D0 (size: 0x8)
    class UWidgetAnimation* Outro;                                                    // 0x03D8 (size: 0x8)

}; // Size: 0x3E8

class UIssueSummaryMovieUserButton : public UImageUserButton
{
    FString MovieSetID;                                                               // 0x0490 (size: 0x10)
    int32 TargetPage;                                                                 // 0x04A0 (size: 0x4)

    void OnTextureLoaded(class UTexture2D* pTex);
    void OnButtonPressed();
}; // Size: 0x4B8

class UIssueSummaryPageWidget : public UIssuePageWidget
{
    class UTextBlock* mpTierText;                                                     // 0x0390 (size: 0x8)
    class USeasonPassTierStarsWidget* mpStarsWidget;                                  // 0x0398 (size: 0x8)

}; // Size: 0x3A0

class UIssueToCPageWidget : public UIssuePageWidget
{
}; // Size: 0x390

class UIssueToCWidget : public UBaseIssueWidget
{
    int32 PageNumber;                                                                 // 0x0388 (size: 0x4)
    FText TitleText;                                                                  // 0x0390 (size: 0x18)
    class UTexture2D* OptionalTexture;                                                // 0x03A8 (size: 0x8)
    class UImage* mpItemIcon;                                                         // 0x03B0 (size: 0x8)
    class UTextBlock* mpPageNumText;                                                  // 0x03B8 (size: 0x8)
    class UTextBlock* mpItemText;                                                     // 0x03C0 (size: 0x8)

    void OnItemClicked();
}; // Size: 0x3C8

class UIssueTrackerPageButton : public UUserWidget
{
    class UButton* mpButton;                                                          // 0x0260 (size: 0x8)
    class USizeBox* mpSizeBox;                                                        // 0x0268 (size: 0x8)
    class UImage* mpCompletedPageBackground;                                          // 0x0270 (size: 0x8)
    class UImage* mpFeaturePageBackground;                                            // 0x0278 (size: 0x8)
    class UImage* mpRewardPageBackground;                                             // 0x0280 (size: 0x8)
    class UImage* mpHighlightItemBorder;                                              // 0x0288 (size: 0x8)
    class UImage* mpSelectedItemBackground;                                           // 0x0290 (size: 0x8)
    class UTextBlock* mpTrackerPageText;                                              // 0x0298 (size: 0x8)

    void OnButtonPressed();
}; // Size: 0x2B0

class UIssueTrackerWidget : public UUserWidget
{
    class UHorizontalBox* mpTrackerBox;                                               // 0x0268 (size: 0x8)

}; // Size: 0x298

class UItemDataAsset : public UPrimaryDataAsset
{
    FText mDisplayName;                                                               // 0x0030 (size: 0x18)
    TArray<class UCustomizationConfigBase*> mAssetData;                               // 0x0048 (size: 0x10)

    FText GetSkinDisplayName();
}; // Size: 0x58

class UItemDataAssetBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{

    class AActor* SpawnActorFromItemDataAsset(class UItemDataAsset* pItemDataAsset);
    void CreateItemDataAssetCollection(TMap<class FName, class FString>& assetFilterTags, TArray<FString>& nameFilters, FName categoryTag, TArray<FItemDataAssetCollection>& outCollections);
    void ApplyStaticMeshSkin(FSkinStaticMesh& staticMeshSkin, class UStaticMeshComponent* pMeshComponent);
    void ApplySkeletalMeshSkin(FSkinSkeletalMesh& skeletalMeshSkin, class USkinnedMeshComponent* pSkinnedMeshComponent, bool bUseAnimInstance);
    void ApplyParticleSystemSkin(FSkinParticleSystem& particleSystemSkin, class UParticleSystemComponent* pParticleSystemComponent);
    void ApplyNiagaraSystemSkin(FSkinNiagaraSystem& particleSystemSkin, class UNiagaraComponent* pParticleSystemComponent);
    void ApplyLightSkin(FSkinLight& lightSkin, class ULightComponent* pLightComponent);
    void ApplyDecalSkin(FSkinDecal& decalSkin, class UDecalComponent* pDecalComponent);
}; // Size: 0x28

class UItemListHeaderWidget : public UUserWidget
{
    class UTextBlock* mpItemListHeaderText;                                           // 0x0260 (size: 0x8)

}; // Size: 0x268

class UItemTileNavButton : public UNavButton
{
}; // Size: 0x618

class UItemTileUserButton : public UBaseUserButton
{
    class UImage* mpItemIcon;                                                         // 0x0478 (size: 0x8)

}; // Size: 0x480

class UItemTileWidget : public UMetaWidget
{
    class UItemTileNavButton* mpListItemNavButton;                                    // 0x0388 (size: 0x8)
    class UImage* mpImageIcon;                                                        // 0x0390 (size: 0x8)
    class UTextBlock* mpTitleText;                                                    // 0x0398 (size: 0x8)
    class UImage* mpRankIcon;                                                         // 0x03A0 (size: 0x8)
    class UImage* mpNewIcon;                                                          // 0x03A8 (size: 0x8)
    class UCanvasPanel* mpCostPanel;                                                  // 0x03B0 (size: 0x8)
    class UTextBlock* mpCostText;                                                     // 0x03B8 (size: 0x8)
    class UCanvasPanel* mpQuantityPanel;                                              // 0x03C0 (size: 0x8)
    class UTextBlock* mpQuantityText;                                                 // 0x03C8 (size: 0x8)
    class UImage* mpEquippedIcon;                                                     // 0x03D0 (size: 0x8)
    class UBorder* mpRimBackgroundColor;                                              // 0x03D8 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
}; // Size: 0x408

class UJourneyActButtonWidget : public UCategoryButtonWidget
{
}; // Size: 0x308

class UJourneyActSelectorWidget : public UCategorySwitcher
{

    void SetHighestVisibleAct(int32 highestAct);
    void SetFirstLockedAct(int32 highestAct);
    void SetActProgression(int32 Act, int32 Completed, int32 Total);
}; // Size: 0x370

class UJourneyAuraWidget : public UUserWidget
{
    class UTexture2D* ProgressBarTexture;                                             // 0x0260 (size: 0x8)
    class UTextBlock* mpAuraAmountText;                                               // 0x0268 (size: 0x8)
    class UTextBlock* mpAuraProgressText;                                             // 0x0270 (size: 0x8)
    class UImage* mpProgressImage;                                                    // 0x0278 (size: 0x8)
    class UMaterialInstance* mpProgressMaterialInstance;                              // 0x0280 (size: 0x8)
    class UMaterialInstanceDynamic* mpDynProgressMaterialInstance;                    // 0x0288 (size: 0x8)

}; // Size: 0x290

class UJourneyInformationPanelWidget : public UUserWidget
{
    FLinearColor LockedColor;                                                         // 0x0260 (size: 0x10)
    FLinearColor PurchaseColor;                                                       // 0x0270 (size: 0x10)
    FLinearColor InsufficientAuraColor;                                               // 0x0280 (size: 0x10)
    class UWidgetAnimation* IdleAnim;                                                 // 0x0290 (size: 0x8)
    class UWidgetAnimation* CelebrateAnim;                                            // 0x0298 (size: 0x8)
    class UWidgetSwitcher* mpWidgetSwitcher;                                          // 0x02A0 (size: 0x8)
    class UCanvasPanel* mpInfoPanel;                                                  // 0x02A8 (size: 0x8)
    class UCanvasPanel* mpBusyPanel;                                                  // 0x02B0 (size: 0x8)
    class UBorder* mpInfoBorder;                                                      // 0x02B8 (size: 0x8)
    class UButtonPromptWidget* mpButtonPromptWidget;                                  // 0x02C0 (size: 0x8)
    class UTextBlock* mpInfoText;                                                     // 0x02C8 (size: 0x8)

    void ShowPurchase();
    void ShowLocked();
    void ShowInsufficientAura();
    void ShowFinalLocked(int32 journeyNum, int32 actNum);
    void ShowBusy(bool bShow);
    void PlayCelebrateAnim();
    void Hide();
}; // Size: 0x2D8

class UJourneyLineCanvasWidget : public UUserWidget
{
    int32 LineLayer;                                                                  // 0x0260 (size: 0x4)
    int32 LineThickness;                                                              // 0x0264 (size: 0x4)
    class USlateBrushAsset* mpBrushActive;                                            // 0x0268 (size: 0x8)
    class USlateBrushAsset* mpBrushInactive;                                          // 0x0270 (size: 0x8)
    class USlateBrushAsset* mpBrushFadeUp;                                            // 0x0278 (size: 0x8)
    class USlateBrushAsset* mpBrushFadeRight;                                         // 0x0280 (size: 0x8)
    class USlateBrushAsset* mpBrushFadeDown;                                          // 0x0288 (size: 0x8)
    class USlateBrushAsset* mpBrushFadeLeft;                                          // 0x0290 (size: 0x8)
    class UGridPanel* mpReferencePanel;                                               // 0x0298 (size: 0x8)

}; // Size: 0x2B0

class UJourneyManager : public UObject
{
    FString mJourneyDataGuid;                                                         // 0x0030 (size: 0x10)

}; // Size: 0x90

class UJourneyMapWidget : public UMetaWidget
{
    FLinearColor BackgroundColor;                                                     // 0x0378 (size: 0x10)
    FMargin BorderMargin;                                                             // 0x0388 (size: 0x10)
    FMargin CellPadding;                                                              // 0x0398 (size: 0x10)
    FVector2D ActSize;                                                                // 0x03A8 (size: 0x8)
    class UGridPanel* mpJourneyMapGridPanel;                                          // 0x03E8 (size: 0x8)
    class UGridPanel* mpJourneyMapGridBackgroundPanel;                                // 0x03F0 (size: 0x8)
    class UJourneyLineCanvasWidget* mpJourneyLineCanvasWidget;                        // 0x03F8 (size: 0x8)

    void OnNodeSelected(class UNavButton* pButton);
    void OnNodeLongPress(class UNavButton* pButton);
}; // Size: 0x510

class UJourneyNodePreviewWidget : public UMetaWidget
{
    class UWidgetSwitcher* mpWidgetSwitcher;                                          // 0x0388 (size: 0x8)
    class UGridPanel* mpRewardPanel;                                                  // 0x0390 (size: 0x8)
    class UCanvasPanel* mpCharacterPanel;                                             // 0x0398 (size: 0x8)
    class UImage* mpNodeTypeIcon;                                                     // 0x03A0 (size: 0x8)
    class UTextBlock* mpNodeTypeText;                                                 // 0x03A8 (size: 0x8)
    class UHorizontalBox* mpNodeTypeBox;                                              // 0x03B0 (size: 0x8)
    class UHorizontalBox* mpCostBox;                                                  // 0x03B8 (size: 0x8)
    class UTextBlock* mpCostText;                                                     // 0x03C0 (size: 0x8)
    class UWidgetSwitcher* mpRewardTypeSwitcher;                                      // 0x03C8 (size: 0x8)
    class UCanvasPanel* mpNodeRewardPanel;                                            // 0x03D0 (size: 0x8)
    class UCanvasPanel* mpFinalRewardPanel;                                           // 0x03D8 (size: 0x8)
    class UImage* mpItemIcon;                                                         // 0x03E0 (size: 0x8)
    class UTextBlock* mpItemNameText;                                                 // 0x03E8 (size: 0x8)
    class URichTextBlock* mpItemDescriptionText;                                      // 0x03F0 (size: 0x8)
    class UTextBlock* mpCharacterTitleText;                                           // 0x03F8 (size: 0x8)
    class UTextBlock* mpCharacterDescText;                                            // 0x0400 (size: 0x8)
    class UImage* mpCharacterPortraitIcon;                                            // 0x0408 (size: 0x8)
    class UNonSelectableScrollBox* mpNonSelectableScrollBox;                          // 0x0410 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
}; // Size: 0x430

class UJourneyScreen : public UBaseScreen
{
    FLinearColor AuraAvailableColor;                                                  // 0x02C0 (size: 0x10)
    FLinearColor AuraUnavailableColor;                                                // 0x02D0 (size: 0x10)
    class UJourneyActSelectorWidget* mpCategorySwitcher;                              // 0x02E0 (size: 0x8)
    class UJourneyMapWidget* mpJourneyMapWidget;                                      // 0x02E8 (size: 0x8)
    class UJourneyNodePreviewWidget* mpJourneyNodePreviewWidget;                      // 0x02F0 (size: 0x8)
    class UScrollBox* mpScrollBox;                                                    // 0x02F8 (size: 0x8)
    class UJourneyInformationPanelWidget* mpJourneyInfoPanelWidget;                   // 0x0300 (size: 0x8)
    class UImage* mpAuraImage;                                                        // 0x0308 (size: 0x8)
    class UTextBlock* mpAuraCountText;                                                // 0x0310 (size: 0x8)
    class UButton* mpLeftActButton;                                                   // 0x0318 (size: 0x8)
    class UButton* mpRightActButton;                                                  // 0x0320 (size: 0x8)

    void OnRightActPressed();
    void OnLeftActPressed();
    void OnCharacterSelected();
    void OnCategoryChanged(int32 Index);
}; // Size: 0x330

class UJourneyUserButton : public UBaseUserButton
{
    bool DisableLongPress;                                                            // 0x0478 (size: 0x1)
    class UImage* mpProgressImage;                                                    // 0x0480 (size: 0x8)
    class UMaterialInstance* mpProgressMaterialInstance;                              // 0x0488 (size: 0x8)
    class UMaterialInstanceDynamic* mpDynProgressMaterialInstance;                    // 0x0490 (size: 0x8)

}; // Size: 0x498

class ULetterboxBordersWidget : public UUserWidget
{
    class UCanvasPanel* mpTopBorderPanel;                                             // 0x0260 (size: 0x8)
    class UCanvasPanel* mpBottomBorderPanel;                                          // 0x0268 (size: 0x8)
    class UBorder* mpBottomBorder;                                                    // 0x0270 (size: 0x8)
    class UBorder* mpTopBorder;                                                       // 0x0278 (size: 0x8)
    class UBorder* mpMovieReminderBorder;                                             // 0x0280 (size: 0x8)
    class URichTextBlock* mpMovieReminderText;                                        // 0x0288 (size: 0x8)

    void UpdateColorTheme();
}; // Size: 0x290

class ULicenseModalWidget : public UBaseModal
{
    class UBoxUserButton* mpAcceptButton;                                             // 0x02A8 (size: 0x8)
    class UBoxUserButton* mpDeclineButton;                                            // 0x02B0 (size: 0x8)
    class UTextBlock* mpBodyText;                                                     // 0x02B8 (size: 0x8)
    class UNonSelectableScrollBox* mpScrollBox;                                       // 0x02C0 (size: 0x8)

    void SetLicenseText(FString Path);
    void NativeTick(const FGeometry& MyGeometry, float InDeltaTime);
    void NativeConstruct();
    void Decline();
    void Accept();
}; // Size: 0x2E0

class ULiquidEffectComponent : public UActorComponent
{
    FName mMaterialSlot;                                                              // 0x00B0 (size: 0x8)
    FName mLiquidVolumeSocket;                                                        // 0x00B8 (size: 0x8)
    FVector mLiquidVolumeExtent;                                                      // 0x00C0 (size: 0xC)
    FVector mStrengthScale;                                                           // 0x00CC (size: 0xC)
    float mDefaultLiquidHeight;                                                       // 0x00D8 (size: 0x4)
    class UMeshComponent* mpUpdatedComponent;                                         // 0x00F0 (size: 0x8)

}; // Size: 0x130

class ULoadingScreenVoiceGroupWidget : public UUserWidget
{
    class UVerticalBox* mpVerticalBox;                                                // 0x0260 (size: 0x8)
    TSubclassOf<class ULoadingScreenVoiceMemberWidget> mLoadingScreeMemberWidgetClass; // 0x0268 (size: 0x8)

}; // Size: 0x270

class ULoadingScreenVoiceMemberWidget : public UMetaWidget
{
    class UButtonPromptWidget* mpPlayerMuteToggleImage;                               // 0x0388 (size: 0x8)
    class UTextBlock* mpDisplayName;                                                  // 0x0390 (size: 0x8)
    class USocialVoiceIndicatorWidget* mpSocialVoiceIndicatorWidget;                  // 0x0398 (size: 0x8)

    void OnInputAction_ToggleMute(bool bVal);
}; // Size: 0x3B0

class ULoadoutBase : public UDataAsset
{
    TMap<class EPointType, class FLoadoutValuePoint> mPointsByPointType;              // 0x0038 (size: 0x50)
    TMap<uint32, FLoadoutValueGrantable> mGrantablesBySlot;                           // 0x0088 (size: 0x50)
    TMap<class EPerkAffinityType, class FLoadoutValuePoint> mDiscountsByAffinityType; // 0x00D8 (size: 0x50)

}; // Size: 0x178

class ULoadoutClothingMenuButtonWidget : public UMetaWidget
{
    EUISlot SlotType;                                                                 // 0x0378 (size: 0x1)
    FText TitleText;                                                                  // 0x0380 (size: 0x18)
    class UTexture2D* Icon;                                                           // 0x0398 (size: 0x8)
    ENewFlagType NewFlagType;                                                         // 0x03A0 (size: 0x1)
    class UNavButton* mpNavButton;                                                    // 0x03A8 (size: 0x8)
    class UTextBlock* mpTitleText;                                                    // 0x03B0 (size: 0x8)
    class UImage* mpIcon;                                                             // 0x03B8 (size: 0x8)
    class UNewFlagWidget* mpNewFlag;                                                  // 0x03C0 (size: 0x8)

}; // Size: 0x3C8

class ULoadoutClothingMenuScreen : public UBaseLoadoutScreen
{
    float CameraTransitionTime;                                                       // 0x0338 (size: 0x4)
    class UWidgetSwitcher* mpWidgetSwitcher;                                          // 0x0340 (size: 0x8)
    class ULoadoutClothingMenuWidget* mpClothingMenuWidget;                           // 0x0348 (size: 0x8)
    class UClothingLoadoutWidget* mpClothingLoadoutWidget;                            // 0x0350 (size: 0x8)
    class UCanvasPanel* mpCostumeConflictPanel;                                       // 0x0358 (size: 0x8)
    class UTextBlock* mpCostumeConflictText;                                          // 0x0360 (size: 0x8)

    void OnPreSelectedCharacter();
    void OnPostSelectedCharacter();
}; // Size: 0x370

class ULoadoutClothingMenuWidget : public UUserWidget
{
    class UTexture2D* TeenCostumesIcon;                                               // 0x0260 (size: 0x8)
    class UTexture2D* EvilSkinsIcon;                                                  // 0x0268 (size: 0x8)
    class UTexture2D* TeenEmotesIcon;                                                 // 0x0270 (size: 0x8)
    class UTexture2D* EvilTauntsIcon;                                                 // 0x0278 (size: 0x8)
    class UTexture2D* TeenStickersIcon;                                               // 0x0280 (size: 0x8)
    class UTexture2D* EvilScratchesIcon;                                              // 0x0288 (size: 0x8)
    class UTexture2D* TeenSpectralsIcon;                                              // 0x0290 (size: 0x8)
    class UTexture2D* EvilOmensIcon;                                                  // 0x0298 (size: 0x8)
    class ULoadoutClothingMenuScreen* mpOwningScreen;                                 // 0x02A0 (size: 0x8)
    class UWidgetSwitcher* mpFactionSwitcher;                                         // 0x02A8 (size: 0x8)
    class UVerticalBox* mpTeenBox;                                                    // 0x02B0 (size: 0x8)
    class UVerticalBox* mpEvilBox;                                                    // 0x02B8 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpTeenCostumesButton;                       // 0x02C0 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpTeenSkinsButton;                          // 0x02C8 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpTeenHairButton;                           // 0x02D0 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpTeenHeadButton;                           // 0x02D8 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpTeenFaceButton;                           // 0x02E0 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpTeenEyesButton;                           // 0x02E8 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpTeenOuterButton;                          // 0x02F0 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpTeenTopButton;                            // 0x02F8 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpTeenHandsButton;                          // 0x0300 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpTeenBottomButton;                         // 0x0308 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpTeenSocksButton;                          // 0x0310 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpTeenShoesButton;                          // 0x0318 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpTeenEmotesButton;                         // 0x0320 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpTeenStickersButton;                       // 0x0328 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpTeenSpectralsButton;                      // 0x0330 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpEvilSkinsButton;                          // 0x0338 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpEvilTraitsButton;                         // 0x0340 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpEvilUpperButton;                          // 0x0348 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpEvilMidButton;                            // 0x0350 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpEvilLowerButton;                          // 0x0358 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpEvilTauntsButton;                         // 0x0360 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpEvilScratchesButton;                      // 0x0368 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpEvilOmensButton;                          // 0x0370 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpEvilScreamButton;                         // 0x0378 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpEvilRageButton;                           // 0x0380 (size: 0x8)
    class ULoadoutClothingSlotUserButton* mpEvilFeastButton;                          // 0x0388 (size: 0x8)
    class UNavButton* mpLastButton;                                                   // 0x03A0 (size: 0x8)

    void OnButtonPressed(FString Data);
}; // Size: 0x3A8

class ULoadoutClothingSlotUserButton : public UBaseUserButton
{
    EUISlot SlotType;                                                                 // 0x0478 (size: 0x1)
    FText TitleText;                                                                  // 0x0480 (size: 0x18)
    class UTexture2D* Icon;                                                           // 0x0498 (size: 0x8)
    ENewFlagType NewFlagType;                                                         // 0x04A0 (size: 0x1)
    class UTextBlock* mpTextBlock;                                                    // 0x04A8 (size: 0x8)
    class UImage* mpIcon;                                                             // 0x04B0 (size: 0x8)
    class UNewFlagWidget* mpNewFlag;                                                  // 0x04B8 (size: 0x8)

}; // Size: 0x4C0

class ULoadoutColorSwatchWidget : public UMetaWidget
{
    class UButton* mpButton;                                                          // 0x0398 (size: 0x8)
    class UImage* mpIcon;                                                             // 0x03A0 (size: 0x8)
    class UImage* mpHighlight;                                                        // 0x03A8 (size: 0x8)
    class UMaterialInstance* mpMaterialInstance;                                      // 0x03B0 (size: 0x8)
    class UMaterialInstanceDynamic* mpDynMaterialInstance;                            // 0x03B8 (size: 0x8)

    void OnButtonPressed();
}; // Size: 0x3C8

class ULoadoutEquipSlotWidget : public UMetaWidget
{
    class UNavButton* mpNavButton;                                                    // 0x0388 (size: 0x8)
    class UImage* mpImageIcon;                                                        // 0x0390 (size: 0x8)
    class UImage* mpLockIcon;                                                         // 0x0398 (size: 0x8)
    class UTextBlock* mpTitleText;                                                    // 0x03A0 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
}; // Size: 0x3A8

class ULoadoutLoadStep : public UPlayerLoadStep
{
    class ULoadoutManager* mpLoadoutManager;                                          // 0x0030 (size: 0x8)

}; // Size: 0x38

class ULoadoutManager : public UDataAsset
{
    TMap<int32, UPlayerLoadout*> mpPlayerLoadoutsByLobbyIndex;                        // 0x0030 (size: 0x50)
    TMap<int32, UPlayerLoadout*> mSavedPlayerLoadouts;                                // 0x0080 (size: 0x50)
    int32 mPendingPlayerLoadoutsAsyncLoads;                                           // 0x00D0 (size: 0x4)

    void OnPlayerLoadoutFullyLoaded();
}; // Size: 0xE8

class ULoadoutPerksMenuScreen : public UBaseLoadoutScreen
{
    class UPerkLoadoutWidget* mpPerkLoadoutWidget;                                    // 0x0338 (size: 0x8)

    void OnPreSelectedCharacter();
    void OnPostSelectedCharacter();
}; // Size: 0x348

class ULoadoutRadialMenuWidget : public UUserWidget
{
    bool IsPreview;                                                                   // 0x0260 (size: 0x1)
    class UCanvasPanel* mpBlockerCanvas;                                              // 0x0278 (size: 0x8)

    void SetupNavOverrides();
}; // Size: 0x280

class ULoadoutRadialOverlayWidget : public UBaseOverlay
{
    class ULoadoutRadialMenuWidget* mpRadialMenuWidget;                               // 0x0280 (size: 0x8)

}; // Size: 0x288

class ULoadoutRadialUserButton : public UBaseUserButton
{
    class UImage* mpItemIcon;                                                         // 0x0478 (size: 0x8)

}; // Size: 0x480

class ULoadoutRadialWedgeWidget : public UUserWidget
{
    class ULoadoutRadialUserButton* mpUserButton;                                     // 0x0270 (size: 0x8)

    void SetIconAngle(float Angle);
    void OnTextureLoaded(class UTexture2D* pTex);
    void OnButtonPressed();
}; // Size: 0x298

class ULoadoutScreen : public UBaseScreen
{
    class UTexture2D* ClothingTeenImage;                                              // 0x02C0 (size: 0x8)
    class UTexture2D* ClothingEvilImage;                                              // 0x02C8 (size: 0x8)
    class UTexture2D* WeaponsImage;                                                   // 0x02D0 (size: 0x8)
    class UTexture2D* MutationsImage;                                                 // 0x02D8 (size: 0x8)
    class UTexture2D* PerksTeenImage;                                                 // 0x02E0 (size: 0x8)
    class UTexture2D* PerksEvilImage;                                                 // 0x02E8 (size: 0x8)
    class ULoadoutUserButton* mpClothingButton;                                       // 0x02F0 (size: 0x8)
    class ULoadoutUserButton* mpWeaponsMutationsButton;                               // 0x02F8 (size: 0x8)
    class ULoadoutUserButton* mpPerksButton;                                          // 0x0300 (size: 0x8)

    void OnWeaponsMutationsPressed();
    void OnPerksPressed();
    void OnClothingPressed();
}; // Size: 0x310

class ULoadoutUserButton : public UBaseUserButton
{
    class UTexture2D* TeenImage;                                                      // 0x0478 (size: 0x8)
    class UTexture2D* EvilImage;                                                      // 0x0480 (size: 0x8)
    class UMaterialInstance* TeenTextMaterial;                                        // 0x0488 (size: 0x8)
    class UMaterialInstance* EvilTextMaterial;                                        // 0x0490 (size: 0x8)
    TMap<class ESeasonalEventType, class UMaterialInstance*> EventMaterials;          // 0x0498 (size: 0x50)
    FText TeenText;                                                                   // 0x04E8 (size: 0x18)
    FText EvilText;                                                                   // 0x0500 (size: 0x18)
    ENewFlagType TeenNewFlagType;                                                     // 0x0518 (size: 0x1)
    ENewFlagType EvilNewFlagType;                                                     // 0x0519 (size: 0x1)
    EUISlot TeenNewFlagSlot;                                                          // 0x051A (size: 0x1)
    EUISlot EvilNewFlagSlot;                                                          // 0x051B (size: 0x1)
    class UTextBlock* mpTextBlock;                                                    // 0x0520 (size: 0x8)
    class UImage* mpNormalImage;                                                      // 0x0528 (size: 0x8)
    class UNewFlagWidget* mpNewFlag;                                                  // 0x0530 (size: 0x8)

}; // Size: 0x538

class ULobbyChallengeWidget : public UUserWidget
{
}; // Size: 0x260

class ULobbyChatTextWidget : public UUserWidget
{
    class URichTextBlock* mpText;                                                     // 0x0260 (size: 0x8)

    void SetText(const FText& Text);
}; // Size: 0x268

class ULobbyChatWidget : public UUserWidget
{
    class UScrollBox* mpChatLogScroll;                                                // 0x0260 (size: 0x8)
    class UVerticalBox* mpChatLogBox;                                                 // 0x0268 (size: 0x8)
    class UEditableTextBox* mpEntryBox;                                               // 0x0270 (size: 0x8)
    TSubclassOf<class ULobbyChatTextWidget> mChatTextClass;                           // 0x0278 (size: 0x8)

    void OnTextCommit(const FText& Text, TEnumAsByte<ETextCommit::Type> CommitType);
    void ClearChat();
    void AddTextLine(const FText& Text);
}; // Size: 0x288

class ULobbyLoadoutController : public UObject
{
    TWeakObjectPtr<class UClientStateManager> mOwningClientStateManager;              // 0x0028 (size: 0x8)
    TArray<FLoadoutChange> mLoadoutChangeQueue;                                       // 0x0030 (size: 0x10)

}; // Size: 0x48

class ULobbyManager : public UObject
{
    int32 mLobbyIndexCount;                                                           // 0x0028 (size: 0x4)
    ELobbyClientState mClientLobbyState;                                              // 0x002C (size: 0x1)
    float mConnectionTimeoutTimer;                                                    // 0x0030 (size: 0x4)
    class UBusyModalWidget* mpLeaveLobbyBusyModal;                                    // 0x0038 (size: 0x8)
    class ALobbyBeaconHost* mpLobbyBeaconHost;                                        // 0x0040 (size: 0x8)
    class AServerBeaconHost* mpServerBeaconHost;                                      // 0x0048 (size: 0x8)
    class AServerBeaconClient* mpServerBeaconClient;                                  // 0x0050 (size: 0x8)
    TMap<uint32, FConnectingPlayer> mConnectingPlayers;                               // 0x0058 (size: 0x50)
    TArray<FNetPlayerInfoStruct> mBotPlayers;                                         // 0x00A8 (size: 0x10)
    TMap<int32, UClientStateManager*> mAllClientStatesByLobbyIndex;                   // 0x00B8 (size: 0x50)
    TArray<class UClientStateManager*> mSavedClientsStates;                           // 0x0108 (size: 0x10)
    FMatchSettings mHostMatchSettings;                                                // 0x0118 (size: 0x50)
    FLobbyDetails mHostLobbyDetails;                                                  // 0x01B8 (size: 0x14)
    bool mbMatchSettingsDirty;                                                        // 0x01CC (size: 0x1)
    FString mMatchId;                                                                 // 0x01D0 (size: 0x10)
    int32 mLobbyConnectionUID;                                                        // 0x01E0 (size: 0x4)
    bool mbCameFromVotedOnMapSelection;                                               // 0x01E4 (size: 0x1)
    EServerConnectionType mServerConnectionType;                                      // 0x01E5 (size: 0x1)
    TArray<class UGameModeDataAsset*> mGameModeDataAssets;                            // 0x01F8 (size: 0x10)
    class UBusyModalWidget* mpJoiningLobbyBusyModal;                                  // 0x0370 (size: 0x8)
    EClientMatchmakingType mClientMatchmakingType;                                    // 0x0410 (size: 0x1)

    void SetMatchSettings(const FMatchSettings& MatchSettings);
    void QueueAddBotPlayer();
    class UGameModeDataAsset* GetGameModeDataAsset();
    int32 DoServerIncrementLobbyIndex();
    void DisconnectLobby(const ELobbyDisconnectReason reason, bool bWasInLobby, bool bLeaveParty);
    void AddToGameModeIndex(int32 Add);
}; // Size: 0x418

class ULobbyMatchSettingsOverlayWidget : public UBaseOverlay
{
    class UOptionSelectorUserButton* mpPerksSelectorUserButton;                       // 0x0280 (size: 0x8)
    class UOptionSelectorUserButton* mpWeaponPowersSelectorUserButton;                // 0x0288 (size: 0x8)
    class UOptionSelectorUserButton* mpMutationsSelectorUserButton;                   // 0x0290 (size: 0x8)
    class UOptionSelectorUserButton* mpWinConditionSelectorUserButton;                // 0x0298 (size: 0x8)
    class UOptionSelectorUserButton* mpVoiceChatModeUserButton;                       // 0x02A0 (size: 0x8)
    class UOptionSelectorUserButton* mpSurvivalEvilAIDifficultyUserButton;            // 0x02A8 (size: 0x8)
    TSubclassOf<class UOptionSelectorUserButton> mpGeneratedSettingButtonClass;       // 0x02B0 (size: 0x8)
    TSubclassOf<class UOptionSliderUserButton> mpGeneratedSliderButtonClass;          // 0x02B8 (size: 0x8)
    class UImage* mpCustomMatchSettingsTitleBackground;                               // 0x02C0 (size: 0x8)
    class UPanelWidget* mpSettingsBox;                                                // 0x02C8 (size: 0x8)
    class UPanelWidget* mpGameModeSettingsPanel;                                      // 0x02D0 (size: 0x8)
    class UWidget* mpCustomMatchSettingsMap;                                          // 0x02D8 (size: 0x8)
    class UTextBlock* mpCustomMatchModeName;                                          // 0x02E0 (size: 0x8)
    class UImage* mpGameModeThumbnail;                                                // 0x02E8 (size: 0x8)
    class UTextBlock* mpGameModeDescription;                                          // 0x02F0 (size: 0x8)
    class UTextBlock* mpMapNameText;                                                  // 0x02F8 (size: 0x8)
    class UImage* mpMapThumbnail;                                                     // 0x0300 (size: 0x8)
    class UButton* mpMapLeftButton;                                                   // 0x0308 (size: 0x8)
    class UButton* mpMapRightButton;                                                  // 0x0310 (size: 0x8)
    class UButton* mpGameModeRightButton;                                             // 0x0318 (size: 0x8)
    class UButton* mpGameModeLeftButton;                                              // 0x0320 (size: 0x8)
    TMap<class FName, class UOptionUserButton*> mGeneratedSettingsWidgets;            // 0x0328 (size: 0x50)

    void OnMatchSettingsSliderChanged(float Value);
    void OnMatchSettingsChanged();
    void OnMapRight();
    void OnMapLeft();
    void OnGameModeRight();
    void OnGameModeLeft();
}; // Size: 0x378

class ULobbyPlayerWidget : public UUserWidget
{
    class UTextBlock* mpPlayerNameText;                                               // 0x0278 (size: 0x8)
    class UWidget* mpPortraitBox;                                                     // 0x0280 (size: 0x8)
    class UImage* mpPortraitIcon;                                                     // 0x0288 (size: 0x8)
    class UImage* mpReadyIcon;                                                        // 0x0290 (size: 0x8)
    class UButton* mpReadyButton;                                                     // 0x0298 (size: 0x8)
    class UButton* mpRemoveBotButton;                                                 // 0x02A0 (size: 0x8)
    class UButton* mpConfigureBotButton;                                              // 0x02A8 (size: 0x8)
    class UNavButton* mpSlotMenuButton;                                               // 0x02B0 (size: 0x8)
    class UWidget* mpSlotButtons;                                                     // 0x02B8 (size: 0x8)
    class UImage* mpHighlightImage;                                                   // 0x02C0 (size: 0x8)
    class UTextBlock* mpCRText;                                                       // 0x02C8 (size: 0x8)
    class UWidget* mpPlayerCardPanel;                                                 // 0x02D0 (size: 0x8)
    class UWidget* mpOpenSlotButtonContainer;                                         // 0x02D8 (size: 0x8)
    class UButton* mpAddBotButton;                                                    // 0x02E0 (size: 0x8)
    class UButton* mpInviteFriendButton;                                              // 0x02E8 (size: 0x8)
    class UButton* mpJoinAsPlayerButton;                                              // 0x02F0 (size: 0x8)
    class UWidgetAnimation* mpSlotMenuHoverAnimation;                                 // 0x02F8 (size: 0x8)
    class UWidgetSwitcher* mpLeftButtonWidgetSwitcher;                                // 0x0300 (size: 0x8)
    class UWidget* mpPlayerStatusBox;                                                 // 0x0308 (size: 0x8)
    class UWidget* mpAddPlayerIcon;                                                   // 0x0310 (size: 0x8)
    ELobbyPlayerWidgetMode mMode;                                                     // 0x0318 (size: 0x1)

    void OnRemoveBotPressed();
    void OnReadyPressed();
    void OnPortraitLoaded(class UTexture2D* pTex);
    void OnMenuButtonUnhover();
    void OnMenuButtonHover();
    void OnJoinAsPlayerPressed();
    void OnInviteFriendPressed();
    void OnConfigureBotPressed();
    void OnAddBotPressed();
    void OnAction();
}; // Size: 0x320

class ULobbyScreen : public UBaseScreen
{
    class UPlayReadyPanel* mpPlayReadyPanel;                                          // 0x02C8 (size: 0x8)
    class UPrizeBoxUserButton* mpPrizeBoxUserButton;                                  // 0x02D0 (size: 0x8)
    class UPrizeSelectionWidget* mpPrizeSelectionWidget;                              // 0x02D8 (size: 0x8)
    class UButton* mpClientOpenMatchSettingsButton;                                   // 0x02E0 (size: 0x8)
    class UWidget* mpCustomMatchAlertPanel;                                           // 0x02E8 (size: 0x8)
    class UTextBlock* mpSelectedMapName;                                              // 0x02F0 (size: 0x8)
    class UImage* mpSelectedMapThumbnail;                                             // 0x02F8 (size: 0x8)
    class UTextBlock* mpSelectedGameModeText;                                         // 0x0300 (size: 0x8)
    class UTextBlock* mpSelectedGameModeDescription;                                  // 0x0308 (size: 0x8)
    class UTextBlock* mpCustomSettingsPerksName;                                      // 0x0310 (size: 0x8)
    class UTextBlock* mpCustomSettingsMutationsName;                                  // 0x0318 (size: 0x8)
    class UTextBlock* mpCustomSettingsWeaponsName;                                    // 0x0320 (size: 0x8)
    class UTextBlock* mpCustomSettingsWinConditionName;                               // 0x0328 (size: 0x8)
    class UTextBlock* mpCustomSettingsVoiceChatMode;                                  // 0x0330 (size: 0x8)
    class UHideCustomMatchSettingsUserButton* mpHideCustomMatchSettingsButton;        // 0x0338 (size: 0x8)
    class UMovieEquipmentWidget* mpMovieEquipmentWidget;                              // 0x0340 (size: 0x8)
    class UWidget* mpCustomMatchCollapsableSettings;                                  // 0x0348 (size: 0x8)
    class UWidget* mpCustomMatchOverlay;                                              // 0x0350 (size: 0x8)
    class UWidget* mpCustomMatchHost;                                                 // 0x0358 (size: 0x8)
    class UWidget* mpCustomMatchClient;                                               // 0x0360 (size: 0x8)
    class UCustomCodeUserWidget* mpCustomCodeUserWidget;                              // 0x0368 (size: 0x8)
    class UWidgetSwitcher* mpCustomMatchSettingsWidgetSwitcher;                       // 0x0370 (size: 0x8)
    class UBaseUserButton* mpCustomMatchSettingsUserButton;                           // 0x0378 (size: 0x8)
    class UWidgetAnimation* mpCustomMatchHideSettingsAnimation;                       // 0x0380 (size: 0x8)
    TArray<class ULobbyPlayerWidget*> mpPlayerWidgets;                                // 0x0388 (size: 0x10)
    class UMatchIdTextBox* mpMatchIdTextBox;                                          // 0x0398 (size: 0x8)
    class UTextBlock* mpCustomMatchAlertText;                                         // 0x03A0 (size: 0x8)
    int32 mFriendsCount;                                                              // 0x03A8 (size: 0x4)
    bool mbGameStarted;                                                               // 0x03AC (size: 0x1)

    void OnToggleShowLobbyCode();
    void OnToggleHideMatchSettings();
    void OnReady();
    void OnOpenMatchSettings();
    void OnCopyLobbyCodeToClipboard();
}; // Size: 0x3B8

class ULobbyServerResultWidget : public UUserWidget
{
    class UTextBlock* mpServerNameText;                                               // 0x0268 (size: 0x8)
    class UTextBlock* mpMapText;                                                      // 0x0270 (size: 0x8)
    class UTextBlock* mpPlayersText;                                                  // 0x0278 (size: 0x8)
    class UTextBlock* mpTeenCountText;                                                // 0x0280 (size: 0x8)
    class UTextBlock* mpEvilCountText;                                                // 0x0288 (size: 0x8)
    class UTextBlock* mpPingText;                                                     // 0x0290 (size: 0x8)
    class UNavButton* mpJoinTeenButton;                                               // 0x0298 (size: 0x8)
    class UNavButton* mpJoinEvilButton;                                               // 0x02A0 (size: 0x8)
    class UNavButton* mpSpectateButton;                                               // 0x02A8 (size: 0x8)
    float mRefreshTimer;                                                              // 0x03B8 (size: 0x4)
    int32 mPort;                                                                      // 0x03BC (size: 0x4)

    void OnSpectatePressed();
    void OnJoinPressed();
}; // Size: 0x3C0

class ULobbyStatusWidget : public UUserWidget
{
    class UButton* mpCancelButton;                                                    // 0x0260 (size: 0x8)
    class UTextBlock* mpStatusText;                                                   // 0x0268 (size: 0x8)
    class UCanvasPanel* mpStatusPanel;                                                // 0x0270 (size: 0x8)
    class UCanvasPanel* mpPartyActionsAvailablePanel;                                 // 0x0278 (size: 0x8)
    class UHorizontalBox* mpControllerBox;                                            // 0x0280 (size: 0x8)
    ELobbyClientState mLobbyState;                                                    // 0x0288 (size: 0x1)
    int32 mNumPlayers;                                                                // 0x028C (size: 0x4)
    int32 mMaxPlayers;                                                                // 0x0290 (size: 0x4)
    float mStateTimer;                                                                // 0x0294 (size: 0x4)
    int32 mLastCountdownTime;                                                         // 0x0298 (size: 0x4)
    class UWidgetAnimation* PulseAnim;                                                // 0x02A0 (size: 0x8)
    class UWidgetAnimation* IdleAnim;                                                 // 0x02A8 (size: 0x8)
    class UProgressBar* mpProgressBar;                                                // 0x02B0 (size: 0x8)

    void OnCancelPressed();
}; // Size: 0x2C0

class ULocUtilStatics : public UObject
{

    FText GetWeaponFriendlyName(EWeaponTypeEnum weaponType);
    ESeasonalEventType GetSeasonalEventFromString(FString str);
    FText GetLocTextFromTipVisibility(ETipsVisibilityFlags tipVisiblityFlag);
    FText GetLocStringFromGameAction(EGameActionType GameActionType);
    FText GetLocFromItemType(EDbItemType ItemType);
    FText GetLocFromItemRarity(EItemRarity rarityType);
    FText GetLocForWeaponDescription(EWeaponTypeEnum weaponType);
    FText GetLocForWeaponCraftingTime(EWeaponTypeEnum weaponType);
    FText GetLocForWeaponAmmoTitleText(EWeaponTypeEnum weaponType);
    FText GetLocForWeaponAmmoAmountText(EWeaponTypeEnum weaponType);
    FText GetLocForUISlot(EUISlot uiSlot);
    FText GetLocForScoringCateogry(EScoringCategory scoringCategoryType);
    FText GetLocForPointType(EPointType Type, int32 Val, bool bDescription);
    FText GetLocForPlayerSlot(EPlayerSlot playerSlot);
    FText GetLocForPlayerPresenceState(EPlayerPresenceState State);
    FText GetLocForPlayerAccountStat(EPlayerAccountStatType StatType);
    FText GetLocForPerkAffinityType(EPerkAffinityType perkType);
    FText GetLocForPerkAffinityDescription(EPerkAffinityType perkType);
    FText GetLocForMenuScreen(EMenuScreen menuScreen);
    FText GetLocForCharacterType(ECharacterType CharacterType);
    FText GetLocForCharacterQuoteType(ECharacterType CharacterType);
    FText GetLocForCharacterDifficulty(EDifficultyType difficulty);
    FText GetLocForCharacterAboutMeType(ECharacterType CharacterType);
    FText GetLocCurrencyTextFromCurrencyCode(FString CurrencyCode);
    FText GetLocCharacterState(FPlayerMatchInfoData PlayerMatchInfoData);
    FText GetKeyNameFromGameAction(class UObject* pWorldContext, EGameActionType GameActionType, FLinearColor& outKeyColor);
    EItemRarity GetItemRarityFromString(FString str);
    FText GetFormattedStoreItemTitleForItemTemplate(const class UDbItemTemplate* pTemplate);
    FText GetEvilAbilityFriendlyName(EEvilAbilityType abilityType);
    FText GetEvilAbilityDescription(EEvilAbilityType abilityType);
    FText GetDamageFriendlyName(EDamageType DamageType);
    FLinearColor GetColorFromDamageType(EDamageType DamageType);
    FText ExpandCompoundInputs(class UObject* pWorldContext, FText Text);
}; // Size: 0x28

class ULogSender : public UObject
{
}; // Size: 0x28

class UMESChallengeItemWidget : public UMetaWidget
{
    class UImage* mpStatusIcon;                                                       // 0x0378 (size: 0x8)
    class URichTextBlock* mpDescriptionText;                                          // 0x0380 (size: 0x8)
    class UProgressBar* mpProgressBar;                                                // 0x0388 (size: 0x8)
    class UTextBlock* mpTallyText;                                                    // 0x0390 (size: 0x8)

}; // Size: 0x398

class UMESTaskListItemWidget : public UUserWidget
{
    class UImage* mpCompletedIcon;                                                    // 0x0260 (size: 0x8)
    class UTextBlock* mpDescriptionText;                                              // 0x0268 (size: 0x8)
    class UTextBlock* mpProgressText;                                                 // 0x0270 (size: 0x8)
    class UProgressBar* mpProgressBar;                                                // 0x0278 (size: 0x8)
    class UProgressBar* mpDeltaProgressBar;                                           // 0x0280 (size: 0x8)

}; // Size: 0x290

class UMainMenuButton : public UUserWidget
{
    FText Title;                                                                      // 0x0260 (size: 0x18)
    EMenuScreen TargetScreen;                                                         // 0x0278 (size: 0x1)
    bool IsPlayOverride;                                                              // 0x0279 (size: 0x1)
    bool IsLoadoutButton;                                                             // 0x027A (size: 0x1)
    bool IsPortraitButton;                                                            // 0x027B (size: 0x1)
    FLinearColor TeenColorText;                                                       // 0x027C (size: 0x10)
    FLinearColor EvilColorText;                                                       // 0x028C (size: 0x10)
    FLinearColor EventColorText;                                                      // 0x029C (size: 0x10)
    class UCanvasPanel* mpBackgroundPanel;                                            // 0x02C0 (size: 0x8)
    class UImage* mpBackgroundImage;                                                  // 0x02C8 (size: 0x8)
    class UCanvasPanel* mpHoverPanel;                                                 // 0x02D0 (size: 0x8)
    class UButton* mpButton;                                                          // 0x02D8 (size: 0x8)
    class UTextBlock* mpText;                                                         // 0x02E0 (size: 0x8)
    class UImage* mpNewFlagIcon;                                                      // 0x02E8 (size: 0x8)

    void Rebuild();
    void OnButtonPressed();
}; // Size: 0x300

class UMainMenuButtonBackground : public UUserWidget
{
    class UCanvasPanelSlot* mpCanvasSlot;                                             // 0x0260 (size: 0x8)

}; // Size: 0x280

class UMainMenuSeasonalEventWidget : public USeasonalEventWidget
{
    class UImage* mpEventIcon;                                                        // 0x0278 (size: 0x8)
    class UTextBlock* mpEventText;                                                    // 0x0280 (size: 0x8)
    class UTextBlock* mpEventDetails;                                                 // 0x0288 (size: 0x8)
    FSlateBrush m2xEventIcon;                                                         // 0x0290 (size: 0x88)

}; // Size: 0x318

class UMainMenuWidget : public UUserWidget
{
    class ULetterboxBordersWidget* mpTopBorder;                                       // 0x0268 (size: 0x8)
    class UMainMenuButton* mpPlayButton;                                              // 0x0270 (size: 0x8)
    class UMainMenuButton* mpLoadoutButton;                                           // 0x0278 (size: 0x8)
    class UMainMenuButton* mpJourneyButton;                                           // 0x0280 (size: 0x8)
    class UMainMenuButton* mpMoviesButton;                                            // 0x0288 (size: 0x8)
    class UMainMenuButton* mpStoreButton;                                             // 0x0290 (size: 0x8)
    class UMainMenuButton* mpEventButton;                                             // 0x0298 (size: 0x8)
    class UMainMenuButton* mpSeasonPassButton;                                        // 0x02A0 (size: 0x8)
    TArray<class UMainMenuButton*> mMenuButtons;                                      // 0x02A8 (size: 0x10)
    int32 mSelectedMenuIndex;                                                         // 0x02B8 (size: 0x4)

    void TransitionActiveWidgetTab(uint32 tabIndex);
    void SelectMenu(int32 Index);
    void OnRightMenuPressed();
    void OnMenu7Pressed();
    void OnMenu6Pressed();
    void OnMenu5Pressed();
    void OnMenu4Pressed();
    void OnMenu3Pressed();
    void OnMenu2Pressed();
    void OnMenu1Pressed();
    void OnLeftMenuPressed();
    void OnHomePressed();
    void OnButtonPressed(class UMainMenuButton* pButton);
}; // Size: 0x2D0

class UManualTransformProgressBar : public UBaseActionProgressBar
{
}; // Size: 0x270

class UMapDataAsset : public UPrimaryDataAsset
{
    FGameplayTag mTags;                                                               // 0x0030 (size: 0x8)
    FText mDisplayName;                                                               // 0x0038 (size: 0x18)
    ELevelType mLevelType;                                                            // 0x0050 (size: 0x1)
    ESubLevelType mSubLevelType;                                                      // 0x0051 (size: 0x1)
    FSoftObjectPath mLevelRoot;                                                       // 0x0058 (size: 0x18)
    TArray<FSoftObjectPath> mLevelsToStreamIn;                                        // 0x0070 (size: 0x10)
    TArray<FSoftObjectPath> mLevelsToStreamOut;                                       // 0x0080 (size: 0x10)
    TArray<FLoadingScreenData> mLoadingScreens;                                       // 0x0090 (size: 0x10)
    class UTexture2D* mpThumbnail;                                                    // 0x00A0 (size: 0x8)
    TArray<class UAkAudioEvent*> mAmbientSoundEvents;                                 // 0x00A8 (size: 0x10)
    TMap<class FName, class FLinearColor> mColorParameters;                           // 0x00B8 (size: 0x50)
    TMap<FName, float> mScalarParameters;                                             // 0x0108 (size: 0x50)

}; // Size: 0x158

class UMatchEventQueue : public UObject
{
    TWeakObjectPtr<class UClientStateManager> mOwningClientStateManager;              // 0x006C (size: 0x8)

}; // Size: 0x78

class UMatchEventUtilStatics : public UObject
{
}; // Size: 0x28

class UMatchIdTextBox : public UUserWidget
{
    bool GetIdFromMatchSettings;                                                      // 0x0260 (size: 0x1)
    class UTextBlock* mpMatchIdText;                                                  // 0x0268 (size: 0x8)

}; // Size: 0x298

class UMatchModManager : public UActorComponent
{
    TArray<FPlayerToMatchMod> mPlayerNameToMM;                                        // 0x00B0 (size: 0x10)

    void PrintCurrentMatchMods(float DeltaTime);
    bool IsMatchModActiveForPlayer(class AGameplayPS* pPlayerPS, EMatchModType matchModType);
    bool IsMatchModActive(EMatchModType matchModType);
    TArray<FPlayerToMatchMod> GetPlayerNameToMM();
    void AssignMatchMod(class AGameplayPS* pPlayerPS, EMatchModType matchModeType, int32 Tier);
}; // Size: 0xC0

class UMatchStateSummaryWidget : public UUserWidget
{
    TArray<class UEndOfRoundPlayerInfoWidget*> mEndOfRoundPlayerWidgetsList;          // 0x0260 (size: 0x10)
    class UTextBlock* mpMapNameText;                                                  // 0x0270 (size: 0x8)
    class UTextBlock* mpMatchTimeText;                                                // 0x0278 (size: 0x8)
    class UHorizontalBox* mpWonTextBox;                                               // 0x0280 (size: 0x8)
    class UHorizontalBox* mpLostTextBox;                                              // 0x0288 (size: 0x8)
    class UTextBlock* mpPingCategoryText;                                             // 0x0290 (size: 0x8)
    class UTextBlock* mpPingCategoryText2;                                            // 0x0298 (size: 0x8)
    class UVerticalBox* mpUpperBox;                                                   // 0x02A0 (size: 0x8)
    class UVerticalBox* mpLowerBox;                                                   // 0x02A8 (size: 0x8)
    class UTextBlock* mpWonText;                                                      // 0x02B0 (size: 0x8)
    class UTextBlock* mpLostText;                                                     // 0x02B8 (size: 0x8)
    class UHorizontalBox* mpTeenTitleHeaders;                                         // 0x02C0 (size: 0x8)
    class UHorizontalBox* mpEvilTitleHeaders;                                         // 0x02C8 (size: 0x8)

    void Update(FMatchSummaryInfoData MatchSummaryInfoData);
    bool IsInGameScreen();
}; // Size: 0x2D0

class UMatchmakingNotificationManager : public UObject
{

    class UMatchmakingNotificationManager* GetMatchmakingNotificationManagerInstance(class UObject* pWorldContextObject);
}; // Size: 0x50

class UMatchmakingNotificationPeer : public UEndSocket
{

    class UMatchmakingNotificationPeer* GetMatchmakingNotificationPeerInstance(class UObject* pWorldContextObject);
}; // Size: 0xE0

class UMatchmakingScreen : public UBaseScreen
{
    class UVerticalBox* mpNewsBox;                                                    // 0x02C0 (size: 0x8)
    class UButton* mpNewsButton;                                                      // 0x02C8 (size: 0x8)
    class USeasonPassSummaryWidget* mpSeasonpassSummaryWidget;                        // 0x02D0 (size: 0x8)
    class UEventTrackerUserButton* mpEventTrackerUserButton;                          // 0x02D8 (size: 0x8)
    class UMovieEquipmentWidget* mpMovieEquipmentWidget;                              // 0x02E0 (size: 0x8)
    class UWidget* mpInfoPanel;                                                       // 0x02E8 (size: 0x8)
    class URichTextBlock* mpInfoText;                                                 // 0x02F0 (size: 0x8)
    class UPlayReadyPanel* mpPlayReadyPanel;                                          // 0x02F8 (size: 0x8)
    class UPrizeBoxUserButton* mpPrizeBoxUserButton;                                  // 0x0300 (size: 0x8)
    class UPrizeSelectionWidget* mpPrizeSelectionWidget;                              // 0x0308 (size: 0x8)
    class UImage* mpQuickplayIcon;                                                    // 0x0310 (size: 0x8)
    bool mbIsMouseDown;                                                               // 0x0318 (size: 0x1)
    FVector2D mClickedPosition;                                                       // 0x031C (size: 0x8)
    FVector2D mCurrentPosition;                                                       // 0x0324 (size: 0x8)
    float mCursorDelta;                                                               // 0x032C (size: 0x4)
    float mCurrentZoom;                                                               // 0x0330 (size: 0x4)
    float mCurrentAddedRotation;                                                      // 0x0334 (size: 0x4)
    float mTargetAddedRotation;                                                       // 0x0338 (size: 0x4)
    bool mbFirstTimeVisit;                                                            // 0x033C (size: 0x1)

    void UpdateInfoPanel();
    void OnQuitButton();
    void OnPlayButton();
    void OnPlayAsEvilSelected();
    void OnPlayAsButton();
    void OnNewsPressed();
    void OnModeButton();
    void OnEventPressed();
    void OnDeviceTypeChanged();
}; // Size: 0x340

class UMaterialTransferConfig : public UDataAsset
{
    TArray<FMaterialTransferByName> mMaterialParameterTransferByName;                 // 0x0030 (size: 0x10)
    TArray<FMaterialTransferByValue> mMaterialParameterTransferByValue;               // 0x0040 (size: 0x10)
    TArray<FMaterialTransferReceiver> mMaterialParameterTransferReceivers;            // 0x0050 (size: 0x10)

}; // Size: 0x60

class UMeshWidgetComponent : public UWidgetComponent
{
}; // Size: 0x5A0

class UMetaWidget : public UUserWidget
{
    FString mMetaData;                                                                // 0x02B0 (size: 0x10)
    FDbItemId mDbItemId;                                                              // 0x02C0 (size: 0x18)
    FGrantable mGrantable;                                                            // 0x02D8 (size: 0x88)
    class UWidgetAnimation* mpButtonSelectAnim;                                       // 0x0368 (size: 0x8)
    class UBaseUserButton* mpAnimButton;                                              // 0x0370 (size: 0x8)

    void OnUnselected();
    void OnUnhover();
    void OnSelected();
    void OnPressed();
    void OnHover();
    void OnDoubleClick();
    void OnAnimUnselect();
    void OnAnimSelect();
}; // Size: 0x378

class UMetaWidgetTemplate : public UMetaWidget
{
}; // Size: 0x378

class UMiscBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{

    void RenderTargetOverwriteStaticTexture2DEditorOnly(class UTextureRenderTarget2D* RenderTarget, FString Name, TEnumAsByte<TextureCompressionSettings> CompressionSettings, TEnumAsByte<TextureMipGenSettings> MipSettings, bool bOutputToFile, FString outputFilePath, FString outputFileName);
    class UObject* LoadAssetSynchronous(TSoftObjectPtr<UObject> InSoftObjectPtr);
    FString GetSourceControlWorkSpace();
    FText GetLocalizationText(ELocalizationTable Table, FString Key);
    bool FileSaveString(FString SaveTextB, FString FileNameB);
    bool FileAppendString(FString SaveTextB, FString FileNameB);
    void ApplyBulkLightingSettings(const FBulkApplyLightingSettings& Settings, const TArray<class AActor*>& Actors);
}; // Size: 0x28

class UModalManager : public UObject
{
    TArray<class UBaseModal*> mModalQueue;                                            // 0x0090 (size: 0x10)
    class UBaseModal* mpActiveModal;                                                  // 0x00A0 (size: 0x8)
    class UBaseModal* mpLastModalConfirmed;                                           // 0x00A8 (size: 0x8)

    void SetLastModalConfirmed(class UBaseModal* pBaseModal);
    void PushModal(class UBaseModal* modal);
    void ProcessModalQueue();
    void PopModal(class UBaseModal* pModal);
    TSubclassOf<class URewardItemWidget> GetRewardItemClass();
    TSubclassOf<class UReplayItemWidget> GetReplayItemClass();
    int32 GetNumActiveAndPendingRewardModals();
    void DoBackPress();
    void ClearAllRewards();
    void ClearAll();
    void AddModal(class UBaseModal* modal);
}; // Size: 0xB0

class UMolotovSkinDataAsset : public UTeenWeaponSkinDataAsset
{
    FSkinParticleSystem mExplosionParticleSystem;                                     // 0x01E8 (size: 0xD8)
    FSkinParticleSystem mFlamePoolParticleSystem;                                     // 0x02C0 (size: 0xD8)
    FSkinParticleSystem mFallingFlamesParticleSystem;                                 // 0x0398 (size: 0xD8)
    FSkinParticleSystem mIdleFlameParticleSystem;                                     // 0x0470 (size: 0xD8)
    FSkinLight mIdleFlameLight;                                                       // 0x0548 (size: 0x18)
    FSkinParticleSystem mProjectileParticleSystem;                                    // 0x0560 (size: 0xD8)
    EWise_WEP_Molotov mWiseMolotovSwitch;                                             // 0x0638 (size: 0x1)

}; // Size: 0x640

class UMotionSentinelComponent : public USceneComponent
{
    class USceneComponent* mpTransformComponent;                                      // 0x01F8 (size: 0x8)
    float mRevealTimer;                                                               // 0x0200 (size: 0x4)
    bool mbRevealAuraActive;                                                          // 0x0204 (size: 0x1)
    float mBreadcrumbTimer;                                                           // 0x0208 (size: 0x4)
    bool mbWarningActive;                                                             // 0x020C (size: 0x1)
    bool mbWhisperActive;                                                             // 0x020D (size: 0x1)
    bool mbDrawDebug;                                                                 // 0x020E (size: 0x1)
    class ATPChar* mpOwningTPChar;                                                    // 0x0210 (size: 0x8)
    float mServerAfkDuration;                                                         // 0x0228 (size: 0x4)

    void MulticastAllStopWhisperAudio();
    void MulticastAllStopIdleWarningParticle();
    void MulticastAllStartWhisperAudio();
    void MulticastAllStartIdleWarningParticle();
    bool IsRevealAuraActive();
    float GetWhisperAttenuationScalar();
    float GetRevealTimer();
    void DoServerUpdateSentinelMovement(float DeltaTime);
    void DoServerUpdatePlayerReveal(float DeltaTime);
    void DoServerUpdateBreadcrumbs(float DeltaTime);
    void DoServerUpdateAfkDuration(float DeltaTime);
    void DoServerUpdate(float DeltaTime);
    void DoServerSetWhisperActive(bool bSet);
    void DoServerSetWarningActive(bool bSet);
    void DoServerSetRevealTimer(float Timer);
    void DoServerSetRevealAuraActive(bool bSet);
    void DoServerSetDrawDebug(bool bSet);
    void DoServerSetAfkDuration(float Duration);
    void DoServerResetRevealTimer();
    bool DoServerIsWhisperActive();
    bool DoServerIsWarningActive();
    bool DoServerIsDrawingDebug();
    float DoServerGetAfkDuration();
    void DoServerDrawDebugLines(float DeltaTime);
}; // Size: 0x230

class UMouseTab : public UBaseTab
{
    class UNavScrollBox* mpNavScrollBox;                                              // 0x0290 (size: 0x8)
    class UOptionSliderUserButton* mpTeenMouseSensitivity;                            // 0x0298 (size: 0x8)
    class UOptionSliderUserButton* mpEvilMouseSensitivity;                            // 0x02A0 (size: 0x8)
    class UOptionSliderUserButton* mpFiringSensitivity;                               // 0x02A8 (size: 0x8)
    class UOptionToggleUserButton* mpMouseInvertY;                                    // 0x02B0 (size: 0x8)
    class UOptionToggleUserButton* mpKeyboardSprintToggle;                            // 0x02B8 (size: 0x8)
    class UOptionToggleUserButton* mpKeyboardCrouchToggle;                            // 0x02C0 (size: 0x8)
    class UOptionSingleUserButton* mpRestoreDefaultsButton;                           // 0x02C8 (size: 0x8)

    void OnResetDefaultsPressed();
    void OnResetDefaultsConfirmed();
}; // Size: 0x2D0

class UMovieButtonWidget : public UMetaWidget
{
    class UStateSwitcher* mpStateSwitcher;                                            // 0x0388 (size: 0x8)
    class UBaseUserButton* mpUserButton;                                              // 0x0390 (size: 0x8)
    class UImage* mpPosterIcon;                                                       // 0x0398 (size: 0x8)
    class UImage* mpEquippedIcon;                                                     // 0x03A0 (size: 0x8)
    class UImage* mpFlexIcon;                                                         // 0x03A8 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
    void OnDoubleClicked();
    class UNavButton* GetNavButton();
}; // Size: 0x3B0

class UMovieCompletionStatusWidget : public UMetaWidget
{
    class UImage* mpStatusIcon;                                                       // 0x0378 (size: 0x8)
    class UTextBlock* mpStatusText;                                                   // 0x0380 (size: 0x8)

}; // Size: 0x388

class UMovieDetailsWidget : public UMetaWidget
{
    class UTextBlock* mpTitleText;                                                    // 0x0378 (size: 0x8)
    class UTextBlock* mpEditionText;                                                  // 0x0380 (size: 0x8)
    class UMovieCompletionStatusWidget* mpCompletionStatusWidget;                     // 0x0388 (size: 0x8)
    class UActionButton* mpActionButton;                                              // 0x0390 (size: 0x8)
    class UActionButton* mpScenesButton;                                              // 0x0398 (size: 0x8)
    class UActionButton* mpPurchaseButton;                                            // 0x03A0 (size: 0x8)
    class UTextBlock* mpDescriptionText;                                              // 0x03A8 (size: 0x8)
    class UMovieRewardWidget* mpMovieRewardsWidget;                                   // 0x03B0 (size: 0x8)
    class UNonSelectableScrollBox* mpNonSelectableScrollBox;                          // 0x03B8 (size: 0x8)
    class UTimerCountdownWidget* mpAbandonTimerCountdownWidget;                       // 0x03C0 (size: 0x8)
    class UHorizontalBox* mpAbandonTimerBox;                                          // 0x03C8 (size: 0x8)
    FString mCurrentlyDisplayedFlexMovieStoreGUID;                                    // 0x03D0 (size: 0x10)

    void OnScenesPressed();
    void OnPurchasePressed();
    void OnActionPressed();
    void AbandonProceduralMovie();
}; // Size: 0x3E0

class UMovieEquipmentWidget : public UMetaWidget
{
    class UButton* mpButton;                                                          // 0x0378 (size: 0x8)
    class UMovieRentalUserButton* mpUserButton;                                       // 0x0380 (size: 0x8)
    class UImage* mpHighlightImage;                                                   // 0x0388 (size: 0x8)
    class UImage* mpBgImage;                                                          // 0x0390 (size: 0x8)
    class UImage* mpBlurImage;                                                        // 0x0398 (size: 0x8)

    void OnButtonPressed();
}; // Size: 0x3A0

class UMovieListWidget : public UUserWidget
{
    class UTextBlock* mpMoviesHeader;                                                 // 0x0270 (size: 0x8)
    class UTextBlock* mpSpecialHeader;                                                // 0x0278 (size: 0x8)
    class UUniformGridPanel* mpMoviesGrid;                                            // 0x0280 (size: 0x8)
    class UUniformGridPanel* mpSpecialGrid;                                           // 0x0288 (size: 0x8)
    class UImage* mpSpecialIcon;                                                      // 0x0290 (size: 0x8)

    void OnMovieSelected(FString Data);
}; // Size: 0x2A0

class UMovieManager : public UObject
{
    class UTextureRenderTarget2D* mpMovieThumbnailRenderTarget;                       // 0x0148 (size: 0x8)
    class UMaterialInstance* mpMovieThumbnailMaterial;                                // 0x0150 (size: 0x8)

}; // Size: 0x160

class UMovieRentalUserButton : public UBaseUserButton
{
    class UImage* mpLimitedHighlightImage;                                            // 0x0478 (size: 0x8)
    class UImage* mpRegularMovieBorder;                                               // 0x0480 (size: 0x8)
    class UImage* mpLimitedMovieBorder;                                               // 0x0488 (size: 0x8)
    class UImage* mpRegularMovieIcon;                                                 // 0x0490 (size: 0x8)
    class UImage* mpLimitedMovieIcon;                                                 // 0x0498 (size: 0x8)

    void OnLimitedTextureLoaded(class UTexture2D* pTex);
    void OnCharTextureLoaded(class UTexture2D* pTex);
}; // Size: 0x4E8

class UMovieRewardGroupWidget : public UBaseRewardGroupWidget
{
}; // Size: 0x398

class UMovieRewardWidget : public UMetaWidget
{
    bool ShowMovieRewards;                                                            // 0x0378 (size: 0x1)
    bool ShowMiscRewards;                                                             // 0x0379 (size: 0x1)
    TArray<class UBasicRewardWidget*> mRewardWidgets;                                 // 0x0388 (size: 0x10)
    class UTextBlock* mpEditionText;                                                  // 0x0398 (size: 0x8)
    class UButton* mpPreviewButton;                                                   // 0x03A0 (size: 0x8)
    TArray<FGrantable> mPreviewableRewards;                                           // 0x03A8 (size: 0x10)

    void OnPreviewPressed();
    bool AllowedToShowGrantable(FGrantable Grantable);
    bool AllowedToPreviewGrantable(FGrantable Grantable);
}; // Size: 0x3B8

class UMovieRewardsOverlayWidget : public UUserWidget
{
    class UWidgetAnimation* mpScenePanelIn;                                           // 0x0260 (size: 0x8)
    class UWidgetAnimation* mpScenePanelOut;                                          // 0x0268 (size: 0x8)
    class UWidgetAnimation* mpRewardPanelIn;                                          // 0x0270 (size: 0x8)
    class UWidgetAnimation* mpRewardPanelOut;                                         // 0x0278 (size: 0x8)
    class UWidgetAnimation* mpTitlesPanelIn;                                          // 0x0280 (size: 0x8)
    class UWidgetAnimation* mpTitlesPanelOut;                                         // 0x0288 (size: 0x8)
    class UCanvasPanel* mpMovieAndScenesPanel;                                        // 0x0290 (size: 0x8)
    class UCanvasPanel* mpRewardsPanel;                                               // 0x0298 (size: 0x8)
    class UImage* mpMovieImage;                                                       // 0x02A0 (size: 0x8)
    class UTextBlock* mpSceneRewardsTitle;                                            // 0x02A8 (size: 0x8)
    class UTextBlock* mpMovieRewardsTitle;                                            // 0x02B0 (size: 0x8)
    class UTextBlock* mpNumberOfScenesCompleted;                                      // 0x02B8 (size: 0x8)
    class UGridPanel* mpRewardsGridPanel;                                             // 0x02C0 (size: 0x8)
    class UWidgetSwitcher* mpTitlesWidgetSwitcher;                                    // 0x02C8 (size: 0x8)
    class UMESChallengeItemWidget* mpMesChallengeItemWidget;                          // 0x02D0 (size: 0x8)
    TArray<class UEORMovieRewardCard*> mRewardCards;                                  // 0x02D8 (size: 0x10)
    TArray<class UEORSceneTitleWidget*> mSceneTitleWidgets;                           // 0x02E8 (size: 0x10)
    TSubclassOf<class UEORSceneTitleWidget> mpSceneTitleWidgetClass;                  // 0x02F8 (size: 0x8)
    float mTimeToShowRewards;                                                         // 0x0300 (size: 0x4)

    void ShowRewards();
    void ShowNextScene();
    void ShowNextMovieScene();
    void SetNewlyCompletedScenesList(TArray<FSceneState> newlyCompletedScenesList);
    void SetCurrentScene(const FSceneState& SceneState);
    void SetCurrentMovieState(FString movieKey);
    void OnSceneTitleOutFinished();
    void OnSceneTitleInFinished();
    void OnSceneTitleDestroyed();
    void OnScenePanelInFinished();
    void OnRewardShowCompleted();
    void OnMovieRewardsShowCompleted();
    bool HasShownAllProgress();
    void FinishShowingRewards();
    bool AttemptSetMovieRewards();
}; // Size: 0x500

class UMoviesScreen : public UBaseScreen
{
    class UCategorySwitcher* mpCategorySwitcher;                                      // 0x02D0 (size: 0x8)
    class UCanvasPanel* mpInfoPanel;                                                  // 0x02D8 (size: 0x8)
    class UTextBlock* mpInfoText;                                                     // 0x02E0 (size: 0x8)
    class UMovieListWidget* mpMovieList;                                              // 0x02E8 (size: 0x8)
    class UMovieDetailsWidget* mpMovieDetails;                                        // 0x02F0 (size: 0x8)
    class UBorder* mpTimerBorder;                                                     // 0x02F8 (size: 0x8)
    class UTimerCountdownWidget* mpTimerCountdownWidget;                              // 0x0300 (size: 0x8)

    void TransitionToSceneDetials(FString Data);
    void PopulateSceneData(FString Data);
    void OnTextureLoaded(class UTexture2D* pTex);
    void OnCategoryChanged(int32 Index);
}; // Size: 0x340

class UMutationUserButton : public UBaseUserButton
{
    bool IsDefaultPower;                                                              // 0x0478 (size: 0x1)
    class UTexture2D* BackgroundTexture;                                              // 0x0480 (size: 0x8)
    class UMaterialInterface* mpAbilityMaterialInterface;                             // 0x0488 (size: 0x8)
    class UImage* mpBackgroundImage;                                                  // 0x04A0 (size: 0x8)
    class UImage* mpMutationIcon;                                                     // 0x04A8 (size: 0x8)
    class UNewFlagWidget* mpNewFlag;                                                  // 0x04B0 (size: 0x8)
    class UStateSwitcher* mpStateSwitcher;                                            // 0x04B8 (size: 0x8)
    class UMaterialInstanceDynamic* mpAbilityMaterialInstance;                        // 0x04C0 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
    void OnButtonSelected();
    void OnButtonDoubleClick();
}; // Size: 0x4D0

class UMutationsGroupWidget : public UMetaWidget
{
    class UBorder* mpSelectionBorder;                                                 // 0x0378 (size: 0x8)
    class UTextBlock* mpTitleText;                                                    // 0x0380 (size: 0x8)
    class UMutationUserButton* mpDefaultButton;                                       // 0x0388 (size: 0x8)
    class UMutationUserButton* mpPowerButton1;                                        // 0x0390 (size: 0x8)
    class UMutationUserButton* mpPowerButton2;                                        // 0x0398 (size: 0x8)
    class UMutationUserButton* mpPowerButton3;                                        // 0x03A0 (size: 0x8)

}; // Size: 0x3A8

class UMutationsScreen : public UBaseScreen
{
    FLinearColor PowerColor;                                                          // 0x02C0 (size: 0x10)
    FLinearColor MutationColor;                                                       // 0x02D0 (size: 0x10)
    class UMutationsGroupWidget* mpMutationGroup1;                                    // 0x02E0 (size: 0x8)
    class UMutationsGroupWidget* mpMutationGroup2;                                    // 0x02E8 (size: 0x8)
    class UMutationsGroupWidget* mpMutationGroup3;                                    // 0x02F0 (size: 0x8)
    class UTextBlock* mpTitleText;                                                    // 0x02F8 (size: 0x8)
    class UActionButton* mpActionButton;                                              // 0x0300 (size: 0x8)
    class UTextBlock* mpStatusText;                                                   // 0x0308 (size: 0x8)
    class UNonSelectableScrollBox* mpNonSelectableScrollBox;                          // 0x0310 (size: 0x8)
    class URichTextBlock* mpDescriptionText;                                          // 0x0318 (size: 0x8)

    void PreviewPower(EEvilAbilityType abilityType, FDbItemId ItemId);
    void OnActionPressed();
    void EquipPower(EEvilAbilityType abilityType, FDbItemId ItemId);
}; // Size: 0x348

class UNamedRewardWidget : public UBaseRewardWidget
{
    class UTextBlock* mpNameText;                                                     // 0x03C0 (size: 0x8)

}; // Size: 0x3C8

class UNavButton : public UButton
{
    TArray<EButtonBarType> BarButtons;                                                // 0x04A8 (size: 0x10)
    FNavButtonOnDoubleClick OnDoubleClick;                                            // 0x04C8 (size: 0x10)
    void OnButtonClickedEvent();
    FNavButtonOnClickedReferenced OnClickedReferenced;                                // 0x04D8 (size: 0x10)
    void OnButtonClickedReferencedEvent(class UNavButton* ref);
    FNavButtonOnLongPressReferenced OnLongPressReferenced;                            // 0x04E8 (size: 0x10)
    void OnButtonLongPressReferencedEvent(class UNavButton* ref);
    FNavButtonOnSelected OnSelected;                                                  // 0x04F8 (size: 0x10)
    void OnNavSelectedEvent();
    FNavButtonOnUnselected OnUnselected;                                              // 0x0508 (size: 0x10)
    void OnNavSelectedEvent();
    EGameActionType ButtonKeyAction;                                                  // 0x0518 (size: 0x1)
    bool RemoveAllButtonBehaviors;                                                    // 0x0519 (size: 0x1)
    bool HandlesSimulatePress;                                                        // 0x051A (size: 0x1)
    bool HandlesSimulateRelease;                                                      // 0x051B (size: 0x1)
    bool UseSecondaryColors;                                                          // 0x051C (size: 0x1)
    bool DisablesOnLockdown;                                                          // 0x051D (size: 0x1)
    bool SelectOnHover;                                                               // 0x051E (size: 0x1)
    bool OffsetOnSelected;                                                            // 0x051F (size: 0x1)
    FVector2D OffsetAmount;                                                           // 0x0520 (size: 0x8)
    float OffsetDuration;                                                             // 0x0528 (size: 0x4)
    bool ScaleOnSelected;                                                             // 0x052C (size: 0x1)
    bool ScaleOnHovered;                                                              // 0x052D (size: 0x1)
    FVector2D ScaleAmount;                                                            // 0x0530 (size: 0x8)
    float ScaleDuration;                                                              // 0x0538 (size: 0x4)
    bool AllowInteractionWhenHidden;                                                  // 0x053C (size: 0x1)
    bool IsPreciseClick;                                                              // 0x053D (size: 0x1)
    float HScrollSpeedMultiplier;                                                     // 0x0540 (size: 0x4)
    float VScrollSpeedMultiplier;                                                     // 0x0544 (size: 0x4)
    TMap<class ESelectionNavigation, class UUserWidget*> NavDirectionOverrides;       // 0x0548 (size: 0x50)
    bool LongPress;                                                                   // 0x0598 (size: 0x1)
    bool IgnoreLongPressDuringJourneyClaim;                                           // 0x0599 (size: 0x1)
    float LongPressLength;                                                            // 0x059C (size: 0x4)
    float LongPressMinimumDisplayAmount;                                              // 0x05A0 (size: 0x4)
    class UTexture2D* LongPressProgressTexture;                                       // 0x05A8 (size: 0x8)
    TArray<ESelectionNavigation> mOverrideDirections;                                 // 0x05B0 (size: 0x10)
    EWise_UI_Sounds OnPressSound;                                                     // 0x05C0 (size: 0x1)
    EWise_UI_Sounds OnReleaseSound;                                                   // 0x05C1 (size: 0x1)
    EWise_UI_Sounds OnHoverSound;                                                     // 0x05C2 (size: 0x1)
    EWise_UI_Sounds OnUnhoverSound;                                                   // 0x05C3 (size: 0x1)
    class UMaterialInstance* mpProgressMaterialInstance;                              // 0x05C8 (size: 0x8)
    class UMaterialInstanceDynamic* mpDynProgressMaterialInstance;                    // 0x05D0 (size: 0x8)
    FVector2D mSelectedOffset;                                                        // 0x05D8 (size: 0x8)
    FVector2D mSelectedScale;                                                         // 0x05E0 (size: 0x8)
    float mOffsetTimer;                                                               // 0x05E8 (size: 0x4)
    float mScaleTimer;                                                                // 0x05EC (size: 0x4)
    float mLongPressTime;                                                             // 0x05F0 (size: 0x4)
    bool mbLongPressHandled;                                                          // 0x05F4 (size: 0x1)
    float mDoubleClickTimer;                                                          // 0x05F8 (size: 0x4)
    FString mButtonData;                                                              // 0x0600 (size: 0x10)
    class UWidget* mpScaleTarget;                                                     // 0x0610 (size: 0x8)

    void SetScaleTarget(class UWidget* pNewWidget);
    void SetIconVisibility(bool bSet);
    void SetButtonData(const FString str);
    void ResetScale();
    void RefreshWidget();
    void InitializeNavDirectionOverrides(TMap<class ESelectionNavigation, class UUserWidget*> Overrides);
    FString GetButtonData();
    bool DoTick(float DeltaTime);
    void DoOnUnhovered();
    void DoOnReleased();
    void DoOnPressed();
    void DoOnHovered();
}; // Size: 0x618

class UNavCheckbox : public UCheckBox
{

    void UpdateChekboxState(bool bChecked);
    void RefreshWidget();
}; // Size: 0x7F0

class UNavDropDownMenu : public UUserWidget
{
    bool mbIsOpen;                                                                    // 0x0260 (size: 0x1)
    TSubclassOf<class UNavDropDownMenuTile> mTileClass;                               // 0x0268 (size: 0x8)
    TArray<class UNavDropDownMenuTile*> mGeneratedTiles;                              // 0x0270 (size: 0x10)
    TArray<FText> mOptionsList;                                                       // 0x0280 (size: 0x10)
    class UVerticalBox* mpGeneratedTileTargetBox;                                     // 0x0290 (size: 0x8)
    int32 mCurrentlySelectedIndex;                                                    // 0x0298 (size: 0x4)
    class UCanvasPanel* mpSelectedTileInfoPanel;                                      // 0x02A0 (size: 0x8)
    class UTextBlock* mpSelectedTileTitleText;                                        // 0x02A8 (size: 0x8)
    class UNavButton* mpDropDownButton;                                               // 0x02B0 (size: 0x8)
    FNavDropDownMenuOnDropDownMenuIndexChanged OnDropDownMenuIndexChanged;            // 0x02B8 (size: 0x10)
    void OnDropDownMenuIndexChangedEvent(int32 ref);

    void ToggleMenuIsOpen();
    void SetReportOptionsList();
    void SetOptionsList(TArray<FText> optionsArray);
    void SetMenuIsOpen(bool bNewValue);
    void OnDropDownButtonPressed();
    void OnChildTilePressed(int32 Index);
    int32 GetSelectedIndex();
}; // Size: 0x2C8

class UNavDropDownMenuTile : public UUserWidget
{
    int32 mTileIndex;                                                                 // 0x0260 (size: 0x4)
    class UDropdownUserButton* mpUserButton;                                          // 0x0268 (size: 0x8)
    class UNavDropDownMenu* mpOwnerDropDownMenu;                                      // 0x0270 (size: 0x8)

    void SetTitleText(FText newText);
    void SetOwner(class UNavDropDownMenu* pOwnerMenu, int32 Index);
    void OnButtonPressed();
    class UNavButton* GetNavButton();
}; // Size: 0x278

class UNavScrollBox : public UScrollBox
{
    bool AlwaysFocus;                                                                 // 0x0900 (size: 0x1)
    bool IgnoreTick;                                                                  // 0x0901 (size: 0x1)
    float ScrollPadding;                                                              // 0x0904 (size: 0x4)
    class UWidget* mpPreviousWidget;                                                  // 0x0910 (size: 0x8)

}; // Size: 0x918

class UNavSelector : public UUserWidget
{
    ESettingType SettingType;                                                         // 0x02F0 (size: 0x1)
    bool UseColorOverride;                                                            // 0x02F1 (size: 0x1)
    FLinearColor OverrideNormalColor;                                                 // 0x02F4 (size: 0x10)
    FLinearColor OverrideHoverColor;                                                  // 0x0304 (size: 0x10)
    FLinearColor OverrideSelectedColor;                                               // 0x0314 (size: 0x10)
    FLinearColor OverridePressedColor;                                                // 0x0324 (size: 0x10)
    FLinearColor OverrideDisabledColor;                                               // 0x0334 (size: 0x10)
    bool ColorTextOverride;                                                           // 0x0344 (size: 0x1)
    class UButton* mpLeftButton;                                                      // 0x0348 (size: 0x8)
    class UButton* mpRightButton;                                                     // 0x0350 (size: 0x8)
    class UTextBlock* mpText;                                                         // 0x0358 (size: 0x8)
    class UHorizontalBox* mpBarBox;                                                   // 0x0360 (size: 0x8)
    bool mbAllowCallback;                                                             // 0x0368 (size: 0x1)
    TArray<FNavSelectorItem> mItems;                                                  // 0x0370 (size: 0x10)
    FNavSelectorItem mSelectedItem;                                                   // 0x0380 (size: 0x20)

    void OnRightPressed();
    void OnLeftPressed();
}; // Size: 0x3A0

class UNavSlider : public USlider
{
    float ChangeAmount;                                                               // 0x0578 (size: 0x4)
    bool SelectOnHover;                                                               // 0x057C (size: 0x1)
    FNavSliderOnSelected OnSelected;                                                  // 0x0580 (size: 0x10)
    void OnNavSelectedEvent();
    FNavSliderOnUnselected OnUnselected;                                              // 0x0590 (size: 0x10)
    void OnNavSelectedEvent();

}; // Size: 0x5A0

class UNavWidgetManager : public UObject
{
    class UWidget* mpSelectedWidget;                                                  // 0x0028 (size: 0x8)
    class UWidget* mpPendingBroadcastWidget;                                          // 0x0030 (size: 0x8)
    class UWidget* mpBroadcastedWidget;                                               // 0x0038 (size: 0x8)
    float mBroadcastTimer;                                                            // 0x0040 (size: 0x4)
    TArray<class UWidget*> mCurrentWidgetGroup;                                       // 0x0048 (size: 0x10)
    TArray<class UWidget*> mPreviousWidgetGroup;                                      // 0x0058 (size: 0x10)
    class UUserWidget* mpRootNavigationWidget;                                        // 0x0068 (size: 0x8)
    class UUserWidget* mpPreviousNavigationWidget;                                    // 0x0070 (size: 0x8)

    void SetLockdown(bool bSet);
    void OnDeviceTypeChanged();
    bool IsInLockdown();
    void Initialize();
    void DoTick(float DeltaTime);
}; // Size: 0x80

class UNavigationHeaderWidget : public UUserWidget
{
    FText ScreenText;                                                                 // 0x0260 (size: 0x18)
    class UTexture2D* IconTexture;                                                    // 0x0278 (size: 0x8)
    EWeaponTypeEnum weaponType;                                                       // 0x0280 (size: 0x1)
    class UWidgetSwitcher* mpStyleWidgetSwitcher;                                     // 0x0288 (size: 0x8)
    class UHorizontalBox* mpNormalStyleBox;                                           // 0x0290 (size: 0x8)
    class UTextBlock* mpHeaderText;                                                   // 0x0298 (size: 0x8)
    class UHorizontalBox* mpIconBox;                                                  // 0x02A0 (size: 0x8)
    class UImage* mpIconImage;                                                        // 0x02A8 (size: 0x8)
    class UHorizontalBox* mpWeaponBox;                                                // 0x02B0 (size: 0x8)
    class UWeaponLevelWidget* mpWeaponLevelWidget;                                    // 0x02B8 (size: 0x8)
    class UTextBlock* mpLevelText;                                                    // 0x02C0 (size: 0x8)
    class UTextBlock* mpExpText;                                                      // 0x02C8 (size: 0x8)
    class UHorizontalBox* mpLargeIconStyleBox;                                        // 0x02D0 (size: 0x8)
    class UTextBlock* mpLargeIcon_HeaderText;                                         // 0x02D8 (size: 0x8)
    class UImage* mpLargeIcon_Icon;                                                   // 0x02E0 (size: 0x8)

}; // Size: 0x2E8

class UNewFlagSaveData : public USaveGame
{
    TArray<FString> mNewFlagData;                                                     // 0x0028 (size: 0x10)

}; // Size: 0x38

class UNewFlagTracker : public UObject
{
}; // Size: 0x48

class UNewFlagWidget : public UMetaWidget
{
    ENewFlagType NewFlagType;                                                         // 0x0378 (size: 0x1)
    EWeaponTypeEnum weaponType;                                                       // 0x0379 (size: 0x1)
    EDamageType DamageType;                                                           // 0x037A (size: 0x1)
    ECharacterType CharType;                                                          // 0x037B (size: 0x1)
    bool UseFrontEndChar;                                                             // 0x037C (size: 0x1)
    EPlayerSlot PlayerSlotType;                                                       // 0x037D (size: 0x1)
    EUISlot UISlotType;                                                               // 0x037E (size: 0x1)
    class UImage* mpNewIcon;                                                          // 0x0380 (size: 0x8)

}; // Size: 0x388

class UNewsOverlayWidget : public UBaseOverlay
{
}; // Size: 0x280

class UNewsScreen : public UBaseScreen
{
    class UCategorySwitcher* mpCategorySwitcher;                                      // 0x02E0 (size: 0x8)
    class UWidgetSwitcher* mpWidgetSwitcher;                                          // 0x02E8 (size: 0x8)
    class UVerticalBox* mpPatchNotesButtonsBox;                                       // 0x02F0 (size: 0x8)
    class UVerticalBox* mpPatchNotesBox;                                              // 0x02F8 (size: 0x8)
    class UBoxNewsUserButton* mpWebsiteButton;                                        // 0x0300 (size: 0x8)
    class UBoxNewsUserButton* mpDiscordButton;                                        // 0x0308 (size: 0x8)
    class UBoxNewsUserButton* mpFacebookButton;                                       // 0x0310 (size: 0x8)
    class UBoxNewsUserButton* mpInstaButton;                                          // 0x0318 (size: 0x8)
    class UBoxNewsUserButton* mpTwitchButton;                                         // 0x0320 (size: 0x8)
    class UBoxNewsUserButton* mpYoutubeButton;                                        // 0x0328 (size: 0x8)
    class UNewsUserButton* mpFeatureButton;                                           // 0x0330 (size: 0x8)
    class UNewsUserButton* mpNewsButton1;                                             // 0x0338 (size: 0x8)
    class UNewsUserButton* mpNewsButton2;                                             // 0x0340 (size: 0x8)

    void OnYoutubePressed();
    void OnYoutubeConfirmed();
    void OnWebsitePressed();
    void OnWebsiteConfirmed();
    void OnTwitchPressed();
    void OnTwitchConfirmed();
    void OnPatchNotePressed(class UNavButton* pButton);
    void OnInstaPressed();
    void OnInstaConfirmed();
    void OnFacebookPressed();
    void OnFacebookConfirmed();
    void OnDiscordPressed();
    void OnDiscordConfirmed();
    void OnCategoryChanged(int32 Val);
}; // Size: 0x358

class UNewsTab : public UBaseTab
{
    class UNavScrollBox* mpNavScrollBox;                                              // 0x0280 (size: 0x8)

}; // Size: 0x288

class UNewsUserButton : public UBaseUserButton
{
    FLinearColor RegularColor;                                                        // 0x0478 (size: 0x10)
    class UTexture2D* ImageTex;                                                       // 0x0488 (size: 0x8)
    class UTextBlock* mpTitleText;                                                    // 0x0490 (size: 0x8)
    class UTextBlock* mpCategoryText;                                                 // 0x0498 (size: 0x8)

    void OnWebsiteConfirmed();
    void OnButtonPressed();
}; // Size: 0x520

class UNonSelectableScrollBox : public UScrollBox
{
    float mGamepadScrollSensitivity;                                                  // 0x0880 (size: 0x4)

    void DoTick();
}; // Size: 0x888

class UOptionButton : public UUserWidget
{
    class UButton* mpButton;                                                          // 0x0260 (size: 0x8)
    class UBorder* mpBorder;                                                          // 0x0268 (size: 0x8)
    class UTextBlock* mpTextBlock;                                                    // 0x0270 (size: 0x8)

}; // Size: 0x280

class UOptionInputBindingUserButton : public UOptionUserButton
{
    EGameActionType ActionType;                                                       // 0x0498 (size: 0x1)
    EInputBindingCategory InputCategory;                                              // 0x0499 (size: 0x1)
    bool IsKeyboard;                                                                  // 0x049A (size: 0x1)
    class UOptionButton* mpButton;                                                    // 0x04A0 (size: 0x8)

    void OnButtonPressed();
}; // Size: 0x4D0

class UOptionKeyBindingUserButton : public UOptionUserButton
{
}; // Size: 0x498

class UOptionResolutionUserButton : public UOptionUserButton
{
    class UButton* mpLeftButton;                                                      // 0x0498 (size: 0x8)
    class UButton* mpRightButton;                                                     // 0x04A0 (size: 0x8)
    class UTextBlock* mpResolutionText;                                               // 0x04A8 (size: 0x8)
    TArray<FIntPoint> mSupportedResolutions;                                          // 0x04B0 (size: 0x10)
    FIntPoint mSelectedResolution;                                                    // 0x04C0 (size: 0x8)
    int32 mResolutionIndex;                                                           // 0x04C8 (size: 0x4)

    void OnRightPressed();
    void OnLeftPressed();
}; // Size: 0x4D0

class UOptionSelectorUserButton : public UOptionUserButton
{
    ESettingType SettingType;                                                         // 0x0498 (size: 0x1)
    class UButton* mpLeftButton;                                                      // 0x04A0 (size: 0x8)
    class UButton* mpRightButton;                                                     // 0x04A8 (size: 0x8)
    class UTextBlock* mpSelectorText;                                                 // 0x04B0 (size: 0x8)
    class UHorizontalBox* mpIndicatorBox;                                             // 0x04B8 (size: 0x8)
    TArray<FOptionItem> mItems;                                                       // 0x04C0 (size: 0x10)
    FOptionItem mSelectedItem;                                                        // 0x04D0 (size: 0x30)

    void OnRightPressed();
    void OnLeftPressed();
}; // Size: 0x510

class UOptionSingleUserButton : public UOptionUserButton
{
    FText ButtonText;                                                                 // 0x0498 (size: 0x18)
    class UOptionButton* mpButton;                                                    // 0x04B0 (size: 0x8)

}; // Size: 0x4B8

class UOptionSliderUserButton : public UOptionUserButton
{
    int32 MinDisplayValue;                                                            // 0x0498 (size: 0x4)
    int32 MaxDisplayValue;                                                            // 0x049C (size: 0x4)
    float MinSliderValue;                                                             // 0x04A0 (size: 0x4)
    float MaxSliderValue;                                                             // 0x04A4 (size: 0x4)
    float ChangeAmount;                                                               // 0x04A8 (size: 0x4)
    class USlider* mpSlider;                                                          // 0x04B0 (size: 0x8)
    class UProgressBar* mpProgressBar;                                                // 0x04B8 (size: 0x8)
    class UTextBlock* mpSliderText;                                                   // 0x04C0 (size: 0x8)

    void OnSliderChanged(float Val);
    class USlider* GetSlider();
}; // Size: 0x4E0

class UOptionToggleUserButton : public UOptionUserButton
{
    FText OnText;                                                                     // 0x0498 (size: 0x18)
    FText OffText;                                                                    // 0x04B0 (size: 0x18)
    class UOptionButton* mpToggleButtonOn;                                            // 0x04C8 (size: 0x8)
    class UOptionButton* mpToggleButtonOff;                                           // 0x04D0 (size: 0x8)

    void OnOnPressed();
    void OnOffPressed();
}; // Size: 0x4F0

class UOptionUserButton : public UBaseUserButton
{
    FText TitleText;                                                                  // 0x0478 (size: 0x18)
    class UTextBlock* mpTitleText;                                                    // 0x0490 (size: 0x8)

    void OnNavDirection(ESelectionNavigation dir);
}; // Size: 0x498

class UOptionsFlagSelectorUserButton : public UOptionUserButton
{
    uint8 mPlayerTipViewFlags;                                                        // 0x0498 (size: 0x1)
    TSubclassOf<class UOptionsFlagWidget> mOptionsFlagWidgetClass;                    // 0x04A0 (size: 0x8)
    class UHorizontalBox* mpFlagsBox;                                                 // 0x04A8 (size: 0x8)

    void UpdateOption(uint8 enumValue, bool bVal);
    void SetPlayerTipViewFlags(uint8 playerTipViewFlags);
    void PopulateFlags();
    uint8 GetPlayerTipViewFlags();
}; // Size: 0x4B0

class UOptionsFlagWidget : public UUserWidget
{
    FLinearColor mBackgroundBrushColorSelected;                                       // 0x0260 (size: 0x10)
    FLinearColor mBackgroundBrushColorUnselected;                                     // 0x0270 (size: 0x10)
    FLinearColor mBorderBrushColorSelected;                                           // 0x0280 (size: 0x10)
    FLinearColor mBorderBrushColorUnselected;                                         // 0x0290 (size: 0x10)
    FLinearColor mTextBrushColorSelected;                                             // 0x02A0 (size: 0x10)
    FLinearColor mTextBrushColorUnselected;                                           // 0x02B0 (size: 0x10)
    class UTextBlock* mpOptionText;                                                   // 0x02C0 (size: 0x8)
    class UButton* mpButton;                                                          // 0x02C8 (size: 0x8)
    class UCheckBox* mpCheckBox;                                                      // 0x02D0 (size: 0x8)
    class UBorder* mpBorder;                                                          // 0x02D8 (size: 0x8)
    uint8 mEnumValue;                                                                 // 0x02E0 (size: 0x1)
    bool bSelected;                                                                   // 0x02E1 (size: 0x1)
    class UOptionsFlagSelectorUserButton* mpOwnerSelecterButton;                      // 0x02E8 (size: 0x8)

    void SetSelected(bool bVal, bool bDisableButton);
    void SetOwnerSelector(class UOptionsFlagSelectorUserButton* pOwnerSelecterButton);
    void SetOption(ETipsVisibilityFlags tipFlag);
    void OnButtonPressed();
}; // Size: 0x2F0

class UOptionsScreen : public UBaseScreen
{
    class UCategorySwitcher* mpCategorySwitcher;                                      // 0x02C0 (size: 0x8)
    class UWidgetSwitcher* mpWidgetSwitcher;                                          // 0x02C8 (size: 0x8)
    class UWidgetSwitcher* mpOverlaySwitcher;                                         // 0x02D0 (size: 0x8)
    class UGameTab* mpGameTab;                                                        // 0x02D8 (size: 0x8)
    class UVideoTab* mpVideoTab;                                                      // 0x02E0 (size: 0x8)
    class UAudioTab* mpAudioTab;                                                      // 0x02E8 (size: 0x8)
    class UMouseTab* mpMouseTab;                                                      // 0x02F0 (size: 0x8)
    class UControllerTab* mpControllerTab;                                            // 0x02F8 (size: 0x8)
    class UPrivacyTab* mpPrivacyTab;                                                  // 0x0300 (size: 0x8)
    class UDangerSenseTab* mpDangerSenseTab;                                          // 0x0308 (size: 0x8)

    void SwitchToDangerSenseOverlay();
    void SwitchOverlaySwitcherToIndex(int32 newIndex);
    void ShowControls();
    void OnPauseMenuBack();
    void OnMainMenuBack();
    void OnDiscardChanges();
    void OnCategoryChanged(int32 cat);
    void OnApply();
    void HideAllOverlays();
}; // Size: 0x318

class UParchmentSkinDataAsset : public UTeenWeaponSkinDataAsset
{
    FSkinParticleSystem mSummoningParticleSystem;                                     // 0x01E8 (size: 0xD8)
    FSkinParticleSystem mTargetingParticleSystem;                                     // 0x02C0 (size: 0xD8)
    FSkinSkeletalMesh mMagicSphereMesh;                                               // 0x0398 (size: 0x168)
    FSkinParticleSystem mExplosionParticleSystem;                                     // 0x0500 (size: 0xD8)
    FSkinParticleSystem mTrailParticleSystem;                                         // 0x05D8 (size: 0xD8)
    FSkinLight mMagicSphereLight;                                                     // 0x06B0 (size: 0x18)
    FSkinDecal mTargetingDecalMaterial;                                               // 0x06C8 (size: 0x58)
    EWise_WEP_Parchment mWiseParchmentSwitch;                                         // 0x0720 (size: 0x1)

}; // Size: 0x728

class UParticleModuleHBCustomBase : public UParticleModule
{
}; // Size: 0x30

class UPatchNoteWidget : public UUserWidget
{
    class UTextBlock* mpText;                                                         // 0x0260 (size: 0x8)

}; // Size: 0x268

class UPatchNotesManager : public UObject
{
}; // Size: 0x28

class UPatchNotesTab : public UBaseTab
{
    class UNavScrollBox* mpNavScrollBox;                                              // 0x0280 (size: 0x8)

}; // Size: 0x288

class UPathPredictionComponent : public UActorComponent
{
    int32 mPathMemorySearchingDepth;                                                  // 0x00B8 (size: 0x4)
    float mMinSearchingInterval;                                                      // 0x00BC (size: 0x4)
    TArray<FNavPathInstance> mNavPathInstances;                                       // 0x00C0 (size: 0x10)
    class USplineComponent* pSplineComponent;                                         // 0x00D0 (size: 0x8)

    void UpdateNavPathInstance(class ATPChar* pTargetChar);
    TArray<FVector> GetTargetPathPredictedLocations(class ATPChar* pTargetChar, bool bExposedLocation);
    void DrawDebug(bool bEnable);
}; // Size: 0xF8

class UPauseMenuScreen : public UBaseScreen
{
    class UTextHighlightUserButton* mpResumeButton;                                   // 0x02C0 (size: 0x8)
    class UTextHighlightUserButton* mpOptionsButton;                                  // 0x02C8 (size: 0x8)
    class UTextHighlightUserButton* mpVoiceChatButton;                                // 0x02D0 (size: 0x8)
    class UTextHighlightUserButton* mpLeaveMatchButton;                               // 0x02D8 (size: 0x8)
    class UTextHighlightUserButton* mpEndMatchButton;                                 // 0x02E0 (size: 0x8)
    class UTextHighlightUserButton* mpDebugMenuButton;                                // 0x02E8 (size: 0x8)

    void UpdateButtons();
    void OnVoiceChatPressed();
    void OnResumePressed();
    void OnOptionsPressed();
    void OnLeaveMatchPressed();
    void OnEndMatchPressed();
    void OnDebugMenu();
    class AGameplayHUD* GetGameplayHUD();
}; // Size: 0x2F0

class UPerkEquipmentOverlayWidget : public UBaseOverlay
{
    class UPerkEquipmentWidget* mpPerkEquipmentWidget;                                // 0x0280 (size: 0x8)
    class UTextBlock* mpNameText;                                                     // 0x0288 (size: 0x8)
    class UTextBlock* mpAffinityText;                                                 // 0x0290 (size: 0x8)
    class UTextBlock* mpDescriptionText;                                              // 0x0298 (size: 0x8)

    void OnEquipmentSlotSelected(FDbItemId ItemId, FGrantable Grantable);
    void OnEquipmentSlotDoubleClick();
}; // Size: 0x2A8

class UPerkEquipmentSlotWidget : public UMetaWidget
{
    FLinearColor TierActiveColor;                                                     // 0x0378 (size: 0x10)
    FLinearColor TierInactiveColor;                                                   // 0x0388 (size: 0x10)
    class UButton* mpPerkSlotButton;                                                  // 0x03A8 (size: 0x8)
    class UImage* mpImageIcon;                                                        // 0x03B0 (size: 0x8)
    class UImage* mpAffinityIcon;                                                     // 0x03B8 (size: 0x8)
    class UImage* mpAffinityBackground;                                               // 0x03C0 (size: 0x8)
    class UCanvasPanel* mpCostPanel;                                                  // 0x03C8 (size: 0x8)
    class UTextBlock* mpCostText;                                                     // 0x03D0 (size: 0x8)
    class UPerkTierWidget* mpTierWidget;                                              // 0x03D8 (size: 0x8)
    class UCanvasPanel* mpLockPanel;                                                  // 0x03E0 (size: 0x8)
    class UWidgetAnimation* EquipAnim;                                                // 0x0400 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
}; // Size: 0x408

class UPerkEquipmentWidget : public UMetaWidget
{
    bool RemoveAllButtonBehaviors;                                                    // 0x0378 (size: 0x1)
    class UTextBlock* mpCurrentPointsText;                                            // 0x0390 (size: 0x8)
    class UTextBlock* mpMaximumPointsText;                                            // 0x0398 (size: 0x8)
    class UImage* mpInvalidPointsIcon;                                                // 0x03A0 (size: 0x8)

}; // Size: 0x3A8

class UPerkLoadoutWidget : public UBaseLoadoutWidget
{
    class UPerkEquipmentWidget* mpPerkEquipmentWidget;                                // 0x02E8 (size: 0x8)
    class UPerkPointBarWidget* mpPerkPointBarWidget;                                  // 0x02F0 (size: 0x8)
    class UCanvasPanel* mpWarningPanel;                                               // 0x02F8 (size: 0x8)
    class UTextBlock* mpWarningText;                                                  // 0x0300 (size: 0x8)
    class UCanvasPanel* mpDiscountsPanel;                                             // 0x0308 (size: 0x8)
    class UTextBlock* mpItemTitleText;                                                // 0x0320 (size: 0x8)
    class URichTextBlock* mpItemDescriptionText;                                      // 0x0328 (size: 0x8)
    class UImage* mpItemIcon;                                                         // 0x0330 (size: 0x8)
    class UImage* mpAffinityIcon;                                                     // 0x0338 (size: 0x8)
    class UHorizontalBox* mpAffinityTypeBox;                                          // 0x0340 (size: 0x8)
    class UTextBlock* mpAffinityText;                                                 // 0x0348 (size: 0x8)
    class UTextBlock* mpCostAmountText;                                               // 0x0350 (size: 0x8)
    class UPerkTierWidget* mpTierWidget;                                              // 0x0358 (size: 0x8)
    class UActionButton* mpActionButton;                                              // 0x0360 (size: 0x8)
    class UNonSelectableScrollBox* mpNonSelectableScrollBox;                          // 0x0368 (size: 0x8)

    void OnPerkTileSelected(FDbItemId ItemId, FGrantable Grantable);
    void OnPerkTilePressed(FDbItemId ItemId, FGrantable Grantable);
    void OnEquipmentSlotSelected(FDbItemId ItemId, FGrantable Grantable);
    void OnEquipmentSlotDoubleClick();
    void OnActionPressed();
    void DoSelectedItemAction();
}; // Size: 0x3A0

class UPerkPointBarWidget : public UMetaWidget
{
    class UUniformGridPanel* mpGridPanel;                                             // 0x0380 (size: 0x8)

}; // Size: 0x398

class UPerkPointWidget : public UUserWidget
{
    FLinearColor ActivatedColor;                                                      // 0x0260 (size: 0x10)
    FLinearColor DeactivatedColor;                                                    // 0x0270 (size: 0x10)
    FLinearColor InvalidColor;                                                        // 0x0280 (size: 0x10)
    class UImage* mpBackgroundImage;                                                  // 0x0290 (size: 0x8)

}; // Size: 0x298

class UPerkTierWidget : public UMetaWidget
{
    class UImage* mpTierImage;                                                        // 0x0378 (size: 0x8)

}; // Size: 0x380

class UPickupSkinDataAsset : public UItemDataAsset
{
    FText mPickupText;                                                                // 0x0058 (size: 0x18)
    FSkinSkeletalMesh mSkeletalMesh;                                                  // 0x0070 (size: 0x168)
    FSkinStaticMesh mUsedMesh;                                                        // 0x01D8 (size: 0xA8)
    FSkinFXSystem mOnUseFXSystem;                                                     // 0x0280 (size: 0x38)
    EWise_PICKUP_Adrenaline mAdrenalineWiseSwitch;                                    // 0x02B8 (size: 0x1)
    EWise_PICKUP_Pills mPillsWiseSwitch;                                              // 0x02B9 (size: 0x1)
    EWise_PICKUP_Noisemaker mNoisemakerWiseSwitch;                                    // 0x02BA (size: 0x1)

}; // Size: 0x2C0

class UPingSystemComponent : public UActorComponent
{
    TArray<class APing*> mPingList;                                                   // 0x00B0 (size: 0x10)
    UClass* mpPingBPClass;                                                            // 0x00C0 (size: 0x8)
    UClass* mpEvilPingBPClass;                                                        // 0x00C8 (size: 0x8)
    bool mWasHeldDownPing;                                                            // 0x00E8 (size: 0x1)
    class APing* mpPingToSpawn;                                                       // 0x00F0 (size: 0x8)
    class APing* mpPingToRemove;                                                      // 0x00F8 (size: 0x8)

    void UpdatePings();
    void ServerDoPing(class AGameplayPC* pOwner, FVector WorldLocation, FVector WorldDirection, FColor pingColor, EPingType pingType);
    bool OwnsActivePing(class AGameplayPC* pPC);
    void OnRep_SetPingToSpawn();
    void OnRep_SetPingToRemove();
    bool IsActorBeingPinged(class AActor* pActor);
    class APing* GetPingToSpawn();
    TArray<class APing*> GetAllPings();
    void DoServerSpawnPing(const FPingData& pingToSpawn);
    void DoServerSetPingToSpawn(class APing* pPingToSpawn);
    void DoServerSetPingToRemove(class APing* pPingToRemove);
    void DoServerDoPing(class AGameplayPC* pOwner, FVector WorldLocation, FVector WorldDirection, FColor pingColor, EPingType pingType);
    void DoServerDecoratePing(class APing* pPing);
    void DoServerClearPing(class APing* pingToClear);
    void DoServerCheckDuplicateAndAddToList(class APing* pNewPing);
    void DoServerAddPingToListRaw(class APing* pNewPing);
    void ClearPingOfActor(class AActor* givenActor);
}; // Size: 0x100

class UPlatformImage : public UImage
{
    EGameActionType ActionType;                                                       // 0x0210 (size: 0x1)
    ESlateVisibility ControllerVisibility;                                            // 0x0211 (size: 0x1)
    ESlateVisibility KeyboardVisibility;                                              // 0x0212 (size: 0x1)

    void OnDeviceTypeChanged();
}; // Size: 0x218

class UPlayAsUserButton : public UBaseUserButton
{
    class UMaterialInstance* TeenBackground;                                          // 0x0478 (size: 0x8)
    class UMaterialInstance* EvilBackground;                                          // 0x0480 (size: 0x8)
    TMap<class ESeasonalEventType, class UMaterialInstance*> EventBackgrounds;        // 0x0488 (size: 0x50)
    class UMaterialInstance* TeenHighlight;                                           // 0x04D8 (size: 0x8)
    class UMaterialInstance* EvilHighlight;                                           // 0x04E0 (size: 0x8)
    TMap<class ESeasonalEventType, class UMaterialInstance*> EventHighlights;         // 0x04E8 (size: 0x50)
    class UImage* mpBackgroundImage;                                                  // 0x0538 (size: 0x8)
    class UImage* mpPulseImage;                                                       // 0x0540 (size: 0x8)
    class UTextBlock* mpButtonText;                                                   // 0x0548 (size: 0x8)

}; // Size: 0x550

class UPlayReadyPanel : public UMetaWidget
{
    class UPlayAsUserButton* mpPlayReadyButton;                                       // 0x0378 (size: 0x8)
    class UGameModeSelectUserButton* mpModeSelectButton;                              // 0x0380 (size: 0x8)
    class UCustomFactionWidget* mpCustomFactionWidget;                                // 0x0388 (size: 0x8)

}; // Size: 0x390

class UPlayerAccountAllFilterWidget : public UBaseAccountFilterWidget
{
}; // Size: 0x3B0

class UPlayerAccountCharacterFilterWidget : public UBaseAccountFilterWidget
{
    bool OnlyShowGood;                                                                // 0x03B0 (size: 0x1)
    bool OnlyShowEvil;                                                                // 0x03B1 (size: 0x1)

}; // Size: 0x3B8

class UPlayerAccountCharacterProgressWidget : public UUserWidget
{
    class UImage* mpCharacterImage;                                                   // 0x0260 (size: 0x8)
    ECharacterType mLastCharacterTypeShown;                                           // 0x0268 (size: 0x1)
    class UVerticalBox* mpCharacterInfoBox;                                           // 0x0270 (size: 0x8)
    TArray<class UImage*> mStarPowerIcons;                                            // 0x0278 (size: 0x10)
    class UTextBlock* mpStarPowerText;                                                // 0x0288 (size: 0x8)
    class UTextBlock* mpCurrentLevelText;                                             // 0x0290 (size: 0x8)
    class UMaterialInstance* mpCircularProgressMaterialInstance;                      // 0x0298 (size: 0x8)
    class UMaterialInstanceDynamic* mpDynamicCircularMaterialInstance;                // 0x02A0 (size: 0x8)
    class UTexture2D* mpCircleTexture;                                                // 0x02A8 (size: 0x8)
    class UImage* mpLevelProgressImage;                                               // 0x02B0 (size: 0x8)
    FLinearColor mStarPowerFilledColor;                                               // 0x02B8 (size: 0x10)
    FLinearColor mStarPowerUnFilledColor;                                             // 0x02C8 (size: 0x10)

    void SetCharacterStarPower(int32 Amount);
    void SetCharacterLevel(int32 Level, int32 currentExperience, int32 experienceNeeded);
}; // Size: 0x2D8

class UPlayerAccountCharacterTileWidget : public UBaseAccountTileWidget
{
    class UImage* mpCharacterIcon;                                                    // 0x0398 (size: 0x8)
    class UTextBlock* mpCharacterNameText;                                            // 0x03A0 (size: 0x8)

}; // Size: 0x3A8

class UPlayerAccountCustomizeWidget : public UUserWidget
{
    class UBaseItemList* mpAvatarListWidget;                                          // 0x0280 (size: 0x8)
    class UActionButton* mpActionButton;                                              // 0x02F8 (size: 0x8)

    void OnAvatarSelected(FDbItemId ItemId, FGrantable Grantable);
    void OnAvatarDoubleClick();
    void OnActionPressed();
}; // Size: 0x300

class UPlayerAccountDailyRetentionWidget : public UUserWidget
{
}; // Size: 0x260

class UPlayerAccountFilterTileWidget : public UMetaWidget
{
}; // Size: 0x378

class UPlayerAccountLevelFilterWidget : public UBaseAccountFilterWidget
{
}; // Size: 0x3B0

class UPlayerAccountLinkAccountsWidget : public UUserWidget
{
}; // Size: 0x260

class UPlayerAccountManager : public UObject
{
    TWeakObjectPtr<class UClientStateManager> mOwningClientStateManager;              // 0x0030 (size: 0x8)
    TMap<class EPointType, class FPointValue> mPlayerPoints;                          // 0x0038 (size: 0x50)
    TMap<class FGrantable, class FInventoryItemData> mInventoryItems;                 // 0x0088 (size: 0x50)
    TMap<class EPlayerSlot, class FGrantable> mPlayerSlots;                           // 0x00D8 (size: 0x50)
    TArray<FGrantable> mInventoryPrerequisitesToCheck;                                // 0x0128 (size: 0x10)
    TArray<FGrantable> mPlayerPointPrerequisitesToCheck;                              // 0x0138 (size: 0x10)
    FAccountStatCollectionData mAccountStats;                                         // 0x01E8 (size: 0x140)
    TMap<class ECharacterType, class FAccountStatCollectionData> mCharacterStats;     // 0x0328 (size: 0x50)
    TMap<class EWeaponTypeEnum, class FAccountStatCollectionData> mWeaponStats;       // 0x0378 (size: 0x50)
    TMap<class ELevelType, class FAccountStatCollectionData> mLevelStats;             // 0x03C8 (size: 0x50)
    FString mDisplayName;                                                             // 0x0418 (size: 0x10)
    bool mbPendingClaimPrizes;                                                        // 0x0490 (size: 0x1)
    bool mbWaitingOnClaimPrizes;                                                      // 0x0491 (size: 0x1)
    bool mbFinishedClaimingPrizes;                                                    // 0x0492 (size: 0x1)
    TArray<FGrantable> mPrizesWaitingForPickup;                                       // 0x0498 (size: 0x10)
    bool mbPendingInventoryRefresh;                                                   // 0x04A8 (size: 0x1)
    bool mbWaitingOnInventoryRefresh;                                                 // 0x04A9 (size: 0x1)
    bool mbPendingInventoryPointRefresh;                                              // 0x04AA (size: 0x1)
    bool mbPendingInventoryItemAndPointRefresh;                                       // 0x04AB (size: 0x1)
    bool mbPendingPlayerSlotsRefresh;                                                 // 0x04AC (size: 0x1)
    bool mbCurrencyAmountDirty;                                                       // 0x04AD (size: 0x1)
    bool mbPendingTeenTutorialComplete;                                               // 0x04AE (size: 0x1)
    bool mbWaitingOnTeenTutorialComplete;                                             // 0x04AF (size: 0x1)
    bool mbPendingEvilTutorialComplete;                                               // 0x04B0 (size: 0x1)
    bool mbWaitingOnEvilTutorialComplete;                                             // 0x04B1 (size: 0x1)

    void RecieveGeneratedPrizes(TArray<FGrantable> prizeList);
    void QueueTeenTutorialComplete();
    void QueuePlayerSlotsRefresh();
    void QueueInventoryRefresh();
    void QueueInventoryPointRefresh();
    void QueueInventoryItemsAndPointsRefresh();
    void QueueEvilTutorialComplete();
    void QueueClaimPrizes();
    bool IsCurrencyAmountDirty();
    TArray<FGrantable> GetGeneratedPrizes();
}; // Size: 0x4D0

class UPlayerAccountMasteryWidget : public UUserWidget
{
    class UTextBlock* mpAccountLevelText;                                             // 0x0260 (size: 0x8)
    class UTextBlock* mpAccountCreationDateText;                                      // 0x0268 (size: 0x8)
    class UProgressBar* mpMasteryProgressBar;                                         // 0x0270 (size: 0x8)
    class UTextBlock* mpMasteryProgressText;                                          // 0x0278 (size: 0x8)

    void Rebuild();
}; // Size: 0x280

class UPlayerAccountMatchDetailsOverlayWidget : public UBaseOverlay
{
}; // Size: 0x280

class UPlayerAccountMatchHistoryTileWidget : public UUserWidget
{
}; // Size: 0x260

class UPlayerAccountMatchHistoryWidget : public UUserWidget
{
}; // Size: 0x260

class UPlayerAccountOverviewStatWidget : public UMetaWidget
{
    FText TitleText;                                                                  // 0x0378 (size: 0x18)
    class UTextBlock* mpTitleText;                                                    // 0x0390 (size: 0x8)
    class UTextBlock* mpStatText;                                                     // 0x0398 (size: 0x8)
    class UTextBlock* mpSubText;                                                      // 0x03A0 (size: 0x8)
    class UImage* mpCharacterIcon;                                                    // 0x03A8 (size: 0x8)

    void SetTimeValue(uint32 Val);
    void SetTallyValue(uint32 Val, uint32 Total);
    void SetCountValue(uint32 Val);
    void SetCharacterValue(ECharacterType CharType, FText subText);
}; // Size: 0x3B0

class UPlayerAccountOverviewWidget : public UUserWidget
{
    class UPlayerAccountOverviewStatWidget* mpTotalTimePlayedStat;                    // 0x0260 (size: 0x8)
    class UPlayerAccountOverviewStatWidget* mpMatchesWonAsTeenStat;                   // 0x0268 (size: 0x8)
    class UPlayerAccountOverviewStatWidget* mpMatchesWonAsEvilStat;                   // 0x0270 (size: 0x8)
    class UPlayerAccountOverviewStatWidget* mpMoviesCompletedStat;                    // 0x0278 (size: 0x8)
    class UPlayerAccountOverviewStatWidget* mpMostPlayedTeenStat;                     // 0x0280 (size: 0x8)
    class UPlayerAccountOverviewStatWidget* mpMostPlayedEvilStat;                     // 0x0288 (size: 0x8)
    class UPlayerAccountOverviewStatWidget* mpMostWeaponStrikesStat;                  // 0x0290 (size: 0x8)
    class UPlayerAccountOverviewStatWidget* mpMostTeensHitStat;                       // 0x0298 (size: 0x8)

    void CalculateTotalTime();
    void CalculateTeenMatchesWon();
    void CalculateMoviesCompleted();
    void CalculateMostWeaponStrikes();
    void CalculateMostTeensHitStat();
    void CalculateMostPlayedTeen();
    void CalculateMostPlayedEvil();
    void CalculateEvilMatchesWon();
}; // Size: 0x2A0

class UPlayerAccountPlayerInfoWidget : public UMetaWidget
{
    class USocialPortraitWidget* mpSocialPortraitWidget;                              // 0x0378 (size: 0x8)
    class UTextBlock* mpPlayerNameText;                                               // 0x0380 (size: 0x8)
    class UTextBlock* mpMasteryLevelText;                                             // 0x0388 (size: 0x8)
    class UTextBlock* mpMasteryExpText;                                               // 0x0390 (size: 0x8)
    class UProgressBar* mpMasteryProgressBar;                                         // 0x0398 (size: 0x8)

}; // Size: 0x3A8

class UPlayerAccountScreen : public UBaseScreen
{
    class UPlayerAccountPlayerInfoWidget* mpPlayerInfoWidget;                         // 0x02C0 (size: 0x8)
    class UWidgetSwitcher* mpPreviewWidgetSwitcher;                                   // 0x02C8 (size: 0x8)
    class UPlayerAccountTrophiesWidget* mpTrophiesWidget;                             // 0x02D0 (size: 0x8)
    class UPlayerAccountStatsWidget* mpStatsWidget;                                   // 0x02D8 (size: 0x8)
    class UPlayerAccountCustomizeWidget* mpPortraitCustomizeWidget;                   // 0x02E0 (size: 0x8)
    class UPlayerAccountMasteryWidget* mpMasteryWidget;                               // 0x02E8 (size: 0x8)
    class UCanvasPanel* mpPortraitCustomizePanel;                                     // 0x02F0 (size: 0x8)
    class UCanvasPanel* mpStatsPanel;                                                 // 0x02F8 (size: 0x8)
    class UCanvasPanel* mpMasteryPanel;                                               // 0x0300 (size: 0x8)
    class UCanvasPanel* mpTrophiesPanel;                                              // 0x0308 (size: 0x8)
    class UMainMenuButton* mpPortraitsButton;                                         // 0x0310 (size: 0x8)
    class UMainMenuButton* mpMasteryButton;                                           // 0x0318 (size: 0x8)
    class UMainMenuButton* mpStatsButton;                                             // 0x0320 (size: 0x8)
    class UMainMenuButton* mpTrophiesButton;                                          // 0x0328 (size: 0x8)
    TArray<class UMainMenuButton*> mMenuButtons;                                      // 0x0330 (size: 0x10)
    int32 mCurrentlySelectedTabIndex;                                                 // 0x0340 (size: 0x4)

    void SelectIndex(int32 Index);
    void RefreshChildrenStatInformation(class UUserWidget* pWidget);
    void OnTrophiesPressed();
    void OnStatsPressed();
    void OnPortraitsPressed();
    void OnMasteryPressed();
    void OnButtonPressed(class UMainMenuButton* pButton);
    bool IsShowingTrophies();
    bool IsShowingStats();
    bool IsShowingPortraits();
    bool IsShowingMastery();
}; // Size: 0x348

class UPlayerAccountSeasonPassWidget : public UUserWidget
{
}; // Size: 0x260

class UPlayerAccountStatGroupWidget : public UMetaWidget
{
    EFaction FactionFilter;                                                           // 0x0378 (size: 0x1)
    ECharacterType CharacterType;                                                     // 0x0379 (size: 0x1)
    EWeaponTypeEnum WeaponTypeFilter;                                                 // 0x037A (size: 0x1)
    ELevelType LevelTypeFilter;                                                       // 0x037B (size: 0x1)
    TArray<FStatWidgetData> Stats;                                                    // 0x0380 (size: 0x10)
    int32 NumColumns;                                                                 // 0x0390 (size: 0x4)
    EStatWidgetType WidgetType;                                                       // 0x0394 (size: 0x1)
    class UTextBlock* mpTitleText;                                                    // 0x03B0 (size: 0x8)
    class UUniformGridPanel* mpGridPanel;                                             // 0x03B8 (size: 0x8)

}; // Size: 0x3C8

class UPlayerAccountStatTileWidget : public UBaseAccountTileWidget
{
    class UTextBlock* mpStatText;                                                     // 0x0398 (size: 0x8)

}; // Size: 0x3A0

class UPlayerAccountStatsWidget : public UBaseAccountStatPageWidget
{
    class UPlayerAccountLevelFilterWidget* mpLevelSwitcherWidget;                     // 0x03C0 (size: 0x8)
    class UPlayerAccountOverviewWidget* mpPlayerAccountOverviewWidget;                // 0x03C8 (size: 0x8)
    class UWidgetSwitcher* mpContentSwitcher;                                         // 0x03D0 (size: 0x8)

}; // Size: 0x3D8

class UPlayerAccountTrophiesWidget : public UBaseAccountStatPageWidget
{
}; // Size: 0x3C0

class UPlayerAccountTrophyTileWidget : public UBaseAccountTileWidget
{
    class UImage* mpTrophyIcon;                                                       // 0x03A8 (size: 0x8)
    class UTextBlock* mpCompletedText;                                                // 0x03B0 (size: 0x8)
    class UCanvasPanel* mpLockedPanel;                                                // 0x03B8 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
}; // Size: 0x3C0

class UPlayerAccountWeaponFilterWidget : public UBaseAccountFilterWidget
{
}; // Size: 0x3B0

class UPlayerDetailsMenuScreen : public UBaseOverlay
{
    class UEndOfRoundPlayerDetailsWidget* mpPlayerDetailsWidget;                      // 0x0280 (size: 0x8)

}; // Size: 0x288

class UPlayerJourneyDataSave : public USaveGame
{
    FString mJourneyDataAsString;                                                     // 0x0028 (size: 0x10)

}; // Size: 0x38

class UPlayerLoadStep : public UObject
{
}; // Size: 0x30

class UPlayerLoadout : public ULoadoutBase
{
    TMap<class ECharacterType, class UCharacterLoadout*> mCharacterLoadoutByCharacterType; // 0x0178 (size: 0x50)
    bool mbAreRequiredItemsFullyLoaded;                                               // 0x0218 (size: 0x1)

    void OnItemDataAssetsLoaded();
}; // Size: 0x260

class UPlayerSaveGame : public USaveGame
{
    FPlayerSettingsStruct mPlayerSettings;                                            // 0x0028 (size: 0x198)

    ECharacterType GetLastSelectedTeenCharacter();
    ECharacterType GetLastSelectedEvilCharacter();
    ECharacterType GetLastSelectedCharacter();
}; // Size: 0x1C0

class UPlayerSlotItemListWidget : public UBaseItemList
{
}; // Size: 0x428

class UPlayerTipsComponent : public UActorComponent
{
    class ATPChar* mpTPChar;                                                          // 0x00B0 (size: 0x8)
    TArray<FTipRequest> mTipRequests;                                                 // 0x00B8 (size: 0x10)

    void MulticastAllShowAbilityTip(int32 I);
    void MulticastAllOnWalkieUsed();
    void MulticastAllOnTeenEnteredRange(class ATPChar* pTPChar);
    void MulticastAllOnSpawnedSpectral();
    void MulticastAllOnSeenEvilEnergy();
    void MulticastAllOnRepTrapProximity(float proximityAlpha);
    void MulticastAllOnRepShardState(EShardState shardState);
    void MulticastAllOnRepPlayerDead(bool bIsDead);
    void MulticastAllOnRepIsSensing(bool bSensing);
    void MulticastAllOnRepIsProne(bool bIsProne);
    void MulticastAllOnRepIsInjured(bool bIsInjured);
    void MulticastAllOnRepIsEnraged(bool bIsEnraged);
    void MulticastAllOnRepIsEcholocating(bool bIsEcholocating);
    void MulticastAllOnRepHearingTensionTrackClearly(bool bHearingTensionTrackClearly);
    void MulticastAllOnRepCanHearCrafting(bool bCanHearCrafting);
    void MulticastAllOnRepActiveAction(EActiveActionType activeActionType);
    void MulticastAllOnFeastStarted();
    void MulticastAllOnFailedStation();
    void MulticastAllOnEvilChosen();
    void MulticastAllOnEvilAttackMissed();
    void MulticastAllOnDollmasterTrapTriggered();
    void MulticastAllOnDangerSenseDollminion();
    void MulticastAllOnCraftedWeapon(EWeaponTypeEnum weaponType);
    void MulticastAllOnBeginTransformation();
}; // Size: 0xC8

class UPlotTwistManager : public UObject
{
}; // Size: 0x28

class UPortraitItemTileWidget : public UBaseItemTile
{
    float mLockedOpacity;                                                             // 0x03D0 (size: 0x4)

}; // Size: 0x3D8

class UPrerequisiteValidator : public UObject
{
    class UClientStateManager* mpOwningClientStateManager;                            // 0x0028 (size: 0x8)
    TArray<TScriptInterface<IPrerequisiteChecker>> mCheckers;                         // 0x0030 (size: 0x10)

}; // Size: 0x40

class UPrivacyTab : public UBaseTab
{
    class UOptionToggleUserButton* mpShowSocialNotifications;                         // 0x0280 (size: 0x8)
    class UOptionToggleUserButton* mpNotifyFriendsWhenPlaying;                        // 0x0288 (size: 0x8)
    class UOptionToggleUserButton* mpAutoMutePrevMutedPlayers;                        // 0x0290 (size: 0x8)
    class UOptionToggleUserButton* mpHideDisplayName;                                 // 0x0298 (size: 0x8)
    class UOptionToggleUserButton* mpHideOtherPlayerNames;                            // 0x02A0 (size: 0x8)
    class UOptionToggleUserButton* mpMatchmakingDelay;                                // 0x02A8 (size: 0x8)
    class UOptionToggleUserButton* mpAutoMuteNonPartyPlayers;                         // 0x02B0 (size: 0x8)
    class UOptionSingleUserButton* mpResetScreenInfoPopups;                           // 0x02B8 (size: 0x8)
    class UOptionSingleUserButton* mpResetLoadingScreenTips;                          // 0x02C0 (size: 0x8)
    class UBorder* mpPrivacyWarningBorder;                                            // 0x02C8 (size: 0x8)
    class UNavScrollBox* mpNavScrollBox;                                              // 0x02D0 (size: 0x8)

    void OnResetScreenInfoPopupsConfirm();
    void OnResetScreenInfoPopups();
    void OnResetLoadingScreenTipsConfirm();
    void OnResetLoadingScreenTips();
}; // Size: 0x310

class UPrizeBoxUserButton : public UBaseUserButton
{
    class UTextBlock* mpPrizeBoxCounterText;                                          // 0x0478 (size: 0x8)
    class UImage* mpPrizeBoxIcon;                                                     // 0x0480 (size: 0x8)
    class UImage* mpBlurImage;                                                        // 0x0488 (size: 0x8)
    class UImage* mpBgImage;                                                          // 0x0490 (size: 0x8)

    void OnPrizeBoxesButton();
}; // Size: 0x498

class UPrizeEquipmentWidget : public UBaseUserButton
{
    class UStateSwitcher* mpStateSwitcher;                                            // 0x0488 (size: 0x8)
    class UImage* mpPrizeRarity;                                                      // 0x0490 (size: 0x8)
    class UImage* mpPrizeIcon;                                                        // 0x0498 (size: 0x8)
    class UBorder* mpHighlightBorder;                                                 // 0x04A0 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
    void OnButtonPressed();
}; // Size: 0x4B0

class UPrizeItemListWidget : public UBaseItemList
{
}; // Size: 0x428

class UPrizeItemTileWidget : public UBaseItemTile
{
    class UTextBlock* mpCountText;                                                    // 0x03D0 (size: 0x8)

}; // Size: 0x3D8

class UPrizeMenuItemWidget : public UUserWidget
{
}; // Size: 0x260

class UPrizeMenuOverlayWidget : public UBaseOverlay
{
    class UPrizeItemListWidget* mpItemListWidget;                                     // 0x02B0 (size: 0x8)
    class UActionButton* mpActionButton;                                              // 0x02B8 (size: 0x8)
    class UActionButton* mpPrizePackButton;                                           // 0x02C0 (size: 0x8)
    class UImage* mpPrizeIcon;                                                        // 0x02C8 (size: 0x8)
    class UTextBlock* mpPrizeNameText;                                                // 0x02D0 (size: 0x8)
    class UBorder* mpRarityBorder;                                                    // 0x02D8 (size: 0x8)
    class UTextBlock* mpPrizeRarityText;                                              // 0x02E0 (size: 0x8)
    class URichTextBlock* mpPrizeDescText;                                            // 0x02E8 (size: 0x8)
    class UTextBlock* mpPrizeCountText;                                               // 0x02F0 (size: 0x8)
    class UTextBlock* mpPrizeFlavorText;                                              // 0x02F8 (size: 0x8)
    class UNonSelectableScrollBox* mpNonSelectableScrollBox;                          // 0x0300 (size: 0x8)
    class UButton* mpEscapeButton;                                                    // 0x0308 (size: 0x8)
    class UImage* mpPrizePacksCountImage;                                             // 0x0310 (size: 0x8)
    class UTextBlock* mpPrizePacksCountText;                                          // 0x0318 (size: 0x8)
    class UBusyModalWidget* mpBusyModal;                                              // 0x0320 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
    void OnPrizeSelected(FDbItemId ItemId, FGrantable Grantable);
    void OnPrizePacksPressed();
    void OnPrizeDoubleClick();
    void OnEscapePressed();
    void OnActionPressed();
}; // Size: 0x350

class UPrizePackItemWidget : public UMetaWidget
{
    class UNavButton* mpPrizePackButton;                                              // 0x0378 (size: 0x8)
    class UImage* mpPrizePackIcon;                                                    // 0x0380 (size: 0x8)
    class UTextBlock* mpNameText;                                                     // 0x0388 (size: 0x8)
    class UTextBlock* mpPrizePackCountText;                                           // 0x0390 (size: 0x8)
    class UTexture2D* mpEvilBoxTexture;                                               // 0x0398 (size: 0x8)
    class UTexture2D* mpTeenBoxTexture;                                               // 0x03A0 (size: 0x8)

    void OnButtonSelected();
    void OnButtonDoubleClicked();
    class UNavButton* GetPrizePackButton();
    FText GetFormattedNameForPrizePack(FString chestType);
}; // Size: 0x3A8

class UPrizePackOverlayWidget : public UBaseOverlay
{
    class UAnimatedSnapNavScrollBox* mpAnimatedSnapNavScrollBox;                      // 0x02A8 (size: 0x8)
    class UNavScrollBox* mpNavScrollBox;                                              // 0x02B0 (size: 0x8)
    class UActionButton* mpOpenButton;                                                // 0x02B8 (size: 0x8)
    class UActionButton* mpBuyMoreButton;                                             // 0x02C0 (size: 0x8)
    class UButtonPromptWidget* mpOpenPackPromptWidget;                                // 0x02C8 (size: 0x8)
    class UButtonPromptWidget* mpBuyPacksPromptWidget;                                // 0x02D0 (size: 0x8)
    TArray<FPrizePackData> mPrizeList;                                                // 0x02D8 (size: 0x10)
    class UTextBlock* mpTotalPacksText;                                               // 0x02E8 (size: 0x8)
    class UButton* mpScrollLeftButton;                                                // 0x02F0 (size: 0x8)
    class UButton* mpScrollRightButton;                                               // 0x02F8 (size: 0x8)
    class UIndexIndicatorBoxWidget* mpIndexIndicatorWidget;                           // 0x0300 (size: 0x8)

    void OnScrollRightButtonPressed();
    void OnScrollLeftButtonPressed();
    void OnBuyMorePacksButtonPressed();
    void OnButtonSelected(FString Data);
    void OnButtonDoubleClicked();
    void OnActionPressed();
}; // Size: 0x330

class UPrizeRevealOverlayWidget : public UBaseOverlay
{
}; // Size: 0x280

class UPrizeRevealWidget : public UMetaWidget
{
    class UWidgetAnimation* HoverAnim;                                                // 0x0388 (size: 0x8)
    class UWidgetAnimation* UnHoverAnim;                                              // 0x0390 (size: 0x8)
    class UWidgetAnimation* RevealAnim;                                               // 0x0398 (size: 0x8)
    class UNavButton* mpNavButton;                                                    // 0x03A0 (size: 0x8)
    class UImage* mpRarityImage;                                                      // 0x03A8 (size: 0x8)
    class UImage* mpPrizeIcon;                                                        // 0x03B0 (size: 0x8)
    class UTextBlock* mpPrizeNameText;                                                // 0x03B8 (size: 0x8)
    bool mbAllowedToBeHovered;                                                        // 0x03C0 (size: 0x1)
    class URichTextBlock* mpPrizeDescriptionText;                                     // 0x03C8 (size: 0x8)
    class UImage* mpSelectionFrame;                                                   // 0x03D0 (size: 0x8)
    class UImage* mpBackgroundLayer1;                                                 // 0x03D8 (size: 0x8)
    class UImage* mpBackgroundLayer2;                                                 // 0x03E0 (size: 0x8)
    class UImage* mpBackgroundLayer3;                                                 // 0x03E8 (size: 0x8)
    class UImage* mpBackgroundGlow;                                                   // 0x03F0 (size: 0x8)
    class USizeBox* mpDescTextWrapper;                                                // 0x03F8 (size: 0x8)
    FPrizeRevealStyleGuide mTeenStyleGuide;                                           // 0x0400 (size: 0x30)
    FPrizeRevealStyleGuide mEvilStyleGuide;                                           // 0x0430 (size: 0x30)
    FPrizeRevealStyleGuide mCurrentlySelectedStyleGuide;                              // 0x0460 (size: 0x30)
    bool mbIsOwningCharacterEvil;                                                     // 0x0490 (size: 0x1)

    void StartRevealAnim();
    void SetOwningCharacterEvil(bool bNewValue);
    void SetHidden(bool bSet);
    void OnTextureLoaded(class UTexture2D* pTex);
    void OnRevealPrizeCompleted();
    void OnButtonUnHovered();
    void OnButtonHovered();
    class UNavButton* GetNavButton();
}; // Size: 0x498

class UPrizeSelectionWidget : public UMetaWidget
{
    class UPrizeEquipmentWidget* mpTeenPrizeEquipmentWidget;                          // 0x0378 (size: 0x8)
    class UPrizeEquipmentWidget* mpEvilPrizeEquipmentWidget;                          // 0x0380 (size: 0x8)
    class UButton* mpButton;                                                          // 0x0388 (size: 0x8)
    class UImage* mpBlurImage;                                                        // 0x0390 (size: 0x8)
    class UImage* mpHighlightImage;                                                   // 0x0398 (size: 0x8)
    bool mbSelectedCharacterPrizesOnly;                                               // 0x03A0 (size: 0x1)

    void OnButtonPressed();
}; // Size: 0x3A8

class UPrizeSummaryWidget : public UUserWidget
{
    class UTextBlock* mpPrizeText;                                                    // 0x0268 (size: 0x8)
    bool mbHasBeenPopulated;                                                          // 0x0270 (size: 0x1)
    class UEndOfRoundBaseWidget* mpOwnerBaseWidget;                                   // 0x0278 (size: 0x8)

    void OnFinishedDiscoveringPrizes(TArray<FGrantable> prizesGenerated);
    void OnActivate(class UEndOfRoundBaseWidget* pOwnerWidget);
}; // Size: 0x280

class UPrizesUserButton : public UBaseUserButton
{
    class UTexture2D* TeenBackground;                                                 // 0x0478 (size: 0x8)
    class UTexture2D* EvilBackground;                                                 // 0x0480 (size: 0x8)
    class UTexture2D* TeenHighlight;                                                  // 0x0488 (size: 0x8)
    class UTexture2D* EvilHighlight;                                                  // 0x0490 (size: 0x8)
    class UImage* mpBackgroundImage;                                                  // 0x0498 (size: 0x8)
    class UTextBlock* mpPlayingAsText;                                                // 0x04A0 (size: 0x8)
    class UTextBlock* mpFactionText;                                                  // 0x04A8 (size: 0x8)

}; // Size: 0x4B0

class UPurchasableJourneyMapNode : public UBaseJourneyMapNode
{
    class UTextBlock* mpAuraCostText;                                                 // 0x0400 (size: 0x8)

}; // Size: 0x408

class URCCopterSkinDataAsset : public UTeenWeaponSkinDataAsset
{
    FSkinSkeletalMesh mRCCopterMesh;                                                  // 0x01E8 (size: 0x168)
    FSkinParticleSystem mRCCopterParticleSystem;                                      // 0x0350 (size: 0xD8)
    FSkinParticleSystem mExplosionParticleSystem;                                     // 0x0428 (size: 0xD8)
    FSkinParticleSystem mEmissionParticleSystem;                                      // 0x0500 (size: 0xD8)
    FSkinStaticMesh mSplineMesh;                                                      // 0x05D8 (size: 0xA8)
    FSkinLight mRCCopterLightBeamOn;                                                  // 0x0680 (size: 0x18)
    FSkinLight mRCCopterLightBeamOff;                                                 // 0x0698 (size: 0x18)
    TArray<FSplineInterpSpawnInfo> mRCCopterRocketSpawnInfo;                          // 0x06B0 (size: 0x10)
    EWise_WEP_RCCopter mWiseRCCopterSwitch;                                           // 0x06C0 (size: 0x1)

}; // Size: 0x6C8

class URayGunSkinDataAsset : public UTeenWeaponSkinDataAsset
{
    FSkinStaticMesh mProjectileMesh;                                                  // 0x01E8 (size: 0xA8)
    FSkinParticleSystem mTrailParticles;                                              // 0x0290 (size: 0xD8)
    FSkinParticleSystem mExplosionParticles;                                          // 0x0368 (size: 0xD8)
    FSkinDecal mProjectileDecal;                                                      // 0x0440 (size: 0x58)
    EWise_WEP_RayGun mWiseRayGunSwitch;                                               // 0x0498 (size: 0x1)

}; // Size: 0x4A0

class URemoteCharMovementComponent : public UBaseCharMovementComponent
{
    FVector mCurrentFloorWorldPosition;                                               // 0x0AF4 (size: 0xC)
    float mGravityMultiplier;                                                         // 0x0B00 (size: 0x4)
    bool mbRemoteCharFalling;                                                         // 0x0B04 (size: 0x1)
    float mTargetHeightOffset;                                                        // 0x0B08 (size: 0x4)

    void SetTargetHeightOffset(float Offset);
    void SetGravityMultiplier(float Multiplier);
    bool IsRemoteCharFalling();
    float GetTargetHeightOffset();
    float GetGravityMultiplier();
    FVector GetCurrentFloorWorldPosition();
}; // Size: 0xB10

class UReplayItemWidget : public UUserWidget
{
    class UTextBlock* mpNameText;                                                     // 0x0260 (size: 0x8)
    class UTextBlock* mpTimestampText;                                                // 0x0268 (size: 0x8)
    class UNavButton* mpViewButton;                                                   // 0x0270 (size: 0x8)
    class UNavButton* mpDeleteButton;                                                 // 0x0278 (size: 0x8)
    class UReplayModalWidget* mpOwner;                                                // 0x0280 (size: 0x8)
    FReplayInfo mReplayInfo;                                                          // 0x0288 (size: 0x30)

    void OnViewPressed();
    void OnDeletePressed();
}; // Size: 0x2B8

class UReplayModalWidget : public UBaseModal
{
    class UBoxUserButton* mpConfirmButton;                                            // 0x02A8 (size: 0x8)
    class UVerticalBox* mpReplayBox;                                                  // 0x02B0 (size: 0x8)

    void OnConfirmPressed();
}; // Size: 0x2B8

class UReportModalWidget : public UBaseModal
{
    class UMultiLineEditableTextBox* mpTextBox;                                       // 0x02A8 (size: 0x8)
    class UNavDropDownMenu* mpDropDownMenu;                                           // 0x02B0 (size: 0x8)
    class UTextBlock* mpMessageText;                                                  // 0x02B8 (size: 0x8)
    class UBoxUserButton* mpSubmitButton;                                             // 0x02C0 (size: 0x8)
    class UBoxUserButton* mpCancelButton;                                             // 0x02C8 (size: 0x8)

    void SetSubmitButtonText(const FText& ButtonText);
    void SetMessageText(const FText& messageText);
    void SetHintText(const FText& HintText);
    void SetData(FString FriendlyName, FString PlayerAccountId, FString MatchID);
    void OnTextCommit(const FText& Text, TEnumAsByte<ETextCommit::Type> CommitType);
    void OnSubmitPressed();
    void OnCancelPressed();
}; // Size: 0x308

class URewardClaimScreen : public UBaseScreen
{
    class UWidgetAnimation* mpRewardIn;                                               // 0x02C0 (size: 0x8)
    class UWidgetAnimation* mpRewardOut;                                              // 0x02C8 (size: 0x8)
    class UWidgetAnimation* mpScreenOn;                                               // 0x02D0 (size: 0x8)
    float mTimeToShowRewards;                                                         // 0x02D8 (size: 0x4)
    class UBusyModalWidget* mpBusyModal;                                              // 0x02E0 (size: 0x8)
    class UBaseRewardWidget* mpRewardCard;                                            // 0x02E8 (size: 0x8)

    void ShowRewards();
    void OnStoreEntitlementsCheckComplete(bool bFoundEntitlements);
    void OnShowRewardCompleted();
    void OnRewardOutFinished();
    void OnRewardInFinished();
}; // Size: 0x338

class URewardItemWidget : public UMetaWidget
{
    class UTextBlock* mpNameText;                                                     // 0x0388 (size: 0x8)
    class UImage* mpTexture;                                                          // 0x0390 (size: 0x8)
    class UImage* mpRarityImage;                                                      // 0x0398 (size: 0x8)
    class URewardModalWidget* mpOwner;                                                // 0x03A0 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
}; // Size: 0x3A8

class URewardManager : public UObject
{
    TMap<class FString, class FRewardChest> mUnclaimedChests;                         // 0x0028 (size: 0x50)
    TMap<class FString, class FClaimedRewardChest> mClaimedChests;                    // 0x0078 (size: 0x50)

}; // Size: 0xE8

class URewardModalWidget : public UBaseModal
{
    class UBoxUserButton* mpConfirmButton;                                            // 0x02B0 (size: 0x8)
    class UCanvasPanel* mpInnerCanvas;                                                // 0x02B8 (size: 0x8)
    class UBoxUserButton* mpCloseAllButton;                                           // 0x02C0 (size: 0x8)
    class UUniformGridPanel* mpRewardsGrid;                                           // 0x02C8 (size: 0x8)

    void OnConfirmPressed();
    void OnCloseAllPressed();
}; // Size: 0x2D0

class URingAligningMinigame : public USkillTestMinigameBase
{
    float mClientTimer;                                                               // 0x00E0 (size: 0x4)
    float mPressedTimer;                                                              // 0x00E4 (size: 0x4)
    float mSpeed;                                                                     // 0x00E8 (size: 0x4)
    float mMaxRadius;                                                                 // 0x00EC (size: 0x4)
    float mMinRadius;                                                                 // 0x00F0 (size: 0x4)
    float mTargetRingInnerRadius;                                                     // 0x00F4 (size: 0x4)
    float mTargetRingOuterRadius;                                                     // 0x00F8 (size: 0x4)
    float mAdjustmentMultiplier;                                                      // 0x00FC (size: 0x4)
    float mFailureTimer;                                                              // 0x0100 (size: 0x4)
    float mCurrentRadius;                                                             // 0x0104 (size: 0x4)
    float mAdjustmentDistance;                                                        // 0x0108 (size: 0x4)
    bool mbIsActionPressed;                                                           // 0x010C (size: 0x1)

    float GetTargetOuterRadius();
    float GetTargetInnerRadius();
    FLinearColor GetProgressColor();
    float GetCurrentRadius();
    FLinearColor GetCircleColor();
}; // Size: 0x110

class URoomVolumeManager : public UWorldSubsystem
{
    TArray<class ARoomVolume*> mRoomVolumes;                                          // 0x0040 (size: 0x10)

    class URoomVolumeManager* GetInstance(class UWorld* pWorld);
}; // Size: 0x58

class URotatorMinigame : public USkillTestMinigameBase
{
    float mNodeAngleWidth;                                                            // 0x00E0 (size: 0x4)
    float mMinAngleToRotate;                                                          // 0x00E4 (size: 0x4)
    int32 mNodesToGenerate;                                                           // 0x00E8 (size: 0x4)
    float mWinningAngleTolerance;                                                     // 0x00EC (size: 0x4)
    float mBaseSpinSpeed;                                                             // 0x00F0 (size: 0x4)
    bool mbSubmissionLockout;                                                         // 0x00F4 (size: 0x1)
    TArray<int32> mCurrentPuzzle;                                                     // 0x00F8 (size: 0x10)
    float mCurrentAngle;                                                              // 0x0108 (size: 0x4)
    float mBaseTimeToLockOut;                                                         // 0x010C (size: 0x4)
    float mLockoutTimer;                                                              // 0x0110 (size: 0x4)
    bool mbPuzzleNeedsRegeneration;                                                   // 0x0114 (size: 0x1)
    class UCanvasPanel* mpNodeRotatorPanel;                                           // 0x0118 (size: 0x8)
    class UTexture2D* mpNodeIcon;                                                     // 0x0120 (size: 0x8)
    class UTexture2D* mpTargetIcon;                                                   // 0x0128 (size: 0x8)
    class UHUDMinigame_Rotator* mpCurrentRotatorMinigame;                             // 0x0130 (size: 0x8)
    bool mbSnapped;                                                                   // 0x0138 (size: 0x1)
    bool mbServerWaitingOnPuzzleCompletedDelay;                                       // 0x0139 (size: 0x1)
    bool mbGameHiddenOnClient;                                                        // 0x013A (size: 0x1)
    TArray<int32> mDirectionInputs;                                                   // 0x0140 (size: 0x10)
    float mServerSubmissionDelayTimer;                                                // 0x0150 (size: 0x4)

    void TryToSnapPuzzle();
    bool TestSymmetry(TArray<int32> puzzle);
    bool ShouldDisplayFailState();
    void SetSubmissionLockout(bool bNewValue);
    void SetNodesToGenerate(int32 NewValue);
    void SetIsSnapped(bool bNewValue);
    void SetGameHiddenOnClient(bool bNewValue);
    void SetCurrentRotatorMinigame(class UHUDMinigame_Rotator* pBar);
    void SetCurrentPuzzle(TArray<int32> NewValue);
    void SetCurrentAngle(float NewValue);
    bool IsSnapped();
    bool IsLockedOut();
    bool IsGameHiddenOnClient();
    bool HasCorrectRotation();
    float GetWinningAngleTolerance();
    bool GetSubmissionLockout();
    float GetSpinSpeed();
    int32 GetNodesToGenerate();
    float GetNodeAngleWidth();
    bool GetNeedsRegeneration();
    float GetMinAngleToRotate();
    float GetLockoutTimer();
    class UHUDMinigame_Rotator* GetCurrentRotatorMinigame();
    TArray<int32> GetCurrentPuzzle();
    float GetCurrentAngle();
    float GetBaseSpinSpeed();
    void GeneratePuzzleRotation();
    void GenerateNewPuzzle();
    void DoServerUpdateSubmissionDelay(float DeltaTime);
    void DoServerSetLockoutTimer(float NewValue);
    void DoServerSetIsWaitingOnPuzzleCompletionDelay(bool bNewValue);
    void DoServerPuzzleCompletedAfterDelay();
    bool DoServerIsWaitingOnPuzzleCompletedDelay();
    void ClientSetNeedsRegeneration(bool bSet);
    void ClientReceiveResponseForSubmission(bool bDidPass, int32 puzzlesCompleted);
}; // Size: 0x158

class UScenarioDataAsset : public UMapDataAsset
{
    TArray<FSoftObjectPath> mScenarioLevels;                                          // 0x0158 (size: 0x10)

}; // Size: 0x168

class UScenarioLoaderWidget : public UBaseScreen
{
    TArray<FPrimaryAssetId> mMDAIds;                                                  // 0x02C0 (size: 0x10)
    FPrimaryAssetId mCurrentScenario;                                                 // 0x02D0 (size: 0x10)
    class UButton* mpButtonLoadScenarioList;                                          // 0x02E0 (size: 0x8)
    class UButton* mpButtonLoadScenario;                                              // 0x02E8 (size: 0x8)
    class UButton* mpButtonUnload;                                                    // 0x02F0 (size: 0x8)
    class UComboBoxString* mpScenarioList;                                            // 0x02F8 (size: 0x8)

    void UpdateScenarioList();
    bool UnLoadScenario();
    void OnClickedTryUnloadScenario();
    void OnClickedTryLoadScenario();
}; // Size: 0x300

class USceneDetailsWidget : public UMetaWidget
{
    class UMovieRewardWidget* mpSceneRewardsWidget;                                   // 0x0378 (size: 0x8)
    class URichTextBlock* mpFlavorText;                                               // 0x0380 (size: 0x8)
    class URichTextBlock* mpCodeBlockFlavorText;                                      // 0x0388 (size: 0x8)
    class UHorizontalBox* mpLockedBox;                                                // 0x0390 (size: 0x8)
    class UNonSelectableScrollBox* mpNonSelectableScrollBox;                          // 0x0398 (size: 0x8)
    class UBorder* mpRewardBorder;                                                    // 0x03A0 (size: 0x8)

}; // Size: 0x3A8

class USceneListWidget : public UMetaWidget
{
    class UNavScrollBox* mpNavScrollBox;                                              // 0x0380 (size: 0x8)
    class UVerticalBox* mpSceneListBox;                                               // 0x0388 (size: 0x8)

    void OnSceneSelected(FString Data);
}; // Size: 0x390

class USceneProgressionWidget : public UMetaWidget
{
    class URichTextBlock* mpTitleText;                                                // 0x0378 (size: 0x8)
    class UTextBlock* mpCountText;                                                    // 0x0380 (size: 0x8)
    class UProgressBar* mpProgressBar;                                                // 0x0388 (size: 0x8)

}; // Size: 0x390

class USceneRequirementWidget : public UMetaWidget
{
    class UWidgetSwitcher* mpStateSwitcher;                                           // 0x0378 (size: 0x8)
    class UBorder* mpStatusBorder;                                                    // 0x0380 (size: 0x8)
    class UOverlay* mpStatusOverlay;                                                  // 0x0388 (size: 0x8)
    class UOverlay* mpCompletedOverlay;                                               // 0x0390 (size: 0x8)
    class UImage* mpStatusIconOuter;                                                  // 0x0398 (size: 0x8)
    class UImage* mpStatusIconInner;                                                  // 0x03A0 (size: 0x8)
    class URichTextBlock* mpRequirementText;                                          // 0x03A8 (size: 0x8)

}; // Size: 0x590

class USceneRewardIconGroupWidget : public UMetaWidget
{
    class UHorizontalBox* mpRewardBox;                                                // 0x0380 (size: 0x8)

}; // Size: 0x388

class USceneRewardIconWidget : public UMetaWidget
{
    class UImage* mpRewardIcon;                                                       // 0x0378 (size: 0x8)
    class UTextBlock* mpRewardText;                                                   // 0x0380 (size: 0x8)

}; // Size: 0x3A0

class USceneSummaryMovieHeaderWidget : public UMetaWidget
{
    class UTextBlock* mpMovieTitleText;                                               // 0x0378 (size: 0x8)

}; // Size: 0x380

class USceneSummaryOverlayWidget : public UBaseOverlay
{
    class USceneSummaryWidget* mpSceneSummaryWidget;                                  // 0x0280 (size: 0x8)

}; // Size: 0x288

class USceneSummarySceneWidget : public UMetaWidget
{
    class UTextBlock* mpTitleText;                                                    // 0x0380 (size: 0x8)
    class USceneRewardIconGroupWidget* mpRewardIconGroupWidget;                       // 0x0388 (size: 0x8)
    class UWidgetSwitcher* mpWidgetSwitcher;                                          // 0x0390 (size: 0x8)
    class UVerticalBox* mpContentBox;                                                 // 0x0398 (size: 0x8)
    class UHorizontalBox* mpCompletedBox;                                             // 0x03A0 (size: 0x8)
    class UVerticalBox* mpRequirementsBox;                                            // 0x03A8 (size: 0x8)
    TArray<class USceneRequirementWidget*> mRequirementWidgets;                       // 0x03B0 (size: 0x10)
    TArray<class USceneProgressionWidget*> mProgressionWidgets;                       // 0x03C0 (size: 0x10)

}; // Size: 0x3D0

class USceneSummaryWidget : public UUserWidget
{
    bool ShowCompleted;                                                               // 0x0260 (size: 0x1)
    FLinearColor HighlightedTitleColor;                                               // 0x0264 (size: 0x10)
    FLinearColor DimmedTitleColor;                                                    // 0x0274 (size: 0x10)
    class UHorizontalBox* mpClassicBox;                                               // 0x0298 (size: 0x8)
    class UImage* mpClassicIcon;                                                      // 0x02A0 (size: 0x8)
    class UHorizontalBox* mpLimitedBox;                                               // 0x02A8 (size: 0x8)
    class UImage* mpLimitedIcon;                                                      // 0x02B0 (size: 0x8)
    class UOverlay* mpNoRequirementsMetBox;                                           // 0x02B8 (size: 0x8)
    class USceneSummaryMovieHeaderWidget* mpClassicsHeaderWidget;                     // 0x02C0 (size: 0x8)
    class USceneSummaryMovieHeaderWidget* mpLimitedHeaderWidget;                      // 0x02C8 (size: 0x8)
    class UNonSelectableScrollBox* mpNonSelectableScrollBox;                          // 0x02D0 (size: 0x8)
    class UVerticalBox* mpSceneListBox;                                               // 0x02D8 (size: 0x8)

    void FindClosestSelectedMovieTitle();
    void AddMovieToList(FString setId);
}; // Size: 0x2F0

class USceneWidget : public UMetaWidget
{
    FLinearColor RequirementsMetColor;                                                // 0x0378 (size: 0x10)
    FLinearColor UnavailableColor;                                                    // 0x0388 (size: 0x10)
    FLinearColor CompletedColor;                                                      // 0x0398 (size: 0x10)
    class UBaseUserButton* mpUserButton;                                              // 0x03A8 (size: 0x8)
    class UBorder* mpStatusBorder;                                                    // 0x03B0 (size: 0x8)
    class UImage* mpStatusIcon;                                                       // 0x03B8 (size: 0x8)
    class UTextBlock* mpTitleText;                                                    // 0x03C0 (size: 0x8)
    class USceneRewardIconGroupWidget* mpRewardIconGroupWidget;                       // 0x03C8 (size: 0x8)
    class UWidgetSwitcher* mpWidgetSwitcher;                                          // 0x03D0 (size: 0x8)
    class UVerticalBox* mpContentBox;                                                 // 0x03D8 (size: 0x8)
    class UHorizontalBox* mpCompletedBox;                                             // 0x03E0 (size: 0x8)
    TArray<class USceneRequirementWidget*> mRequirementWidgets;                       // 0x03E8 (size: 0x10)
    TArray<class USceneProgressionWidget*> mProgressionWidgets;                       // 0x03F8 (size: 0x10)

    void OnClicked();
}; // Size: 0x418

class UScenesScreen : public UBaseScreen
{
    class USceneListWidget* mpSceneListWidget;                                        // 0x02D0 (size: 0x8)
    class USceneDetailsWidget* mpSceneDetailsWidget;                                  // 0x02D8 (size: 0x8)
    class UCategorySwitcher* mpCategorySwitcher;                                      // 0x02E0 (size: 0x8)
    class UCanvasPanel* mpInfoPanel;                                                  // 0x02E8 (size: 0x8)
    class UTextBlock* mpInfoText;                                                     // 0x02F0 (size: 0x8)
    class UBorder* mpTimerBorder;                                                     // 0x02F8 (size: 0x8)
    class UTimerCountdownWidget* mpTimerCountdownWidget;                              // 0x0300 (size: 0x8)

    void SetMovieSetId(FString Data);
    void ResetMovieSetIndex();
    void OnTextureLoaded(class UTexture2D* pTex);
    void OnSceneSelected(FString Data);
    void OnCategoryChanged(int32 Index);
}; // Size: 0x368

class UScienceFetusmanAnimInstance : public UAnimInstance
{
    FRotator mLookRotation;                                                           // 0x02B8 (size: 0xC)
    float mMinLookDist;                                                               // 0x02C4 (size: 0x4)
    class AGameplayGS* mpGameplayGS;                                                  // 0x02C8 (size: 0x8)

    void UpdateAnimationInstance(float DeltaTime);
    void InitAnimInstance();
}; // Size: 0x2E0

class UScreenHeaderWidget : public UMetaWidget
{
    class UNavigationHeaderWidget* mpNavigationHeaderWidget;                          // 0x0378 (size: 0x8)
    class UCharacterInfoHeaderWidget* mpCharacterInfoHeaderWidget;                    // 0x0380 (size: 0x8)
    class UCurrencyInfoHeaderWidget* mpCurrencyInfoHeaderWidget;                      // 0x0388 (size: 0x8)
    bool mbUseLargeIconNavigationStyle;                                               // 0x0390 (size: 0x1)

}; // Size: 0x398

class UScrollingSelectionTileWidget : public UUserWidget
{
    class UNavButton* mpButton;                                                       // 0x0260 (size: 0x8)
    int32 mIndex;                                                                     // 0x0268 (size: 0x4)
    class UScrollingSelectionTileWidget* mpOwningScrollingSelectionWidget;            // 0x0270 (size: 0x8)

    void SetTileIndex(int32 Index);
    void OnButtonPressed();
    void NativeConstruct();
}; // Size: 0x278

class UScrollingSelectionWidget : public UMetaWidget
{
    int32 mTilesPerSection;                                                           // 0x0378 (size: 0x4)
    float mUnselectableButtonOpacity;                                                 // 0x037C (size: 0x4)
    int32 mCurrentIndex;                                                              // 0x0380 (size: 0x4)
    int32 mCurrentSection;                                                            // 0x0384 (size: 0x4)
    class UButton* mpLeftButton;                                                      // 0x0388 (size: 0x8)
    class UButton* mpRightButton;                                                     // 0x0390 (size: 0x8)
    class UIndexIndicatorBoxWidget* mpIndexIndicator;                                 // 0x0398 (size: 0x8)
    class UBaseItemList* mpItemList;                                                  // 0x03A0 (size: 0x8)
    class UBaseItemTile* mpLastSelectedItemTile;                                      // 0x03A8 (size: 0x8)
    TSubclassOf<class UUserWidget> mEmptyItemClass;                                   // 0x03B0 (size: 0x8)

    void SetupNavigation();
    void ScrollInDirection(int32 Direction, bool bForceNextSection);
    void RefreshScrollButtons();
    void PadListToMinLength();
    void OnRightPressed();
    void OnLeftPressed();
    int32 GetMaxSectionIndex();
}; // Size: 0x3B8

class USearchablePointManagerComponent : public UActorComponent
{
    TArray<int32> mAvailablePickupsByType;                                            // 0x00B0 (size: 0x10)
    TMap<EPickupType, int32> mMaxPickupsAllowedOutsideSearchables;                    // 0x00C0 (size: 0x50)
    TMap<class ESeasonalEventType, class FSeasonalEventPickupInfo> mNumPickupOverridesBySeasonalEvent; // 0x0110 (size: 0x50)
    TArray<int32> mPickupsInSpawnGroupsByType;                                        // 0x0160 (size: 0x10)
    TArray<FSearchablePointArray> mSearchablePointsByType;                            // 0x0170 (size: 0x10)
    TArray<bool> mDebugKeepAllItemsAtPointByType;                                     // 0x0180 (size: 0x10)
    TArray<float> mLockedPickupsTime;                                                 // 0x0190 (size: 0x10)
    TArray<EPickupType> mLockedPickupsType;                                           // 0x01A0 (size: 0x10)
    TArray<class AGameplayPS*> mAssignableGoodPlayers;                                // 0x01B0 (size: 0x10)
    TArray<class UClass*> mEventPickupClassesByEventPickup;                           // 0x01C0 (size: 0x10)
    TArray<class UClass*> mEventSearchableObjectClassesByEvent;                       // 0x01D0 (size: 0x10)
    TArray<class UClass*> mEvilEventPropClassesByEvent;                               // 0x01E0 (size: 0x10)
    TArray<class UClass*> mEventPickup_Holiday_OrnamentClasses;                       // 0x01F0 (size: 0x10)
    TArray<class UClass*> mHoliday_EvilOrnamentClasses;                               // 0x0200 (size: 0x10)
    class UEvent_Holiday_DataAsset* mpHolidayDataAsset;                               // 0x0210 (size: 0x8)
    TArray<class UClass*> mEventCenterpieceClassesByEvent;                            // 0x0218 (size: 0x10)
    int32 mCurrentHolidayOrnamentIndex;                                               // 0x0228 (size: 0x4)
    int32 mServerCurrentEvilPropIndex;                                                // 0x022C (size: 0x4)

    bool RequestPickup(EPickupType pickupType);
    void RemoveSeasonalEventPickupOverride(ESeasonalEventType seasonalEvent, EPickupType pickupType);
    void OverrideSearchableMinAndMaxRechargeTime(float Min, float Max, ESearchableType searchType);
    bool HasSeasonalEventPickupOverride(EPickupType pickupType, ESeasonalEventType& outSeasonalEventType);
    UClass* GetSeasonalEventCenterpieceClassForType(ESeasonalEventType EventType);
    UClass* GetSearchableObjectClassFromEventType(ESeasonalEventType EventType);
    class AGameplayPS* GetRandomGoodPlayerForEvents();
    int32 GetNumTeenEventObjectsToSpawn();
    class USearchablePointManagerComponent* GetInstance(class UWorld* pWorld);
    UClass* GetEvilOrnamentClassForIndex(int32 Index);
    UClass* GetEvilEventPropBaseClassFromEventType(ESeasonalEventType EventType);
    UClass* GetClassFromPickupInfoStruct(FPickupInfoStruct PickupInfoStruct);
    UClass* GetClassFromEventPickupType(EEventPickupType eventPickupType, int32& outSubtype);
    void DoTick(float DeltaTime);
    void DoServerSpawnLockboxOnTeenDead();
    int32 DoServerGetNextEvilPropIndex();
    void DoServerAddLockedPickup(EPickupType pickup, float Time);
    void DetermineItemBaseAmounts();
    void AssignItems();
    void ApplyMatchModEffects();
    void AddSeasonalEventPickupOverride(ESeasonalEventType seasonalEvent, EPickupType pickupType);
}; // Size: 0x230

class USeasonPassManager : public UObject
{
    TMap<class EPointType, class FPointValue> mPlayerPoints;                          // 0x0028 (size: 0x50)

}; // Size: 0x108

class USeasonPassPreviewMovieWidget : public UMetaWidget
{
    class UImage* mpMovieIcon;                                                        // 0x0388 (size: 0x8)
    class UTextBlock* mpTitleText;                                                    // 0x0390 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
}; // Size: 0x398

class USeasonPassPreviewScreen : public UBaseScreen
{
    class UTextBlock* mpIdentifierText;                                               // 0x02D0 (size: 0x8)
    class UTextBlock* mpTitleText;                                                    // 0x02D8 (size: 0x8)
    class UTextBlock* mpLimitedMoviesText;                                            // 0x02E0 (size: 0x8)
    class UHorizontalBox* mpMoviesBox;                                                // 0x02E8 (size: 0x8)
    class UIssueBoxCostUserButton* mpBuyUserButton;                                   // 0x02F0 (size: 0x8)
    class UIssueBoxCostUserButton* mpBuyPlusUserButton;                               // 0x02F8 (size: 0x8)

    void OnConfirmBuyPlus();
    void OnConfirmBuy();
    void OnBuyIssuePressed();
    void OnBuyIssuePlusPressed();
}; // Size: 0x300

class USeasonPassScreen : public UBaseScreen
{
    class UCanvasPanel* mpDebugPanel;                                                 // 0x02C0 (size: 0x8)
    class UButton* mpTurnLeftButton;                                                  // 0x02C8 (size: 0x8)
    class UButton* mpTurnRightButton;                                                 // 0x02D0 (size: 0x8)
    class UButton* mpReloadButton;                                                    // 0x02D8 (size: 0x8)

    void OnTurnRightPressed();
    void OnTurnLeftPressed();
    void OnReloadPressed();
    void OnBuySkipPressed();
    void OnBuySkipConfirmed();
    void OnBuyPremiumPressed();
    void OnBuyPremiumConfirmed();
}; // Size: 0x308

class USeasonPassSummaryUserButton : public UBaseUserButton
{
    class UImage* mpMovieImage;                                                       // 0x0478 (size: 0x8)

}; // Size: 0x480

class USeasonPassSummaryWidget : public UMetaWidget
{
    class UTextBlock* mpIssueText;                                                    // 0x0378 (size: 0x8)
    class UTextBlock* mpTitleText;                                                    // 0x0380 (size: 0x8)
    class UWidgetSwitcher* mpWidgetSwitcher;                                          // 0x0388 (size: 0x8)
    class UOverlay* mpAvailableNowOverlay;                                            // 0x0390 (size: 0x8)
    class UOverlay* mpProgressOverlay;                                                // 0x0398 (size: 0x8)
    class UTextBlock* mpTierText;                                                     // 0x03A0 (size: 0x8)
    class USeasonPassTierStarsWidget* mpStarsWidget;                                  // 0x03A8 (size: 0x8)
    class USeasonPassSummaryUserButton* mpUserButton;                                 // 0x03B0 (size: 0x8)
    class UBaseUserButton* mpBuyUserButton;                                           // 0x03B8 (size: 0x8)

    void OnConfirmBuy();
    void OnBuyButtonPressed();
    void OnButtonPressed();
}; // Size: 0x3C0

class USeasonPassTierStarsWidget : public UUserWidget
{
    int32 StarSize;                                                                   // 0x0260 (size: 0x4)
    FLinearColor StarColor;                                                           // 0x0264 (size: 0x10)
    class UHorizontalBox* mpStarsBox;                                                 // 0x0278 (size: 0x8)

}; // Size: 0x280

class USeasonalEventManager : public UObject
{

    class USeasonalEventManager* GetInstance(class UObject* pWorldContextObject);
    TArray<ESeasonalEventType> GetHostActiveSeasonalEvents();
}; // Size: 0xE8

class USeasonalEventWidget : public UUserWidget
{
    TArray<ESeasonalEventType> mShownEvents;                                          // 0x0260 (size: 0x10)

    void OnSeasonalEventTypeChanged();
}; // Size: 0x270

class UServerBrowserOverlayWidget : public UBaseOverlay
{
    class UBoxUserButton* mpHostButton;                                               // 0x0280 (size: 0x8)
    class UBoxUserButton* mpRefreshButton;                                            // 0x0288 (size: 0x8)
    class UBoxUserButton* mpAutoMatchmakingButton;                                    // 0x0290 (size: 0x8)
    class UBoxUserButton* mpSPStartDebugButton;                                       // 0x0298 (size: 0x8)
    class UBoxUserButton* mpLeftSPDebugButton;                                        // 0x02A0 (size: 0x8)
    class UBoxUserButton* mpRightSPDebugButton;                                       // 0x02A8 (size: 0x8)
    class UVerticalBox* mpServerListBox;                                              // 0x02B0 (size: 0x8)
    TSubclassOf<class ULobbyServerResultWidget> mServerResultClass;                   // 0x0318 (size: 0x8)
    int32 mResultCounter;                                                             // 0x0320 (size: 0x4)
    bool mbIsSearching;                                                               // 0x0324 (size: 0x1)

    void OnSPStartDebug();
    void OnSPRightButton();
    void OnSPLeftButton();
    void OnRefreshPressed();
    void OnHostPressed();
}; // Size: 0x348

class UServerNotificationManager : public UObject
{
    TMap<class FString, class FPatchNotesCollection> mPatchNotes;                     // 0x0038 (size: 0x50)

}; // Size: 0x90

class USimpleProfilerManager : public UObject
{

    class USimpleProfilerManager* GetSimpleProfilerManagerInstance(class UObject* pWorldContextObject);
}; // Size: 0x78

class USkillTestMinigameBase : public UActorComponent
{
    class ATPChar* mpOwningTPChar;                                                    // 0x00B0 (size: 0x8)
    ESkillTestState mState;                                                           // 0x00B8 (size: 0x1)
    float mSubmittedValue;                                                            // 0x00BC (size: 0x4)
    float mTimer;                                                                     // 0x00C0 (size: 0x4)
    float mInitialTimer;                                                              // 0x00C4 (size: 0x4)
    float mCooldownTimer;                                                             // 0x00C8 (size: 0x4)
    bool mbWarningActive;                                                             // 0x00CC (size: 0x1)
    float mTimerMultiplier;                                                           // 0x00D0 (size: 0x4)
    bool mbIsContributing;                                                            // 0x00D4 (size: 0x1)
    float mBaseTestDuration;                                                          // 0x00D8 (size: 0x4)

    void ServerSubmitValue(float Value);
    void ServerSetContributing(bool bSet);
    class ATPChar* GetOwningTPChar();
}; // Size: 0xE0

class USkinComponentVisibilityManager : public USceneComponent
{
    TMap<class UPrimitiveComponent*, class FEffectVisibility> mManagedComponents;     // 0x01F8 (size: 0x50)

}; // Size: 0x250

class USliderUserButton : public UBaseUserButton
{
    bool ColorOnSelect;                                                               // 0x0478 (size: 0x1)
    int32 MinDisplayValue;                                                            // 0x047C (size: 0x4)
    int32 MaxDisplayValue;                                                            // 0x0480 (size: 0x4)
    class UNavSlider* mpSlider;                                                       // 0x0488 (size: 0x8)
    class UTextBlock* mpTextBlock;                                                    // 0x0490 (size: 0x8)
    class UProgressBar* mpProgressBar;                                                // 0x0498 (size: 0x8)

    void OnValueChanged(float Val);
}; // Size: 0x4A0

class USmokeTestEngine : public UObject
{
    FString mSmokeTestToRun;                                                          // 0x0028 (size: 0x10)
    FString mNameOfMapToLoad;                                                         // 0x0038 (size: 0x10)
    FString mPathOfMapToLoad;                                                         // 0x0048 (size: 0x10)
    FString mNameOfHostToJoin;                                                        // 0x0060 (size: 0x10)
    TArray<class AActor*> mAllSmokeTestCameras;                                       // 0x0070 (size: 0x10)
    TArray<FScreenShotRequest> mScreenShotQueue;                                      // 0x0080 (size: 0x10)

}; // Size: 0xD0

class USocialBlacklistButton : public UBaseSocialButton
{
    class USocialPortraitWidget* mpSocialPortraitWidget;                              // 0x0480 (size: 0x8)
    class UTextBlock* mpDisplayNameText;                                              // 0x0488 (size: 0x8)

}; // Size: 0x490

class USocialBlacklistWidget : public UBaseSocialContentWidget
{

    void OnUnblockPressed();
}; // Size: 0x3C8

class USocialCategoryButton : public UUserWidget
{
    FText mCategoryName;                                                              // 0x0260 (size: 0x18)
    FLinearColor SelectedColor;                                                       // 0x0278 (size: 0x10)
    FLinearColor UnselectedColor;                                                     // 0x0288 (size: 0x10)
    class UButton* mpCategoryButton;                                                  // 0x02A8 (size: 0x8)
    class UTextBlock* mpCategoryText;                                                 // 0x02B0 (size: 0x8)

    void OnButtonPressed();
}; // Size: 0x2B8

class USocialCategorySwitcher : public UUserWidget
{
    class USocialCategoryButton* mpLobbyButton;                                       // 0x0270 (size: 0x8)
    class USocialCategoryButton* mpFriendsButton;                                     // 0x0278 (size: 0x8)
    class USocialCategoryButton* mpRecentPlayersButton;                               // 0x0280 (size: 0x8)
    class USocialCategoryButton* mpPartyButton;                                       // 0x0288 (size: 0x8)

    void OnRightCategoryPressed();
    void OnRecentPlayersCallback();
    void OnPartyCallback();
    void OnLobbyCallback();
    void OnLeftCategoryPressed();
    void OnFriendsCallback();
}; // Size: 0x298

class USocialFriendButton : public UBaseSocialButton
{
    class USocialPortraitWidget* mpSocialPortraitWidget;                              // 0x0480 (size: 0x8)
    class USocialPlatformWidget* mpSocialPlatformWidget;                              // 0x0488 (size: 0x8)
    class USocialStatusWidget* mpSocialStatusWidget;                                  // 0x0490 (size: 0x8)
    class UTextBlock* mpDisplayNameText;                                              // 0x0498 (size: 0x8)
    class UCrossPlatformOnlineUser* mpOnlineUser;                                     // 0x04A0 (size: 0x8)

}; // Size: 0x4B0

class USocialFriendsGroupWidget : public UMetaWidget
{
    FText TitleText;                                                                  // 0x0378 (size: 0x18)
    class UNavButton* mpGroupButton;                                                  // 0x0390 (size: 0x8)
    class UTextBlock* mpGroupTitle;                                                   // 0x0398 (size: 0x8)
    class UImage* mpExpandIcon;                                                       // 0x03A0 (size: 0x8)
    class UVerticalBox* mpFriendsBox;                                                 // 0x03A8 (size: 0x8)
    class UBaseSocialContentWidget* mpOwnerSocialContentWidget;                       // 0x03B0 (size: 0x8)
    TSubclassOf<class USocialPlatformFriendButton> mSocialPlatformButtonClass;        // 0x03C0 (size: 0x8)
    TSubclassOf<class USocialFriendButton> mSocialButtonClass;                        // 0x03C8 (size: 0x8)

    void StartReadFriends();
    void SetOwnerSocialFriendsWidget(class UBaseSocialContentWidget* pOwnerSocialContentWidget);
    void OnReadFriendComplete();
    void OnGroupButtonSelected();
    void OnGroupButtonPressed();
    class UWidget* GetGroupButton();
    TArray<class UCrossPlatformFriend*> GetFriends(bool bOnlyOnline, bool bOnlyInGame);
    int32 GetFriendCount();
    class UWidget* GetFirstFriendButton();
    class UWidget* FindWidgetByName(FString Name);
}; // Size: 0x3E8

class USocialFriendsWidget : public UBaseSocialContentWidget
{
    class USocialPlatformFriendsGroupWidget* mpPlatformOnlineFriendsGroupWidget;      // 0x03B0 (size: 0x8)
    class UNavButton* mpLinkEpicButton;                                               // 0x03B8 (size: 0x8)

    void OnLinkEpic();
    void OnActionCallback(EActionButtonState State);
    class UWidget* GetFirstSelectedButton();
}; // Size: 0x3C0

class USocialHeaderWidget : public UUserWidget
{
    class USocialPortraitWidget* mpSocialPortraitWidget;                              // 0x0260 (size: 0x8)
    class USocialPlatformWidget* mpSocialPlatformWidget;                              // 0x0268 (size: 0x8)
    class UTextBlock* mpAccountNameText;                                              // 0x0270 (size: 0x8)
    class UTextBlock* mpAccountIdText;                                                // 0x0278 (size: 0x8)
    class USocialStatusSelectWidget* mpSocialStatusSelectWidget;                      // 0x0280 (size: 0x8)

}; // Size: 0x288

class USocialManager : public UObject
{
    float mPartyAvailabilityUpdateTimer;                                              // 0x0250 (size: 0x4)

    void UpdatePartyAvailability();
    void SetPartyAvailabilityRL(bool bIsAcceptingMembers);
    void OnNotificationDecline(FString notificationId);
    void OnNotificationConfirm(FString notificationId);
}; // Size: 0x258

class USocialNotificationActionButton : public UUserWidget
{
    ESocialNotificationAction ActionType;                                             // 0x0260 (size: 0x1)
    class UTexture2D* IconTex;                                                        // 0x0268 (size: 0x8)
    class UButton* mpButton;                                                          // 0x0290 (size: 0x8)
    class UBorder* mpBackgroundBorder;                                                // 0x0298 (size: 0x8)
    class UImage* mpActionIcon;                                                       // 0x02A0 (size: 0x8)
    class UBorder* mpSelectionBorder;                                                 // 0x02A8 (size: 0x8)

    void SetIsSelected(bool bSet);
    void OnButtonPressed();
    bool IsSelected();
}; // Size: 0x2B8

class USocialNotificationButton : public UBaseSocialButton
{
    class USocialPortraitWidget* mpSocialPortraitWidget;                              // 0x0480 (size: 0x8)
    class UTextBlock* mpNotificationText;                                             // 0x0488 (size: 0x8)
    class USocialNotificationActionButton* mpAcceptButton;                            // 0x0490 (size: 0x8)
    class USocialNotificationActionButton* mpDeclineButton;                           // 0x0498 (size: 0x8)
    class UTextBlock* mpActionText;                                                   // 0x04A0 (size: 0x8)

    void OnNavOverride(ESelectionNavigation dir);
    void OnDeclinePressed();
    void OnActionSelected(ESocialNotificationAction Action);
    void OnActionPressed(ESocialNotificationAction Action);
    void OnAcceptPressed();
    void DoAction();
}; // Size: 0x4B0

class USocialNotificationsWidget : public UBaseSocialContentWidget
{

    void OnDeclinePressed();
    void OnAction();
    void OnAcceptPressed();
}; // Size: 0x3D8

class USocialOverlayWidget : public UBaseOverlay
{
    class USocialHeaderWidget* mpHeaderWidget;                                        // 0x0290 (size: 0x8)
    class USocialCategorySwitcher* mpCategorySwitcher;                                // 0x0298 (size: 0x8)
    class UWidgetSwitcher* mpWidgetSwitcher;                                          // 0x02A0 (size: 0x8)
    class USocialVoiceMasterWidget* mpLobbyWidget;                                    // 0x02A8 (size: 0x8)
    class USocialPartyWidget* mpPartyWidget;                                          // 0x02B0 (size: 0x8)
    class USocialFriendsWidget* mpFriendsWidget;                                      // 0x02B8 (size: 0x8)
    class USocialRecentPlayersWidget* mpRecentPlayersWidget;                          // 0x02C0 (size: 0x8)
    class UButton* mpEscapeButton;                                                    // 0x02C8 (size: 0x8)

    void OnEscapePressed();
    void OnCategorySelected(ESocialCategoryType Category);
}; // Size: 0x2E0

class USocialPartyGroupWidget : public USocialFriendsGroupWidget
{
    TSubclassOf<class USocialPartyMemberButton> mSocialPartyMemberButtonClass;        // 0x03E8 (size: 0x8)

}; // Size: 0x3F0

class USocialPartyMemberButton : public USocialFriendButton
{
    class UWidgetSwitcher* mpPartyOptionsSwitcher;                                    // 0x04B0 (size: 0x8)
    class USizeBox* mpKickButtonSizeBox;                                              // 0x04B8 (size: 0x8)
    class USizeBox* mpPromoteButtonSizeBox;                                           // 0x04C0 (size: 0x8)
    class USizeBox* mpLeaveButtonSizeBox;                                             // 0x04C8 (size: 0x8)
    class USizeBox* mpVoiceIndicatorSizeBox;                                          // 0x04D0 (size: 0x8)
    class USocialVoiceIndicatorWidget* mpSocialVoiceIndicatorWidget;                  // 0x04D8 (size: 0x8)
    class UButton* mpKickButton;                                                      // 0x04E0 (size: 0x8)
    class UButton* mpPromoteButton;                                                   // 0x04E8 (size: 0x8)
    class UButton* mpLeaveButton;                                                     // 0x04F0 (size: 0x8)
    class USocialPartyVoiceSlider* mpSocialPartyVoiceSlider;                          // 0x04F8 (size: 0x8)
    class UCrossPlatformPartyMember* mpCrossPlatformPartyMember;                      // 0x0508 (size: 0x8)

    void OnToggleMute();
    void OnPromotePartyConfirmed();
    void OnPromoteMemberPressed();
    void OnLeavePartyPressed();
    void OnLeavePartyConfirmed();
    void OnKickPartyConfirmed();
    void OnKickMemberPressed();
}; // Size: 0x540

class USocialPartyMemberWidget : public UMetaWidget
{
    class USocialPortraitWidget* mpSocialPortraitWidget;                              // 0x0378 (size: 0x8)
    class UButton* mpButton;                                                          // 0x0380 (size: 0x8)

}; // Size: 0x388

class USocialPartyVoiceSlider : public UUserWidget
{
    class USlider* mpSlider;                                                          // 0x0260 (size: 0x8)
    class UProgressBar* mpProgressBar;                                                // 0x0268 (size: 0x8)
    float percent;                                                                    // 0x0270 (size: 0x4)

    void OnSliderChanged(float Val);
}; // Size: 0x278

class USocialPartyWidget : public UBaseSocialContentWidget
{
    class USocialPartyGroupWidget* mpPartyGroupWidget;                                // 0x03B0 (size: 0x8)
    class USocialVoiceOptionsWidget* mpSocialOptionsWidget;                           // 0x03B8 (size: 0x8)

    void UpdatePartyMembers();
}; // Size: 0x3C0

class USocialPlatformFriendButton : public USocialFriendButton
{
    class UButton* mpInviteButton;                                                    // 0x04B0 (size: 0x8)
    class UBorder* mpBorder;                                                          // 0x04B8 (size: 0x8)
    FLinearColor mDefaultColor;                                                       // 0x04C0 (size: 0x10)
    FLinearColor mInGameColor;                                                        // 0x04D0 (size: 0x10)
    float mInviteDelay;                                                               // 0x04E0 (size: 0x4)
    class UCrossPlatformFriend* mpOnlineFriend;                                       // 0x04E8 (size: 0x8)

    void UpdateSocialStatus();
    void UpdatePlatformAvatarAsync();
    void SetOnlineFriend(class UCrossPlatformFriend* pOnlineFriend);
    void OnViewProfilePressed();
    void OnJoinFriendPressed();
    void OnInviteMemberButton();
    class UCrossPlatformFriend* GetOnlineFriend();
}; // Size: 0x4F8

class USocialPlatformFriendsGroupWidget : public USocialFriendsGroupWidget
{
    bool bShowOnline;                                                                 // 0x03E8 (size: 0x1)
    bool bShowInGame;                                                                 // 0x03E9 (size: 0x1)
    float TimeToRefreshFriendList;                                                    // 0x03EC (size: 0x4)

}; // Size: 0x3F8

class USocialPlatformWidget : public UMetaWidget
{
    class UImage* mpPlatformIcon;                                                     // 0x0378 (size: 0x8)
    TArray<class UTexture2D*> mpPlatformImages;                                       // 0x0380 (size: 0x10)

}; // Size: 0x390

class USocialPortraitWidget : public UMetaWidget
{
    class UImage* mpPortraitIcon;                                                     // 0x0398 (size: 0x8)
    class UImage* mpMasteryBorder;                                                    // 0x03A0 (size: 0x8)
    class UBorder* mpLeaderBorder;                                                    // 0x03A8 (size: 0x8)

    void SetPortrait(class UTexture2D* pTex);
    void OnPortraitLoaded(class UTexture2D* pTex);
    void OnBorderLoaded(class UTexture2D* pTex);
}; // Size: 0x3B0

class USocialRecentPlayerButton : public UBaseSocialButton
{
    class USocialPortraitWidget* mpSocialPortraitWidget;                              // 0x0480 (size: 0x8)
    class UTextBlock* mpDisplayNameText;                                              // 0x0488 (size: 0x8)
    class UTextBlock* mpLastPlayedText;                                               // 0x0490 (size: 0x8)
    class UButton* mpShowProfileButton;                                               // 0x0498 (size: 0x8)
    class UButton* mpReportButton;                                                    // 0x04A0 (size: 0x8)
    class UButton* mpInviteButton;                                                    // 0x04A8 (size: 0x8)
    float mInviteDelay;                                                               // 0x04B0 (size: 0x4)

    void OnShowProfileButton();
    void OnReportButton();
    void OnInviteMemberButton();
}; // Size: 0x5B8

class USocialRecentPlayersWidget : public UBaseSocialContentWidget
{
}; // Size: 0x3B8

class USocialStatusButtonWidget : public UUserWidget
{
    ESocialStatusType SocialStatusType;                                               // 0x0260 (size: 0x1)
    class UNavButton* mpNavButton;                                                    // 0x0278 (size: 0x8)
    class USocialStatusWidget* mpSocialStatusWidget;                                  // 0x0280 (size: 0x8)

    void OnButtonPressed();
}; // Size: 0x288

class USocialStatusDropdownWidget : public UUserWidget
{
    class USocialStatusButtonWidget* mpOnlineButton;                                  // 0x0260 (size: 0x8)
    class USocialStatusButtonWidget* mpAwayButton;                                    // 0x0268 (size: 0x8)
    class USocialStatusButtonWidget* mpOfflineButton;                                 // 0x0270 (size: 0x8)

}; // Size: 0x278

class USocialStatusSelectWidget : public UUserWidget
{
    class UButton* mpButton;                                                          // 0x0270 (size: 0x8)
    class USocialStatusWidget* mpSocialStatusWidget;                                  // 0x0278 (size: 0x8)

    void OnButtonPressed();
}; // Size: 0x280

class USocialStatusWidget : public UMetaWidget
{
    bool ForceStatus;                                                                 // 0x0378 (size: 0x1)
    ESocialStatusType ForcedStatusType;                                               // 0x0379 (size: 0x1)
    class UImage* mpStatusIcon;                                                       // 0x0380 (size: 0x8)
    class UTextBlock* mpStatusText;                                                   // 0x0388 (size: 0x8)

}; // Size: 0x398

class USocialTooltipWidget : public UUserWidget
{
    class UTextBlock* mpTooltipText;                                                  // 0x0260 (size: 0x8)

}; // Size: 0x268

class USocialVoiceCharMemberButton : public USocialPartyMemberButton
{
    class USizeBox* mpLobbyKickButtonSizeBox;                                         // 0x0540 (size: 0x8)
    class UButton* mpLobbyKickButton;                                                 // 0x0548 (size: 0x8)

    void OnLobbyKickPressed();
    void OnLobbyKickConfirmed();
}; // Size: 0x560

class USocialVoiceChatGroupWidget : public USocialFriendsGroupWidget
{
    TSubclassOf<class USocialVoiceCharMemberButton> mSocialVoiceChatMemberButton;     // 0x03E8 (size: 0x8)
    TSubclassOf<class UUserWidget> mpSpectatorDividerClass;                           // 0x03F0 (size: 0x8)

}; // Size: 0x3F8

class USocialVoiceControlWidget : public UMetaWidget
{
    bool ShowEditKeybindings;                                                         // 0x0378 (size: 0x1)
    class USocialVoiceSliderWidget* mpMicrophoneSliderWidget;                         // 0x0388 (size: 0x8)
    class USocialVoiceSliderWidget* mpSpeakerSliderWidget;                            // 0x0390 (size: 0x8)
    class UTextBlock* mpChannelNameText;                                              // 0x0398 (size: 0x8)
    class UNavCheckbox* mpVoiceDetectionCheckbox;                                     // 0x03A0 (size: 0x8)
    class UNavCheckbox* mpPushToTalkCheckbox;                                         // 0x03A8 (size: 0x8)
    class UNavCheckbox* mpDisabledCheckbox;                                           // 0x03B0 (size: 0x8)
    class UTextBlock* mpPushToTalkText;                                               // 0x03B8 (size: 0x8)
    class UNavButton* mpEditBindingsButton;                                           // 0x03C0 (size: 0x8)
    class UWidgetSwitcher* mpChannelSwitcher;                                         // 0x03C8 (size: 0x8)
    class UVerticalBox* mpChannelBox;                                                 // 0x03D0 (size: 0x8)
    class UCanvasPanel* mpEmptyPanel;                                                 // 0x03D8 (size: 0x8)
    class UTextBlock* mpEmptyText;                                                    // 0x03E0 (size: 0x8)

    void UpdateInputBindingText();
    void SwitchToChannel(bool bSet);
    void SetVoiceChatMode(EVoiceChatMode Mode);
    void SetSpeakerGain(float Val);
    void SetMicrophoneGain(float Val);
    void OnVoiceDetectionChanged(bool bIsChecked);
    void OnPushToTalkChanged(bool bIsChecked);
    void OnParticipantListChanged();
    void OnEditBindingsPressed();
    void OnDisabledChanged(bool bIsChecked);
    void OnDeviceTypeChanged();
    void BuildParticipantList();
}; // Size: 0x3F0

class USocialVoiceIndicatorWidget : public UUserWidget
{
    class UWidgetSwitcher* mpWidgetSwitcher;                                          // 0x0260 (size: 0x8)
    class UButton* mpToggleMuteButton;                                                // 0x0268 (size: 0x8)

    void SetVoiceChatState(bool bIsSpeaking, bool bIsMuted);
    class UButton* GetMuteButton();
}; // Size: 0x270

class USocialVoiceMasterWidget : public UBaseSocialContentWidget
{
    class USocialVoiceOptionsWidget* mpSocialOptionsWidget;                           // 0x03B0 (size: 0x8)
    class USocialVoiceChatGroupWidget* mpSocialVoiceChatGroupWidget;                  // 0x03B8 (size: 0x8)
    class UTextBlock* mpChannelType;                                                  // 0x03C0 (size: 0x8)

}; // Size: 0x3C8

class USocialVoiceOptionsWidget : public UUserWidget
{
    class UOptionSelectorUserButton* mpOptionVoiceMode;                               // 0x0260 (size: 0x8)
    class UOptionSelectorUserButton* mpOptionVoiceChannel;                            // 0x0268 (size: 0x8)

    void UpdateSelections();
    void OnVoiceModeChanged();
}; // Size: 0x270

class USocialVoiceSliderWidget : public UMetaWidget
{
    ESocialVoiceSliderType SliderType;                                                // 0x0378 (size: 0x1)
    bool ShowMuteButton;                                                              // 0x0379 (size: 0x1)
    class UTexture2D* mpMutedIcon;                                                    // 0x0380 (size: 0x8)
    class UTexture2D* mpUnMutedIcon;                                                  // 0x0388 (size: 0x8)
    class UTextBlock* mpTitleText;                                                    // 0x0390 (size: 0x8)
    class UNavSlider* mpNavSlider;                                                    // 0x0398 (size: 0x8)
    class UTextBlock* mpValueText;                                                    // 0x03A0 (size: 0x8)
    class UButton* mpMuteButton;                                                      // 0x03A8 (size: 0x8)
    class UImage* mpMuteIcon;                                                         // 0x03B0 (size: 0x8)
    class UCanvasPanel* mpButtonCanvas;                                               // 0x03B8 (size: 0x8)

    void OnValueChanged(float Val);
    void OnMutePressed();
    class UNavSlider* GetNavSliderWidget();
}; // Size: 0x3D0

class USocialVoiceWidget : public UBaseSocialContentWidget
{
    class USocialVoiceControlWidget* mpSocialVoiceControlWidget;                      // 0x03B0 (size: 0x8)

}; // Size: 0x3B8

class USocialWidget : public UMetaWidget
{
    int32 HighAlertCount;                                                             // 0x0378 (size: 0x4)
    FLinearColor MediumAlertColor;                                                    // 0x037C (size: 0x10)
    FLinearColor HighAlertColor;                                                      // 0x038C (size: 0x10)
    class UHorizontalBox* mpSocialBox;                                                // 0x03A0 (size: 0x8)
    class UThemeButton* mpSocialButton;                                               // 0x03A8 (size: 0x8)
    class UTextBlock* mpSocialCountText;                                              // 0x03B0 (size: 0x8)
    TSubclassOf<class USocialPartyMemberWidget> mpPartyMemberWidgetClass;             // 0x03B8 (size: 0x8)
    class UThemeButton* mpSystemButton;                                               // 0x03C0 (size: 0x8)
    class UTextBlock* mpSelfNameText;                                                 // 0x03C8 (size: 0x8)
    class UTextBlock* mpFPText;                                                       // 0x03D0 (size: 0x8)
    class UTextBlock* mpHCText;                                                       // 0x03D8 (size: 0x8)
    class UHorizontalBox* mpDebugSocialPartyPanel;                                    // 0x03E0 (size: 0x8)
    class UThemeButton* mpSelfButton;                                                 // 0x03E8 (size: 0x8)
    class USocialPortraitWidget* mpSelfSocialPortraitWidget;                          // 0x03F0 (size: 0x8)
    TArray<class USocialPartyMemberWidget*> mPartySocialPortraitWidgets;              // 0x03F8 (size: 0x10)
    class UNewFlagWidget* mpNewFlagWidget;                                            // 0x0408 (size: 0x8)
    class UHorizontalBox* mpPartyMembersBox;                                          // 0x0410 (size: 0x8)
    class UCanvasPanel* mpSelfPanel;                                                  // 0x0418 (size: 0x8)
    class UImage* mpCommunicationWarningIcon;                                         // 0x0420 (size: 0x8)

    void ShowSocialOverlay();
    void OnSystemPressed();
    void OnSocialPressed();
    void OnSelfPressed();
    void OnMemberPressed();
}; // Size: 0x430

class USoundImpactComponent : public USceneComponent
{
    float mSoundCooldown;                                                             // 0x01F8 (size: 0x4)
    float mLastSoundTime;                                                             // 0x01FC (size: 0x4)
    FVector mLastSoundPosition;                                                       // 0x0200 (size: 0xC)
    EImpactObjectType mImpactObjectType;                                              // 0x020C (size: 0x1)
    bool mbUseOwnerRoot;                                                              // 0x020D (size: 0x1)
    class UPrimitiveComponent* mpCollisionComponent;                                  // 0x0210 (size: 0x8)
    class UExtAkComponent* mpAkEmitter;                                               // 0x0218 (size: 0x8)
    bool mbMuted;                                                                     // 0x0220 (size: 0x1)

    void SetUseOwnerRoot(bool bUseOwnerRoot);
    void SetMuted(bool bMuted);
    void SetCollisionComponent(class UPrimitiveComponent* pCollisionComponent);
    bool IsMuted();
}; // Size: 0x230

class USpectralComponent : public UBaseCustomizationComponent
{
    class UTeenSpectralDataAsset* mpTeenSpectral;                                     // 0x01A8 (size: 0x8)
    class UEvilSpectralDataAsset* mpEvilSpectral;                                     // 0x01B0 (size: 0x8)
    class UMaterialInterface* mpSpectralDecalMaterial;                                // 0x01B8 (size: 0x8)
    TMap<class ESeasonalEventType, class UMaterialTransferConfig*> mSeasonalMaterialConfigs; // 0x01C0 (size: 0x50)

    class UTeenSpectralDataAsset* GetTeenSpectralDataAsset();
    class UEvilSpectralDataAsset* GetEvilSpectralDataAsset();
    void EquipTeenSpectral(class UTeenSpectralDataAsset* pAsset);
    void EquipEvilSpectral(class UEvilSpectralDataAsset* pAsset);
    void ApplyEvilSpectralSkin(class USkeletalMeshComponent* pSkeletalMeshComponent);
}; // Size: 0x210

class USpectralDataAsset : public UItemDataAsset
{
    FSkinSkeletalMesh mSpectralMesh;                                                  // 0x0058 (size: 0x168)

}; // Size: 0x1C0

class USplashScreen : public UUserWidget
{
    class UWidgetAnimation* AnimIn;                                                   // 0x0260 (size: 0x8)
    class UWidgetAnimation* AnimOut;                                                  // 0x0268 (size: 0x8)
    class UVerticalBox* mpWarningBox;                                                 // 0x0270 (size: 0x8)
    class UCanvasPanel* mpSpinnerPanel;                                               // 0x0278 (size: 0x8)

    void OnAnimOutFinished();
    void OnAnimInFinished();
}; // Size: 0x288

class USplineInterpComponent : public USceneComponent
{
    TArray<FSplineInterpSpawnInfo> mSpawnInfo;                                        // 0x01F8 (size: 0x10)
    TArray<FSplineInterpInstanceComponentData> mInterpolatedInstanceComponentData;    // 0x0208 (size: 0x10)
    bool mbShouldTrackStartComponent;                                                 // 0x0218 (size: 0x1)
    bool mbShouldTrackEndComponent;                                                   // 0x0219 (size: 0x1)
    FTransform mStartTransform;                                                       // 0x0220 (size: 0x30)
    FTransform mEndTransform;                                                         // 0x0250 (size: 0x30)
    class USceneComponent* mpTrackedStartComponent;                                   // 0x0280 (size: 0x8)
    class USceneComponent* mpTrackedEndComponent;                                     // 0x0288 (size: 0x8)
    FName mTrackedStartSocket;                                                        // 0x0290 (size: 0x8)
    FName mTrackedEndSocket;                                                          // 0x0298 (size: 0x8)
    FSplineInterpComponentOnMeshExpired OnMeshExpired;                                // 0x02A0 (size: 0x10)
    void OnMeshExpired(FTransform Transform);
    FSplineInterpComponentOnMeshArrived OnMeshArrived;                                // 0x02B0 (size: 0x10)
    void OnMeshArrived(FTransform Transform);
    bool mbIsSpawningEnabled;                                                         // 0x02C0 (size: 0x1)

    void SetStartTransform(FTransform Transform);
    void SetStartComponent(class USceneComponent* pComponent);
    void SetSpawningEnabled(bool bSet);
    void SetEndTransform(FTransform Transform);
    void SetEndComponent(class USceneComponent* pComponent);
    bool IsSpawningEnabled();
    void DestroyInstances();
    void AddInterpolatedMesh(const FSplineInterpSpawnInfo& spawnInfo);
}; // Size: 0x2D0

class UStartJourneyMapNode : public UBaseJourneyMapNode
{
}; // Size: 0x400

class UStateMachineComponent : public UActorComponent
{
    int32 mPrevState;                                                                 // 0x00B0 (size: 0x4)
    int32 mCurrentState;                                                              // 0x00B4 (size: 0x4)
    float mCurrentTimeStateTime;                                                      // 0x00B8 (size: 0x4)
    float mPrevStateExitTime;                                                         // 0x00BC (size: 0x4)
    int32 defaultState;                                                               // 0x00C0 (size: 0x4)
    FStateMachineComponentOnStateChange OnStateChange;                                // 0x00C8 (size: 0x10)
    void OnStateChange(const int32& prevState, int32 newState, const float& endTime);
    FStateMachineComponentOnStateUpdate OnStateUpdate;                                // 0x00D8 (size: 0x10)
    void OnStateUpdate(const int32& currentState, const float& currentTime);

    void SwitchState(int32 newState);
    void OverrideStates(int32 fromState, int32 toState, bool bForceOverride);
    void MulticastAllSwitchState(int32 newState);
    void MulticastAllOverrideStates(int32 fromState, int32 toState);
    float GetPrevStateExitTime();
    int32 GetPreviousState();
    float GetCurrentStateTime();
    int32 GetCurrentState();
    void ForceSetState_Unsafe(int32 prevState, int32 newState, float Time);
}; // Size: 0xE8

class UStatePanel : public UCanvasPanel
{
    ESlateVisibility ShowVisibility;                                                  // 0x0188 (size: 0x1)
    ESlateVisibility HideVisibility;                                                  // 0x0189 (size: 0x1)

}; // Size: 0x190

class UStateSwitcher : public UWidgetSwitcher
{
}; // Size: 0x190

class UStaticShieldSkinDataAsset : public UTeenWeaponSkinDataAsset
{
    FSkinParticleSystem mShieldChargeLevelParticleSystem;                             // 0x01E8 (size: 0xD8)
    FSkinParticleSystem mShieldParticleSystem;                                        // 0x02C0 (size: 0xD8)
    FSkinParticleSystem mRimParticleSystem;                                           // 0x0398 (size: 0xD8)
    FSkinStaticMesh mShieldMesh;                                                      // 0x0470 (size: 0xA8)
    TArray<FSkinStaticMesh> mLightningBoltTemplates;                                  // 0x0518 (size: 0x10)
    EWise_WEP_StaticShield mWiseStaticShieldSwitch;                                   // 0x0528 (size: 0x1)

}; // Size: 0x530

class UStatusEffectsComponent : public USceneComponent
{
    class UNiagaraComponent* mpEffectNiagaraComponent;                                // 0x0200 (size: 0x8)
    class UNiagaraComponent* mpHealingNiagaraComponent;                               // 0x0208 (size: 0x8)
    class UNiagaraComponent* mpDrainingNiagaraComponent;                              // 0x0210 (size: 0x8)
    class UNiagaraComponent* mpSpeedBoostNiagaraComponent;                            // 0x0218 (size: 0x8)
    TSoftObjectPtr<UNiagaraSystem> mNiagaraSystemPath;                                // 0x0220 (size: 0x28)
    TSoftObjectPtr<UNiagaraSystem> mNiagaraPathHealthHealingConst;                    // 0x0248 (size: 0x28)
    TSoftObjectPtr<UNiagaraSystem> mNiagaraPathHealthDrainingConst;                   // 0x0270 (size: 0x28)
    TSoftObjectPtr<UNiagaraSystem> mNiagaraPathHealthHealingBurst;                    // 0x0298 (size: 0x28)
    TSoftObjectPtr<UNiagaraSystem> mNiagaraPathHealthDrainingBurst;                   // 0x02C0 (size: 0x28)
    TSoftObjectPtr<UNiagaraSystem> mNiagaraSpeedBoost;                                // 0x02E8 (size: 0x28)
    bool mbIsEffectActive;                                                            // 0x0310 (size: 0x1)
    float mTimeSinceSubdueActionFailed;                                               // 0x0314 (size: 0x4)

    void UpdateConstEffect(class ATPChar* pOwnerChar, TSoftObjectPtr<UNiagaraSystem>& niagaraSystemPath, class UNiagaraComponent*& pNiagaraComponent, bool bEnable, FName AttachPointName, const FEffectVisibility& EffectVisibility);
    void SpawnHealingBurstNiagaraAttachedToOwner(const FEffectVisibility& EffectVisibility);
    void SpawnHealingBurstNiagaraAtLocation(FVector Location, const FEffectVisibility& EffectVisibility);
    void SpawnDrainingBurstNiagaraAttachedToOwner(const FEffectVisibility& EffectVisibility);
    void SpawnDrainingBurstNiagaraAtLocation(FVector Location, const FEffectVisibility& EffectVisibility);
    void PlaySubduedActionFailed();
    void MulticastAllSetSpeedBoostSystem(class UNiagaraSystem* pSpeedBoostSystem);
    void MulticastAllSetHealingSystem(class UNiagaraSystem* pHealingSystem);
}; // Size: 0x320

class UStatusMappingConfig : public UCustomizationConfigBase
{
    TArray<FCharacterStatusToMaterialParameter> mCharacterStatusMappings;             // 0x0090 (size: 0x10)

}; // Size: 0xA0

class UStencilPropertySettings : public UDeveloperSettings
{
    FStencilProperties STENCIL_PROPERTIES_FEATURE_TEST;                               // 0x0038 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_PRONE_AURA;                                 // 0x007C (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_EVIL_FEASTING_AURA;                         // 0x00C0 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_DEAD_AURA;                                  // 0x0104 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_INJURYVISION_AURA;                          // 0x0148 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_SEARCHABLES_AURA;                           // 0x018C (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_DOLLMASTERTRAP_AURA;                        // 0x01D0 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_USED_DAMAGETYPE_AURA;                       // 0x0214 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_UNUSED_DAMAGETYPE_AURA;                     // 0x0258 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_STATION_UNUSED_AURA;                        // 0x029C (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_STATION_USED_AURA;                          // 0x02E0 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_STATION_FAILED_AURA;                        // 0x0324 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_TEENVISION_AURA;                            // 0x0368 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_HOLYSTAFF_CHARGEREVEAL_AURA;                // 0x03AC (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_TEENSPECTRAL_AURA;                          // 0x03F0 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_TEENSPECTRAL_SELF_AURA;                     // 0x0434 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_ENERGYPOINT_AURA;                           // 0x0478 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_ENERGYPOINT_FAILED_AURA;                    // 0x04BC (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_STATION_FAIL_AURA;                          // 0x0500 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_EXPOSED_CHAR_ALERT_AURA;                    // 0x0544 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_EVIL_AUGUR_AURA;                            // 0x0588 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_DARKSHARD_AURA;                             // 0x05CC (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_DARKSHARD_AURA_FLASHING;                    // 0x0610 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_EXPOSED_CHAR_AURA;                          // 0x0654 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_DOLLMASTER_TRAP_PROXIMITY_AURA;             // 0x0698 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_LIFEESSENCE_ESSENCEVISION;                  // 0x06DC (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_EVILENERGY_ESSENCEVISION;                   // 0x0720 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_DOLLMASTER_TRAP_TRIGGERED_AURA;             // 0x0764 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_DOLLMASTER_IMPROVED_DETECT_PROXIMITY_AURA;  // 0x07A8 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_DOLLMASTER_INCORPOREAL_PROXIMITY_AURA;      // 0x07EC (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_DOLLMASTER_INACTIVE_PROXIMITY_AURA;         // 0x0830 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_DOLLMASTER_TRAP_SELECTION_AURA;             // 0x0874 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_DOLLMASTER_TRAP_DISARMED_AURA;              // 0x08B8 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_DOLLMASTER_SELF_AURA;                       // 0x08FC (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_TALISMAN_HIGHLIGHT;                         // 0x0940 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_DAMAGING_HIGHLIGHT;                         // 0x0984 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_DAMAGING_BURN_HIGHLIGHT;                    // 0x09C8 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_PICKUP_HIGHLIGHT;                           // 0x0A0C (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_HIDEPOINT_HIGHLIGHT;                        // 0x0A50 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_DOLLMASTERTRAP_HIGHLIGHT;                   // 0x0A94 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_TOAD_ECHOLOCATION_REVEAL;                   // 0x0AD8 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_ERADICATOR_TARGETED_SURGE_STUN_REVEAL;      // 0x0B1C (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_RAYGUN_AUGMENT_REVEAL;                      // 0x0B60 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_ERADICATOR_SCANNER_REVEAL;                  // 0x0BA4 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_ERADICATOR_SCANNER_ARMED_REVEAL;            // 0x0BE8 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_ERADICATOR_TARGETED_SURGE_OVERCHARGE_REVEAL; // 0x0C2C (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_EVENTCENTERPIECE_HOLIDAY_AURA_BORDER;       // 0x0C70 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_EVENTCENTERPIECE_HOLIDAY_AURA_ICON;         // 0x0CB4 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_GOOPED_OUTLINE;                             // 0x0CF8 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_SCOUR_OUTLINE;                              // 0x0D3C (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_WEAPON_BURN;                                // 0x0D80 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_WEAPON_HOLY;                                // 0x0DC4 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_WEAPON_OCCULT;                              // 0x0E08 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_WEAPON_SHOCK;                               // 0x0E4C (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_WALKIE_TALKIE;                              // 0x0E90 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_DAMAGETYPE_SHOCK_REVEAL;                    // 0x0ED4 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_DAMAGETYPE_BURN_REVEAL;                     // 0x0F18 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_DAMAGETYPE_CURSE_REVEAL;                    // 0x0F5C (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_DAMAGETYPE_HOLY_REVEAL;                     // 0x0FA0 (size: 0x44)
    FStencilProperties STENCIL_PROPERTIES_FLAMEMINE_EVIL_EXPOSE;                      // 0x0FE4 (size: 0x44)

}; // Size: 0x1028

class UStickerComponent : public UBaseCustomizationComponent
{
    TMap<uint32, UStickerDataAsset*> mStickers;                                       // 0x01A8 (size: 0x50)

    void ServerRequestSticker(FVector WorldLocation, FVector WorldDirection, int32 stickerIndex);
}; // Size: 0x1F8

class UStickerDataAsset : public UItemDataAsset
{
    EStickerType mStickerType;                                                        // 0x0058 (size: 0x1)
    class UTexture2D* mStickerTexture;                                                // 0x0060 (size: 0x8)

}; // Size: 0x68

class UStickerSystemComponent : public UActorComponent
{
    TArray<class ASticker*> mStickerList;                                             // 0x00B0 (size: 0x10)
    int32 mServerMaxSortOrder;                                                        // 0x00C0 (size: 0x4)

    void GetStickerUISlots(TArray<uint32>& outSlots);
    void DoServerPlaceSticker(class ABaseChar* Owner, FVector WorldLocation, FVector WorldDirection, int32 stickerIndex);
    class ASticker* CreateSticker(class ABaseChar* pChar);
}; // Size: 0xC8

class UStigmaRewardProgressCardWidget : public UUserWidget
{
    class UEORRewardProgressWidget* mpRewardProgressWidget;                           // 0x0260 (size: 0x8)
    class UImage* mpStigmaImage;                                                      // 0x0268 (size: 0x8)
    class UTextBlock* mpStigmaName;                                                   // 0x0270 (size: 0x8)
    class UTexture2D* mpBurnStigmaTexture;                                            // 0x0278 (size: 0x8)
    class UTexture2D* mpHolyStigmaTexture;                                            // 0x0280 (size: 0x8)
    class UTexture2D* mpOccultStigmaTexture;                                          // 0x0288 (size: 0x8)
    class UTexture2D* mpShockStigmaTexture;                                           // 0x0290 (size: 0x8)

}; // Size: 0x298

class UStoreBundleButton : public UBaseUserButton
{
    class UImage* mpItemImage;                                                        // 0x0478 (size: 0x8)
    class UTextBlock* mpItemNameText;                                                 // 0x0480 (size: 0x8)
    class UStoreItemTileTag* mpStoreItemTag;                                          // 0x0488 (size: 0x8)
    class UImage* mpStoreItemSlotIcon;                                                // 0x0490 (size: 0x8)
    class UImage* mpStoreItemSlotIcon_Highlighted;                                    // 0x0498 (size: 0x8)

    void SetItemNameText(FText TextValue);
    void SetImage(class UTexture2D* pTex);
    void PopulateTag(FGrantable Grantable);
    void PopulateSlotIcon(const class UDbItemTemplate* pTemplate);
}; // Size: 0x4A0

class UStoreCatalogPanel : public UUserWidget
{
    class UVerticalBox* mpGeneratedContentBox;                                        // 0x0260 (size: 0x8)
    class UButton* mpNextRowButton;                                                   // 0x0268 (size: 0x8)
    class UButton* mpPreviousRowButton;                                               // 0x0270 (size: 0x8)
    TSubclassOf<class UStoreCatalogTile> mCatalogTileClass;                           // 0x0278 (size: 0x8)
    TArray<class UStoreCatalogTile*> mGeneratedTiles;                                 // 0x0280 (size: 0x10)
    class UNavScrollBox* mpCatalogScrollBox;                                          // 0x0290 (size: 0x8)
    class UStoreScreen* mpOwningStoreScreen;                                          // 0x0298 (size: 0x8)

    void SetOwningStoreScreen(class UStoreScreen* pOwningScreen);
    void SetNumberOfSubPages(int32 Count);
    void OnPreviousRowPressed();
    void OnNextRowPressed();
    void OnActivate();
    class UStoreCatalogTile* GetSubPageTileForIndex(int32 Index);
    int32 GetNumberOfSubPages();
    class UNavScrollBox* GetNavScrollBox();
    void ForceScrollWidgetToTop(class UWidget* pWidget);
    void DoTick(float DeltaTime);
}; // Size: 0x2A0

class UStoreCatalogTile : public UUserWidget
{
    class UTextBlock* mpCollectionNameText;                                           // 0x0260 (size: 0x8)
    class UVerticalBox* mpGeneratedContentBox;                                        // 0x0268 (size: 0x8)
    class UStoreTileBannerWidget* mpStoreTileBannerWidget;                            // 0x0270 (size: 0x8)
    class UBoxCostUserButton* mpPurchaseCollectionHCButton;                           // 0x0278 (size: 0x8)
    class UBoxCostUserButton* mpPurchaseCollectionSCButton;                           // 0x0280 (size: 0x8)
    FString mPageID;                                                                  // 0x0288 (size: 0x10)
    class UStoreScreen* mpOwningStoreScreen;                                          // 0x0298 (size: 0x8)
    TArray<int32> mContainedRowRange;                                                 // 0x02A0 (size: 0x10)

    void SetupPurchaseCollectionNavigation();
    void SetTileTitle(FText Title);
    void SetPageID(FString pageID);
    void SetOwningStoreScreen(class UStoreScreen* pStoreScreen);
    void SetContainedRowRange(TArray<int32> NewValue);
    void SetCollectionExpiry(FUtcDateTime NewTime);
    void RefreshPurchaseCollectionCost();
    void RefreshPurchaseCollectionButton();
    void OnPurchaseCollectionSCPressed();
    void OnPurchaseCollectionHCPressed();
    int32 GetContainedRowCount();
    TArray<class UNavButton*> GetAllNavButtons();
}; // Size: 0x2B0

class UStoreDebugWidget : public UUserWidget
{
    class UButton* mpPreviousWeekButton;                                              // 0x0260 (size: 0x8)
    class UButton* mpNextWeekButton;                                                  // 0x0268 (size: 0x8)
    class UButton* mpPreviousDayButton;                                               // 0x0270 (size: 0x8)
    class UButton* mpNextDayButton;                                                   // 0x0278 (size: 0x8)
    class UButton* mpPreviewStoreButton;                                              // 0x0280 (size: 0x8)
    class UTextBlock* mpDateText;                                                     // 0x0288 (size: 0x8)
    FDateTime mCurrentDateTime;                                                       // 0x0290 (size: 0x8)

    void RefreshDateText();
    void OnPreviousWeekPressed();
    void OnPreviousDayPressed();
    void OnPreviewStorePressed();
    void OnNextWeekPressed();
    void OnNextDayPressed();
    void ChangeDate(int32 days);
}; // Size: 0x298

class UStoreItemContentsLargeTile : public UUserWidget
{
    class UImage* mpItemImage;                                                        // 0x0260 (size: 0x8)
    class UBorder* mpItemRarityBorder;                                                // 0x0268 (size: 0x8)
    class UTextBlock* mpRarityText;                                                   // 0x0270 (size: 0x8)
    class UTextBlock* mpItemNameText;                                                 // 0x0278 (size: 0x8)
    class UTextBlock* mpItemTypeText;                                                 // 0x0280 (size: 0x8)
    class UNavButton* mpNavButton;                                                    // 0x0288 (size: 0x8)

    void PopulateData(FGrantable Grantable);
    void DoTick();
}; // Size: 0x290

class UStoreItemContentsPreviewMenuScreen : public UBaseScreen
{
    FVector2D mPrizeStyleTileSize;                                                    // 0x02C0 (size: 0x8)
    FVector2D mDioramaStyleTileSize;                                                  // 0x02C8 (size: 0x8)
    float mStickerTileSizeMultiplier;                                                 // 0x02D0 (size: 0x4)
    class UTextBlock* mpTitleText;                                                    // 0x02D8 (size: 0x8)
    class UTextBlock* mpDescriptionText;                                              // 0x02E0 (size: 0x8)
    FText mCurrentlyDisplayHeaderTitle;                                               // 0x02E8 (size: 0x18)
    class UTexture2D* mpCurrentlyDisplayedHeaderTexture;                              // 0x0300 (size: 0x8)
    TArray<class UNavButton*> mpGeneratedItemButtons;                                 // 0x0308 (size: 0x10)
    class UBorder* mpItemRarityBorder;                                                // 0x0318 (size: 0x8)
    class UTextBlock* mpItemRarityText;                                               // 0x0320 (size: 0x8)
    class UTextBlock* mpItemNameText;                                                 // 0x0328 (size: 0x8)
    class UImage* mpItemImage;                                                        // 0x0330 (size: 0x8)
    class URichTextBlock* mpItemDescriptionText;                                      // 0x0338 (size: 0x8)
    class UScrollBox* mpPrizeStyleGeneratedContentScrollBox;                          // 0x0340 (size: 0x8)
    class UScrollBox* mpDioramaStyleGeneratedContentScrollBox;                        // 0x0348 (size: 0x8)
    class UAnimatedSnapNavScrollBox* mpListStyleGeneratedContentScrollBox;            // 0x0350 (size: 0x8)
    TArray<class UStoreItemContentsLargeTile*> mCurrentlyGeneratedListTiles;          // 0x0358 (size: 0x10)
    class UHorizontalBox* mpListStyleGeneratedContentBox;                             // 0x0368 (size: 0x8)
    class UButton* mpListStyleLeftButton;                                             // 0x0370 (size: 0x8)
    class UButton* mpListStyleRightButton;                                            // 0x0378 (size: 0x8)
    TSubclassOf<class UStoreItemContentsTile> mItemTileClass;                         // 0x0380 (size: 0x8)
    TSubclassOf<class UStoreItemContentsScrollTile> mScrollTileClass;                 // 0x0388 (size: 0x8)
    TSubclassOf<class UStoreItemContentsLargeTile> mListStyleTileClass;               // 0x0390 (size: 0x8)
    class UWidgetSwitcher* mpStyleSwitcher;                                           // 0x0398 (size: 0x8)
    class UCanvasPanel* mpPrizeBoxStyleCanvas;                                        // 0x03A0 (size: 0x8)
    class UCanvasPanel* mpDioramaStyleCanvas;                                         // 0x03A8 (size: 0x8)
    class UCanvasPanel* mpListStyleCanvas;                                            // 0x03B0 (size: 0x8)
    class UWidgetAnimation* mpSKUPostPurchaseIntro;                                   // 0x03B8 (size: 0x8)
    int32 mMaxNumItemColumns;                                                         // 0x03C0 (size: 0x4)
    TArray<FGrantable> mCurrentlyDisplayedGrantables;                                 // 0x03C8 (size: 0x10)
    TArray<class UNavButton*> mAllItemButtons;                                        // 0x03D8 (size: 0x10)

    void SetNavigationHeaderAndImage(FText newText, class UTexture2D* pNewTexture);
    void PopulateMovieContentsForCharacter(FGrantable characterGrantable);
    void PopulateListStyleData(TArray<FGrantable> Grantables);
    void PopulateDioramaStyleData(TArray<FGrantable> Grantables, FString sku);
    void PlaySKUPostPurchaseIntroAnimation();
    void OnListStyleRightButtonPressed();
    void OnListStyleLeftButtonPressed();
    void OnItemTileSelected(FString tileGUID);
    bool IsCurrentlyListStyle();
    int32 GetTotalHCInMovieState(FMovieState movie);
    int32 GetTotalHCInGrantables(TArray<FGrantable> Grantables);
    TArray<FGrantable> GetTagMapForGrantableList(TArray<FGrantable> grantableList, TArray<FText>& outTags, TArray<EStoreTagType>& outTypes);
    FText GetRewardHeaderForMovie(FMovieState movie);
    EFaction GetMainFactionFromMovie(FMovieState movie);
    FText GetFormattedRewardsTitle(TArray<FGrantable> rewards, FString skuDataName);
    class UStoreItemContentsTile* CreateTile(class UStoreItemContentsScrollTile* pTargetScrollTile, int32 TileIndex);
    class UStoreItemContentsLargeTile* CreateNewListStyleTile();
}; // Size: 0x3F8

class UStoreItemContentsScrollTile : public UUserWidget
{
    class UUniformGridPanel* mpGeneratedItemsPanel;                                   // 0x0260 (size: 0x8)
    class UTextBlock* mpHeaderText;                                                   // 0x0268 (size: 0x8)

}; // Size: 0x270

class UStoreItemContentsTile : public UBaseUserButton
{
    class UImage* mpItemImage;                                                        // 0x0478 (size: 0x8)
    class UTextBlock* mpItemNameText;                                                 // 0x0480 (size: 0x8)
    class UStoreItemTileTag* mpTileTag;                                               // 0x0488 (size: 0x8)
    FColor mTeenTagColor;                                                             // 0x0490 (size: 0x4)
    FColor mEvilTagColor;                                                             // 0x0494 (size: 0x4)
    FColor mAllCharactersTagColor;                                                    // 0x0498 (size: 0x4)

    void SetImageBrushSize(FVector2D ImageSize);
    void SetImage(class UTexture2D* pTex);
    void PopulateData(FText ItemName, FText itemTag, EStoreTagType tagType);
}; // Size: 0x4A0

class UStoreItemListWidget : public UBaseItemList
{
}; // Size: 0x428

class UStoreItemTile : public UStoreItemTile_Base
{
    class UTextBlock* mpItemNameText;                                                 // 0x0540 (size: 0x8)
    class UImage* mpItemNameIcon;                                                     // 0x0548 (size: 0x8)
    class UTextBlock* mpStandardPurchasePrice_HC_Text;                                // 0x0550 (size: 0x8)
    class UTextBlock* mpStandardPurchasePrice_RC_Text;                                // 0x0558 (size: 0x8)
    class UTextBlock* mpStandardPurchasePrice_SC_Text;                                // 0x0560 (size: 0x8)
    class UImage* mpTileBackgroundImage;                                              // 0x0568 (size: 0x8)
    class UImage* mpTileForegroundImage;                                              // 0x0570 (size: 0x8)
    class UScaleBox* mpForegroundScaleBox;                                            // 0x0578 (size: 0x8)
    class UImage* mpCurrencyImage;                                                    // 0x0580 (size: 0x8)
    class UVerticalBox* mpItemInfoBox;                                                // 0x0588 (size: 0x8)
    class UBorder* mpBundleQuantityBorder;                                            // 0x0590 (size: 0x8)
    class UTextBlock* mpBundleQuantityText;                                           // 0x0598 (size: 0x8)
    class UBorder* mpPurchasedOverlay;                                                // 0x05A0 (size: 0x8)
    class UBorder* mpItemRarityBorder;                                                // 0x05A8 (size: 0x8)
    class UTextBlock* mpItemCategoryText;                                             // 0x05B0 (size: 0x8)
    class UImage* mpBackgroundOverlayImage;                                           // 0x05B8 (size: 0x8)
    class UScaleBox* mpBackgroundOverlayScaleBox;                                     // 0x05C0 (size: 0x8)
    class USpacer* mpForegroundScaleSpacer_0;                                         // 0x05C8 (size: 0x8)
    class USpacer* mpForegroundScaleSpacer_1;                                         // 0x05D0 (size: 0x8)
    class UWidgetSwitcher* mpPriceWidgetSwitcher;                                     // 0x05D8 (size: 0x8)
    class UWidgetSwitcher* mpStandardPurchasePriceHCSwitcher;                         // 0x05E0 (size: 0x8)
    class UBorder* mpStandardPurchasePrice_SCBorder;                                  // 0x05E8 (size: 0x8)
    class UBorder* mpStandardPurchasePrice_HCBorder;                                  // 0x05F0 (size: 0x8)
    class UBorder* mpStandardPurchasePrice_RCBorder;                                  // 0x05F8 (size: 0x8)
    class UBorder* mpOwnedBorder;                                                     // 0x0600 (size: 0x8)
    class UHorizontalBox* mpBlipBox;                                                  // 0x0608 (size: 0x8)
    class UBorder* mpNonFocusedBorder;                                                // 0x0610 (size: 0x8)
    int32 mRowIndex;                                                                  // 0x0618 (size: 0x4)
    EStoreItemTileSize mTileSize;                                                     // 0x061C (size: 0x1)
    class UStoreTileBannerWidget* mpBannerWidget;                                     // 0x0620 (size: 0x8)
    class UImage* mpRadialLightImage;                                                 // 0x0628 (size: 0x8)
    class UWidgetSwitcher* mpItemTitleWidgetSwitcher;                                 // 0x0630 (size: 0x8)
    class UVerticalBox* mpStandardItemTitleBox;                                       // 0x0638 (size: 0x8)
    class UBorder* mpOwnedPurchasePriceWidget;                                        // 0x0640 (size: 0x8)
    class UOverlay* mpStandardPurchasePriceWidget;                                    // 0x0648 (size: 0x8)
    class UScaleBox* mpItemMissingBox;                                                // 0x0650 (size: 0x8)
    class USizeBox* mpHCItemTitleBox;                                                 // 0x0658 (size: 0x8)
    class UTextBlock* mpHCItemTitleText;                                              // 0x0660 (size: 0x8)
    class UOverlay* mpHCPurchasingPriceWidget;                                        // 0x0668 (size: 0x8)
    class UTextBlock* mpHCRealCurrencyText;                                           // 0x0670 (size: 0x8)
    class UImage* mpHCPriceBadgeImage;                                                // 0x0678 (size: 0x8)
    class UOverlay* mpPrizePackPriceWidget;                                           // 0x0680 (size: 0x8)
    class USizeBox* mpPrizePackTitleBox;                                              // 0x0688 (size: 0x8)
    class UTextBlock* mpPrizePackPriceText;                                           // 0x0690 (size: 0x8)
    class UTextBlock* mpPrizePackTitleText;                                           // 0x0698 (size: 0x8)
    class UBorder* mpPrizePackRarityBorder;                                           // 0x06A0 (size: 0x8)
    class UTexture2D* mpOverrideForegroundImage;                                      // 0x06A8 (size: 0x8)
    class UTexture2D* mpOverrideBackgroundImage;                                      // 0x06B0 (size: 0x8)
    FColor mOverrideBackgroundTint;                                                   // 0x06B8 (size: 0x4)
    class UTexture2D* mpBackgroundOverlayOverride;                                    // 0x06C0 (size: 0x8)
    float mBackgroundOverlayOverrideOpacity;                                          // 0x06C8 (size: 0x4)
    bool mbBackgroundOverlayScaleToFill;                                              // 0x06CC (size: 0x1)
    bool mbHideRadialLight;                                                           // 0x06CD (size: 0x1)
    FText mItemNameOverride;                                                          // 0x06D0 (size: 0x18)
    bool mbShowItemNameIcon;                                                          // 0x06E8 (size: 0x1)
    FText mItemCategoryOverride;                                                      // 0x06F0 (size: 0x18)
    EItemRarity mItemRarityOverride;                                                  // 0x0708 (size: 0x1)
    bool mbUseItemRarityOverride;                                                     // 0x0709 (size: 0x1)
    bool mbGoToStaticImageScreen;                                                     // 0x070A (size: 0x1)
    float mForegroundSpacerSizeOverride;                                              // 0x070C (size: 0x4)
    float mForegroundSpacerSizeRatio;                                                 // 0x0710 (size: 0x4)
    bool mbUseForegroundSpacerSizeOverride;                                           // 0x0714 (size: 0x1)
    bool mbDisplayItemNameInHCPurchasingFormat;                                       // 0x0715 (size: 0x1)
    bool mbDisplayItemNameInFoundersPackFormat;                                       // 0x0716 (size: 0x1)
    bool mbDisplayItemNameInPrizePackFormat;                                          // 0x0717 (size: 0x1)
    EStoreItemTileSize mTileSizeOverride;                                             // 0x0718 (size: 0x1)
    FText mBannerMessageOverride;                                                     // 0x0720 (size: 0x18)
    FColor mBannerColorOverride;                                                      // 0x0738 (size: 0x4)
    bool mbUseBannerColorOverride;                                                    // 0x073C (size: 0x1)
    FSlateColor mBannerTextColorOverride;                                             // 0x0740 (size: 0x28)
    bool mbUseBannerTextColorOverride;                                                // 0x0768 (size: 0x1)
    FSlateColor mFoundersPackTextColor;                                               // 0x0770 (size: 0x28)
    class UTexture2D* mpHCPriceBadgeTexture;                                          // 0x0798 (size: 0x8)

    void SetTileSizeType(EStoreItemTileSize Size);
    void SetNameText(const FText& newText);
    void SetExpiryTime(FUtcDateTime NewTime);
    void SetBannerVisibility(bool bNewValue);
    void SetBackgroundTint(FColor Color);
    void SetBackgroundImageResource(class UObject* pObj);
    void RefreshTileOverrides();
    void RefreshFormattingSwitcher();
    void PopulatePrizePackData(FStoreItemDataExtras_PrizePack Data);
    void OnTextureLoaded(class UTexture2D* pTex);
    int32 GetRowIndex();
    class UStoreTileBannerWidget* GetBannerWidget();
    void FindSyncWidgets();
}; // Size: 0x7B0

class UStoreItemTileSlideShow : public UStoreItemTile_Base
{
    class UWidgetSwitcher* mpWidgetSwitcher;                                          // 0x0540 (size: 0x8)
    class UStoreScreen* mpOwnerStoreScreen;                                           // 0x0548 (size: 0x8)
    float mSlideTimer;                                                                // 0x0550 (size: 0x4)
    TArray<class UTexture2D*> mAllSlideTextures;                                      // 0x0558 (size: 0x10)
    TArray<FText> mTitlesBySlide;                                                     // 0x0568 (size: 0x10)
    TArray<FString> mCommandsBySlide;                                                 // 0x0578 (size: 0x10)
    class UTextBlock* mpTitleText;                                                    // 0x0588 (size: 0x8)
    class USizeBox* mpTileSizeBox;                                                    // 0x0590 (size: 0x8)
    FVector2D mTileSize;                                                              // 0x0598 (size: 0x8)
    float mSectionSpacerSize;                                                         // 0x05A0 (size: 0x4)
    TSubclassOf<class UStoreItemTileSlideShowSection> mSectionClass;                  // 0x05A8 (size: 0x8)
    TArray<class UStoreItemTileSlideShowSection*> mGeneratedSectionList;              // 0x05B0 (size: 0x10)
    class UHorizontalBox* mpGeneratedSectionsBox;                                     // 0x05C0 (size: 0x8)

    void SynchronizeProperties();
    void SetSlideshowTileSize(FVector2D newSize);
    void SetOwnerStoreScreen(class UStoreScreen* mpScreen);
    void ResetWidgetStates();
    void PopulateSlideshowData(FStoreItemDataExtras_Fake_Slideshow Data);
    void PopulateIndex(int32 Index);
    void OnSectionIndexPressed(int32 Index);
    void OnBlipPressed(int32 Index);
    void FindSyncWidgets();
    void AddNewStoreTile(class UStoreItemTile* newTile);
}; // Size: 0x5C8

class UStoreItemTileSlideShowBlip : public UUserWidget
{
    class UNavButton* mpButton;                                                       // 0x0260 (size: 0x8)
    class UWidgetSwitcher* mpWidgetSwitcher;                                          // 0x0268 (size: 0x8)
    class UStoreItemTile* mpOwnerStoreTile;                                           // 0x0270 (size: 0x8)
    int32 mBlipIndex;                                                                 // 0x0278 (size: 0x4)

    void SetOwnerStoreTile(class UStoreItemTile* Tile, int32 Index);
    void SetBlipState(bool bOn);
    void OnPressed();
    void NativeConstruct();
}; // Size: 0x280

class UStoreItemTileSlideShowSection : public UUserWidget
{
    float mCurrentSectionWidth;                                                       // 0x0260 (size: 0x4)
    class UImage* mpProgressBarImage;                                                 // 0x0268 (size: 0x8)
    class UTextBlock* mpSectionHoveredText;                                           // 0x0270 (size: 0x8)
    class UTextBlock* mpSectionUnHoveredText;                                         // 0x0278 (size: 0x8)
    class UButton* mpSectionButton;                                                   // 0x0280 (size: 0x8)
    class UStoreItemTileSlideShow* mpOwningSlideshow;                                 // 0x0288 (size: 0x8)
    int32 mSectionIndex;                                                              // 0x0290 (size: 0x4)
    bool mbIsActiveSection;                                                           // 0x0294 (size: 0x1)
    class UWidgetSwitcher* mpWidgetSwitcher;                                          // 0x0298 (size: 0x8)

    void SetSectionTitle(FText Title);
    void SetPercentage(float percent);
    void SetOwningSlideshow(class UStoreItemTileSlideShow* pValue, int32 Index);
    void SetIsActiveSection(bool bNewValue);
    void OnPressed();
    void DoTick();
}; // Size: 0x2A0

class UStoreItemTileTag : public UUserWidget
{
    class UTextBlock* mpItemTagText;                                                  // 0x0260 (size: 0x8)
    class UImage* mpItemTagImage;                                                     // 0x0268 (size: 0x8)
    FColor mTeenTagColor;                                                             // 0x0270 (size: 0x4)
    FColor mEvilTagColor;                                                             // 0x0274 (size: 0x4)
    FColor mAllCharactersTagColor;                                                    // 0x0278 (size: 0x4)

    void PopulateData(FText Title, EStoreTagType tagType);
}; // Size: 0x280

class UStoreItemTileWidget : public UBaseItemTile
{
    class UTextBlock* mpTitleText;                                                    // 0x03D0 (size: 0x8)
    class UCanvasPanel* mpCostPanel;                                                  // 0x03D8 (size: 0x8)
    class UTextBlock* mpCostText;                                                     // 0x03E0 (size: 0x8)

}; // Size: 0x3E8

class UStoreItemTile_Base : public UBaseUserButton
{
    class UStoreScreen* mpStoreScreenOwner;                                           // 0x0478 (size: 0x8)
    FStoreItemTileData mCurrentStoreItemTileData;                                     // 0x0480 (size: 0xA0)
    FText mGUIDOverride;                                                              // 0x0520 (size: 0x18)
    int32 mCurrentSubColumn;                                                          // 0x0538 (size: 0x4)
    int32 mCurrentSubRow;                                                             // 0x053C (size: 0x4)

    void ShowAsPurchased();
    void SetSubRowAndColumn(int32 subRow, int32 subCol);
    void SetStoreScreenOwner(class UStoreScreen* pOwner);
    void PopulateData(FStoreItemTileData newData);
    void OnOwningPageOpened();
    EStoreItemTileSize GetTileSizeType();
    int32 GetSubRow();
    int32 GetSubColumn();
    FStoreItemTileData GetStoreItemTileData();
}; // Size: 0x540

class UStoreItemTile_FoundersPack : public UStoreItemTile_Base
{
    int32 mFoundersPackDataIndex;                                                     // 0x0540 (size: 0x4)
    class UTexture2D* mpItemTexture;                                                  // 0x0548 (size: 0x8)
    class UTexture2D* mpGlowTexture;                                                  // 0x0550 (size: 0x8)
    FSlateColor mTextColor;                                                           // 0x0558 (size: 0x28)
    class UWidgetAnimation* mpFoundersPackHoverAnimation;                             // 0x0580 (size: 0x8)
    class UTextBlock* mpTitleText;                                                    // 0x0588 (size: 0x8)
    class UImage* mpItemImage;                                                        // 0x0590 (size: 0x8)
    class UTextBlock* mpPriceText;                                                    // 0x0598 (size: 0x8)
    class UImage* mpPriceBackground;                                                  // 0x05A0 (size: 0x8)
    bool mbIsItemTileHovered;                                                         // 0x05A8 (size: 0x1)
    class UWidgetSwitcher* mpPurchasedStateSwitcher;                                  // 0x05B0 (size: 0x8)

    void PopulateFoundersPackData();
    void PlayHoverAnimation(bool bReverse);
    void NativeConstruct();
    void FindSyncWidgets();
}; // Size: 0x5B8

class UStoreItemTile_StreakReward : public UStoreItemTile
{
    class UTextBlock* mpStreakDayText;                                                // 0x07B0 (size: 0x8)
    class UTextBlock* mpRewardAmountText;                                             // 0x07B8 (size: 0x8)
    class UTextBlock* mpClaimText;                                                    // 0x07C0 (size: 0x8)
    class UBorder* mpClaimedBorder;                                                   // 0x07C8 (size: 0x8)
    class UBorder* mpClaimRewardBorder;                                               // 0x07D0 (size: 0x8)
    FStoreItemDataExtras_Streak mCurrentlyHeldStreakData;                             // 0x07D8 (size: 0x28)
    class UTextBlock* mpStreakBonusText;                                              // 0x0800 (size: 0x8)
    class UTexture2D* mpClaimedButtonBorderImage;                                     // 0x0808 (size: 0x8)

    void PopulateStreakData(FStoreItemDataExtras_Streak Data);
}; // Size: 0x810

class UStoreManager : public UObject
{
    bool mbWaitingOnStoreDiscovery;                                                   // 0x0028 (size: 0x1)
    bool mbPendingStoreDiscovery;                                                     // 0x0029 (size: 0x1)
    bool mbWaitingOnSpecificStoreDiscovery;                                           // 0x002A (size: 0x1)
    bool mbPendingSpecificStoreDiscovery;                                             // 0x002B (size: 0x1)
    FString mSpecificStoreDiscoveryDate;                                              // 0x0030 (size: 0x10)
    TArray<FStoreItemData> mStoreItems;                                               // 0x0040 (size: 0x10)
    TArray<FStoreSKUData> mSKUData;                                                   // 0x0050 (size: 0x10)
    TArray<FStorePageStruct> mPageData;                                               // 0x0060 (size: 0x10)
    TArray<FStoreItemDataExtras_Streak> mLastParsedStreakData;                        // 0x0070 (size: 0x10)
    int32 mCurrentStoreTimeOffset;                                                    // 0x0080 (size: 0x4)
    bool mbPendingItemPurchase;                                                       // 0x0084 (size: 0x1)
    bool mbWaitingOnItemPurchase;                                                     // 0x0085 (size: 0x1)
    bool mbPurchaseSuccess;                                                           // 0x0086 (size: 0x1)
    TArray<FString> mSlotIDsToPurchase;                                               // 0x0088 (size: 0x10)
    TArray<int32> mPurchaseOptionIndices;                                             // 0x0098 (size: 0x10)
    class UBusyModalWidget* mpPurchasingModal;                                        // 0x00A8 (size: 0x8)
    class UBusyModalWidget* mpRefreshModal;                                           // 0x00B0 (size: 0x8)
    bool mbWaitingOnPurchaseConfirmation;                                             // 0x00B8 (size: 0x1)
    bool mbConfirmingPurchaseWithHC;                                                  // 0x00B9 (size: 0x1)
    TArray<FString> mConfirmingSlotIDs;                                               // 0x00C0 (size: 0x10)
    TArray<int32> mConfirmingOptionIndices;                                           // 0x00D0 (size: 0x10)
    TArray<int32> mConfirmingExpectedCosts;                                           // 0x00E0 (size: 0x10)
    bool mbBuyPPInstead;                                                              // 0x0100 (size: 0x1)
    bool mbPendingChestDiscovery;                                                     // 0x0101 (size: 0x1)
    bool mbWaitingOnChestDiscovery;                                                   // 0x0102 (size: 0x1)
    bool mbPendingEntitlementChestClaim;                                              // 0x0103 (size: 0x1)
    bool mbWaitingOnEntitlementChestClaim;                                            // 0x0104 (size: 0x1)
    bool mbWaitingOnSteamBeginMicroTxn;                                               // 0x0105 (size: 0x1)
    bool mbPendingSteamBeginMicroTxn;                                                 // 0x0106 (size: 0x1)
    bool mbWaitingOnSteamFinishMicroTxn;                                              // 0x0107 (size: 0x1)
    bool mbPendingSteamFinishMicroTxn;                                                // 0x0108 (size: 0x1)
    TArray<FSteamMicroTxnItemStruct> mPendingMicroTxnItems;                           // 0x0110 (size: 0x10)
    bool mbSteamPostMicroTxnDataValid;                                                // 0x0120 (size: 0x1)
    bool mbSteamPostMicroTxnSuccess;                                                  // 0x0121 (size: 0x1)
    FString mSteamPostMicroTxnOrderId;                                                // 0x0128 (size: 0x10)
    bool mbWaitingOnSteamDLCOverlayClosed;                                            // 0x0138 (size: 0x1)
    bool mbWaitingOnPostOverlayDLCSync;                                               // 0x0139 (size: 0x1)
    bool mbWaitingOnSteamSyncDLC;                                                     // 0x013A (size: 0x1)
    bool mbPendingSteamSyncDLC;                                                       // 0x013B (size: 0x1)
    FString mCurrentSteamAuthSessionTicket;                                           // 0x0140 (size: 0x10)
    uint32 mCurrentHAuthTicket;                                                       // 0x0150 (size: 0x4)
    class UBusyModalWidget* mpSteamOverlayBusyModal;                                  // 0x0158 (size: 0x8)
    class UBusyModalWidget* mpEpicOverlayBusyModal;                                   // 0x0160 (size: 0x8)
    FString mCurrentStoreDataGUID;                                                    // 0x0168 (size: 0x10)
    bool mbHasStoreDataBeenRetrieved;                                                 // 0x0178 (size: 0x1)
    TMap<FString, int32> mExpectedCostByPointType;                                    // 0x0180 (size: 0x50)
    class UDataTable* mStoreBundleDataTable;                                          // 0x01D0 (size: 0x8)
    class UDataTable* mStoreCatalogDataTable;                                         // 0x01D8 (size: 0x8)
    bool mbHasEpicOffersPendingForRedemption;                                         // 0x01E0 (size: 0x1)
    FString mEpicPendingOfferUserID;                                                  // 0x01E8 (size: 0x10)
    TArray<FString> mPendingEpicOffersToRedeem_ValidationInfo;                        // 0x01F8 (size: 0x10)
    TArray<FString> mPendingEpicOffersToRedeem_UniqueIds;                             // 0x0208 (size: 0x10)
    bool mbLookForNewEpicRecipts;                                                     // 0x0218 (size: 0x1)
    bool mbReceiptQueryInProgress;                                                    // 0x0219 (size: 0x1)
    bool mbWaitingOnEpicRedeemEntitlement;                                            // 0x021A (size: 0x1)
    bool mbPointRefreshCompleted;                                                     // 0x021B (size: 0x1)
    bool mbInventoryRefreshCompleted;                                                 // 0x021C (size: 0x1)
    bool mbChestRefreshCompleted;                                                     // 0x021D (size: 0x1)
    bool mbWaitingOnPostPurchaseRefreshes;                                            // 0x021E (size: 0x1)
    bool mbPerformingOnLoginEntitlementCheck;                                         // 0x021F (size: 0x1)
    bool mbHasCompletedLoginEntitlementCheck;                                         // 0x0220 (size: 0x1)
    TArray<FGrantable> mLoginGrantablesToParse;                                       // 0x0228 (size: 0x10)
    FUtcDateTime mTimeDataValidUntil;                                                 // 0x0238 (size: 0x4)
    FString mNextDayStoreGUID;                                                        // 0x0240 (size: 0x10)

    void UseNextDayStoreData();
    void UpdateSteamOverlayCallbacks();
    void UpdatePostPurchaseRefreshes();
    void UpdateEpicCallbacks();
    bool ShouldBuyPPInstead();
    void SetStoreDataByGUID(FString itemGUID, FStoreItemData Data);
    void SetSKUDataBySKU(FStoreSKUData newData);
    void RecordAnalytics(FStoreItemData& boughtItem);
    void QueueStoreRefresh();
    void QueueSteamSyncDLC();
    void QueueLoginEntitlementCheck();
    void QueueClaimEntitlementChests();
    void QueueChestRefresh();
    void QueueBeginSteamMicroTxn(TArray<FSteamMicroTxnItemStruct> Items);
    void QueueBeginSteamDLCPurchase(FStoreSKUData Data);
    void PopulateEpicStoreOffers();
    void ParseCachedLoginGrantables();
    void OnSteamSyncDLCComplete(bool bFoundNewDLC);
    void OnPurchaseSuccessPressed();
    void OnPurchaseInventoryRefreshFinished();
    void OnPurchaseInventoryChestRefreshFinished();
    void OnPurchaseFinished(bool bSuccess, EBackendErrorCode ErrorCode);
    void OnPurchaseConfirmed();
    void OnPurchaseCancelled();
    void OnLogout();
    void OnLoginEntitlementCheckComplete(bool bFoundEntitlements);
    void OnInventoryPointRefreshFinished();
    void OnAllPostPurchaseRefreshesComplete();
    bool IsStoreItemDataOwned(FStoreItemData storeData);
    bool IsStoreDataOutOfDate();
    bool IsItemIDInStore(FDbItemId ItemId);
    int32 InsertPageDataIntoArray(FStorePageStruct newData, TArray<FStorePageStruct>& pageArray);
    bool HasValidNextDayStoreData();
    bool HasStoreInfoBeenRetrieved();
    bool HasLoginGrantablesReadyForParse();
    bool HasCompletedLoginEntitlementCheck();
    void HandleBackendRequests();
    FUtcDateTime GetTimeValidUntil();
    FString GetStringForRealMoneyStoreType(EStoreRealMoneyStoreType storeType);
    EStreakRewardTimeFrame GetStreakRewardTimeframeFromString(FString str);
    FStoreItemData GetStoreItemInfoByGUID(FString itemGUID);
    FString GetStoreItemGUIDFromName(FString Name);
    FString GetStoreDioramaLevelFromTitle(FText Title);
    FText GetStoreCategoryTitleForItem(EUISlot uiSlot, EPlayerSlot playerSlot, EDbItemType dbItemType);
    FSteamMicroTxnItemStruct GetSteamMicroTxnDataFromSKUData(class UWorld* pWorld, FStoreSKUData Data);
    FStoreSKUData GetSKUDataBySKU(FString skuName);
    FString GetSKUByContainedGrantable(FGrantable Token);
    FString GetSingleItemGUID(FDbItemId ItemId);
    EStoreRealMoneyStoreType GetRealMoneyStoreTypeForString(FString str);
    void GetPriceInfoFromString(FString inString, int32& originalPrice, int32& modifiedPrice);
    FStorePageStruct GetPageStructByName(FString pageName, TArray<FStorePageStruct> pageData);
    TArray<FStorePageStruct> GetPageData();
    FUtcDateTime GetNextUTCMidnight();
    FString GetNewestParsedStoreGUID();
    FText GetGenericPrizePackTitle(TMap<EFaction, int32> PrizePackData, ESeasonalEventType seasonalEventType);
    FText GetFormattedPrizePackTitle(TMap<EFaction, int32> PrizePackData, ESeasonalEventType seasonalEventType);
    FString GetFirstGUIDContainingItem(FDbItemId ItemId);
    FUtcDateTime GetCurrentStoreTime();
    EStoreRealMoneyStoreType GetCurrentRealMoneyStoreType();
    ECurrencyType GetCurrencyTypeFromString(FString str);
    void GetComputedPriceOfStoreItemData(bool bInHC, FStoreItemData Data, int32& finalPrice, int32& originalPrice, bool& bCostValid);
    EStoreCommandGrantableType GetCommandGrantableTypeFromString(FString str);
    TArray<FStoreItemData> GetAllStoreItems();
    TArray<FStoreItemData> GetAllStoreDataForPage(FString pageName);
    TArray<FStoreSKUData> GetAllSKUDataOfType(EStoreSKUDataType skuType);
    TArray<FStoreSKUData> GetAllSKUData();
    TArray<FString> GetAllGUIDsContainingItem(FDbItemId ItemId);
    TArray<FGrantable> GetAllContainedGrantablesForSKUData(FStoreSKUData skuData, bool bIncludeContainedSKUs, bool bFilterOutOwnedSKUS);
    void FindNextRequiredRefreshTime(int32 serverTime);
    TArray<FGrantable> FilterPointsInGrantableArray(TArray<FGrantable> Grantables, TArray<EPointType> typesToRemove);
    void DoTick(float DeltaTime);
    void DiscoverDataForSpecificDate(FDateTime DateTime);
    TArray<FGrantable> CompressPointsInGrantableArray(TArray<FGrantable> Grantables);
    void ClearStoreData();
    void ClearPurchaseConfirmationData();
    void AttemptSKUDataPurchase(FStoreSKUData Data);
}; // Size: 0x2B0

class UStorePreviewMenuScreen : public UBaseScreen
{
    FString mCurrentlyDisplayedStoreGUID;                                             // 0x02E0 (size: 0x10)
    class UImage* mpItemImage;                                                        // 0x02F0 (size: 0x8)
    class UBorder* mpItemBorderBackground;                                            // 0x02F8 (size: 0x8)
    class UTextBlock* mpItemNameText;                                                 // 0x0300 (size: 0x8)
    class URichTextBlock* mpDescriptionText;                                          // 0x0308 (size: 0x8)
    class UTextBlock* mpFlavourText;                                                  // 0x0310 (size: 0x8)
    class UHorizontalBox* mpTagsBox;                                                  // 0x0318 (size: 0x8)
    class UTextBlock* mpRarityText;                                                   // 0x0320 (size: 0x8)
    class UBorder* mpRarityBorder;                                                    // 0x0328 (size: 0x8)
    class USpacer* mpRarityBorderTimerSpacer;                                         // 0x0330 (size: 0x8)
    class UStoreItemTileTag* mpItemPreviewCharacterTag;                               // 0x0338 (size: 0x8)
    class UUniformGridPanel* mpGeneratedItemsPanel;                                   // 0x0340 (size: 0x8)
    TArray<class UNavButton*> mpGeneratedItemButtons;                                 // 0x0348 (size: 0x10)
    class UBoxCostUserButton* mpPurchaseWithSCButton;                                 // 0x0358 (size: 0x8)
    class UBoxCostUserButton* mpPurchaseWithHCButton;                                 // 0x0360 (size: 0x8)
    class UBoxCostUserButton* mpClaimForFreeButton;                                   // 0x0368 (size: 0x8)
    class UBoxUserButton* mpViewPrizesButton;                                         // 0x0370 (size: 0x8)
    class UBaseUserButton* mpItemPreview_MovieRewardsButton;                          // 0x0378 (size: 0x8)
    class UOverlay* mpItemPreview_BundleDescription_Overlay;                          // 0x0380 (size: 0x8)
    class UTextBlock* mpItemPreview_BundleDescription_Name;                           // 0x0388 (size: 0x8)
    class UTextBlock* mpItemPreview_BundleDescription_Description;                    // 0x0390 (size: 0x8)
    class USizeBox* mpItemImageSizeBox;                                               // 0x0398 (size: 0x8)
    class UVerticalBox* mpItemImageVerticalBox;                                       // 0x03A0 (size: 0x8)
    class UOverlay* mpBundleSection;                                                  // 0x03A8 (size: 0x8)
    EMenuScreen mScreenCameFrom;                                                      // 0x03B0 (size: 0x1)
    float mSpacerSize;                                                                // 0x03B4 (size: 0x4)
    TSubclassOf<class UStoreBundleButton> mPreviewTileClass;                          // 0x03B8 (size: 0x8)
    TSubclassOf<class UStorePreviewScreenLabelWidget> mLabelWidgetClass;              // 0x03C0 (size: 0x8)
    class UUniformGridPanel* mpLabelGridPanel;                                        // 0x03C8 (size: 0x8)
    TArray<class UStorePreviewScreenLabelWidget*> mCurrentLabels;                     // 0x03D0 (size: 0x10)
    int32 mMaxNumLabelColumns;                                                        // 0x03E0 (size: 0x4)
    int32 mMaxNumBundleColumns;                                                       // 0x03E4 (size: 0x4)
    EStoreItemTileType mCurrentlyDisplayedItemTileType;                               // 0x03E8 (size: 0x1)
    TArray<FGrantable> mCurrentlyDisplayedItems;                                      // 0x03F0 (size: 0x10)
    FStoreItemDataExtras_PrizePack mCurrentlyDisplayedPrizePackData;                  // 0x0400 (size: 0x58)
    FStoreSKUData mCurrentlyDisplayedSKUData;                                         // 0x0458 (size: 0xC0)
    FStoreSKUData mLastPurchasedMainSKUData;                                          // 0x0518 (size: 0xC0)
    TArray<FStoreSKUData> mLastPurchasedSubSKUsData;                                  // 0x05D8 (size: 0x10)
    class UTexture2D* mpCurrentlyDisplayedHeaderTexture;                              // 0x05E8 (size: 0x8)
    FText mCurrentlyDisplayHeaderTitle;                                               // 0x05F0 (size: 0x18)
    class UStoreTileBannerWidget* mpItemTimerWidget;                                  // 0x0608 (size: 0x8)
    bool mbShowingIndividualTitles;                                                   // 0x0610 (size: 0x1)
    class UCanvasPanel* mpGradientBacker;                                             // 0x0618 (size: 0x8)
    bool mbClaimFreeUseHCIndex;                                                       // 0x0620 (size: 0x1)
    class UBaseUserButton* mpItemPurchasedLoadoutButton;                              // 0x0628 (size: 0x8)
    class UBaseUserButton* mpItemPurchasedContinueButton;                             // 0x0630 (size: 0x8)
    class UTextBlock* mpItemPurchased_ItemPurchasedText;                              // 0x0638 (size: 0x8)
    class UTextBlock* mpPurchasedItemNameText;                                        // 0x0640 (size: 0x8)
    class UImage* mpItemPurchased_ItemImage;                                          // 0x0648 (size: 0x8)
    bool mbIsSKUPurchaseAnimationActive;                                              // 0x0650 (size: 0x1)
    class UTextBlock* mpSKUBundleTitleText;                                           // 0x0658 (size: 0x8)
    class UTextBlock* mpSKUBundleDescriptionText;                                     // 0x0660 (size: 0x8)
    class UBoxCostUserButton* mpSKUBundleBuyButton;                                   // 0x0668 (size: 0x8)
    class UBaseUserButton* mpSKUBundleViewContentButton;                              // 0x0670 (size: 0x8)
    TArray<class UImage*> mSKUPromoImageList;                                         // 0x0678 (size: 0x10)
    class UWidgetSwitcher* mpScreenStateWidgetSwitcher;                               // 0x0688 (size: 0x8)
    class UOverlay* mpItemPreviewOverlay;                                             // 0x0690 (size: 0x8)
    class UOverlay* mpItemPurchasedOverlay;                                           // 0x0698 (size: 0x8)
    class UOverlay* mpSKUBundlePreviewOverlay;                                        // 0x06A0 (size: 0x8)
    class UOverlay* mpCharacterPreviewOverlay;                                        // 0x06A8 (size: 0x8)
    class UTextBlock* mpCharacterPreview_TitleText;                                   // 0x06B0 (size: 0x8)
    class UTextBlock* mpCharacterPreview_SubtitleText;                                // 0x06B8 (size: 0x8)
    class UTextBlock* mpCharacterPreview_DescriptionText;                             // 0x06C0 (size: 0x8)
    class UBoxCostUserButton* mpCharacterPreview_BuyButton_SC;                        // 0x06C8 (size: 0x8)
    class UBoxCostUserButton* mpCharacterPreview_BuyButton_HC;                        // 0x06D0 (size: 0x8)
    class USpacer* mpCharacterPreview_HCSpacer;                                       // 0x06D8 (size: 0x8)
    class UBoxCostUserButton* mpCharacterPreview_BuyButton_RC;                        // 0x06E0 (size: 0x8)
    class USpacer* mpCharacterPreview_RCSpacer;                                       // 0x06E8 (size: 0x8)
    class UBaseUserButton* mpCharacterPreview_MovieRewardsButton;                     // 0x06F0 (size: 0x8)
    class UTextBlock* mpCharacterPreview_AffinityText;                                // 0x06F8 (size: 0x8)
    class UImage* mpCharacterPreview_AffinityIcon;                                    // 0x0700 (size: 0x8)
    class UHorizontalBox* mpCharacterPreview_GeneratedContentBox;                     // 0x0708 (size: 0x8)
    TSubclassOf<class UStorePreviewScreenPerkWidget> mPerkWidgetClass;                // 0x0710 (size: 0x8)
    TArray<class UStorePreviewScreenPerkWidget*> mGeneratedPerkWidgetList;            // 0x0718 (size: 0x10)
    class UOverlay* mpCharacterPreview_CharacterAffinityOverlay;                      // 0x0728 (size: 0x8)
    FGrantable mCurrentlyDisplayedCharacterGrantable;                                 // 0x0730 (size: 0x88)
    bool mbCurrentlyDisplayingSingleMovieAsBundle;                                    // 0x07B8 (size: 0x1)
    bool mbCharacterPreviewButtonUsingHC;                                             // 0x07B9 (size: 0x1)
    bool mbIgnoreNextCommitChangesReset;                                              // 0x07BA (size: 0x1)

    bool WasLastItemPurchasedCharacter();
    TArray<FGrantable> SortGrantablesByFaction(TArray<FGrantable> grantableArray);
    bool ShouldDisplayBundleWithTags(FString slotDataName);
    bool ShouldDisplayBundleImageAsPostPurchaseImage(TArray<FGrantable> allGrantables);
    void SetScreenStateWidget(class UWidget* pWidg);
    void SetScreenCameFrom(EMenuScreen screen);
    void SetPreviewItems(TArray<FGrantable> itemList);
    void SetNavigationHeaderAndImage(FText newText, class UTexture2D* pNewTexture);
    void SetItemImage(class UTexture2D* pNewTex);
    void SetItemExpiry(FUtcDateTime newDate);
    void QueuePostCharacterPurchaseDiscover();
    bool PopulateDataFromGUID(FString itemGUID);
    void PopulateDataFromGrantableArray(TArray<FGrantable> grantableArray);
    void PopulateDataForCharacter(FStoreItemData storeData);
    void PopulateData(TArray<FGrantable> grantableArray, TArray<EStoreItemTileSize> tileSizeArray);
    void OnViewSKUBundleContentsPressed();
    void OnViewPrizesPressed();
    void OnSKUPurchased(FStoreSKUData purchasedSKU, TArray<FStoreSKUData> otherPurchasedSKUs);
    void OnSKUPurchaseAnimationFinished();
    void OnPurchaseWithSCPressed();
    void OnPurchaseWithRCPressed();
    void OnPurchaseWithHCPressed();
    void OnPurchaseSKUBundlePressed();
    void OnPurchasePressed(bool bWithHC, bool bFree);
    void OnPurchaseLoadoutButtonPressed();
    void OnPurchaseContinueButtonPressed();
    void OnPurchaseCompleted();
    void OnItemTileSelected(FString tileGUID);
    void OnItemPreviewMovieRewardsPressed();
    void OnClaimFreePressed();
    void OnCharacterMovieRewardsPressed();
    bool IsOnSKUPreviewScreen();
    bool IsOnPostPurchaseScreen();
    bool IsOnCharacterPreviewScreen();
    TArray<FString> GetTagsForStoreData(FStoreItemData NewValue);
    TArray<FString> GetTagsForSingleStoreItem(FString ItemId);
    EMenuScreen GetScreenCameFrom();
    TArray<FText> GetRequiredPrerequisitesForItems(TArray<FString> itemList);
    TArray<FGrantable> GetPrizePackContentsFromFaction(EFaction faction, EItemRarity minItemRarity, ESeasonalEventType seasonalEventType);
    void ClearPreviewBackgroundModel();
    TArray<FGrantable> AddEventSpecificPrizesToArray(TArray<FGrantable> prizeArray, EFaction faction, ESeasonalEventType seasonalEventType);
}; // Size: 0x7C0

class UStorePreviewScreenLabelWidget : public UUserWidget
{
    class UTextBlock* mpNameText;                                                     // 0x0260 (size: 0x8)

    void PopulateData(FText ItemName);
}; // Size: 0x268

class UStorePreviewScreenPerkWidget : public UUserWidget
{
    class UImage* mpPerkImage;                                                        // 0x0260 (size: 0x8)
    class UTextBlock* mpPerkNameText;                                                 // 0x0268 (size: 0x8)

    void PopulateData(const class UDbItemTemplate* pPerkTemplate);
}; // Size: 0x270

class UStoreScreen : public UBaseScreen
{
    TArray<FString> mCurrentItemAddress;                                              // 0x02D0 (size: 0x10)
    bool mbHasPopulatedStoreData;                                                     // 0x02E0 (size: 0x1)
    bool mbHasGeneratedPages;                                                         // 0x02E1 (size: 0x1)
    int32 mCurrentPageIndex;                                                          // 0x02E4 (size: 0x4)
    bool mbGeneratedFirstPage;                                                        // 0x02E8 (size: 0x1)
    TArray<class UStoreItemTile_Base*> mAllTiles;                                     // 0x02F0 (size: 0x10)
    TArray<class UStoreItemTile_FoundersPack*> mFoundersPackTiles;                    // 0x0310 (size: 0x10)
    TArray<class UStoreItemTile*> mHCBuyTiles;                                        // 0x0320 (size: 0x10)
    TArray<class UStoreItemTile*> mpCharacterBuyTileList;                             // 0x0330 (size: 0x10)
    class UBaseItemList* mpItemList;                                                  // 0x0340 (size: 0x8)
    class UVerticalBox* mpGeneratedContentBox;                                        // 0x0348 (size: 0x8)
    class UHorizontalBox* mpFoundersPackBox;                                          // 0x0350 (size: 0x8)
    class UCanvasPanel* mpHCContentPanel;                                             // 0x0358 (size: 0x8)
    class UCanvasPanel* mpCharacterContentPanel;                                      // 0x0360 (size: 0x8)
    class UStoreCatalogPanel* mpStoreCatalogPanel;                                    // 0x0368 (size: 0x8)
    TSubclassOf<class UStoreItemTile> mStoreTileClass;                                // 0x0370 (size: 0x8)
    TSubclassOf<class UStoreItemTile> mStoreTileClass_Streak;                         // 0x0378 (size: 0x8)
    TSubclassOf<class UStoreItemTile> mStoreTileClass_Prize;                          // 0x0380 (size: 0x8)
    TSubclassOf<class UStoreItemTileSlideShow> mStoreTileClass_Fake_Slideshow;        // 0x0388 (size: 0x8)
    TSubclassOf<class UStoreSideBarTile> mStoreSideBarTileClass;                      // 0x0390 (size: 0x8)
    TSubclassOf<class UStoreTileBannerWidget> mTileBannerClass;                       // 0x0398 (size: 0x8)
    TMap<class EStoreItemTileSize, class FVector2D> mTileSizesByEnum;                 // 0x03A0 (size: 0x50)
    float mTileSpacerSize;                                                            // 0x03F0 (size: 0x4)
    float mCategorySpacerSize;                                                        // 0x03F4 (size: 0x4)
    float mRowSpacerSize;                                                             // 0x03F8 (size: 0x4)
    int32 mLargeItemTilesPerRow;                                                      // 0x03FC (size: 0x4)
    TArray<class UHorizontalBox*> mCurrentRowList;                                    // 0x0400 (size: 0x10)
    class UTextBlock* mpFrontPageText;                                                // 0x0410 (size: 0x8)
    class UTextBlock* mpBuyCharactersText;                                            // 0x0418 (size: 0x8)
    class UTextBlock* mpBuyHCText;                                                    // 0x0420 (size: 0x8)
    TArray<FStorePageStruct> mCurrentPageList;                                        // 0x0428 (size: 0x10)
    class UButton* mpTemplateSideBarButton;                                           // 0x0438 (size: 0x8)
    class USpacer* mpTemplateSideBarSpacer;                                           // 0x0440 (size: 0x8)
    class UTextBlock* mpContentTitleTextBlock;                                        // 0x0448 (size: 0x8)
    FString mLastSelectedItemGUID;                                                    // 0x0450 (size: 0x10)
    TArray<FColor> mTileBackgroundColorOverrides;                                     // 0x0460 (size: 0x10)
    TMap<class UTexture2D*, class EStoreItemTileSize> mFakeTilesToInsert;             // 0x0470 (size: 0x50)
    TArray<FStoreItemDataExtras_Fake_Slideshow> mSlideShowTilesToInsert;              // 0x04C0 (size: 0x10)
    bool mbWaitingOnRefreshConfirmation;                                              // 0x04D0 (size: 0x1)
    class UCategorySwitcher* mpStorePageSwitcher;                                     // 0x04D8 (size: 0x8)
    class UCanvasPanel* mpFeaturedTimerPanel;                                         // 0x04E0 (size: 0x8)
    class UStoreTileBannerWidget* mpLastModifiedStoreTimerWidget;                     // 0x04E8 (size: 0x8)
    FStoreItemData mLastCreatedStoreData;                                             // 0x04F0 (size: 0x1F8)
    bool mbIsLastCreatedStoreDataValid;                                               // 0x06E8 (size: 0x1)
    class UTextBlock* mpStoreErrorText;                                               // 0x06F0 (size: 0x8)
    class UCanvasPanel* mpStoreScreenCanvasPanel;                                     // 0x06F8 (size: 0x8)
    class UCanvasPanel* mpStoreMessageTextPanel;                                      // 0x0700 (size: 0x8)
    bool mbIsInErrorMode;                                                             // 0x0708 (size: 0x1)
    class UWidgetSwitcher* mpContentSwitcher;                                         // 0x0710 (size: 0x8)
    TMap<int32, int32> mPagesToPageDataMapping;                                       // 0x0718 (size: 0x50)
    TMap<class FString, class FText> mPageLocStringToPromoMessage;                    // 0x0768 (size: 0x50)
    FString mProductCode;                                                             // 0x07B8 (size: 0x10)
    TSubclassOf<class UCategoryButtonWidget> mHalloweenCategoryButtonClass;           // 0x07E0 (size: 0x8)

    void UpdateStoreTimer();
    void TransitionToPreviewScreen(FString itemGUID);
    void SetupNavigationForTiles();
    void SetStoreErrorText(FText newText);
    void ScanAndRefreshOwnedItems();
    void ResetErrorScreen();
    void RefreshWithStoreDataForSpecificDate(FDateTime DateTime);
    void RefreshItemTileFocus();
    void PopulatePanels();
    void PopulateHCTiles();
    void PopulateCharacterTiles();
    void PopulateCatalogPageData(FStorePageStruct pageData);
    void OnStoreTilePressed(FString tileGUID);
    void OnStorePagePressed(int32 Index);
    void OnSpecialTilePressed(FString tileGUID);
    void OnRefreshConfirmed();
    void OnNonPreviewPurchaseFinished();
    void OnEnteredProductCode(const FText& productCode);
    void LaunchStoreURL();
    bool IsPagePregenerated(FStorePageStruct page);
    void InsertSpacer(class UPanelWidget* pTargetWidget, FVector2D spacerSize);
    void GoToStorePageByPageName(FString pageName);
    void GoToPrizePackScreen();
    class UStoreItemTile_Base* GetTileForSubRowAndCol(int32 row, int32 subRow, int32 subCol);
    TSubclassOf<class UStoreItemTile> GetStoreTileClassForType(EStoreItemTileType tileType);
    class UStoreItemTile_Base* GetStoreItemTileFromGUID(FString Guid);
    int32 GetPageIndexForPageName(FString pageName);
    int32 GetNumDaysUntilPageExpires(FStorePageStruct pageStruct);
    class UStoreItemTile_Base* GetNavigationTargetForIndex(int32 Index, int32 row, ESelectionNavigation Direction);
    int32 GetMaxSubRowForRow(int32 row);
    int32 GetMaxColumnForRow(int32 row);
    FStoreItemTileData GetItemTileDataForStoreItem(FStoreItemData storeData);
    FText GetCurrentPageTitle();
    int32 GetCatalogRowForNavButton(class UNavButton* pButton);
    class UNavButton* GetBestButtonCandidateForMouseScroll(bool bUp);
    void DeSelectAllTiles();
    void ConstructStorefront(class UVerticalBox* pTargetWidget, FStorePageStruct TargetPage);
    void ClearDataForRefresh();
    void CheckPageDataGeneration();
    void AttemptPurchasePage(FString pageID, bool bWithHC);
    void AttemptJumpToNextCatalogSubPage(bool bPageAbove);
    void AttemptJumpToCatalogRow(int32 targetRow);
    void AttemptJumpNumCatalogRows(int32 numRows);
}; // Size: 0x7E8

class UStoreSideBarTile : public UUserWidget
{
    class UNavButton* mpButton;                                                       // 0x0260 (size: 0x8)
    class UTextBlock* mpTextBlock;                                                    // 0x0268 (size: 0x8)
    int32 mIndex;                                                                     // 0x0270 (size: 0x4)
    class UStoreScreen* mpOwningStoreScreen;                                          // 0x0278 (size: 0x8)

    void SetTitleDirectly(FText Title);
    void SetDisabledButton(FText Title);
    void PopulateData(FText Title, class UStoreScreen* pOwningScreen, int32 Index);
    void OnButtonClicked();
    class UNavButton* GetNavButton();
}; // Size: 0x280

class UStoreTileBannerWidget : public UMetaWidget
{
    FUtcDateTime mExpiryTime;                                                         // 0x0378 (size: 0x4)
    class UImage* mpIndicatorExtensionImage;                                          // 0x0380 (size: 0x8)
    class UTimerCountdownWidget* mpTimerCountdownWidget;                              // 0x0388 (size: 0x8)
    class UWidgetSwitcher* mpContentSwitcher;                                         // 0x0390 (size: 0x8)
    class UTextBlock* mpMessageText;                                                  // 0x0398 (size: 0x8)
    class UBorder* mpBackgroundBorder;                                                // 0x03A0 (size: 0x8)

    void SetTintColor(FColor col);
    void SetTextColor(FSlateColor col);
    void SetMessageToDisplay(FText Message);
    void SetIndicatorExtensionVisibility(bool bNewValue);
    void SetExpiryTime(FUtcDateTime NewTime);
    void FindSyncWidgets();
}; // Size: 0x3A8

class UStoreTimerWidget : public UMetaWidget
{
    FUtcDateTime mExpiryTime;                                                         // 0x0378 (size: 0x4)
    class UImage* mpIndicatorExtensionImage;                                          // 0x0380 (size: 0x8)
    class UTimerCountdownWidget* mpTimerCountdownWidget;                              // 0x0388 (size: 0x8)

    void SetIndicatorExtensionVisibility(bool bNewValue);
    void SetExpiryTime(FUtcDateTime NewTime);
}; // Size: 0x390

class USurfaceImpactManager : public UActorComponent
{
    class AActor* mpOwningActor;                                                      // 0x00B8 (size: 0x8)
    TMap<class EAttackDecalType, class UMaterialInstance*> mAttackDecalMaterials;     // 0x00D8 (size: 0x50)
    TMap<class EAttackDecalType, class UParticleSystem*> mAttackParticleTemplates;    // 0x0128 (size: 0x50)

}; // Size: 0x178

class USwitchButton : public UUserWidget
{
    bool DefaultSelected;                                                             // 0x0260 (size: 0x1)
    FLinearColor SelectedBorderColor;                                                 // 0x0264 (size: 0x10)
    FLinearColor UnselectedBorderColor;                                               // 0x0274 (size: 0x10)
    FLinearColor SelectedTextColor;                                                   // 0x0284 (size: 0x10)
    FLinearColor UnselectedTextColor;                                                 // 0x0294 (size: 0x10)
    FText ButtonText;                                                                 // 0x02A8 (size: 0x18)
    class UButton* mpButton;                                                          // 0x02C0 (size: 0x8)
    class UBorder* mpBorder;                                                          // 0x02C8 (size: 0x8)
    class UTextBlock* mpText;                                                         // 0x02D0 (size: 0x8)

}; // Size: 0x2E0

class USystemScreen : public UBaseScreen
{
    class UTextHighlightUserButton* mpReturnButton;                                   // 0x02C0 (size: 0x8)
    class UTextHighlightUserButton* mpOptionsButton;                                  // 0x02C8 (size: 0x8)
    class UTextHighlightUserButton* mpProfileButton;                                  // 0x02D0 (size: 0x8)
    class UTextHighlightUserButton* mpCreditsButton;                                  // 0x02D8 (size: 0x8)
    class UTextHighlightUserButton* mpSignOutButton;                                  // 0x02E0 (size: 0x8)
    class UTextHighlightUserButton* mpLeaveLobbyButton;                               // 0x02E8 (size: 0x8)
    class UTextHighlightUserButton* mpExitGameButton;                                 // 0x02F0 (size: 0x8)
    int32 mReturnTabIndex;                                                            // 0x02F8 (size: 0x4)

    void OnSignOut();
    void OnReturn();
    void OnProfile();
    void OnOptions();
    void OnLeaveLobby();
    void OnExitGame();
    void OnCredits();
}; // Size: 0x300

class UTalismanSkinDataAsset : public UTeenWeaponSkinDataAsset
{
    FSkinParticleSystem mpMainBeamParticleSystem;                                     // 0x01E8 (size: 0xD8)
    FSkinParticleSystem mpWeakBeamParticleSystem;                                     // 0x02C0 (size: 0xD8)
    FSkinParticleSystem mpBeamHitParticleSystem;                                      // 0x0398 (size: 0xD8)
    FSkinParticleSystem mpAbsorbParticleSystem;                                       // 0x0470 (size: 0xD8)
    EWise_WEP_Talisman mWiseTalismanSwitch;                                           // 0x0548 (size: 0x1)

}; // Size: 0x550

class UTeenClothingComponent : public UBaseCustomizationComponent
{
    TArray<class UPhysicsAsset*> mpPhysicsAssets;                                     // 0x01A8 (size: 0x10)
    class UClothingItemDataAsset* mpUndeadClothingDataAsset;                          // 0x01B8 (size: 0x8)
    class UClothingItemDataAsset* mpMaleSnowmanClothingDataAsset;                     // 0x01C0 (size: 0x8)
    class UClothingItemDataAsset* mpFemaleSnowmanClothingDataAsset;                   // 0x01C8 (size: 0x8)
    TArray<FLoadoutItem> mRequiredItems;                                              // 0x01D0 (size: 0x10)
    class UClothingItemDataAsset* mpClothReplacementDataAsset;                        // 0x01E0 (size: 0x8)
    bool mbMeshSlotVisibilitySet;                                                     // 0x01E8 (size: 0x1)
    int32 mQueueMeshUpdate;                                                           // 0x01EC (size: 0x4)
    TMap<class FName, class USkeletalMesh*> mLoadedNamedMeshes;                       // 0x01F0 (size: 0x50)
    TArray<class UClothingItemDataAsset*> mClothingDataAssets;                        // 0x0240 (size: 0x10)
    TMap<class EMeshSlot, class FRecordedMeshSlotVisibility> mRecordedMeshSlotVisibility; // 0x0250 (size: 0x50)
    FString mBodyShapePresetName;                                                     // 0x02A0 (size: 0x10)
    FFeetClothingSettings mCurrentLeftFootSettings;                                   // 0x02B0 (size: 0xC)
    FFeetClothingSettings mCurrentRightFootSettings;                                  // 0x02BC (size: 0xC)
    class USkeletalMeshComponent* mpMasterPostComponent;                              // 0x02C8 (size: 0x8)
    TArray<FMeshSlotComponent> mpClothingMeshComponents;                              // 0x02D0 (size: 0x10)
    TArray<FMeshSlotComponent> mpPreviousClothingMeshComponents;                      // 0x02E0 (size: 0x10)
    TArray<FStatusMappingTarget> mSpawnedFXComponents;                                // 0x02F0 (size: 0x10)
    TArray<FLinearColor> mFeastTints;                                                 // 0x0300 (size: 0x10)
    float mFootstepDecalSize;                                                         // 0x0310 (size: 0x4)
    FTransform mPreviousHeadTransform;                                                // 0x0320 (size: 0x30)
    FVector mCurrentWindLinear;                                                       // 0x0350 (size: 0xC)
    float mCurrentWindAngular;                                                        // 0x035C (size: 0x4)
    float mAccumulatedWindAngular;                                                    // 0x0360 (size: 0x4)
    int32 mResetCounter;                                                              // 0x0364 (size: 0x4)
    bool mbUseClothingAnimInstances;                                                  // 0x0368 (size: 0x1)
    bool mbEnableLoadoutTransitions;                                                  // 0x0369 (size: 0x1)
    class UBlendSpaceBase* mpLocomotionOverride;                                      // 0x03A0 (size: 0x8)

    void UpdateClothReset();
    bool ShouldUseClothingAnimInstances();
    void SetUseClothingAnimInstances(bool bSet);
    void SetupSkeletalMeshComponentAttachment();
    void SetUpdateAnimationInEditor(bool bSet);
    void SetRenderCustomDepth(bool bRenderCustomDepth, int32 CustomDepthStencilValue);
    void SetOwningHeadSkeletalMeshComponent(class USkeletalMeshComponent* mpHeadComponent);
    void SetMeshVisibility(bool bIsVisible, bool bRenderMainPass, bool bCastShadow, bool bCastCapsuleShadow);
    void SetMaterialPropertyOnComponent(class USkeletalMeshComponent* pComponent, FName ParameterName, float Value);
    void SetMaterialPropertyForAllMeshes(FName ParameterName, float Value, bool bPreviousLoadout);
    void SetLocomotionOverride(class UBlendSpaceBase* pLocomotionOverride);
    void SetEnableLoadoutTransitions(bool bSet);
    void SetAllOwnerNoSee(bool bSet);
    void ResetMeshSlotVisibility();
    void OnClothingItemResourcesLoaded();
    void MulticastAllToggleSnowman();
    void MulticastAllSetClothReplacement(class UClothingItemDataAsset* pClothingItemReplacement);
    void MulticastAllBecomeUndead();
    void MulticastAllBecomeAlive();
    bool HasUnsafeClothingEquipped();
    bool HasBulkyClothingEquipped();
    uint8 GetMeshSlotHideLayerPriority(EMeshSlot meshSlot);
    TArray<class USkeletalMeshComponent*> GetMeshComponents();
    class UBlendSpaceBase* GetLocomotionOverride();
    FFeetClothingSettings GetFootClothingSettings(bool bLeftFoot);
    TArray<FLinearColor> GetFeastTints();
    class UClothingItemDataAsset* GetClothReplacementDataAsset();
    void GetClothingUISlots(TArray<uint32>& outSlots);
    TArray<class UClothingItemDataAsset*> GetClothingDataAssets();
    TArray<class USkeletalMeshComponent*> GetClothingComponentsBySlot(EMeshSlot meshSlot);
    void EquipClothingItemDataAssets(TArray<class UClothingItemDataAsset*> clothingAssets);
    void ConvertMaterialsToDynamicByComponent(class USkeletalMeshComponent* pComponent);
    void ConvertMaterialsToDynamic();
    void BecomeUndead();
    void BecomeAlive();
    void ApplyAnimationConfigs(TArray<class UAnimationConfig*>& animationConfigs);
}; // Size: 0x3B0

class UTeenPerkItemListWidget : public UBaseItemList
{

    void OnListNavigation(ESelectionNavigation dir);
}; // Size: 0x4C8

class UTeenPerkItemTileWidget : public UBaseItemTile
{
    TMap<class EPerkAffinityType, class UTexture2D*> AffinityBackgrounds;             // 0x03D0 (size: 0x50)
    TMap<class EPerkAffinityType, class UTexture2D*> AffinityBorders;                 // 0x0420 (size: 0x50)
    TMap<class ECharacterType, class UTexture2D*> EvilBackgrounds;                    // 0x0470 (size: 0x50)
    TMap<class ECharacterType, class UTexture2D*> EvilBorders;                        // 0x04C0 (size: 0x50)
    FLinearColor DisabledColor;                                                       // 0x0510 (size: 0x10)
    FLinearColor HighlightColor;                                                      // 0x0520 (size: 0x10)
    FLinearColor SelectionColor;                                                      // 0x0530 (size: 0x10)
    FLinearColor EquippedColor;                                                       // 0x0540 (size: 0x10)
    class UCanvasPanel* mpCostPanel;                                                  // 0x0550 (size: 0x8)
    class UTextBlock* mpCostText;                                                     // 0x0558 (size: 0x8)
    class UPerkTierWidget* mpPerkTierWidget;                                          // 0x0560 (size: 0x8)
    EPerkAffinityType mPerkAffinityType;                                              // 0x0568 (size: 0x1)

}; // Size: 0x570

class UTeenSpectralDataAsset : public USpectralDataAsset
{
    FSkinSkeletalMesh mDeadSpectralMesh;                                              // 0x01C0 (size: 0x168)

}; // Size: 0x328

class UTeenWeaponSkinDataAsset : public UItemDataAsset
{
    TSubclassOf<class AWeaponBase> mpWeaponBlueprint;                                 // 0x0058 (size: 0x8)
    TSubclassOf<class AActor> mpSpawnableActorClass;                                  // 0x0060 (size: 0x8)
    bool bShowSpawnableInFrontEnd;                                                    // 0x0068 (size: 0x1)
    FSkinSkeletalMesh mWeaponMeshSkin;                                                // 0x0070 (size: 0x168)
    EWeaponTypeEnum mWeaponType;                                                      // 0x01D8 (size: 0x1)
    class UAnimSequence* mpFrontEndAnimation;                                         // 0x01E0 (size: 0x8)

    UClass* GetSpawnableActorClass();
    class UAnimSequence* GetFrontEndOverrideAnim();
}; // Size: 0x1E8

class UTensionManager : public USceneComponent
{
    class AActor* mpOwningActor;                                                      // 0x01F8 (size: 0x8)
    ECharacterType mLastEvilChaseCharacterType;                                       // 0x02D0 (size: 0x1)

    ECharacterType GetLastEvilChaseCharacterType();
}; // Size: 0x2E0

class UTestControllerBase : public UGauntletTestController
{
}; // Size: 0x30

class UTestControllerReplay : public UTestControllerBase
{
    class AReplayPC* mpReplayPC;                                                      // 0x0048 (size: 0x8)

    void UpdateCaptureReplay();
    void UnpauseUpdate();
    void SetShouldResume();
    void SetShouldPlayNext();
    void FinishTest();
    void ExecStatStopFile();
    void ExecStatStartFile();
}; // Size: 0x90

class UTextCounterUserButton : public UTextUserButton
{
    class UTexture2D* IconTexture;                                                    // 0x04F8 (size: 0x8)
    class UTexture2D* IconTextureBG;                                                  // 0x0500 (size: 0x8)
    bool ShowWhenEmpty;                                                               // 0x0508 (size: 0x1)
    class UHorizontalBox* mpCountBox;                                                 // 0x0510 (size: 0x8)
    class UImage* mpCountIcon;                                                        // 0x0518 (size: 0x8)
    class UImage* mpCountIconBG;                                                      // 0x0520 (size: 0x8)
    class URichTextBlock* mpCountTextBlock;                                           // 0x0528 (size: 0x8)

}; // Size: 0x530

class UTextEntryModalWidget : public UBaseModal
{
    class UEditableTextBox* mpTextBox;                                                // 0x02A8 (size: 0x8)
    class UTextBlock* mpMessageText;                                                  // 0x02B0 (size: 0x8)
    class UBoxUserButton* mpSubmitButton;                                             // 0x02B8 (size: 0x8)
    class UBoxUserButton* mpCancelButton;                                             // 0x02C0 (size: 0x8)

    void ValidateProductCode(const FText& Text);
    void SetupProductCodeValidationDelegate();
    void SetSubmitButtonText(const FText& ButtonText);
    void SetMessageText(const FText& messageText);
    void SetHintText(const FText& HintText);
    void OnSubmitPressed();
    void OnLoginCredentialsTextCommit(const FText& Text, TEnumAsByte<ETextCommit::Type> CommitType);
    void OnCancelPressed();
    class UEditableTextBox* GetEditTextBox();
}; // Size: 0x2D0

class UTextHighlightUserButton : public UTextUserButton
{
}; // Size: 0x4F8

class UTextNavButton : public UNavButton
{
}; // Size: 0x618

class UTextShadowUserButton : public UTextUserButton
{
    class UMaterialInstance* TeenMaterial;                                            // 0x04F8 (size: 0x8)
    class UMaterialInstance* EvilMaterial;                                            // 0x0500 (size: 0x8)
    TMap<class ESeasonalEventType, class UMaterialInstance*> EventMaterials;          // 0x0508 (size: 0x50)
    class UTextBlock* mpShadowText;                                                   // 0x0558 (size: 0x8)

}; // Size: 0x560

class UTextStateSwitch : public UWidgetSwitcher
{

    void SetState(FString stateString);
}; // Size: 0x138

class UTextToastWidget : public UBaseToast
{
}; // Size: 0x2C8

class UTextUserButton : public UBaseUserButton
{
    FText Text;                                                                       // 0x0478 (size: 0x18)
    FSlateFontInfo Font;                                                              // 0x0490 (size: 0x58)
    bool ColorOnSelect;                                                               // 0x04E8 (size: 0x1)
    class UTextBlock* mpTextBlock;                                                    // 0x04F0 (size: 0x8)

}; // Size: 0x4F8

class UThemeButton : public UButton
{
    bool UsePrimaryThemeColor;                                                        // 0x0428 (size: 0x1)
    bool UseSecondaryThemeColor;                                                      // 0x0429 (size: 0x1)
    class UBorder* mpChildBorder;                                                     // 0x0430 (size: 0x8)
    class UImage* mpChildImage;                                                       // 0x0438 (size: 0x8)

    void SimulateRelease();
    void SimulatePress();
    void OnSeasonalEventTypeChanged();
}; // Size: 0x448

class UTimerCountdownWidget : public UUserWidget
{
    class UHorizontalBox* mpDaysBox;                                                  // 0x0260 (size: 0x8)
    class UHorizontalBox* mpHoursBox;                                                 // 0x0268 (size: 0x8)
    class UHorizontalBox* mpMinutesBox;                                               // 0x0270 (size: 0x8)
    class UHorizontalBox* mpSecondsBox;                                               // 0x0278 (size: 0x8)
    class UTextBlock* mpDaysValueText;                                                // 0x0280 (size: 0x8)
    class UTextBlock* mpHoursValueText;                                               // 0x0288 (size: 0x8)
    class UTextBlock* mpMinutesValueText;                                             // 0x0290 (size: 0x8)
    class UTextBlock* mpSecondsValueText;                                             // 0x0298 (size: 0x8)
    class UTextBlock* mpDaysTitleText;                                                // 0x02A0 (size: 0x8)
    class UTextBlock* mpHoursTitleText;                                               // 0x02A8 (size: 0x8)
    class UTextBlock* mpMinutesTitleText;                                             // 0x02B0 (size: 0x8)
    class UTextBlock* mpSecondsTitleText;                                             // 0x02B8 (size: 0x8)
    class UTextBlock* mpLeftText;                                                     // 0x02C0 (size: 0x8)
    FUtcDateTime mEndTime;                                                            // 0x02C8 (size: 0x4)
    bool mbUseMovieTimeFormatting;                                                    // 0x02CC (size: 0x1)
    bool mbUseStoreTimeFormatting;                                                    // 0x02CD (size: 0x1)
    FSlateColor mTextColor;                                                           // 0x02D0 (size: 0x28)

}; // Size: 0x2F8

class UTipsManager : public UObject
{
    class UDataTable* mAllTipsDataTable;                                              // 0x0028 (size: 0x8)
    TArray<FTip> mTipsHistory;                                                        // 0x0030 (size: 0x10)
    TMap<class FString, class FTip> mAllTips;                                         // 0x0040 (size: 0x50)

    bool WillTipBeShown(const FTip& Tip);
    void SubmitTipsProgressToSaveFile();
    void Shutdown();
    bool ShouldShowTip(const FTip& Tip);
    void RequestTip(FString tipId);
    void LoadAllTips();
    bool IsShowingTip();
    void Initialize();
    FTip GetTip(FString tipId);
    void GetSavedTipsProgress();
    void DoTick(float DeltaSeconds);
    bool DoesTipExist(FString tipId);
    bool DoesHistoryContainTip(const FText& TipText);
    void ClearAllTipsProgress();
}; // Size: 0x90

class UTipsPanelWidget : public UUserWidget
{
    class UInGameTipWidget* mpInGametipWidget;                                        // 0x0260 (size: 0x8)

    void ShowTip(const FTip& Tip);
    bool IsShowingTip();
}; // Size: 0x268

class UToadAnimInstance : public UEvilCharAnimInstance
{
    FToadAnimInstanceData mToadAnimInstanceData;                                      // 0x0378 (size: 0x1)

}; // Size: 0x380

class UToadArmourEffectComponent : public UActorComponent
{
    TArray<FToadArmourPiece> mArmourPieces;                                           // 0x00B0 (size: 0x10)
    class UNiagaraComponent* mpArmourNiagaraComponent;                                // 0x00C0 (size: 0x8)
    class UNiagaraSystem* mpArmourNiagaraSystem;                                      // 0x00C8 (size: 0x8)

    void OnParticleHit(FName EventName, float EmitterTime, int32 ParticleTime, FVector Location, FVector Velocity, FVector Direction, FVector Normal, FName BoneName, class UPhysicalMaterial* PhysMat);
}; // Size: 0xE0

class UToadSkinDataAsset : public UEvilSkinDataAsset
{
    TArray<class USkeletalMesh*> mToadArmourPieces;                                   // 0x0378 (size: 0x10)
    TArray<class USkeletalMesh*> mToadFPArmourPieces;                                 // 0x0388 (size: 0x10)
    FSkinParticleSystem mArmourParticleSystem;                                        // 0x0398 (size: 0xD8)
    TSubclassOf<class UAnimInstance> mpArmourAnimInstanceClass;                       // 0x0470 (size: 0x8)
    FSkinDecal mArmourCollisionDecal;                                                 // 0x0478 (size: 0x58)

}; // Size: 0x4D0

class UToastWidget : public UUserWidget
{
    class UOverlay* mpToastOverlay;                                                   // 0x0260 (size: 0x8)
    class UOverlay* mpPersistentOverlay;                                              // 0x0268 (size: 0x8)
    class UBorder* mpContentBorder;                                                   // 0x0270 (size: 0x8)
    class UBorder* mpPersistentBorder;                                                // 0x0278 (size: 0x8)
    class UTextBlock* mpToastText;                                                    // 0x0280 (size: 0x8)
    class UTextBlock* mpErrorCodeText;                                                // 0x0288 (size: 0x8)
    class UButton* mpCloseButton;                                                     // 0x0290 (size: 0x8)
    class UImage* mpProgressImage;                                                    // 0x0298 (size: 0x8)
    class UButton* mpMaximizeButton;                                                  // 0x02A0 (size: 0x8)
    class UWidgetAnimation* mpAnimateInAnim;                                          // 0x02A8 (size: 0x8)
    class UWidgetAnimation* mpAnimateOutAnim;                                         // 0x02B0 (size: 0x8)
    class UWidgetAnimation* mpShowPersistentAnim;                                     // 0x02B8 (size: 0x8)
    class UMaterialInstance* mpProgressMaterialInstance;                              // 0x0328 (size: 0x8)
    class UMaterialInstanceDynamic* mpDynProgressMaterialInstance;                    // 0x0330 (size: 0x8)

    void OnMaximizePressed();
    void OnClosePressed();
    void OnAnimateOutFinished();
    void OnAnimateInFinished();
}; // Size: 0x338

class UToasterWidget : public UUserWidget
{
    class UVerticalBox* mpToastBox;                                                   // 0x0280 (size: 0x8)

    void RemoveToast(class UBaseToast* pToast);
    void ClearAll();
    bool AreSocialNotificationsAllowed(class UWorld* pWorld);
    void AddToast(class UBaseToast* pToast);
}; // Size: 0x288

class UToggleUserButton : public UBaseUserButton
{
    FText Text;                                                                       // 0x0478 (size: 0x18)
    FText TextAlt;                                                                    // 0x0490 (size: 0x18)
    FSlateFontInfo Font;                                                              // 0x04A8 (size: 0x58)
    class UNavButton* mpNavButtonAlt;                                                 // 0x0500 (size: 0x8)
    class UImage* mpNormalImageAlt;                                                   // 0x0508 (size: 0x8)
    class UImage* mpHighlightImageAlt;                                                // 0x0510 (size: 0x8)
    class UImage* mpActiveImage;                                                      // 0x0518 (size: 0x8)
    class UImage* mpActiveImageAlt;                                                   // 0x0520 (size: 0x8)
    class UTextBlock* mpTextBlock;                                                    // 0x0528 (size: 0x8)
    class UTextBlock* mpTextBlockAlt;                                                 // 0x0530 (size: 0x8)

    void OnOnPressed();
    void OnOffPressed();
    void OnNavDirection(ESelectionNavigation dir);
    void OnAltUnselected();
    void OnAltSelected();
}; // Size: 0x548

class UTornStatusComponent : public UBaseStatusComponent
{
}; // Size: 0xE0

class UTritonBakeAcousticsCommandletMaterialUserData : public UAssetUserData
{
    float Absorptivity;                                                               // 0x0028 (size: 0x4)
    FString AssignedMaterialName;                                                     // 0x0030 (size: 0x10)

}; // Size: 0x40

class UTritonBakeCommandlet : public UCommandlet
{

    void NavBuildFinished(class ANavigationData* NavData);
}; // Size: 0xC0

class UTutorialsTrainingOverlayWidget : public UBaseOverlay
{
    class UImageTextUserButton* mpTeenTutorialButton;                                 // 0x0280 (size: 0x8)
    class UImageTextUserButton* mpEvilTutorialButton;                                 // 0x0288 (size: 0x8)
    class UImageTextUserButton* mpTeenTrainingButton;                                 // 0x0290 (size: 0x8)
    class UImageTextUserButton* mpEvilTrainingButton;                                 // 0x0298 (size: 0x8)

    void OnTeenTutorialPressed();
    void OnTeenTrainingPressed();
    void OnMonsterTrainingPressed();
    void OnEvilTutorialPressed();
}; // Size: 0x2A0

class UTypeWriterWidget : public UUserWidget
{
    class UCanvasPanel* mpCanvasPanel;                                                // 0x0260 (size: 0x8)
    class URichTextBlock* mpRichTextBlock;                                            // 0x0268 (size: 0x8)

    void SetTextInSeconds(FText textToSet, float timeToSet);
}; // Size: 0x290

class UUISlotItemListWidget : public UBaseItemList
{
}; // Size: 0x428

class UUnbuiltObjectsCommandlet : public UCommandlet
{
}; // Size: 0x80

class UUnlockedItemRewardCard : public UUserWidget
{
    class UImage* mpUnlockedItemImage;                                                // 0x0270 (size: 0x8)
    class UImage* mpUnlockedItemStigmaImage;                                          // 0x0278 (size: 0x8)
    class UTextBlock* mpUnlockedItemName;                                             // 0x0280 (size: 0x8)
    class UTextBlock* mpUnlockedItemStigma;                                           // 0x0288 (size: 0x8)
    class UImage* mpDiamondBG;                                                        // 0x0290 (size: 0x8)

    void PopulateUnlockableWeaponProperty(EWeaponTypeEnum weaponType, const FDbItemId unlockedItemID);
    void PopulateUnlockableNewWeapon(EWeaponTypeEnum weaponType);
    void OnTextureLoaded(class UTexture2D* pTex);
}; // Size: 0x298

class UUtilityBTComponent : public UBehaviorTreeComponent
{
    FGameplayTagStackContainer mTagStackContainer;                                    // 0x0298 (size: 0x168)

    void SetTagValue(FGameplayTag GameplayTag, float Value);
    float GetTagValue(FGameplayTag GameplayTag);
    class UUtilityBTComponent* GetSmartTeenBT(class AAIController* pAIController);
    TArray<FGameplayTagStack> GetScores(FName rootTag, FName LayerName);
    TArray<FGameplayTag> GetBestActions(int32 bestN);
    TArray<FGameplayTagStack> GetActionScores(FName rootTag);
}; // Size: 0x400

class UVersionNumberTextBlock : public UTextBlock
{

    FText StreamString();
    FText RawBrandString();
    bool IsNoSteam();
    bool IsNoSku();
    FString GetBuildNumberAsFString();
    FText BuildNumberString();
    FText BrandString();
}; // Size: 0x2A8

class UVideoTab : public UBaseTab
{
    class UNavScrollBox* mpNavScrollBox;                                              // 0x0290 (size: 0x8)
    class UOptionSelectorUserButton* mpDisplayMode;                                   // 0x0298 (size: 0x8)
    class UOptionResolutionUserButton* mpResolution;                                  // 0x02A0 (size: 0x8)
    class UOptionSelectorUserButton* mpFrameRateLimit;                                // 0x02A8 (size: 0x8)
    class UOptionSelectorUserButton* mpMenuFrameRateLimit;                            // 0x02B0 (size: 0x8)
    class UOptionToggleUserButton* mpVSync;                                           // 0x02B8 (size: 0x8)
    class UOptionSliderUserButton* mpGamma;                                           // 0x02C0 (size: 0x8)
    class UOptionSelectorUserButton* mpQualityPreset;                                 // 0x02C8 (size: 0x8)
    class UOptionSelectorUserButton* mpShadowQuality;                                 // 0x02D0 (size: 0x8)
    class UOptionSelectorUserButton* mpAntiAliasQuality;                              // 0x02D8 (size: 0x8)
    class UOptionSelectorUserButton* mpTextureQuality;                                // 0x02E0 (size: 0x8)
    class UOptionSelectorUserButton* mpEffectsQuality;                                // 0x02E8 (size: 0x8)
    class UOptionSelectorUserButton* mpPostProcessingQuality;                         // 0x02F0 (size: 0x8)
    class UOptionSelectorUserButton* mpDLSSMode;                                      // 0x02F8 (size: 0x8)
    class UOptionSelectorUserButton* mpColorBlindMode;                                // 0x0300 (size: 0x8)
    class UOptionSelectorUserButton* mpRenderingMode;                                 // 0x0308 (size: 0x8)
    class UOptionSliderUserButton* mpColorBlindIntensity;                             // 0x0310 (size: 0x8)
    class UOptionSliderUserButton* mpResolutionScale;                                 // 0x0318 (size: 0x8)
    class UOptionSingleUserButton* mpRestoreDefaultsButton;                           // 0x0320 (size: 0x8)

    void SetWindowMode(TEnumAsByte<EWindowMode::Type> Mode);
    void SetVSync(bool bSet);
    void SetTextureQuality(EQualitySetting Settings);
    void SetShadowQuality(EQualitySetting Settings);
    void SetResolutionScale(float Value);
    void SetResolution(FIntPoint Resolution);
    void SetRenderingMode(ERendererSetting setting);
    void SetPostProcessing(EQualitySetting Settings);
    void SetMenuFrameRateLimit(EFrameRateSetting setting);
    void SetMasterQualitySettings(EQualitySetting Settings);
    void SetFrameRateLimit(EFrameRateSetting setting);
    void SetEffectsQuality(EQualitySetting Settings);
    void SetDLSSMode(UDLSSMode Mode);
    void SetDisplayGamma(float newGamma);
    void SetColorBlindMode(EColorVisionDeficiency Mode);
    void SetColorBlindIntensity(float Value);
    void SetAntiAliasing(EQualitySetting Settings);
    void OnResetDefaultsPressed();
    void OnResetDefaultsConfirmed();
    void OnQualitySelectionChanged();
    void OnMainQualityChanged();
    void OnGammaSliderValueChanged(float NewValue);
}; // Size: 0x328

class UVoiceChatMenuScreen : public UBaseScreen
{
    class USocialVoiceMasterWidget* mpSocialVoiceMasterWidget;                        // 0x02C0 (size: 0x8)

}; // Size: 0x2C8

class UWalkieEffectComponent : public USceneComponent
{
    class UNiagaraComponent* mpEffectNiagaraComponent;                                // 0x0200 (size: 0x8)
    TSoftObjectPtr<UNiagaraSystem> mNiagaraSystemPath;                                // 0x0208 (size: 0x28)
    bool mbIsEffectActive;                                                            // 0x0230 (size: 0x1)

}; // Size: 0x240

class UWeaponChargeWidget : public UUserWidget
{

    void StartPulseDropWeaponPrompt();
}; // Size: 0x260

class UWeaponCustomizationScreen : public UBaseScreen
{
    TSubclassOf<class UWeaponPowerItemTileWidget> WeaponModItemClass;                 // 0x02C0 (size: 0x8)
    FMargin WeaponModPadding;                                                         // 0x02C8 (size: 0x10)
    class UWeaponExpWidget* mpWeaponExpWidget;                                        // 0x0350 (size: 0x8)
    class UCategorySwitcher* mpCategorySwitcher;                                      // 0x0358 (size: 0x8)
    class UWidgetSwitcher* mpWidgetSwitcher;                                          // 0x0360 (size: 0x8)
    class UOverlay* mpSkinsOverlay;                                                   // 0x0368 (size: 0x8)
    class UOverlay* mpModsOverlay;                                                    // 0x0370 (size: 0x8)
    class UBaseItemList* mpSkinItemList;                                              // 0x0378 (size: 0x8)
    class UTextBlock* mpWeaponSkinName;                                               // 0x0380 (size: 0x8)
    class UNonSelectableScrollBox* mpNonSelectableScrollBox;                          // 0x0388 (size: 0x8)
    class URichTextBlock* mpWeaponSkinDescriptionText;                                // 0x0390 (size: 0x8)
    class UBorder* mpWeaponSkinRarityBorder;                                          // 0x0398 (size: 0x8)
    class UTextBlock* mpWeaponSkinRarityText;                                         // 0x03A0 (size: 0x8)
    class UActionButton* mpSkinActionButton;                                          // 0x03A8 (size: 0x8)
    class UTextBlock* mpModNameText;                                                  // 0x03B0 (size: 0x8)
    class UHorizontalBox* mpPowersBox;                                                // 0x03B8 (size: 0x8)
    class UOverlay* mpModsProsOverlay;                                                // 0x03C0 (size: 0x8)
    class URichTextBlock* mpModsProsText;                                             // 0x03C8 (size: 0x8)
    class UOverlay* mpModsConsOverlay;                                                // 0x03D0 (size: 0x8)
    class URichTextBlock* mpModsConsText;                                             // 0x03D8 (size: 0x8)
    class UActionButton* mpModsActionButton;                                          // 0x03E0 (size: 0x8)

    void UpdateActionButton(bool bIsUnlocked, bool bIsEquipped, bool bAllowedToUnequip);
    void PopulatePowerDetails(FDbItemId ItemId);
    void OnWeaponSkinSelected(FDbItemId DbItemId, FGrantable Grantable);
    void OnWeaponPowerSelected(FDbItemId DbItemId, FGrantable Grantable);
    void OnSkinsActionPressed();
    void OnPreCharacterSelected();
    void OnModsActionPressed();
    void OnCategoryChanged(int32 cat);
    void AddAnalytics(TMap<class FString, class FDbItemId>& loadoutChanges);
}; // Size: 0x428

class UWeaponDataAsset : public UDataAsset
{
    FText mWeaponName;                                                                // 0x0030 (size: 0x18)
    EDamageType mDamageType;                                                          // 0x0048 (size: 0x1)
    EWeaponTypeEnum mWeaponType;                                                      // 0x0049 (size: 0x1)

}; // Size: 0x50

class UWeaponExpWidget : public UMetaWidget
{
    class UTextBlock* mpWeaponExpText;                                                // 0x0378 (size: 0x8)
    class UTextBlock* mpLevelTitle;                                                   // 0x0380 (size: 0x8)
    class UTextBlock* mpLevelText;                                                    // 0x0388 (size: 0x8)
    class UBorder* mpExpBorder;                                                       // 0x0390 (size: 0x8)

}; // Size: 0x398

class UWeaponInfoWidget : public UMetaWidget
{
    class UTextBlock* mpNameText;                                                     // 0x0378 (size: 0x8)
    class UTextBlock* mpDescriptionText;                                              // 0x0380 (size: 0x8)
    class UWeaponLevelWidget* mpWeaponLevelWidget;                                    // 0x0388 (size: 0x8)

}; // Size: 0x398

class UWeaponLevelWidget : public UMetaWidget
{
    bool ShowExperience;                                                              // 0x0378 (size: 0x1)
    class UImage* mpWeaponIcon;                                                       // 0x0380 (size: 0x8)
    class UTextBlock* mpExpText;                                                      // 0x0388 (size: 0x8)
    class UHorizontalBox* mpExpBox;                                                   // 0x0390 (size: 0x8)
    class UImage* mpExpProgress;                                                      // 0x0398 (size: 0x8)

}; // Size: 0x3A8

class UWeaponLoadout : public ULoadoutBase
{
}; // Size: 0x178

class UWeaponManager : public UObject
{
    TWeakObjectPtr<class UClientStateManager> mOwningClientStateManager;              // 0x0030 (size: 0x8)
    TArray<class UWeaponDataAsset*> mAllWeaponDataAssets;                             // 0x0330 (size: 0x10)
    TArray<EWeaponTypeEnum> mInEditorWeapons;                                         // 0x0340 (size: 0x10)

}; // Size: 0x360

class UWeaponPowerItemListWidget : public UBaseItemList
{
}; // Size: 0x428

class UWeaponPowerItemTileWidget : public UBaseItemTile
{
    class UTextBlock* mpStatusLockedText;                                             // 0x03D0 (size: 0x8)

}; // Size: 0x3D8

class UWeaponPowerListWidget : public UMetaWidget
{
    class UBaseItemList* mpPowerList;                                                 // 0x0378 (size: 0x8)

    void OnWeaponPowerSelected(FDbItemId ItemId, FGrantable Grantable);
    void OnActionPressed();
    void OnAction();
}; // Size: 0x3A0

class UWeaponProgressBar : public UBaseActionProgressBar
{
}; // Size: 0x270

class UWeaponRewardProgressCardWidget : public UUserWidget
{
    class UEORRewardProgressWidget* mpRewardProgressWidget;                           // 0x0260 (size: 0x8)
    class UTextBlock* mpLVLNumberText;                                                // 0x0268 (size: 0x8)
    class UImage* mpWeaponCardImage;                                                  // 0x0270 (size: 0x8)
    class UTextBlock* mpWeaponName;                                                   // 0x0278 (size: 0x8)

}; // Size: 0x298

class UWeaponRewardsOverlayWidget : public UUserWidget
{
    class UWidgetAnimation* mpRewardCategoryOn;                                       // 0x0260 (size: 0x8)
    class UWidgetAnimation* mpRewardCategoryOff;                                      // 0x0268 (size: 0x8)
    class UWidgetAnimation* mpRewardOn;                                               // 0x0270 (size: 0x8)
    class UWidgetAnimation* mpRewardOff;                                              // 0x0278 (size: 0x8)
    class UWidgetAnimation* mpUnlockedNewWeaponOn;                                    // 0x0280 (size: 0x8)
    class UWidgetAnimation* mpUnlockedNewWeaponOff;                                   // 0x0288 (size: 0x8)
    float mTimeTakesToTransition;                                                     // 0x0290 (size: 0x4)
    float mTimeToFinishProgression;                                                   // 0x0294 (size: 0x4)
    class UCanvasPanel* mpNewWeaponUnlockedPanel;                                     // 0x0298 (size: 0x8)
    class UWidgetSwitcher* mpProgressSwitcher;                                        // 0x02A0 (size: 0x8)
    class UWidgetSwitcher* mpUnlockTextSwitcher;                                      // 0x02A8 (size: 0x8)
    class UCanvasPanel* mpRewardCategoryPanel;                                        // 0x02B0 (size: 0x8)
    class UCanvasPanel* mpRewardPanel;                                                // 0x02B8 (size: 0x8)
    class UStigmaRewardProgressCardWidget* mpStigmaRewardProgressCard;                // 0x02C0 (size: 0x8)
    class UWeaponRewardProgressCardWidget* mpWeaponRewardProgressCard;                // 0x02C8 (size: 0x8)
    class UUnlockedItemRewardCard* mpUnlockedItemRewardCard;                          // 0x02D0 (size: 0x8)

    void SetRewardData(FEORRewardsData previousRewardsData, FEORRewardsData currentRewardsData);
    void PopulateWeaponRewardsData();
    void OnWeaponLevelUp();
    void OnStigmaLevelUp();
    bool HasShownAllProgress();
    FDbItemId GetLevelReward(int32 levelIndex);
}; // Size: 0x390

class UWeaponSelectButtonWidget : public UMetaWidget
{
    class UButton* mpButton;                                                          // 0x0388 (size: 0x8)
    class UImage* mpWeaponIcon;                                                       // 0x0390 (size: 0x8)
    class UBorder* mpPowerBorder;                                                     // 0x0398 (size: 0x8)
    class UImage* mpPowerIcon;                                                        // 0x03A0 (size: 0x8)
    class UImage* mpLockImage;                                                        // 0x03A8 (size: 0x8)
    class UTextBlock* mpLevelText;                                                    // 0x03B0 (size: 0x8)
    class UImage* mpHighlightImage;                                                   // 0x03B8 (size: 0x8)
    class UNewFlagWidget* mpNewFlagWidget;                                            // 0x03C0 (size: 0x8)

    void OnTextureLoaded(class UTexture2D* pTex);
    void OnButtonSelected();
    void OnButtonDoubleClicked();
    class UWeaponsScreen* GetWeaponsScreen();
    class UButton* GetButton();
}; // Size: 0x3D0

class UWeaponSkinItemTileWidget : public UBaseItemTile
{
    class UTextBlock* mpStatusLockedText;                                             // 0x03D0 (size: 0x8)

}; // Size: 0x3D8

class UWeaponSkinListWidget : public UScrollingSelectionWidget
{

    void SelectSkinById(FDbItemId ItemId);
    void OnWeaponSkinSelected(FDbItemId ItemId, FGrantable Grantable);
    void OnActionPressed();
}; // Size: 0x3D8

class UWeaponSkinManagerComponent : public UBaseCustomizationComponent
{
    TArray<int32> mpSelectedSkinIndexList;                                            // 0x01A8 (size: 0x10)
    TArray<class UTeenWeaponSkinDataAsset*> mpEquippedSkins;                          // 0x01B8 (size: 0x10)
    TMap<class EWeaponTypeEnum, class FLoadoutItem> mDefaultSkins;                    // 0x01C8 (size: 0x50)

    void ServerDebugEquipWeaponSkins(const TArray<class UTeenWeaponSkinDataAsset*>& pWeaponSkin);
    void MulticastAllDebugEquipWeaponSkins(const TArray<class UTeenWeaponSkinDataAsset*>& pWeaponSkin);
    void DoServerSetSelectedSkinForWeapon(EWeaponTypeEnum weaponType, int32 skin);
}; // Size: 0x218

class UWeaponSpawnableAnimInstance : public UAnimInstance
{
    FRotator mFrontEndRotation;                                                       // 0x02B8 (size: 0xC)
    bool mbIsInFrontEnd;                                                              // 0x02C4 (size: 0x1)
    class AWeaponBase* mpOwnerWeapon;                                                 // 0x02C8 (size: 0x8)

    void UpdateAnimData(float DeltaTime);
    class UAnimSequence* GetOwnerFrontEndOverrideAnimation();
    FWeaponAnimInstanceData GetOwnerAnimData();
}; // Size: 0x2D0

class UWeaponStigmaButton : public UUserWidget
{
    EDamageType DamageType;                                                           // 0x0260 (size: 0x1)
    TMap<class EDamageType, class FStigmaData> StigmaData;                            // 0x0268 (size: 0x50)
    class UButton* mpButton;                                                          // 0x02B8 (size: 0x8)
    class UImage* mpGlow;                                                             // 0x02C0 (size: 0x8)
    class UImage* mpStigmaIcon;                                                       // 0x02C8 (size: 0x8)
    class UImage* mpStigmaBorder;                                                     // 0x02D0 (size: 0x8)
    class UTextBlock* mpStigmaText;                                                   // 0x02D8 (size: 0x8)
    class UNewFlagWidget* mpNewFlagWidget;                                            // 0x02E0 (size: 0x8)

    void OnButtonPressed();
}; // Size: 0x2F0

class UWeaponsScreen : public UBaseScreen
{
    TSubclassOf<class UWeaponSelectButtonWidget> ButtonClass;                         // 0x02C0 (size: 0x8)
    TMap<class EDamageType, class UTexture2D*> StigmaTextures;                        // 0x02C8 (size: 0x50)
    class UWeaponStigmaButton* mpBurnButton;                                          // 0x0318 (size: 0x8)
    class UWeaponStigmaButton* mpHolyButton;                                          // 0x0320 (size: 0x8)
    class UWeaponStigmaButton* mpOccultButton;                                        // 0x0328 (size: 0x8)
    class UWeaponStigmaButton* mpShockButton;                                         // 0x0330 (size: 0x8)
    class UHorizontalBox* mpWeaponBox;                                                // 0x0338 (size: 0x8)
    class UHorizontalBox* mpStyleBox;                                                 // 0x0340 (size: 0x8)
    class UTextBlock* mpWeaponNameText;                                               // 0x0348 (size: 0x8)
    class UTextBlock* mpWeaponStyleText;                                              // 0x0350 (size: 0x8)
    class UHorizontalBox* mpWeaponModBox;                                             // 0x0358 (size: 0x8)
    class UTextBlock* mpWeaponModText;                                                // 0x0360 (size: 0x8)
    class UBorder* mpDescriptionBorder;                                               // 0x0368 (size: 0x8)
    class URichTextBlock* mpWeaponDescriptionText;                                    // 0x0370 (size: 0x8)
    class UWeaponExpWidget* mpWeaponExpWidget;                                        // 0x0378 (size: 0x8)
    class UActionButton* mpSkinsButton;                                               // 0x0380 (size: 0x8)
    class UActionButton* mpModsButton;                                                // 0x0388 (size: 0x8)
    class UImage* mpStigmaBackground;                                                 // 0x0390 (size: 0x8)
    class UTextBlock* mpCraftTimeTitleText;                                           // 0x0398 (size: 0x8)
    class UTextBlock* mpCraftTimeAmountText;                                          // 0x03A0 (size: 0x8)
    class UTextBlock* mpWeaponAmmoTitleText;                                          // 0x03A8 (size: 0x8)
    class UTextBlock* mpWeaponAmmoAmountText;                                         // 0x03B0 (size: 0x8)
    EDamageType mSelectedStigma;                                                      // 0x03C9 (size: 0x1)
    EWeaponTypeEnum mSelectedWeapon;                                                  // 0x03CA (size: 0x1)

    void SelectWeapon(EWeaponTypeEnum weaponType, bool bForced);
    void SelectStigma(EDamageType DamageType);
    void PopulateWeaponTypes();
    void OnSkinsPressed();
    void OnShockPressed();
    void OnOccultPressed();
    void OnModsPressed();
    void OnHolyPressed();
    void OnBurnPressed();
    void DoCustomizeWeapon(bool bSkins);
}; // Size: 0x420

class UWheelItemData : public UObject
{
    class UTexture2D* mpItemIcon;                                                     // 0x0028 (size: 0x8)
    FText mpItemName;                                                                 // 0x0030 (size: 0x18)

}; // Size: 0x48

class UWheelItemData_WeaponSelection : public UWheelItemData
{
    EWeaponTypeEnum mWeaponType;                                                      // 0x0048 (size: 0x1)
    bool mbBlockedByAugment;                                                          // 0x0049 (size: 0x1)

}; // Size: 0x50

class UWidgetTemplate : public UUserWidget
{
}; // Size: 0x260

class UWinLoseScreen : public UBaseScreen
{
}; // Size: 0x2C0

class UWolfAnimInstance : public UEvilCharAnimInstance
{
    FWolfAnimInstanceData mWolfAnimInstanceData;                                      // 0x0378 (size: 0x2)
    class AWerewolfChar* mpOwnerWerewolfChar;                                         // 0x0388 (size: 0x8)
    bool mbLocoTransitionComplete;                                                    // 0x0390 (size: 0x1)

    bool ShouldUseCounterRotationArms();
    FRotator GetCounterRotationArms();
    void AnimNotify_RightHandStep(const class UAnimNotify* Notify);
    void AnimNotify_LocoTransitionStarted(const class UAnimNotify* Notify);
    void AnimNotify_LocoTransitionComplete(const class UAnimNotify* Notify);
    void AnimNotify_LeftHandStep(const class UAnimNotify* Notify);
    void AnimNotify_HowlingLeft(const class UAnimNotify* Notify);
}; // Size: 0x3A0

class UWorldEffectsManager : public UActorComponent
{
    int32 mRandomSeed;                                                                // 0x00B0 (size: 0x4)
    class AExponentialHeightFog* mpCachedExponentialHeightFogActor;                   // 0x00B8 (size: 0x8)
    TArray<FManagedFXComponent> mManagedFXComponents;                                 // 0x00C0 (size: 0x10)
    FLocalViewState mLocalViewState;                                                  // 0x00D0 (size: 0x40)

    bool ShouldEffectBeVisible(class UObject* pWorldContext, const FEffectVisibility& Visibility, class ATPChar* pOwningTPChar);
    void SetRandomSeed();
    void RemoveManagedFXComponent(class USceneComponent* pComponent);
    void MulticastAllWorldEffectsTrigger(class AWorldEffectsTrigger* pWorldEffectsTrigger);
    int32 GetRandomSeed();
    class UWorldEffectsManager* GetInstance(class UObject* pWorldContext);
    void DoServerGetRandomSeed(class AWorldEffectsTrigger* pWorldEffectsTrigger);
    void DoServerActivateWorldEffectsTrigger(class AWorldEffectsTrigger* pWorldEffectsTrigger);
    void AddManagedFXComponent(class USceneComponent* pComponent, FEffectVisibility Visibility, class ATPChar* pOwningTPChar);
}; // Size: 0x110

class UYesNoModalWidget : public UBaseModal
{
    class URichTextBlock* mpMessageText;                                              // 0x02A8 (size: 0x8)
    class UBoxUserButton* mpYesButton;                                                // 0x02B0 (size: 0x8)
    class UBoxUserButton* mpNoButton;                                                 // 0x02B8 (size: 0x8)

    void SetMessageText(const FText& messageText);
    void SetButtonText(const FText& yesText, const FText& noText);
    void OnYesPressed();
    void OnNoPressed();
}; // Size: 0x2C0

class UYesNoToastWidget : public UBaseToast
{
    class UButton* mpConfirmButton;                                                   // 0x02E8 (size: 0x8)
    class UButton* mpDeclineButton;                                                   // 0x02F0 (size: 0x8)

    void OnDeclinePressed();
    void OnConfirmPressed();
}; // Size: 0x2F8

#endif
